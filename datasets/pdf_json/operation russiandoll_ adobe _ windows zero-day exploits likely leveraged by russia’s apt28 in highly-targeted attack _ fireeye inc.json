{
    "title": "operation russiandoll_ adobe _ windows zero-day exploits likely leveraged by russia’s apt28 in highly-targeted attack _ fireeye inc",
    "text": "Threat Research Operation RussianDoll: a dobe & Win dows Zero-Day Exploits Likely Leve raged by Russia’s aPT28 in Highly- Targeted attack april 18, 2015  | by Fireeye Lab s FireEye Labs recently detected a limite d aPT campaign exploiting zero-day vulnerabilities in adobe Fla sh and a brand-new one in Mic rosoft Win dows. Using the Dynamic Th reat Intelligence Clo ud (DTI), FireEye researchers detected a patte rn of attack s beginning on ap ril 13th, 2015 . adobe independently patche d the vulnerability (CVE-2015 -3043) in aPSB15-06. Through correlation of technical in dicators and comman d and control infrastructure, FireEye assess that aPT 28 is probably responsible for this activity. Microsoft is aware of the o utstanding local p rivilege e scalation v ulnerability in Win dows (CVE-2015 -1701). While there is not yet a patch available fo r the Win dows vulnerability, updating a dobe Fla sh to the late st version will render this in-the- wild exploit innoc uous. We have only seen CV E-2015 -1701 in use in conj unction with the a dobe Flash exploit fo r CVE-2015 -3043. The Mic rosoft Security Team i s working on a fix fo r CVE-2015 -1701. Exploit Ove rview The high level flo w of the exploit i s as follows: 1.       User clicks link to attacke r controlled website 2.       HTML/JS la uncher page serves Flash exploit 3.       Fla sh exploit t riggers CVE-2015 -3043, executes shellcode 4.       Shellco de downloads and runs executable payloa d 5.       Executable payloa d exploit s local p rivilege e scalation (CV E-2015 -1701) to steal System token The Fla sh exploit i s served from unobfuscated HTML/JS. The la uncher page pick s one of t wo Flash files to deliver depending upon the ta rget’s platform (Win dows 32 versus 64bits). The Fla sh exploit i s mostly unobfuscated with only some light va riable name mangling. The attacke rs relied heavily on the CV E-2014-0515  Metasploit mo dule, which is well documented. It is ROPless, and instead constructs a fake vtable fo r a FileRefe rence object that i s modified for each call to a Win dows aPI. The payloa d exploit s a local p rivilege e scalation v ulnerability in the Win dows kernel if it detects that it i s running with limite d privileges. It uses the vulnerability to run code from userspace in the context of the ke rnel, which modifies the attacke r’s process token to have the same privileges as that of the Sy stem process. CVE-2015 -3043 Exploit The primary difference bet ween the CV E-2014-0515  metasploit mo dule and this exploit i s, obviously, the vulnerability. CV E-2014-0515  exploit s a vulnerability in Fla sh’s Shader processing, whereas CVE-2015 -3043 exploits a vulnerability in Fla sh’s FLV processing. The c ulprit FLV file i s embedded within aS 3 in two chunks, and is reassembled at runtime. Vulnerability a buffer overflow vulnerability exi sts in adobe Fla sh Playe r (<=17.0.0.134) when parsing malfo rmed FLV object s. attacke rs exploiting the v ulnerability can co rrupt memo ry and gain remote co de execution. In the exploit, the attacke r embeds the FLV object directly in the actionSc ript code, and plays the video using netStream cla ss. In memo ry, it look s like the follo wing: 0000000 : 46 4c 56 01 05 00 00 00 09 00 00 00 00 12 00 00  FLV............. 0000010 : f4 00 00 00 00 00 00 00 02 00 0a 6f 6e 4d 65 74  ...........onMet 0000020 : 61 44 61 74 61 08 00 00 00 0b 00 08 64 75 72 61  aData....... dura 0000030 : 74 69 6f 6e 00 40 47 ca 3d 70 a3 d7 0a 00 05 77  tion. @G.=p..... w 00000 40: 69 64 74 68 00 40 74 00 00 00 00 00 00 00 06 68  idth.@t........h 0000050 : 65 69 67 68 74 00 40 6e 00 00 00 00 00 00 00 0d  eight.@n........ 0000060 : 76 69 64 65 6f 64 61 74 61 72 61 74 65 00 00 00  videodatarate... ….. 0003 b20: 27 6e ee 72 87 1b 47 f7 4 1 a0 00 00 00 3a 1b 08  'n.r..G.a....:.. 0003 b30: 00 04 41 00 00 0f 00 00 00 00 68 ee ee ee ee ee  ..a.......h..... 0003 b40: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee  ................ 0003 b50: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee  ................ 0003 b60: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee  ................ Files of the FLV file fo rmat contain a sequence of Tag structures. In Flash, these object s are created when parsing FLV Tag s: .text:1018aCE9 sub_1018aCE9    proc near               ; COD E XREF: sub_1018BBaC+ 2Bp .text:1018aCE9                                         ; sub_10192 797+1a1p ... .text:1018aCE9 .text:1018aCE9 arg_0           = dword ptr  4 .text:1018aCE9 .text:1018aCE9                 mov     eax, ecx .text:1018aCEB                 mov     ecx, [e sp+arg_0] .text:1018aCEF                 mov     dword ptr [eax], off set off_10Ba771C .text:1018aCF5                 mov     dword ptr [eax+24h], 1 .text:1018aCFC                 an d     dword ptr [eax+14h], 0 .text:1018aD00                 mov     [eax+ 28h], ecx .text:1018aD03                 mov     byte pt r [eax+20h], 0 .text:1018aD07                 retn    4 .text:1018aD07 sub_1018aCE9    endp In the ca se of this exploit, a Tag structure begin s at offset 0x3b2f into the FLV stream that, when parsed, populates the Tag structure as follows: Tag 2: UInT_8 type: 8 UInT_24 datasize: 1089 UInT_24 timestamp: 15 UInT_8 timestamphi: 0 UInT_24 streamid: 0 UInT_4 fmt: 6 UInT_2 sr: 2 UInT_1 bits: 0 UInT_1 channel s: 0 UBYTE data[1088 ]: \\xee\\xee\\xee\\xee… UInT_32 lastsize: 0xeeeeeeee Beginning within the data field, all content s of the FLV stream become 0xEE. Consequently, the data and lastsize fields are mangle d, and one final tag technically exi sts consisting excl usively of 0xEE: Tag 3: UInT_8 type: 0xEE UInT_24 datasize: 0xEEEEEE … One can see the datasize field of Tag 2 populated from the attacke r's FLV stream belo w: .text:101929 43                 mov     eax, [ebx+ 24h] .text:101929 46                 mov     [e si+14h], eax .text:101929 49                 mov zx   eax, byte pt r [ebx+19h] ; 00 .text:101929 4D                 mov zx   ecx, byte pt r [ebx+1ah] ; 04 .text:10192951                  shl     eax, 8 .text:1019295 4                 o r      eax, ecx .text:10192956                  mov zx   ecx, byte pt r [ebx+1Bh] ; 41 .text:1019295 a                 shl     eax, 8 .text:1019295 D                 o r      eax, ecx .text:1019295 F                 mov     ecx, ebx  Email Up dates Information an d insight on to day's advanced threats from FireEye. SHaRE Recent Po sts 09 Mar 2020 24 Feb 2020 20 Feb 2020 RSS FEED: STaY CO nnECTEDFirst name Last name Email address Company name Threat Research Blog FireEye Stories Blog Industry Perspective s Blog Yes, I would like to receive communication s from FireEye. Please read more about our information collection an d use. SUBSCR IBE Crescendo: Real Time Event Vie wer for macOS   Ransomware again st the Machine: How adversaries are Learning to Disrupt Industrial Production by Targeting IT and OT  M-Trends 2020 : Insights From the Front Line s   Home  FireEye Blog s Threat Research  Operation R ussianDoll: a dobe & Win dows Zero-Day Ex...    COnTaCT US  REPORT a n InCIDEnT Solutions Services Customers Partners Resources Company   PREVIOUS POST nEXT POST.text:10192961                  mov     [e si+0Ch], eax  ; 0x441 .text:1019296 4                 call    sub_1002E2 B3 The buffer is allocate d with fixed size 0x2000 : .text:101a647E                 p ush    2000 h .text:101a6483                 mov     ecx, e si .text:101a6485                 call    sub_101a6257    ; alloc 0x2000  buffer, store in esi+0xDC …… .text:101a627F                 p ush    0 .text:101a6281                 p ush    edi             ; 0x2000 .text:101a6282                  call    sub_105E BEB0 .text:101a6287                 pop     ecx .text:101a6288                  pop     ecx .text:101a6289                  mov     [e si+0DCh], eax Since the size is controlled by the attacke r, it’s possible to ove rflow the fixe d size buffer with certain data. a datasize of 0x441 results in a val ue here of 0x1100 passed to sub_100F88F8, which memcopie s 0x2200  bytes in 0x11 chunks of 0x200. The la st memcpy ove rflows the fixe d size 0x2000  buffer into a a djacent heap memo ry. attacke rs spray the heap with array of Vecto r, 0x7fe * 4 + 8 == 0x2000 , and create hole s of such size, which will be allocate d by the said object.             while (_local_ 2 < this._bp35) // _bp 35 == 0x2000             {                thi s._ok47[_local_ 2] = new Vector.<uint>(this._lb60); // _lb 60 == 0x07FE                _local_ 3 = 0x00;               while (_local_ 3 < this._lb60)               {                   thi s._ok47[_local_ 2][_local_ 3] = 0x41414141;                   _local_ 3++;                };                _local_ 2 = (_local_ 2 + 0x01);              };              _local_ 2 = 0x00;             while (_local_ 2 < this._bp35)             {                thi s._ok47[_local_ 2] = null;                _local_ 2 = (_local_ 2 + 0x02);              }; as the previous picture demonstrated, the follo wed Vector object’ s length fiel d being ove rflowed as 0x8000 7fff, which enable s the attacke r to read/write arbitrary data within user space. Shellco de Shellcode is passed to the exploit f rom HTML in fla shvars. The shellcode downloads the next stage payloa d, which is an exec utable pa ssed in plaintext, to the temp directory with UrlDownloadToFilea, which it then runs with WinExec. Payload & C2 This exploit delivers a malware variant that shares characteristics with the aPT 28 backdoors CHOPSTICK and CORESHELL malware familie s, both described in our aPT28 whitepape r.  The mal ware uses an RC4 enc ryption key that was previously used by the C HOPSTICK back door.  and the C2 messages include a check sum algorithm that resembles those used in CHOPSTICK back door communication s.  In addition, the net work beacon t raffic for the new malware resembles those used by the COR ESHELL back door.  Like COR ESHELL, one of the beacon s includes a process listing from the victim ho st.  and like COR ESHELL, the ne w malware attempt s to download a second-stage exec utable. One of the C 2 location s for the new payloa d, 87.236.215[.]246 , also hosts a suspected aPT28 domain ssl- icloud[.]com .  The same subnet (87.236.215.0/24 ) also hosts several known or suspected aPT28 domains, as seen in Table 1. The target firm is an inte rnational gove rnment entity in an in dustry vertical that align s with known aPT28 targeting. CVE-2015 -1701 Exploit The payloa d contain s an exploit fo r the unpatche d local p rivilege e scalation v ulnerability CV E-2015 -1701 in Microsoft Win dows. The exploit uses CVE-2015 -1701 to exec ute a callback in userspace. The callback get s the EPROCESS structures of the c urrent process and the System process, and copies data from the Sy stem token into the token of the c urrent process. Upon completion, the payloa d continues execution in usermode with the privileges of the Sy stem process. Because CVE-2015 -3043 is already patche d, this remote exploit will not succeed on a fully patche d system. If an attacke r wanted to exploit CV E-2015 -1701, they would first have to be exec uting code on the victim’ s machine. Barring authorized access to the victim’ s machine, the attacke r would have to fin d some othe r means, such as crafting a ne w Flash exploit, to deliver a CVE-2015 -1701 payloa d. Microsoft is aware of CV E-2015 -1701 and is working on a fix. CV E-2015 -1701 does not affect Win dows 8 and later. acknowledgement s Thank yo u to all of the cont ributors to this blog! The follo wing people in Fi reEye: Dan Ca selden, Yasir Khalid, James “Tom” Bennett, GenWei Jiang, Co rbin Souffrant, Joshua Homan, Jonathan W rolstad, Chris Phillips, Darien Kindlund Microsoft & a dobe security team s      Company Why Fi reEye? Customer Stories Careers Certification s and Compliance Investor Relation s Supplier Documents news and Events newsroom Press Releases Webina rs Events awards and Honors Email Preferences Technical S upport Incident? Report Security Issue Contact S upport Customer Portal Communities Documentation Po rtal FireEye Blog s Threat Research FireEye Stories Industry Perspective s Threat Map View the Late st Threats Contact U s +1 877-347-3393   Stay Connecte d  Copyright   2020  FireEye, Inc. all rights reserved.  Privacy & Cookie s Policy  | Privacy Shiel d | Legal Doc umentationSite Lang uage English  "
}