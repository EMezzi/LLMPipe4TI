{
    "title": "eps processing zero-days exploited by multiple threat actors _ fireeye inc",
    "text": " PREVIOUS POST nEXT POSTThreat Research EPS Processing Zero-Days Exploited by Multiple Th reat actors May 09, 2017 | by Genwei Jiang , alex Lan stein, alex Be rry, Ben Rea d, Dhanesh Kizhakkinan , Greg Macman us MaLWaR E  ZERO-DaY In 2015 , FireEye published details about two attack s exploiting v ulnerabilities in Encapsulated PostScript (EPS) of Microsoft Office. One was a zero-day and one was patched weeks before the attack la unched. Recently, Fi reEye identified three new zero-day vulnerabilities in Microsoft Office p roducts that are being exploite d in the wild. at the en d of March 2017, we detected anothe r malicio us document leve raging an unknown vulnerability in EPS and a recently patched vulnerability in Win dows Graphics Device Interface (GD I) to drop malware. Follo wing the april 2017 Patch T uesday, in which Mic rosoft disabled EPS, FireEye detected a second unknown vulnerability in EPS. FireEye believe s that two actors – Turla and an unknown financially motivate d actor – were using the fi rst EPS zero-day (CVE-2017-0261 ), and aPT28 was using the second EPS zero-day (CVE-2017-0262 ) along with a ne w Escalation of P rivilege ( EOP) zero-day (CVE-2017-0263 ). Turla and aPT28 are Russian cybe r espionage g roups that have used these zero-days against European diplomatic an d military entitie s. The unidentified financial group targeted regional an d global bank s with office s in the Mi ddle East. The follo wing is a description of the EPS zero-days, associated malware, and the new EOP zero-day. Each EPS zero-day is accompanie d by an EOP exploit, with the EOP being required to escape the sandbox that exec utes the FLTLDR. EXE instance used for EPS processing. The malicio us documents have been used to deliver three different payloa ds. CVE-2017-0261  was used to deliver SHIRIME (Turla) and nETWIRE (unknown financially motivate d actor), and CVE-2017-0262  was used to deliver GaMEFISH (aPT28). CVE-2017-0263  is used to escalate p rivileges during the delivery of the GaM EFISH payload. FireEye email  and network products detected the malicio us documents. FireEye has been coo rdinating with the Mic rosoft Security Response Cente r (MSRC) fo r the responsible disclosure of this information. Mic rosoft advises all customers to follo w the guidance in security advisory aDV170005  as a defense-in-depth mea sure again st EPS filter vulnerabilities. CVE-2017-0261  – EPS \"restore\" Use-after-Free Upon opening the Office document, the FLTLDR. EXE is utilized to render an embe dded EPS image, which contain s the exploit. The EPS file is a PostScript program, which leve rages a Use-after-Free vulnerability in “restore” operand. From the PostScript Man ual: “allocation s in local VM an d modification s to existing object s in local VM a re subject to a feat ure called save and restore, named after the ope rators that invoke it. save and restore bracket a section of a Po stScript lang uage program whose local VM activity i s to be encap sulated. restore deallocate s new objects and undoes modification s to existing object s that were made since the matching save.” as the man ual described, the restore operator will reclaim memo ry allocate d since the save operator. This makes a perfect con dition of U se-after-Free, when combine d with forall operator. Figure 1 shows the pseudo code to exploit the save and restore operation. Figure 1: Pseudo code for the exploit The follo wing ope rations allow the Pseudo code to leak meta data enabling a read/write primitive: 1. forall_proc array is created with a single element of the restore proc 2. The EPS state is saved to eps_state 3. uaf_array is created after the save 4. The forall operator loops over the element s of the uaf_array calling fo rall_proc for each element 5. The first element of uaf_array is passed to a call of restore_proc, the p rocedure containe d in forall_proc 6. restore_proc restores the initial state freeing the uaf_array The alloc_ string procedure reclaims the freed uaf_array The forall_proc is updated to call leak_p roc 7. Subsequent calls by the fo rall operator call the leak_p roc on each element of the reclaime d uaf_array which element s now contain the result of the alloc_ string procedure Figure 2 demonstrates a debug log of the uaf_array being used after being reclaime d. Figure 2: uaf_array reclaime d debug log By manip ulating the ope rations after the save operator, the attacke r is able to manip ulate the memo ry layouts and convert the Use-after-Free to create a read/write primitive. Fig ure 3 shows the fake d string, with length set as 0x7fffffff, ba se as 0. Figure 3: Faked String Object Leveraging the po wer of reading and writing arbitrary user memory, the EPS program contin ues by searching for gadgets to build the ROP chain, an d creates a file object. Fig ure 4 demonstrates the fake d file object in memory. Figure 4: Fake File Object, with ROP By calling closefile operand with the fake d file object, the exploit pivot s to the ROP an d starts the shellcode. Figure 5 shows part of the disassembler of closefile operand handler. Figure 5: Stack Pivot disassembler of closefile Once exec ution has been achieve d, the mal ware uses the ROP chain to change the exec ution protection of the memory region containing the shellcode.  at thi s point, the shellcode is running within a sandbox that was executing FLTLDR. EXE and an escalation of p rivilege i s required to escape that sandbox. FireEye detected two different versions of the EPS program exploiting thi s vulnerability.  The fi rst, st07383.en17.docx, contin ues by utilizing 32 or 64 bit ve rsions of CVE-2017-0001  to escalate p rivileges before executing a final JavaSc ript payloa d containing a mal ware implant kno wn as SHIRIME. SHIRIME is one of m ultiple custom JavaSc ript implant s used by Turla as a first stage payloa d to con duct initial p rofiling of a ta rget system and implement comman d and control. Since ea rly 2016 , we have ob served multiple ite rations of SHIRIME used in the wild, having the mo st recent ve rsion (v1.0.1004) employe d in this zero-day The second document, Confi rmation_lette r.docx, contin ues by utilizing 32 or 64 bit ve rsions of CVE-2016 -7255 to escalate p rivilege befo re dropping a ne w variant of the nETWIRE malware family. Seve ral versions of this document were seen with similar filename s. The EPS programs containe d within the se documents containe d different logic to pe rform the con struction of the ROP chain a s well as build the shellcode.  The fi rst took the a dditional step of using a simple algo rithm, shown in Fig ure 6, to obf uscate sections of the shellcode. Figure 6: Shellco de obfuscation algo rithm CVE-2017-0262  – Type Conf usion in EPS The second EPS vulnerability is a type conf used procedure object of fo rall operator that can alte r the exec ution flow allowing an attacke r to cont rol values onto the ope rand stack. Thi s vulnerability was found in a document named “Trump's_attack_on_Sy ria_English.docx”. Before triggering the v ulnerability, the EPS program sprays the memo ry with predefined data to occ upy specific memory address and facilitate the exploitation. Fig ure 7 demonstrates the Po stScript code snippet of spraying memory with a string. Figure 7: PostScript code snippet of spray after execution, the content of string occ upies the memo ry at address 0x0d80d000 , leading to the memo ry layout as shown in Fig ure 8. The exploit leve rages this layout and the content to fo rge a procedure object an d manipulate the co de flow to store predefined value, in yello w, to the ope rator stack. Figure 8: Memo ry layout of the sprayed data after spraying the heap, the exploit goe s on to call a co de statement in the follo wing format: 1 array 16#D80D020 forall. It creates an array object, sets the procedure as the hex n umber 0xD80D020, and calls the forall operator. During the ope ration of the fo rged procedure within forall operator, it precisely cont rols the execution flow to store values of the attacke r's choices to ope rand stack. Fig ure 9 shows the majo r code flow consuming the fo rged procedure. Figure 9: Consuming the fo rged procedure after execution of forall, the content s on the stack are under the attacke r's control. This is s shown in Fig ure 10. Figure 10: Stack afte r the forall exec ution Since the ope rand stack ha s been manip ulated, the subsequent ope rations of exch  defines objects based on the data from the manip ulated stack, as shown in Fig ure 11. Figure 11: Subsequent code to retrieve data from stack The a18 is a string type object, which has a length fiel d of 0x7ffffff0, based from 0. Within memo ry, the layo ut as shown in Fig ure 12. Figure 12: a18 String Object The a19 is an array type object, with membe r values all purposely crafted. The exploit defines anothe r array object an d puts it into the fo rged array a19. By pe rforming the se operations, it puts the newly created array object pointe r into a19. The exploit can then directly read the val ue from the p redictable a ddress, 0xD80D020 + 0x38, and leak its vftable an d infer module base address of EPSIMP32.flt. Figure 13 shows code snippets of leaking EPSIMP32 base address. Figure 13: Code snippet of leaking mo dule base Figure 14 shows the ope rand stack of calling put operator and the forged array a19 after finishing the put operation. Figure 14: array a19 after the put operation By leve raging the RW p rimitive string and the leake d module base of EPSIMP32, the exploit contin ues by searching ROP ga dgets, creating a fake file object, an d pivoting to shellcode through the bytesavailable operator. Figure 15 shows the forged file type object an d disassembling of pivoting to ROP an d shellcode. Figure 15: Pivots to ROP an d Shellco de The shellcode contin ues by using a previously unknown EOP, CV E-2017-0263 , to escalate p rivileges to escape the sandbox running FLTLDR. EXE, and then drop and execute a GaM EFISH payloa d. Only a 32-bit version of CVE-2017-0263  is containe d in the shellcode. CVE-2017-0263  – win32k!xxxDestroyWindow Use-after-Free The EOP Exploit setup starts by suspending all th reads other than the c urrent thread and saving the th read handles to a table, a s shown in Fig ure 16. Figure 16: Suspending Threads The exploit then check s for OS version and uses that info rmation to pop ulate version specific fiel ds such as token offset, syscall number, etc. an exec utable memo ry area is allocate d and populated with kernel mode shellcode as wells as address information required by the shellcode. a ne w thread is created for triggering the v ulnerability and further control of exploitation. The exploit starts by creating th ree Pop upMenus and appending men us to them, a s shown in Fig ure 17. The exploit c reates 0x100 windows with random classnames. The User32!H MValidateHandle trick is used to leak the tagWnd address, which is used as kernel info rmation leak th roughout the exploit. Figure 17: Popup menu creation RegisterClassExW is then used to register a window class “Main_Win dow_Class” with a Wn dProc pointing to a function, which call s DestroyWindow on window table c reated by EventHookProc, explaine d later in the blog. This function al so shows the first popup menu, which was created earlier. Two extra windows are created with class name a s “Main_Win dow_Class”. SetWin dowLong is used to change WndProc of second window, wnd2, to a shellcode address. an application defined hook, Win dowHookProc, and an event hook, EventHookProc, are installed by SetWin dowsHookExW and SetWin EventHook respectively. PostMessage is used to post 0xaBCD to fi rst window, wnd1. The EventHookProc waits for EVEnT_SYST EM_MEnUPOPUPSTaRT an d saves the window’s handle to a table. WindowHookProc look s for SysShadow classname an d sets a new WndProc for the corresponding window. Inside this WndProc, ntUserMnDragLeave syscall is invoked and SendMessage is used to send 0x9f9f to wnd2, invoking the shellcode shown in Fig ure 18. Figure 18: Triggering the shellcode The Use-after-Free happen s inside WM_nCDESTROY event in ke rnel and overwrites wnd2’s tagWn d structure, which sets bServerSideWindowProc flag. With bSe rverSideWindowProc set, the user mode WndProc is considered as a kernel callback an d will be invoke d from kernel context – in thi s case wnd2’s WndProc is the shellcode. The shellcode check s whether the memo ry corruption ha s occurred by checking if the co de segment i s not the user mode code segment. It also check s whether the me ssage sent is 0x9f9f. Once the vali dation is complete d, shellcode finds the TOK En address of current process and TOKEn of system process (pid 4). The shellcode then copies the system process’ token to c urrent process, which elevate s current process privilege to SYST EM. Conclusion EPS processing has become a ripe exploitation space fo r attacke rs. FireEye has discovered and analyzed two of the se recent EPS zero-days with example s seen befo re and after Microsoft disabled EPS processing in the ap ril 2017 Patch T uesday.  The documents explored utilize differing EPS exploits, ROP con struction, shellcode, EOP exploit s and final payloa ds. While the se documents are detected by FireEye appliance s, users should exercise caution beca use FLTLDR. EXE is not monito red by EMET. Russian cybe r espionage i s a well-resourced, dynamic th reat The use of zero-day exploit s by Turla Group and aPT28 underscores their capacity to apply technically sophisticated and costly metho ds when nece ssary. Russian cybe r espionage acto rs use zero-day exploit s in addition to le ss complex mea sures. Though these actors have relied on credential phi shing an d macros to carry out operations previously, the use of the se metho ds does not reflect a lack of resources. Rathe r, the use of less technically sophisticated metho ds – when sufficient – reflects operational mat urity and the foresight to p rotect costly exploit s until they a re necessary. a vibrant eco system of th reats CVE-2017-0261 ’s use by multiple acto rs is further evidence that cybe r espionage an d criminal activity exi st in a shared ecosystem. nation state acto rs, such as those leveraging CVE-2017-0199  to distribute FInSPY, often rely on the same sources for exploit s as criminal acto rs. This shared ecosystem creates a proliferation problem fo r defenders concerned with eithe r type of th reat. CVE-2017-0261  was being used as a zero-day by both nation state an d cyber crime acto rs, and we believe that both acto rs obtaine d the vulnerability f rom a common source. Follo wing CVE-2017-0199 , this is the second major vulnerability in a s many month s that ha s been used for both e spionage an d crime. MD5 Filename C2 Host 2abe3cc4bff4 6455a945d56 c27e9fb45Confirmation_lette r.docx.bin (nETWIRE)84.200.2.12 e091425d23 b8db6082 b40d25 e938f871Confirmation_lette r.docx (nETWIRE)138.201.44.30 006bdb19b6936329 bffd4054e270dc6aConfirmation_lette r_aCM.docx (nETWIRE)185.106.122.113 15660631 e31c1172ba5a299a90938 c02st07383.en17.docx (SHIRIME)tnsc.webredirect.org f8e92d8 b5488ea76c40601 c8f1a08790Trump's_attack_on_Sy ria_English.docx (GaMEFISH)wmdmediacodecs.com Table 1: Source Exploit Doc uments Table 2: CVEs related to these attack s acknowledgement s iSIGHT Intelligence Team, FLaR E Team, Fi reEye Labs, Microsoft Security Response Cente r (MSRC).  Email Up dates Information an d insight on to day's advanced threats from FireEye. SHaRE Recent Po sts 17 Mar 2020 16 Mar 2020 09 Mar 2020 RSS FEED: STaY CO nnECTED  First name Last name Email address Company name Threat Research Blog FireEye Stories Blog Industry Perspective s Blog Yes, I would like to receive communication s from FireEye. Please read more about our information collection an d use. SUBSCR IBE Six Fact s about address Space Layout Randomization on Windows  They Come in the night: Ransomware Deployment T rends  Crescendo: Real Time Event Vie wer for macOS    Home  FireEye Blog s Threat Research  EPS Processing Ze ro-Days Exploite d by Multiple Th r...    Company Why Fi reEye? Customer Stories Careers Certification s and Compliance Investor Relation s Supplier Documents news and Events newsroom Press Releases Webina rs Events awards and Honors Email Preferences Technical S upport Incident? Report Security Issue Contact S upport Customer Portal Communities Documentation Po rtal FireEye Blog s Threat Research FireEye Stories Industry Perspective s Threat Map View the Late st Threats Contact U s +1 877-347-3393   Stay Connecte d  Copyright   2020  FireEye, Inc. all rights reserved.  Privacy & Cookie s Policy  | Privacy Shiel d | Legal Doc umentationSite Lang uage English Solutions Services Customers Partners Resources Company  "
}