{
    "title": "operation clandestine wolf – adobe flash zero-day in apt3 phishing campaign _ fireeye inc",
    "text": "Threat Research Operation Clan destine Wolf – a dobe Fla sh Zero-Day in aPT3 Phishing Campaign June 23, 2015  | by Erica Eng, Dan Ca selden | Threat Intelligence 0DaY EXPLOITS  THREaT InTELLIGEnCE adobe has already released a patch fo r CVE-2015 -3113 with an o ut-of-ban d security bulletin (https://helpx.a dobe.com/ security/products/flash-playe r/apsb15-14.html ). FireEye recommen ds that adobe Flash Playe r users update to the late st version as soon as possible. FireEye MVX detects this threat as a web infection, the IPS engine reports the attack a s CVE-2015 -3113, and the SHOTPUT back door is reported as Backdoor.aPT.CookieC utter. aPT3 The China-ba sed threat group FireEye tracks as aPT3, aka UPS, i s responsible for this exploit an d the activity identified in our previous blog po st, Operation Clan destine Fox . This group is one of the mo re sophisticated threat groups that Fi reEye Threat Intelligence t racks, and they have a hi story of introducing ne w browser-based zero-day exploit s (e.g., Internet Explorer, Firefox, an d adobe Fla sh Playe r). after successfully exploiting a ta rget host, this group will quickly dump credentials, move late rally to a dditional ho sts, and install custom back doors. aPT3’s comman d and control (CnC) inf rastructure is difficult to track, as there is little ove rlap across campaign s. activity Ove rview In the la st several weeks, aPT3 actors launched a large-scale phi shing campaign again st organizations in the following industries: aerospace an d Defense Construction an d Engineering High Tech Telecomm unication s Transportation Upon clicking the URL s provided in the phi shing email s, targets were redirected to a comp romised server hosting JavaSc ript profiling scripts. Once a ta rget host was profiled, victims downloaded a malicio us adobe Flash Playe r SWF file an d an FLV file, detailed below. This ultimately resulted in a custom back door known as SHOTPUT, detected by FireEye as Backdoor.aPT.CookieC utter, being delivered to the victim’ s system. The payloa d is obscured using xor encoding and appended to a vali d GIF file.  attack Vecto r The phi shing email s used by aPT 3 during this campaign were extremely gene ric in nat ure, almo st appea ring to be spam. an example email bo dy: Save between $200-450 by purchasing an Apple Certified Refurbished iMac through this link. Refurbished iMacs come with the same 1-year extendable warranty as new iMacs. Supplies are limited, but update frequently. Don't hesitate . . .>Go to Sale The string “>Go to Sale” was a link that used the follo wing URL structure: hxxp://<subdomain>.<legitdomain>.<TLD>/<directory>/<alphanumericID>.html Exploit Detail s The attack exploit s an unpatche d vulnerability in the way adobe Fla sh Playe r parses Flash Video (FLV) file s. The exploit uses common vecto r corruption techniq ues to bypa ss address Space Layo ut Randomization (aSLR), and uses Return-Oriented Programming (ROP) to bypa ss Data Execution Prevention (D EP).  a neat t rick to their ROP techniq ue make s it simpler to exploit an d will evade some ROP detection techniq ues. Shellcode is stored in the packe d adobe Fla sh Playe r exploit file along side a key used for its decryption. The payload is xor encoded and hidden inside an image. Exploit Packaging The adobe Fla sh Playe r exploit i s packed with a simple RC4 packe r. The RC4 key an d ciphertext are BinaryData blobs that the packe r uses to decrypt the laye r 2 adobe Fla sh Playe r file. Once decrypted, layer 2 is executed with loader.loadBytes. Vector Corruption Layer 2 uses a classic adobe Fla sh Playe r Vector corruption techniq ue to develop it s heap co rruption vulnerability to a f ull relative read/write available to actionSc ript3. In this techniq ue, the attacke r sprays adobe Flash Playe r Vectors to the heap, an d triggers a write vulnerability to change the size of one of the vecto rs. The attacke r can then pe rform subsequent reads and writes to memo ry outside the inten ded boundaries of the corrupted Vector object f rom aS3. For more details on this techniq ue, see Flash in 2015 . Once the attacke r has limited read/write acce ss to memo ry, they choo se to co rrupt a second Vector to increase their access to a range of 0x3fffffff byte s. This second Vector is used for the remainder of the exploit.  Email Up dates Information an d insight on to day's advanced threats from FireEye. SHaRE Recent Po sts 09 Mar 2020 24 Feb 2020 20 Feb 2020 RSS FEED: STaY CO nnECTEDFirst name Last name Email address Company name Threat Research Blog FireEye Stories Blog Industry Perspective s Blog Yes, I would like to receive communication s from FireEye. Please read more about our information collection an d use. SUBSCR IBE Crescendo: Real Time Event Vie wer for macOS   Ransomware again st the Machine: How adversaries are Learning to Disrupt Industrial Production by Targeting IT and OT  M-Trends 2020 : Insights From the Front Line s   In June, FireEye’s FireEye as a Service  team in Singapore uncovered a phishing campaign exploiting an Adobe Flash Player zero-day vulnerability (CVE-2015-3113). The attackers’ emails included links to compromised web servers that served either benign content or a malicious Adobe Flash Player file that exploits CVE-2015-3113. Hear what our experts have to say. Join us for a live webinar Friday, June 26, 2015   8:00 am PDT/ 11:00 am EDT REGISTER nOW  Home  FireEye Blog s Threat Research  Operation Clan destine Wolf – a dobe Fla sh Zero-Day ...    Solutions Services Customers Partners Resources Company  Return-Oriented Programming The attacke rs use a ROP chain to call ke rnel32!Virtualalloc to ma rk their shellcode as executable befo re jumping to their shellcode. Instead of writing thei r ROP chain to the heap along with their shellcode and payloa d, they used a different techniq ue. Usually, exploit develope rs will corrupt a built-in adobe Fla sh Playe r object such as a Sound object. Instead, the attacke rs chose to define thei r own class in aS3 with a function that take s a lot of a rguments: class CustomClass {     public function victimFunction(arg1:uint, arg2:uint, …, arg80:uint):uint } Then, the attacke rs can simply ove rwrite the f unction pointe r with a ga dget that a dds to the stack pointe r and returns to pivot to ROP. They have no nee d to identify the ab solute address of the ROP chain an d preserve it in a register for a typical xchg reg32, esp pivot. a dditionally, storing the ROP chain on the stack will evade ROP detection mechani sms designed around detecting when the stack pointe r points outside of a th read’s stack region. this.customObj.victimFunction( 6f73b68b, // ret; (ROPsled) …, 6f73b68a, //pop eax 1f140100, 6fd36da1, //call Kernel32!VirtualAlloc(0x1f140000, 0x10000, 0x1000, 0x40) 1f140000, // Address 00010000, // Size 00001000, // Type 00000040, // Protection = RWX 6f73b68b*9 // ret (ROPsled) 6fd36da7*2 // ret 6f73aff0 pop ecx 6fd36da7 6fd36da7 jmp [eax] … ) this.customObj.victimFunction  pointer modified to: 00000000`6de533dc 5e          pop     rsi 00000000`6de533dd 83c448      add     esp,48h 00000000`6de533e0 c3          ret Lastly, the ROP chain ha s a ROP sled following the call to Vi rtualalloc. Thi s could just be an a rtifact of development, o r it could be designed to bypa ss detection mechani sms that te st for valid return addresses up to a limited depth at call s to Virtualalloc. Full Exploit Flo w 1.     Create a ne w Video object 2.     Fetch the payloa d 3.     attach the vi deo to a ne w netStream 4.     Sp ray the heap with adobe Fla sh Playe r Vectors         a.     C reate a Vecto r containing 98688  Vectors containing 1022  uints         b.     Set the fi rst two dwords in each Vecto r<uint> to 0x41414141, 0x42424242 5.     Create hole s for the cont rolled FLV object         a.     F ree approximately eve ry 3rd Vector in the spray 6.     Spray custom cla ss objects for future control transfer         a.     Define a ne w class CustomCla ss                 i.     Define a f unction victimF unction with lots of arguments         b.     C reate a Vecto r of 0x100 Vectors of 1007 references to an C ustomCla ss instance 7.     Fetch an d play the FLV exploit         a.     The FLV file will allocate an attacke r controlled object in one of the hole s from step 5         b.     The attacke r controlled object will overwrite the length fiel d of an a djacent vecto r 8.     Re-fill hole s from step 5 with Vecto rs as in step 4 9.     Find the corrupted vector         a.     Sea rch through Vecto rs from step 4         b.     Check the length of each Vecto r to find one that i s abnormally la rge 10.  Corrupt a second Vector (Vecto r2)         a.     U sing the co rrupted Vector from step 9 to read/write relative memo ry addresses                 i.     Sea rch memo ry for an adjacent vecto r                 ii.     Ove rwrite the length fiel d with 0x3fffffff                 iii.     Ve rify that a co rrupted vector with length 0x3fffffff no w exists in the spray                         1.     If not, undo corruption an d attempt to co rrupt the next vecto r 11.  Decrypt shellcode and store it and the payloa d on the heap 12.  Overwrite the C ustomCla ss.victimF unction f unction pointe r         a.     Fin d the sprayed CustomCla ss object in stance references from step 6         b.     The ne w function i s a form of “pivot” that t ransfers control to the attacke r 13.  Build ROP chain on the stack an d call it         a.     Fin d ROP ga dgets in memo ry using Vecto r2                 i.     Including a call to ke rnel32!Virtualalloc         b.     Call the co rrupted CustomCla ss.victimF unction f rom step 6.a.i                 i.     a rguments to the f unction a re the ga dgets of the ROP chain                 ii.     They a re conveniently p ushed onto the stack                 iii.     Co rrupted vtable f rom step 12 calls a pivot                         1.     The “pivot” j ust adds to to the stack pointe r and returns because the ROP chain i s on                                 the stack 14.  ROP chain call s shellcode         a.     Call ke rnel32!Virtualalloc         b.     jmp to shellcode 15.  Shellco de calls payloa d         a.     Shellco de searches memory for the payloa d, which is stored inside an image         b.     Shellco de decodes the payloa d by xoring each byte (that i s not 0 or 0x17) with 0x17 Conclusion Once aPT 3 has access to a ta rget net work, they work quickly an d they are extremely p roficient at en umerating and moving late rally to maintain thei r access. additionally, thi s group uses zero-day exploit s, contin ually updated custom back doors, and throwaway CnC inf rastructure, making it difficult to track them ac ross campaign s. acknowledgement s   PREVIOUS POST nEXT POSTThank yo u to the follo wing cont ributors to this blog! ·      Joseph Obe d, Ben Withnell, Kevin Z uk, Genwei Jiang, an d Corbin Souffrant of Fi reEye   Company Why Fi reEye? Customer Stories Careers Certification s and Compliance Investor Relation s Supplier Documents news and Events newsroom Press Releases Webina rs Events awards and Honors Email Preferences Technical S upport Incident? Report Security Issue Contact S upport Customer Portal Communities Documentation Po rtal FireEye Blog s Threat Research FireEye Stories Industry Perspective s Threat Map View the Late st Threats Contact U s +1 877-347-3393   Stay Connecte d  Copyright   2020  FireEye, Inc. all rights reserved.  Privacy & Cookie s Policy  | Privacy Shiel d | Legal Doc umentationSite Lang uage English  "
}