{
    "title": "fake or fake_ keeping up with oceanlotus decoys _ welivesecurity",
    "text": "Menu\n        ShareThis article will first describe how the OceanLotus group (also known as APT32 and APT-C-00) recently used\nFake or Fake: Keeping up\nwith OceanLotus decoys\nESET researchers detail the latest tricks and techniques OceanLotus uses to deliver its backdoor while\nstaying under the radar\nRomain Dumont  20 Mar 2019 - 11:28AM\n \n\none of the publicly available exploits for CVE-2017-11882 , a memory corruption vulnerability present in Microsoft\nOffice software, and how OceanLotus malware achieves persistence on compromised systems without leaving\nany traces. Then the article describes how, since the beginning of 2019, the group has been leveraging self-\nextracting archives to run code.\nContext\nFollowing OceanLotus’ activities is taking a tour in the world of deception. This group is known to lure victims by\nforging appealing documents to entice potential victims into executing the group’s backdoor, and keeps coming\nup with new ideas to diversify its toolset. The techniques employed for the decoys range from files with so-called\ndouble extensions, self-extracting archives and macro-enabled documents, to reusing known exploits. On top of\nthat, they are very active and relentlessly continue to raid their favourite victims, South East Asian countries.\nSumming up the Equation Editor exploit\nIn mid-2018, OceanLotus carried out a campaign using documents abusing the weakness exposed by the CVE-\n2017-11882 vulnerability. Indeed, several Proofs-of-Concept were made available. The vulnerability resides in the\ncomponent responsible for rendering and editing mathematical equations. One of the malicious documents\nused by OceanLotus was analysed by 360 Threat Intelligence Center (in Chinese)  and includes details about the\nexploit. Let’s take a look at a similar document.\nFirst stage\nThis document FW Report on demonstration of former CNRP in Republic of Korea.doc ( SHA-1:\nD1357B284C951470066AAA7A8228190B88A5C7C3 ) is similar to the one mentioned in the article above, and\nalso interesting as it really targets people interested in Cambodian politics (the CNRP – Cambodia National\nRescue Party – political party was dissolved in late 2017). Despite its .doc extension, the document is actually in\nRTF format (see Figure 1), contains many garbage groups, and is also malformed.\nFigure 1 — RTF garbage fields\nDespite the presence of malformed elements, Word successfully opens this RTF file. As seen in (Figure 2), at\noffset 0xC00 there is an EQNOLEFILEHDR structure, followed by the MTEF header and then an MTEF record\n(Figure 3) for a font .\nFigure 2 — FONT record values\n \nFigure 3 — FONT record format\nAn overflow in the name  field is possible because its size isn’t checked before being copied. A name that is too\nlong triggers the vulnerability. As seen in the RTF file content (offset 0xC26 in Figure 2), the buffer is filled with\nshellcode followed by a NOP (0x90) sled and the return address 0x402114 . That address is a gadget in\nEQNEDT32.exe  pointing to a RET instruction. This results in EIP pointing at the beginning of the name  field\nwhich contains the shellcode.\nFigure 4 — Start of the exploit shellcode\nThe address 0x45BD3C  stores a variable that is dereferenced until it reaches a pointer to the currently loaded\nMTEFData  structure. That is where the rest of the shellcode resides.\n The purpose of the shellcode is to execute a second piece of shellcode, embedded inside the open document.\nFirst, the initial shellcode tries to find the handle of the open document file by iterating through all the system’s\nhandles (NtQuerySystemInformation  with the SystemExtendedHandleInformation  argument) and\nchecking if the handle’s PID matches the PID of a WinWord  process and if the document was opened with the\nfollowing access mask: 0x12019F . To confirm it found the right handle and not the handle of another open\ndocument, the content of the file is mapped with the CreateFileMapping  function and the shellcode checks if\nthe last four bytes of the document are “ yyyy “; this technique is called “Egg Hunting”. Once it finds a match, the\ndocument is copied to a temporary folder ( GetTempPath ) as ole.dll . Then the last 12 bytes of the document\nare read.\nFigure 5 — Markers at the end of the document\nThe 32-bit value between the AABBCCDD  and yyyy  markers is the offset to the next shellcode. It is invoked using\nthe CreateThread  function. The extracted shellcode is the same that the OceanLotus group has been using for\na while now. The Python emulator script  we released in March 2018 still works to dump the next stage.\nSecond stage\nExtracting the components\nThe filenames and directories are chosen dynamically. The code randomly selects the filename of an executable\nor DLL file located in C:\\Windows\\system32 . It will then query its resources and extract the\nFileDescription  field to use as a folder name. If this does not work, the code randomly chooses a folder\nname from the %ProgramFiles%  or C:\\Windows  (from GetWindowsDirectoryW) directories. It avoids using a\nname that may clash with existing files by making sure it does not contain: windows, Microsoft, desktop,\nsystem, system32  or syswow64 . If the directory already exists, the directory name is appended with “NLS_{6\ndigits}”.\nThe stage’s 0x102  resource is parsed and the files are dropped in either %ProgramFiles%  or %AppData%  in the\nrandomly chosen folder. The creation times are changed to have the same values as kernel32.dll .\nFor example, here is a folder and a list of files created by picking the C:\\Windows\\system32\\TCPSVCS.exe\nexecutable as a source of data.\nFigure 6 — Extraction of the different components\nThe structure of the resource 0x102 in the dropper is quite complex. In a nutshell, it contains:\nfilenames\nfiles’ size and content\ncompression format ( COMPRESSION_FORMAT_LZNT1  used by RtlDecompressBuffer  function)\nThe first file is dropped as TCPSVCS.exe  which is in fact Adobe’s legitimate AcroTranscoder.exe  (according\nto its FileDescription , SHA-1: 2896738693A8F36CC7AD83EF1FA46F82F32BE5A3 ).\nYou may have noticed that the file size of some DLLs exceeds 11MB. This is because a large contiguous buffer of\nrandom data is placed inside the executable. It is possibly a way to evade detection by some security products.\nAchieving persistence\nThe resource 0x101  of the dropper contains two 32-bit integers that dictate how the persistence should be\nimplemented. The value of the first one specifies how the malware will achieve persistence without\nadministrator privileges.\nFirst\ninteger\nvaluePersistence mechanism\n0 Do not achieve persistence\n1 Scheduled task as current user\n First\ninteger\nvaluePersistence mechanism\n2 (HKLM|HKCU)\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n3Creation of a shortcut file (with a .lnk extension) in the subdirectory Microsoft\\Windows\\Start\nMenu\\Programs\\Startup under one of the environment variables: %ALLUSERSPROFILE%, %APPDATA% or\n%USERPROFILE%\nThe value of the second integer specifies how the malware should try to achieve persistence if it runs with\nelevated privileges.\nSecond integer value Persistence mechanism\n1 Scheduled task as administrator\n2 Creation of a service\nThe service name is the filename without extension; the display name is the folder name but if it already exists\nthen the string “ Revision 1 ” is appended (the number is incremented until it finds an unused name). The\noperators made sure the persistence through the service would be resilient: on service failure, the service should\nrestart after 1 second. Then, the registry value WOW64 of the new service key is set to 4 which indicates that it’s\na 32-bit service.\nThe scheduled task is created via several COM interfaces: ITaskScheduler , ITask , ITaskTrigger ,\nIPersistFile  and ITaskScheduler . Essentially, the malware creates a hidden task, sets the account\ninformation with the current user or the administrator information and sets the trigger.\nThis is a daily task with a duration of 24 hours and the interval between two executions is set to 10 minutes,\nwhich means it will run all the time.\nThe malicious bit\nIn our example, the executable TCPSVCS.exe  (AcroTranscoder.exe ) is legitimate software side-loading the\nDLLs that were dropped with it. In this case, the  Flash Video Extension.dll  is the interesting one.\nIts DLLMain  function just calls a single function. Some opaque predicates are present:\nFigure 7 — Opaque predicates\nAfter these deceptive checks, the code gets the .text  section of TCPSVCS.exe , changes its protection to\nPAGE_EXECUTE_READWRITE  and overwrites it with do-nothing instructions that have no side effects:\nFigure 8 — Sequence of\ninstructions without side\neffects\nAt the end, a CALL  instruction to the address of the function FLVCore ::Uninitialize(void)  exported by\nFlash Video Extension.dll  is appended. This means that, after loading the malicious DLL, when the\nruntime calls WinMain  in TCPSVCS.exe , the instruction pointer will point to the NOP sled, which will eventually\ncall FLVCore::Uninitialize(void) , the next stage.\nCookies make a website a better place\nWe use cookies to give you the best optimized online experience and consistent information. You can agree to the collection of all cookies\nby clicking on the Accept & Close button or adjust your cookies settings by clicking on Manage Cookies. For more information please see\nour Cookie Policy.ACCEPT AND CLOSE\nMANAGE COOKIES\nThis function simply creates a mutex starting with {181C8480-A975-411C-AB0A-630DB8B0A221} and\nfollowed by the current username. Then, it reads the dropped file with the  .db3  extension, which contains\nposition-independent code, and uses CreateThread  to execute its content.\nThe content of the .db3 file is shellcode commonly used by OceanLotus. Again, we successfully unpacked its\npayload using the emulator script we published on GitHub .\nThe script extracts the final stage. This component is the backdoor that we already analysed in this white paper:\n OceanLotus: Old techniques, new backdoor . It is recognizable as such from the GUID {A96B020F-0000-466F-\nA96D-A91BBF8EAC96}  that is present in the binary. The configuration of the malware is still encrypted in a PE\nresource. It contains almost the same configuration but the C&C servers are different from the ones that were\nalready published:\nandreagahuvrauvin[.]com\nbyronorenstein[.]com\nstienollmache[.]xyz\nOnce again OceanLotus showcases a large combination of techniques to stay under the radar. They came back\nwith a “better” version of the infection process. By choosing random names and filling executables with random\ndata, they reduce the number of reliable IoCs (hash-based and filename-based). Moreover, since they’re using\nDLL side-loading, the attackers only have to drop the legitimate AcroTranscoder  binary as-is.\nSelf-Extracting archives\nAfter using RTF files, the group started using self-extracting (SFX) archives that use common document icons in\nan attempt to further mislead their victims. It was briefly documented by Threatbook (in Chinese) . When run,\nthese self-extracting RAR files drop and execute DLL files (with a .ocx extension) with the final payload being the\npreviously documented {A96B020F-0000-466F-A96D-A91BBF8EAC96} .dll. Since the middle of January 2019,\nOceanLotus began reusing the technique but changed some configuration over time. This section will describe\nthe technique and what they have altered to achieve their goal.\nFalling for the decoy\nThe document THICH-THONG-LAC-HANH-THAP-THIEN-VIET-NAM (1).EXE  (meaning “FAVORITE\nRELATIONSHIP OF VIETNAMESE PERFORMANCE” according to Google Translate, SHA-1:\nAC10F5B1D5ECAB22B7B418D6E98FA18E32BBDEAB ) was first seen in 2018. This SFX file is cleverly crafted, as\nthe description ( Version Info ) states it’s a “JPEG Image”. The script of the SFX is the following:\nFigure 9 — SFX commands\nThe malware drops {9ec60ada-a200-4159-b310-8071892ed0c3}.ocx  (SHA-1:\nEFAC23B0E6395B1178BCF7086F72344B24C04DCC ) as well as the image 2018 thich thong lac.jpg .\nThe decoy image is the following:\nFigure 10 — Decoy image\nYou may have noticed the first two lines in the SFX script invoke the OCX file twice, but it is not a mistake …\n{9ec60ada-a200-4159-b310-8071892ed0c3}.ocx (ShLd.dll)\nThe OCX file’s control flow is very similar to other OceanLotus components: there are a lot of JZ/JNZ and\nPUSH/RET  instruction sequences interleaved with junk code.\n Figure 11 — Obfuscated code\nAfter filtering the junk code, the export DllRegisterServer  called by regsvr32.exe  looks like this:\nFigure 12 — Main code of the installer\nBasically, the first time the DllRegisterServer  is called, it sets the registry value\nHKCU\\SOFTWARE\\Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model  to an encoded\noffset in the DLL ( 0x10001DE0 ).\nThe second time the function is called, it reads this very same value and executes the function at that address.\nFrom there, the resource is read and executed and many in-memory operations are executed.\nThe shellcode is the same PE loader used in the earlier OceanLotus campaigns. It can be emulated with our\nmiasm emulation script . Ultimately, it drops db293b825dcc419ba7dc2c49fa2757ee.dll , loads it into\nmemory and executes DllEntry .\nThe DLL retrieves the content of its resource, decrypts (AES-256-CBC) and decompresses it (LZMA). The\nresource has a specific format that is quite easy to reverse engineer.\nFigure 13 — Structure of the installer configuration (KaitaiStruct Visualizer)\nThe configuration is explicit: depending on the privilege level, the binary data will be written to either\n%appdata%\\Intel\\logs\\BackgroundUploadTask.cpl  or\n%windir%\\System32\\BackgroundUploadTask.cpl  (or SysWOW64  for 64-bit systems).\nNext, persistence is achieved by creating a task named BackgroundUploadTask[junk].job  where a\n[junk] is a collection of 0x9D  and 0xA0  bytes.\nThe application name of the task is %windir%\\System32\\control.exe  and the parameter value is the path\nof the dumped binary. The hidden task is set to run every day.\nStructurally, the CPL file is a DLL whose internal name is ac8e06de0a6c4483af9837d96504127e.dll  and\nthat exports a CPlApplet  function. This file decrypts its only resource {A96B020F-0000-466F-A96D-\nA91BBF8EAC96}.dll , then loads that DLL and calls its only export, DllEntry .\n Backdoor configuration file\nThe backdoor has an encrypted configuration embedded in its resources. The structure of the configuration file\nis quite similar to the previous one.\nFigure 14 — Structure of the backdoor configuration (KaitaiStruct Visualizer)\nDespite the structural similarity, of the values in many of these fields have been updated comparing this to that\nin our white paper  from March 2018.\nThe first element of the binaries array contains a DLL ( HttpProv.dll\nMD5: 2559738D1BD4A999126F900C7357B759 ) identified by Tencent  but as the export name has been\nremoved from the binary, the hashes don’t match.\nGoing the extra mile\nWhile hunting for samples, a few characteristics stood out. The sample just analysed appeared around July 2018\nand other similar were found very recently in mid-January through early-February 2019. The infection vector\nused was an SFX archive dumping a legitimate, decoy document and a malicious OCX file.\nEven though OceanLotus uses fake timestamps, it has been observed that the timestamp of the SFX and OCX\nfiles are always the same ( 0x57B0C36A  (08/14/2016 @ 7:15pm UTC) and 0x498BE80F  (02/06/2009 @ 7:34am\nUTC) respectively). This probably means that they have some kind of “builder” that reuses the same templates\nand just changes some characteristics.\nAmong the documents we analysed since early-2018, we saw different document names suggesting country-\nrelated targeting:\nThe New Contact Information Of Cambodia Media(New).xls.exe\n李建香 (个人简历).exe (fake pdf document of a CV)\nfeedback, Rally in USA from July 28-29, 2018.exe\nSince the discovery of the {A96B020F-0000-466F-A96D-A91BBF8EAC96}.dll  backdoor and its public\nanalysis by multiple researchers, we observed some changes in the malware’s configuration data.\nFirst, the authors started removing the names from the helper DLLs ( DNSprov.dll  and the two versions of\nHttpProv.dll ).\nThen the operators stopped packaging the third DLL (second version of HttpProv.dll ), choosing to embed\njust one.\nSecond, a lot of the backdoor configuration fields have been changed, perhaps to avoid detection, since many\nIoCs became available.\nThe important fields that changed are the following:\nthe “AppX” registry key changed (see IoCs)\nthe mutex encoding string (“def”, “abc”, “ghi”)\nthe port number\n Finally, all the new variants analysed have new C&C servers, which are listed in the IoCs section.\nConclusion\nOceanLotus is very active and keeps evolving. The group really focuses on varying their toolsets and decoys.\nThey cleverly wrap their payloads with attractive documents based on current events that are likely to be of\ninterest to their intended victims. They keep coming up with different techniques and even reuse and readapt\npublicly available exploit code such as for the Equation Editor exploit. Moreover, they keep improving their\ntechniques to reduce the number of artefacts left on their victims’ machines, thereby reducing the odds of\ndetection by security products. As we have shown, a lot of in-memory operations are involved, filenames are\nrandomly generated and the OceanLotus operators have modified their binaries to avoid being detected.\nAnother very interesting point is that some domain names seem to be derived from a dictionary. OceanLotus is\nmaking the extra effort to continue carrying out their campaigns, but don’t hold your breath …\nIndicators of Compromise (IoCs)\nThe IoCs in this blogpost, as well as the MITRE ATT&CK attributes, are also available from our GitHub repository .\nRegistry keys/values:\nHKCU\\SOFTWARE\\Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model\n[HKCU|HKLM]\\SOFTWARE\\App\\\nAppXbf13d4ea2945444d8b13e2121cb6b663\\\nApplication\nDefaultIcon\nAppX70162486c7554f7f80f481985d67586d\\\nApplication\nDefaultIcon\nAppX37cc7fdccd644b4f85f4b22d5a3f105a\\\nApplication\nDefaultIcon\nMutexes:\n{181C8480-A975-411C-AB0A-630DB8B0A221} _ (+ username)\nDomain names\naliexpresscn[.]net\nandreagahuvrauvin[.]com\nandreagbridge[.]com\naol.straliaenollma[.]xyz\nbeaudrysang[.]xyz\nbecreybour[.]com\nbyronorenstein[.]com\nchinaport[.]org\nchristienoll[.]xyz\nchristienollmache[.]xyz\ncloud.360cn[.]info\ndieordaunt[.]com\ndns.chinanews[.]network\nillagedrivestralia[.]xyz\nkarelbecker[.]com\nkarolinblair[.]com\nlauradesnoyers[.]com\nntop.dieordaunt[.]com\noffice.ourkekwiciver[.]com\nourkekwiciver[.]com\nsophiahoule[.]com\nstienollmache[.]xyz\n Domain names\nstraliaenollma[.]xyz\nursulapapst[.]xyz\nFiles:\nDocuments exploiting CVE-2017-11882:\nSHA-1 hashes\nD1357B284C951470066AAA7A8228190B88A5C7C3\n49DFF13500116B6C085C5CE3DE3C233C28669678\n9DF3F0D8525EDF2B88C4A150134C7699A85A1508\n50A755B30E8F3646F9476080F2C3AE1347F8F556\nBB060E5E7F7E946613A3497D58FBF026AE7C369A\nE2D949CF06842B5F7AE6B2DFFAA49771A93A00D9\nESET detection names\nWin32/Exploit.CVE-2017-11882.BU\nWin32/Exploit.CVE-2017-11882.A\nWin32/Exploit.Agent.KT\nWin32/Exploit.Agent.LT\nWin32/Exploit.CVE-2017-11882.EI\nSFX archives and OCX droppers:\nSHA-1 hashes\nAC10F5B1D5ECAB22B7B418D6E98FA18E32BBDEAB\n7642F2181CB189965C596964D2EDF8FE50DA742B\nCD13210A142DA4BC02DA47455EB2CFE13F35804A\n377FDC842D4A721A103C32CE8CB4DAF50B49F303\nB4E6DDCD78884F64825FDF4710B35CDBEAABE8E2\nBD39591A02B4E403A25AAE502648264308085DED\nB998F1B92ED6246DED13B79D069AA91C35637DEC\nCC918F0DA51794F0174437D336E6F3EDFDD3CBE4\n83D520E8C3FDAEFB5C8B180187B45C65590DB21A\nEFAC23B0E6395B1178BCF7086F72344B24C04DCC\n8B991D4F2C108FD572C9C2059685FC574591E0BE\nB744878E150A2C254C867BAD610778852C66D50A\n3DFC3D81572E16CEAAE3D07922255EB88068B91D\n77C42F66DADF5B579F6BCD0771030ADC7AEFA97C\nESET detection names\nWin32/Agent.ZUR\nMITRE ATT&CK techniques\nTactic ID Name Description\nInitial\nAccessT1193 Spearphishing AttachmentDeceitful RTF documents and self-extracting archives are sent to\npotential victims.\nExecutionT1204 User ExecutionThe user needs to execute the self-extracting archive or open the RTF\ndocument.\nT1117 Regsvr32The self-extracting archives execute regsvr32  to run the OceanLotus'\nbackdoor.\nT1035 Service ExecutionThe second stage of the exploit tries to run OceanLotus' backdoor as a\nservice.\nPersistenceT1050 New ServiceThe second stage of the exploit tries to achieve persistence by creating\na service.\nT1060Registry Run Keys / Start\nFolderThe second stage of the exploit tries to achieve persistence by adding a\nvalue in the Run registry key.\nT1053 Scheduled TaskThe second stage of the exploit tries to achieve persistence by creating\na schedule task.\n Tactic ID Name Description\nDefense\nEvasionT1009 Binary PaddingThe second stage of the exploit fills dropped executables with random\ndata.\nT1073 DLL Side-LoadingOceanLotus' backdoor is side-loaded by dropping a library and a\nlegitimate, signed executable (AcroTranscoder).\nT1112 Modify Registry OceanLotus' backdoor stores its configuration in a registry key.\nT1027Obfuscated Files or\nInformationThe second stage of the exploit drops an encrypted shellcode.\nT1099 TimestompThe creation time of the files dropped by the second stage of the\nexploit is set to match the creation time of kernel32.dll .\nDiscoveryT1083File and Directory\nDiscoveryOceanLotus' backdoor can list files and directories.\nT1012 Query RegistryOceanLotus' backdoor can query the Windows Registry to gather\nsystem information.\nT1082System Information\nDiscoveryOceanLotus' backdoor captures system information and sends it to its\nC&C server.\nExfiltrationT1002 Data Compressed OceanLotus' backdoor uses LZMA compression before exfiltration.\nT1022 Data Encrypted OceanLotus' backdoor uses RC4 encryption before exfiltration.\nT1041Exfiltration Over\nCommand and Control\nChannelData exfiltration is done using the already opened channel with the\nC&C server\nT1203Exploitation for Client\nExecutionThe RTF document includes an exploit to execute malicious code.\n(CVE ‑2017‑11882)\nCommand\nAnd ControlT1094Custom Command and\nControl ProtocolOceanLotus' backdoor can exfiltrate data by encoding it in the\nsubdomain field of DNS packets.\nT1065 Uncommonly Used PortOceanLotus' backdoor use HTTP over an uncommon TCP port (14146).\nPort is specified in the backdoor configuration.\n\nRomain Dumont  20 Mar 2019 - 11:28AM\nTracking Turla: New backdoor\ndelivered via Armenian\nwatering holesGuildma: The Devil drives\nelectricUp close and personal with\nLinux malwareLinux and malware: Should\nyou worry?\nHome\nAbout Us\nContact UsSitemap\nOur Experts\nESETResearch\nHow To\nCategoriesRSS Configurator\nNews Widget\nSimilar Articles\nMALWARE\n MALWARE\n MALWARE\n MALWARE\nDiscussion\nCookies make a website a better place\nWe use cookies to give you the best optimized online experience and consistent information. You can agree to the collection of all cookies\nby clicking on the Accept & Close button or adjust your cookies settings by clicking on Manage Cookies. For more information please see\nour Cookie Policy.ACCEPT AND CLOSE\nMANAGE COOKIES\n "
}