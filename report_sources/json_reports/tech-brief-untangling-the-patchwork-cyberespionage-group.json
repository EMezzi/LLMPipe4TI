{
    "title": "tech-brief-untangling-the-patchwork-cyberespionage-group",
    "text": "Trend Labs  \n \n \n \n \nTREND MICRO LEGAL DISCLAIMER  \nThe information provided herein is for general information and educational purposes only. It is not intended and should not b e construed to constitute legal \nadvice. The information contained herein may not be applicable to all situations and may not reflect the most current situati on. Nothing contained herein should \nbe relied on or acted upon without the benefit of legal advice based on the pa rticular facts and circumstances presented and nothing herein should be construed \notherwise. Trend Micro reserves the right to modify the contents of this document at any time without prior notice.  \nTranslations of any material into other languages are inte nded solely as a convenience. Translation accuracy is not guaranteed nor implied. If any questions arise \nrelated to the accuracy of a translation, please refer to the original language official version of the document. Any discrep ancies or differences crea ted in the \ntranslation are not binding and have no legal effect for compliance or enforcement purposes.  \nAlthough Trend Micro uses reasonable efforts to include accurate and up -to-date information herein, Trend Micro makes no warranties or representations of any \nkind as to its accuracy, currency, or completeness. You agree that access to and use of and reliance on this document and the  content thereof is at your own \nrisk. Trend Micro disclaims all warranties of any kind, express or implied. Neither Trend Mi cro nor any party involved in creating, producing, or delivering this \ndocument shall be liable for any consequence, loss, or damage, including direct, indirect, special, consequential, loss of bu siness profits, or special damages, \nwhatsoever arising out of  access to, use of, or inability to use, or in connection with the use of this document, or any errors or omissions in the con tent thereof. \nUse of this information constitutes acceptance for use in an “as is” condition.  \n \n \n \n \n Table of Contents  \nInfection Vectors  ................................ ................................ ................................ ................................ ...........  2 \nSpear -phishing Emails  ................................ ................................ ................................ ................................ ...............  2 \nWebsite Redirects  ................................ ................................ ................................ ................................ .....................  2 \nDirect Links  ................................ ................................ ................................ ................................ ................................  3 \nMalicious Attachments  ................................ ................................ ................................ ................................ ..............  3 \nMail Sending Method  ................................ ................................ ................................ ................................ ................  3 \nDrive -by Download  ................................ ................................ ................................ ................................ ....................  3 \nPhishing  ................................ ................................ ................................ ................................ ................................ ..... 3 \nSocial Engineering and Weaponized Documents ................................ ................................ .........................  7 \nDownloaders  ................................ ................................ ................................ ................................ ...............  10 \nSimple Downloaders  ................................ ................................ ................................ ................................ ................  10 \nDDE Downlo ader ................................ ................................ ................................ ................................ .....................  12 \nPayloads ................................ ................................ ................................ ................................ ......................  12 \nxRAT  ................................ ................................ ................................ ................................ ................................ ........  12 \nNDiskMonitor  ................................ ................................ ................................ ................................ ...........................  13 \nBadnews Backdoor  ................................ ................................ ................................ ................................ .................  14 \nFile Stealer s ................................ ................................ ................................ ................................ .................  17 \nTaskhost Stealer  ................................ ................................ ................................ ................................ ......................  17 \nWintel Stealer  ................................ ................................ ................................ ................................ ..........................  21 \nAutoIt Stealer  ................................ ................................ ................................ ................................ ...........................  22 \nInfrastructure  ................................ ................................ ................................ ................................ ...............  23 \nPractice Defense in Depth  ................................ ................................ ................................ ..........................  24 \n \n  \n \n \n \n Patchwork  (also known as Dropping Elephant) is a cyberespionage group whose targets included \ndiplomatic an d government agencies  as well as businesses . Patchwork is known for rehashing off -the-\nrack tools and malware for its own campaigns. The group uses attack vectors that may not be \ngroundbreaking —what with other groups exploiting zero-days  or cunningly adjusting their tactics —but \nas its moniker entails, its repertoire of infection vectors and payloads still makes them a credible threat.  \nWe trailed Patchwork’s activities over the course of its campaigns in 2017 . The diversity of their methods \nis notable —from the social engineering hooks, attack chains, and backdoors they  deployed. They  also \nincluded Dynamic Data Exchange  (DDE) and Windows Script Component  (SCT)  abuse  to their tactics , as \nwell as started exploiting recently reported vulnerabilities. These imply they’re at least keeping a n eye on \nother threats and security flaws  to repurpose for their own  ends . Also of note are its attempts to be more \ncautious and efficient in their operations.  \nThis technical brief provides deeper analyses of their campaigns —from the infection vectors  and social \nengineering  to the infrastructure  and malware they used.  The indicators of compromise are in this \nappendix . \n \nSpear -phishing emails are their staple method for deliver ing malware. These socially engineered emails \ncontain web links of weaponized documents containing exploits or macros. We found Patchwork  using \nthree variations of this method.  \n \nPatchwork set up an English -language news site. The spoofed website looks exactly like the legitimate \nand original website. Inspection of the fake site’s HTML source code, however, reveals the addition of a \nsmall code snippet. It contains  an additional meta tag at the end of the web page source code, \n“refreshing” (redirecting) the site visitor to the weaponized document.  \nThe web page is not indexed  in search engines. It can only be visited  by clicking on the link contained in \nthe spear -phishing email s, helping it evade traditional security mechanisms compared to directly \nsending the link to the malicious document.  \n \nFigure 1: The added  code snippet that redirect s its visitors to the malicio us document  \n \n \n \n \n \n \n \nWe also saw spear -phishing emails containing direct links to the weaponized documents hosted on \nservers they own. The group employ s typosquatting t o increase clicks . These servers were reached \nthrough domain names similar to legi timate websites, such as rannd[.]org instead of rand.org.  \n \nThe malicious documents were also directly attached to the email. However, we didn’t see this method \nused as much, as the attachments can be detected by spam filters . \n \nThe spear -phishing emails were sometimes sent  to victims by misusing YMLP  and serversecure.net, \nwhich are email/newsletter distribution services. Abusing these legitimate online services helps improve \ntheir emails’ chances of not being flagged as spam.  \nMore recently, they’ve started sending emails using a Postfix server  they operate . The domain name \n“servicelogin.center” was linked to this server. It had a proper MX record, an SSL certificate issued by \nLet’s Encrypt , and the domain property validated on Google . Recently, the TXT SPF1 record of domains \nhosting malicious documents has been updated to include “ servicelogin .center ”, probably to bypass \nspam filters.  \n \nThe attackers also reporte dly used a fake Youku Tudou website (a video platform similar to YouTube \nvery popular in China). It entices users to download a fake Adobe Flash player update, which turned out \nto be a variant of the xRAT  malware.  \n \nThe group also employ s phishing to harvest their targets’ credentials to access email accounts and other \nonline services.  \nWe took a closer look at a phishing kit hosted on Patchwork’s infrastructure. Opening one of the \nsuspicious  domains , hxxps ://accounts [-]login [-]secure [.]163[.]com[.]neteease [.]com, in a web browser  \nreturns an “account suspended” message, which they’ve copied from  a web development company.   \n \n \n \n  \nFigure 2: One of the domains of Patchwork’s phishing kit whose appearance                                                                   \nwas copied  from a web development company  \nA closer look reveals that the phishing kit expects a few parameters. The kit , which spoofs a legitimate \nweb portal and email service, consists of t wo PHP files: main.php , which has the initial webpage; and \nerror.php , which harvests and processes entered credentials.  \n \nFigure 3: The PHP file that processes entered credentials  \n \n \n \n \n main.php  expects the following commands with base64 -encoded values ( seen on the screenshot \nabove):  \nu = user (encoded username , the victim cannot change it on the web form)  \nr = referrer ( hxxp ://mial [.]163[.]com was used  as referrer ; the use of “mial” instead of “mail”  is noted ) \nd = domain (163 or 126 or yeah or shouji ) \nThe domain has one of the four possible values:  \nMTYz  is 163  \nMTI2  is 126  \neWVhaA== is yeah  \nc2hvdWpp  is shouji  (which means mobile phone in Chinese)  \n \nAs of November 24, 2017, we found three different phishing websites  using a valid SSL certificate issued \nby Let’s Encry pt for three months. Some of them used the new TLD “.support ”. The SSL certificates \nlisted the following domain names:  \n accounts [-]login [-]secure[ -]163 [-]com[ -]neteease.com  \n accounts [-]login [-]secure[ -]qq[-]com[ -]neteease.com  \n accounts [-]login [-]vip[-]sina[ -]com[ -]neteease[ -]com  \n neteease [.]com \n accoun ts[.]login[.]yahoomail[.]support  \n yahoomail [.]support  \n accounts [.]login [.]googlemail [.]support   \n \n \n \n  \nFigure 4: Page information properties of one of the phishing websites  \nThe parameters sent to the error.php  script that attackers collect are username, domain, password and \nredirector values.  \n \nFigure 5: Parameters sent to the error.php script  \nGiven how the phishing kit works, the attackers seem cautious. The phishing page can only be obtained  \nby sending specif ic arguments to the PHP script. Any other way will lead to the fake suspended account \npage. The link leading to the phishing page can only be found  on the emails sent to the victims.  \n \n \n \n \n \n \nMany of the documents were found in a directory accidentally left open. The group use s sociopolitical \nthemes as social engineering hooks. Those with the .doc extension are actually  Rich Text format (RTF) \nfiles that trigger an exploit for CVE-2012 -1856 , patched via MS12 -060 last August 2012. It is a remote \ncode execution (RCE) vulnerability in the Windows common control MSCOMCTL , an ActiveX Control \nmodule. These files drop variants of the NDiskMonitor  backdoor. The PowerPoint Open XML Slide Show \n(PPSX) files exploit Sandworm  (CVE-2014 -4114 ), an RCE vulnerability in Windows’ Object Linking and \nEmbedding  (OLE) feature patched last October 2014.  \n \nFigure 6: The dir ectory containing the documents  \nThe PowerPoint (PPT) file exploit s CVE-2017 -0199 , an RCE vul nerability in Microsoft Office’s Windows \nOLE, patched last April 2017. Once the victim clicks “Enable Editing ”, the file will attempt to download \nan .HTA file and silently exploits it by leveraging CVE-2017 -0199 . \n \nFigure 7: The PPT containing the CVE -2017 -0199 exploit  \n \n \n \n \n  \nFigure 8: Code snapshot  showing the PPT file downloading a malicious . HTA file  \nWe also saw another document that comes with an executable instead of a macro . The file decodes and \nexecutes a Visual Basic script (VBS)  that drops and executes a hybrid batch/.NET file , which then \ndownloads and executes the NDiskMonitor  backdoor and a decoy document. The relatively long \ninfection chain can be construed  as their way to obscure their activities.  \nA document  the group recently used  had an additional  step, likely done to avoid antivirus (AV) detection. \nA Word document embed ded with  a malicious PPSX file  urges the victim to click on a fake PDF icon to \nopen the malicious document. It exploits  CVE-2017 -8570  (an RCE  vulnerability  in Microsoft Office \npatched last July 2017)  to download a  Windows Script Component ( SCT) file from  a Patchwork -owned \nserver.  \n \nFigure 9: Screenshot of t he Word document containing a PP SX file that exploits CVE -2017 -8570  \n \n \n \n \n  \nFigure 10: Code snippet showing the malicious SCT to be retrieved  \nThe scriptlet .SCT file shown above contains PowerShell code. The payload downloads a malicious \nxRAT sample and a decoy PowerPoint presentation . It also recursively deletes Resiliency  registry keys \ncreated by Microsoft Office applications (Word, Excel, PowerPoint, etc.). Some items in the Resiliency  \nregistry key are created  when the Office application does not terminate correctly, later  displayin g this \ninformation to the user. Deleting Resiliency  keys will make the Office application think that everything \nwas correct and there were no problems during the latest application run. The latest step involves \nstarting PowerPoint, maximizing its window, a nd load ing a decoy document while starting the payload in \nthe background. We also found other PPSX documents that exploited this vulnerability , but they were \nsent directly  and not embedded in a DOCX file.  \nWe also uncovered documents related to the Banglade sh Army and a United Nations Development \nProgramme in Sri Lanka. These documents contained malicious macros that deliver the xRAT remote \naccess tool, which lets attackers control the infected machine.  \nThere were also other social ly engineered documents that used government -related news and activities, \nwith subjects such as “Supply Chain Management ” as lures . These are RTF files exploiting CVE-2015 -\n1641 , a memory corruption vulnerability in Microsoft Office patched last April 2015. When executed, i t \ndrops a signed java-rmi.exe  executable from Java Runtime and two dynamic -link libraries (DLLs) —a \nclean msvcr71.dll  and maliciou s jli.dll. The malicious DLL, which contains the Badnews  backdoor, is \nloaded and executed using the DLL side -loading technique .  \n  \n \n \n \n \n  \n \nFigure 11: Screen shots of RTF files that exploit CVE -2015 -1641 and deliver the Badnews  backdoor  \n \nWe managed to acquire a few samples abusing a technique called self-compiled .NET hybrids . One text \nfile contains both JavaScript code and batch code, which compiles the JavaScript code into executable \nfiles and later executes it.  \nThe file starts with two lines , shown below . The first line must be a valid statement in both languages. If  \nexecuted as a batch script, the first comparison (@X)==(@Y) is evaluated  as False . Therefore  @end is not \nexecuted. Each following line is then evaluated by a batch file interpreter until the “exit /b” command \ncauses the batch processing  to terminate . \n \n \n \n \n  \nFigure 12: Code snippet of samples  using the self -compiled .NET hybrid  \nJavaScript, however, treats terms starting with @ as conditional compilation variables , evaluated as \nFalse, followed by a multiline comment. JavaScript , therefore, ignores all the code between /* and */, \nand only the code that follows */ is considered . \nThe compilation process is achieved  by the following command, where %jsc% points to a JScript  \ncompiler and %~dpsfnx0 is resolved  to the name of the currently executed batch file (d means disc, p \nmeans path, f m eans file, x means extension ; all are modifiers of a special %0 parameter) . \n \nFigure 13: Command that facilitates the compilation process  \nThe end of the batch script behind the */ comment is treated  as source code. The code shown below \nmakes a simple command -line downloader with two parameter s, URL, and file name.  \n \nFigure 14: Snapshot showing the command -line downloader  \nAfter compilation, the batch script uses the previously compiled simpledownloader.exe  to download and \nexecute both the payload and decoy document.  \n  \n \n \n \n \n  \nFigure 15: Snapshot show ing the payload and decoy document being retrieved  \nThe scvhost6.exe  file is actually  a variant of the NDiskMonitor  backdoor, while the document.doc is a \ndecoy document, which is a legitimate sociopolitical essay.  \n \nPatchwork also abused the Dynamic Data Exchange  (DDE) protocol to deliver their malware. The internal \nstructure of a s ample we analyzed, an Office Open XML file, is a ZIP archive  that contains the \n“document. xml” file, which contains an embedded DDE payload.  \nThe payload starts with a DDEAUTO string, followed by a command to be executed. The command can \nbe split  into several fields by “ w:instrText ” or through the use of other  methods . In the figure below, the \nentire PowerShell command (displayed in black ) is split  into several chunks. When a victim opens the \ndocument and DDE is enabled on the machine, the PowerShell command downloads and displays the \ndecoy document  then retrieves and executes xRAT.  \n \nFigure 16: PowerShell command retrieving and executing xRAT  \n \nxRAT,  renamed  QuasarRAT  in its latest versions,  is a remote access tool whose source is publicly \navailable on Github. This availability allows anyone to easily clone the project and compile it. The project \nis actively maintained , with users reporting bugs and the developer fixin g them and committing the \nrepaired files back to the Github repository.  \n \n \n \n \n \nNDiskMonitor is a custom backdoor written in .NET, named after the project name.  We haven’t seen this \nbackdoor used by any other threat actor, so we construe this as Patch work’s own.  \n \nFigure 17: Snapshot of NDiskMonitor’s properties  \nNDiskMonitor’s configuration is stored  in update_details  global variable. 70600 is probably its backdoor \nID, \"FuckYou\" is the AES password used for encrypti ng certain information, and the string following it is \nthe command and control (C&C) address.  \n \nFigure 18: NDiskMonitor’s configuration  \nNDiskMonitor spawns a few threads. The first thread beaco ns regular ly to let attackers know that the \nmachine is alive. The p arameter license  is the encrypted username , current_license  is the encrypted \ncomputer name,  and bui is the backdoor ID.  \n \nFigure 19: Thread spawned by NDiskMonitor  \n \n \n \n \n \n \n The second thread listens for backdoor commands. Backdoor queries  are done via  updatecheck.php , \nwith parameters client  as the encrypted user name. Supported commands are:  \ncme-update|<base64 \ncommand>  execute command, AES -encrypted result \nexfiltrated with /php/component_update.php , \nparameters component  = user name and check  = \nencrypted result  \nDv return list of all logical drives, separated by “&” \nrr|<base64 directory>  list all the files and directories in given directory  \nue|<base64 url>  download and execute file from given URL \nThe third thread regularly downloads and executes the Wintel file/in formation stealer , while t he fourth \nthread runs a custom Task Host program . It’s a persistence mechanism for Wintel , which doesn’t have \none on its own.  \nOf note were multiple NDiskmonitor samples we found in the wild that had different hashes but similar \ncode. The attackers added four extra bytes of random uppercase and lowercase letters after the PE -\nreferenced data in the overlay. We think this is done solely to change the file hashes  since the Windows \nPE loader won't even load those extra bytes into memor y.  \nThis backdoor, which has been used  in other  campaigns , has an interesting method for retrieving the \nactual C&C address. The binary has a few hardcoded and encoded URL addresses, which can be \ndecoded  by subtracting 0x01 from each character.  \nAfter the decoding, we get the actual URLs. \n \n \nFigure 20: The hardcoded strings (above), and the actual URLs when decoded (below)  \n \nThese addresses refer to legitimate websites such as Github, Feed43, WebRSS, Wordpress, and Weebly, \nlikely to circumvent AV detection. Accessing these decoded URLs reveals a long base64 string enclosed \nwithin parentheses.  This may be hidden on some websites, as the text has white color on a white \nbackground, so it’s importa nt to “make a selection” to highlight the text.  \n \n \n \n \n  \n \n \nFigure 21: base64 string enclosed in the decoded URLs  (above and center), and how it’s decoded (below)  \nThe text needs to be decoded  on the actual C&C server. This can be done by base64 decoding, \ndecodi ng Hex string to bytes, then XORing each byte with 0x23 and rotating left by three  positions. The \ndecoded C&C URL looks like the following: \nhxxp ://188 [.]165[.]124[.]30/c6afebaa8acd80e7/byuehf8af [.]php \nBadnews  will then start to communicate with the C& C server. The request is not sent in clear text form, \nbut is encoded using the same algorithm used for encoding the C&C server name:  \nuid=<14 hex digits >&u=<hex encoded Unicode username>&c=<hex encoded Unicode computer \nname>&v=2.2  \n \n  \n \n \n \n \n The server response ma y include any of these 11 implemented commands:  \n shell—download and save file  \n link—download and write file, run with ShellExecute , inject into process  if writing to file fails  \n mod—download and save DLL file; likely module  \n upd—download and save EXE file; lik ely update  \n dwd—create empty  file and send it to C&C server; probably for testing purposes  \n kl—send logged keys to C&C server  \n snp—snap, take screenshot  \n ustr—upload stolen documents  \n sdwl—upload file to C&C server  \n utop—stop stealing files  \n hcmd —run cmd.exe as a  shell \n \nFigure 22: Badnews ’ backdoor commands  \n \n \n \n \n \n Depending on Badnews ’ version, there are two threads. One logs all the pressed keys and stores them \nin a file, which, based on the received backdoor command, may be sent back to C& C server. The same \ngoes for the file -stealing thread, which monitors USB devices and copies files with certain extensions to \nthe backdoor’s predefined directory. Depending on C&C server’s command, it can send the stolen files \nback to C&C server. This featu re is probably implemented  to overcome air -gapped environments, as not  \nall of its versions have a thread  that steals data stored on USB devices . Badnews  is usually compiled as \na DLL loaded by a legitimate Java runtime executable, which is vulnerable to DLL  hijacking. The real \nAuthenticode certificate is sometimes appended to the DLL to make it look more legitimate, but it is \ninvalid.  We recently saw a sample of it as an executable in the wild.  \n \nIn Patchwork’s case, f ile stealer s are used to search for files with certain extensions , which are then \nuploaded  to their C&C server. The stealers we found seem to be developed and used exclusively by \nPatchwork.  \n \nTaskhost Stealer  combines theft and persistence capabilities. It’s written  in .NET and obfuscated with  \nCrypto Obfuscator, which can be removed  with the de4dot tool.  \n \nFigure 23: Taskhost Stealer’s properties  \n \n \n \n \n Taskhost Stealer has a constructor of a class, where  the base.Load  function is assigned an important \nfunction called RemoveResources . The IP address of C&C server is also assigned  to a vari able named \nwindowID . Note that function names don’t have any relation to their actual function, e.g. , \nRemoveResources  doesn’t mean that it “removes resources ”. The fake names were prob ably made to \nconfuse reverse engineers  and researchers .  \n \nFigure 24: Code snapshot showing RemoveResources  \nWithin  the RemoveResources  function is a list of document extensions that are of interest to Patchwork ,  \nwhich are files commonly associated with cy berespionage. It also has a  function that checks for the \nexistence of a sys.bin  file in %APPDATA \\Roaming \\Microsoft \\taskhost \\1.0.0.0 \\. This file contains a list of \nall documents with path s accessible from the infected machine.  \n \nFigure 25: Document extensions specified by Taskhost Stealer  \nThen, it drops Microsoft.Win32.TaskScheduler.dll  and adds persistence. The c ode snippe t below shows \nthe name of the task (Active Qiho Security),  as well as the  time interval (5 minutes)  and duration (60 d ays). \nIt means that the process of looking for new files repeats  every 5 minutes for the next 86 ,400 minutes \n(60 days) , based on the code and scheduled task exported to XML format.  \n  \n \n \n \n \n  \n \nFigure 26: Code snippet s showing how Task host Stealer looks for new files  (above), which is also in the XML file \nexported from Task Scheduler (below)  \nIt then enumerates all the available drives and makes a POST request on C&C about the existence of \nthese drives : \n \nFigure 27: Available drives in the i nfected machine are enumerated  \n \n \n \n \n The request contains parameters drive  and student_name. drive ’s value is a disk letter followed by \ninformation if it is a Fixed or Network drive . student_name  contains computer  name and username,  \nseparated by a hyphen.  Files on all “ready” drives will be enumerated as saved as a list in sys.bin.  \n \n \nFigure 28: POST request with the drive  and student_name parameters  (above) and files being enumerated  (below)  \nThe next step is to read from hxxp ://209 [.]58[.]185[.]35/LOG/< computer  name> -<user name> [.]html. If \nthe response is c121, the program ends. This lets attackers control which machines they do not want to \nreceive files from. \nAll files from the previously created list  will be uploaded  one by one . A list of u ploaded file s will be in  \ns.dwg , while the list of all files is in sys.bin.  During each run, sys.bin  is deleted  and newly created ; \nhowever, s.dwg  remains the same . This ensures that only newly created files are uploaded . The upload \npath looks like this: drive (Fixed o r Network), followed by path, computer name , and username . \n  \n \n \n \n \n  \n \nFigure 29: Code snippets showing the c121 response (top) and s.dwg  (bottom)  \n \nWintel Stealer (Win Telephonic Services) is another .NET stealer named after the project name . \nCompared to the Taskhost Stealer, Wintel Stealer targets different files types and has no persistence \nmechanism . \nThe information of files are stored  in the following format : filename  whose path is AES -encrypted with  a \nhardcoded  password, then encoded with base64,  with the &, SHA256  hash , and $ character appended. \nThis structure is stored in a global variable and remains in memory. A timer is enabled , starting the \nupload process when  an internet connection is available.  \n \nFigure 30: Wintel Stealer’s configuration (left) and the file types it targets  (right)  \n \n \n \n \n  \nFigure 31: Information about the files is stored  in a certain format  \nThe load_check.php  script is first queried  with the parameters user, which is base64 -encoded username , \nand hsh, which is file hash. The ?ussr=  in the screenshot below  is likely a typo ; it should be user and not \nussr (Soviet Union).  \n \nFigure 32: Wintel Stealer’s load_check.php  script  \nQuerying this script will tell whether the files are of interest and should be uploaded , and also ensures \nthat the backend  server  doesn’t upload duplicate files. The up.php  script is for uploading files, using \nparameters use for username, fl for bytes of the file , hs for the SHA256 .  \n \nOlder versions of Patchwork’s  file stealers were written  in AutoIt , and e ach of these contains an endless \nloop.  The f unction __searchindex  searches drive C: \\  for certain file extensions. They will copy the \ntargeted files to a directory named index . It also maintains a file Temp.log , each line of which  contain ing \na file’s h ex-encoded MD5 hash . The f unction __sendoutlist uploads all the files from index  directory to \nthe C&C server  and deletes them.  Persistence is carried out by modifying the Run registry key.  \n \n \n \n \n \n \n \n \n \n \n  \n \n \nFigure 33: The function s of the AutoIt stealers  \n \nWe found 30 to 40 IP addresses as well as domain names used by Patchwork in 2017. Each server has \na different purpose. Some are only meant to be C&C servers that collect data sent by the file stealers, \nand no domain name poi nts to those IP addresses. In some  cases , the same server is used for C&C \n \n \n \n \n communication while also acting as a website hosting content copied from legitimate websites and \npropagating malware or weaponized documents.  \nThey misuse publicly available PHP scri pts to retrieve files from the server without disclosing their real \npaths. While this could be for tracking purposes, it’s more likely for deter ring researchers from finding \nopen directories. The documents are almost always downloaded  from the /xinwen  directory , which is \nnow properly configured and cannot be browsed . On multiple occasions, we observed them temporarily \nremoving the file so it could not be retrieved. Sometimes they replaced it with a legitimate file to dupe \nresearchers. In some of their serve rs’ homepages, they display a fake 302 redirection page to trick \nresearchers into thinking the files are gone.  \nOther servers are used only to host phishing websites. Content change s between each campaign, but \nthe same server  remains . For instance, the qzon ecn[.]com domain  has been pointing to the same IP \naddress since January 2017, but it now points to yahoomail[.]support. It references euuwebmail[.]com \nfor four months, and  then militaryreviews[.]net for a week . This is consistent with the three months of \nvalidity of the Let’s Encrypt certificates. Apart from militaryreviews[.]net, all of these domain names are \nsimilar to legitimate websites that require authentication. We also found one server that was not hosting \nany content  but had a Postfix instance running and  being used to send targeted emails.  \nAll of these servers seem  to use Apache on CentOS.  The favicon on a server they recently used was still \nsimilar to the one used in WampServer. It’s probable that Patchwork uses t his package to facilitate \nserver installation when using a Windows environment.  \nThe domain names are always registered using a service protecting the related whois information, which \nwasn’t always the case before Patchwork’s activities were disclosed  in 20 16. Additionally, many of the \ndomain names published in previous reports have been either sinkholed  by security companies or \nabandoned by the attackers.  \n \nPatchwork is in a vicious cycle, given the group’s habit of rehashing tools and malware. The more these \ntools are used , the likelier it is for them to be incorporated in to the group’s arsenal. For enterprises, t he \ngamut of tools and techniques at Patchwork’s disposal highlights the significance of defense in depth: \narraying proact ive defense to thwart threats at each level —from the gateways, endpoints , and networ ks \nto servers .  \nWhat can enterprises do? Keep the operating system  and its applications updated —or employ virtual \npatching  for legacy systems —to prevent security gaps and deter attackers from exploiting them. Firewall , \nsandbox , and intrusion detection and prevention systems  help detect red flags in the network. Enforce \nthe principle of least privilege: blacklist and secure the use of tools  usually reserved for system \nadministrators, such as PowerShell . Network segmentation  and data categorization  thwart lateral \nmovement and risk of further data theft, while behavior monitoring and application control/whitelisting  \nblock anomalous  routines executed by suspicious files. And more importantly, secure the email gateway . \nPatchwork may only be reusing vulnerability exploits and malware, but they’re tried -and-tested —it only \ntakes one susceptible layer to affect the whole chain.  \n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  Trend Micro Incorporated, a global leader in security software, strives to make the \nworld safe for exchanging digital information. Our innovative solutions for consumers, \nbusinesses and governments provide layered content security to protect information \non mobile devices, endpoints, gateways, servers  and the cloud. All of our solutions \nare powered by cloud -based global threat intelligence, the Trend Micro™ Smart \nProtection Network™, and are supported by over 1,200 threat experts around the \nglobe. For more information, visit  www.trendmicro.com .  \n©201 7 by Trend Micro, Incorporated. All rights reserved. Trend Micro and the Trend \nMicro t -ball logo are trademarks or registered trademarks of Trend Micro, \nIncorporated. All other product or company names may be trademarks or registered \ntrademarks of their owne rs. "
}