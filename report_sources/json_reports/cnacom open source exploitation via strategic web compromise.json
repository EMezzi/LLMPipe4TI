{
    "title": "cnacom open source exploitation via strategic web compromise",
    "text": "Support Blogs Request Demo Sign In Contact Us\nProducts Solutions Resources Company \nBlogs  > Security Research\nCNACOM - Open Source\nExploitation via Strategic\nWeb Compromise\nPublished on:\nDecember 01, 2016\nAuthored by:\nEd Miles\nCategory:\nAPT \n \n \n CNACOM - Open Source Exploitation via Strategic\nWeb Compromise\nIntroduction\nSince a full proof of concept for CVE-2016-0189 vulnerability was published on GitHub, Zscaler\nThreatLabZ has been closely tracking its proliferation. The first copying of the exploit code we spotted\nwas from the Sundown exploit kit (EK), followed closely by Magnitude and a resurgent KaiXin EK. In\naddition to the commoditized EKs, this exploit code has been leveraged in numerous one-shot and\ngated web-exploitation campaigns, delivered through a mix of the usual malvertising networks and\ncompromised websites.\nThis blog details CNACOM, a web-based campaign that appears to be related to a well-known nation-\nstate actor more commonly associated with spear-phishing attacks.\nInfection Cycle\nOn November 7, we spotted a malicious injection on the registration page of a major Taiwanese public\nservice website. An iframe was injected into the footer of the page, which then loaded a unique\nlanding page containing the CVE-2016-0189 exploit code.\n \nThe landing page, hosted on an RHCloud virtual private server (VPS), begins with a nearly identical\ncopy of the GitHub-published code, though the payload invocation appears to use a sandbox\nescape via CVE-2015-0116 .\n \nFollowing the exploit code, things get a lot more interesting. The user's external IP address is stored as\na string and an ipToInt()  function is defined, followed by a set of subroutines to collect details from\nthe user machine. The code gathers the OS version, browser name, version, and language setting,\nFlash and Java versions, installed Office version, and finally the raw User-Agent string from the\nbrowser. This is all sent to the RHCloud host via a GET request. \nFigure 1 - An overview of the campaign's infection flow, highlighting the targeted organizations\nFigure 2 - An injected iframe with the name \"abc\" redirects visitors to the attack code\nFigure 3 - A VBScript function named \"abc\" uses a combination of CVE-2016-0189 as well as what appears to be CVE-2015-0116 to\ngain code execution outside of the Internet Explorer (IE) sandbox\n After the fingerprinting code, the user's IP address is checked against Taiwanese government network\nranges. If the user is coming from one of the targeted networks and is using a version of Internet\nExplorer, exploitation will be attempted.\nThreatLabZ was able to follow the infection cycle and download a sample that appears to be a variant\nof the IXESHE AES malware. IXESHE is a family of backdoor malware known to be utilized by an\nattack group identified by various names including the IXESHE label, APT12, Numbered Panda,\nand DynCalc.\nUpon execution, the malware gathers the Windows username, hostname, local IP address, and\nWindows version. The hostname is fed to a PJW hash, or ElfHash  function to generate a machine ID\nused in callbacks. The last step before initiating the C&C check-in is to achieve persistence by\ninstalling a run key in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Messenger.\nThis sample uses almost similar communication techniques as previous variants, with the addition of\nSSL. In our observations, we saw the server present a self-signed certificate with short, random-looking\nstrings in the informational fields.\nFigure 4 - The landing page collects many aspects of the user's platform, including MS Office version information\nFigure 5 - The exploitation routine will be triggered for any Internet Explorer version, as long as the user's IP address is in one of the\nnine target networks\nFigure 6 - Upper : among other changes seen, the new variant builds stack strings up to 4 bytes at a time. Lower : old variants do\nit byte-by-byte\nFigure 7 - Simplified decompiled code for the persistence mechanism shows the Run key utilized\n Suggested Blogs\nMar\n12\n2020\nThe Emergence of Coronavirus and\nOlympics Scams\nBy: Krishna Kona\nRead This Post\nMar\n11\n2020\nMicrosoft Remote Code Execution\nvulnerability in SMBv3 service: CVE-2020-\n0796\nBy: Rohit Hegde\nRead This Post\nTake the first steps on your transformation journey\nContact Us  Request DemoCallback URLs\n/CEL%d=%d.cgi?%s - check-in at startup (and after certain C&C reset/error conditions)\n/DES%d=%d.cgi?%s - standard beacon, check for command\n/RES%d=%d.cgi?%s - response to rsh command\n/SDU%d=%d.cgi?%s - error response\n/SUS%d=%d.cgi?%s - check-out after receiving shutdown message\nAs can be seen above, the callback URLs utilize the same general format: three capital letters denoting\nthe response function or condition, an integer representing the PJW/ElfHash  based host ID, an equal\nsign (\"=\"), a random integer, the string \".cgi?\", and a base64 response blob (which in some cases\nsimply encodes another random integer).  The following regular expression matches this variant's URL\npath/query components: [CDRS][EDU][LSU]\\d+=\\d+\\.cgi\\?[a-zA-Z0-9=\\+\\/]+.\nUnlike many historical IXESHE samples, it appears that this variant doesn't utilize campaign codes\nembedded in the malware itself. This may be due to a more centralized tracking system that only\nrelies on the malware reporting a machine ID.\n \nConclusion\nThis analysis represents a snapshot of recent activity related to the CNACOM campaign. Additionally,\nwe have identified an exploitation campaign active in August 2015 that appears to have utilized the\nHackingTeam Flash exploit for CVE-2015-5122, though the landing page at that time targeted a\ndifferent set of Taiwanese government networks. Whether or not the threat actor behind this campaign\nis actually the group named APT12, the targeting of Taiwanese government networks and the\nsimilarity of this strain to historic IXESHE samples provide strong reasons for suspicion.\nZscaler ThreatlabZ will continue to monitor activity from this group ensuring protection against\nthis threat.\nIndicators of Compromise\n \nFilename: cnacom.exe\nSource: cnacom-organied.rhcloud\\.com/cnacom.exe\nMD5: ACFA9C664016BFE5DB92557E923744F0\nCompile Time: 11/04/2016 11:56:27\nHardcoded User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:43.0) Gecko/20100101 Firefox/43.0\nC&C: 74.200.214.226\n \nReferences\nhttp://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-\npapers/wp_ixeshe.pdf\nhttps://www.arbornetworks.com/blog/asert/wp-content/uploads/2014/06/ASERT-Threat-\nIntelligence-Brief-2014-07-Illuminating-Etumbot-APT.pdf\nFigure 8 - A self signed certificate is used for the C&C server\nFigure 9 - A collapsed view of the decompiled C&C command processing code shows handling for multiple input commands and\nseveral response types\n Products\nSolutions\nResources\nCompany\nCareers\nBlogs\nZenith CommunityPrivacy\nPrivacy Policy\nGDPR and Privacy Shield Policy\nCalifornia Privacy Policy\nCookies PolicyLegal / Security\nAcceptable Use Policy\nPatents\nVulnerability Disclosure ProgramLanguage\nEnglish\nFrançais\nDeutsch\n日本語Keep in touch with us!\nSubmit\nBy clicking the submit button, \nyou are agreeing to our privacy policy .Email\n    ©2008-2020 Zscaler, Inc. All rights reserved. Zscaler uses cookies to personalize content and ads, to provide social media features and to analyze our traffic. We also share information about your use of our site with our social media, advertising and analytics partners. Please review our\nCookies Policy for more information.\nAccept Cookies Cookie Settings\n "
}