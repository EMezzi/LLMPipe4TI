{
    "title": "kopiluwak_ a new javascript payload from turla _ securelist",
    "text": "Share post on:On 28 January 2017, John Lambert of Microsoft (@JohnLaTwC) tweeted about a malicious document that dropped a “ very\ninteresting .JS backdoor “. Since the end of November 2016, Kaspersky Lab has observed Turla using this new JavaScript\npayload and specific macro variant. This is a technique we’ve observed before with Turla’s ICEDCOFFEE payloads, detailed in\na private report from June 2016 (available to customers of Kaspersky APT Intelligence Services). While the delivery method\nis somewhat similar to ICEDCOFFEE, the JavaScript differs greatly and appears to have been created mainly to avoid\ndetection.\nTargeting for this new malware is consistent with previous campaigns conducted by Turla, focusing on foreign ministries and\nother governmental organizations throughout Europe. Popularity of the malware, however, is much lower than\nICEDCOFFEE, with victim organizations numbering in the single digits as of January 2017. We assess with high confidence\nthis new JavaScript will be used more heavily in the future as a stage 1 delivery mechanism and victim profiler.\nThe malware is fairly simplistic but flexible in its functionality, running a standard batch of profiling commands on the victim\nand also allowing the actors to run arbitrary commands via Wscript.\nActor Proﬁle\nTurla, also known as Snake / Uroburos / Venomous Bear and KRYPTON is a Russian-speaking APT group that has been\nactive since at least 2007. Its activity can be traced to many high-profile incidents, including the 2008 attack against the US\nCentral Command, (see Buckshot Yankee  incident) or more recently, the attack against RUAG , a Swiss military contractor.\nThe Turla group has been known as an agile, very dynamic and innovative APT, leveraging many different families of\nmalware, satellite-based  command and control servers and malware for non-Windows OSes.\nTargeting Ukraine, EU-related institutions, governments of EU countries, Ministries of Foreign Affairs globally, media\ncompanies and possibly corruption related targets in Russia, the group intensified their activity in 2014, which we described\nin our paper Epic Turla . During 2015 and 2016 the group diversified their activities, switching from the Epic Turla waterhole\nframework to the Gloog Turla framework, which is still active. They also expanded their spear phishing activities with the\nSkipper / WhiteAtlas attacks, which leveraged new malware. Recently, the group has intensified their satellite-based C&C\nregistrations ten-fold compared to their 2015 average.\nTechnical Details\nSample MD5 : 6e7991f93c53a58ba63a602b277e07f7\nName : National Day Reception (Dina Mersine Bosio Ambassador’s Secretary).doc\nAuthor : user\nLastModifiedBy : John\nCreateDate : 2016:11:16 21:58:00\nModifyDate : 2016:11:24 17:42:00\nDecoy document used in the attack\nThe lure document above shows an official letter from the Qatar Embassy in Cyprus to the Ministry of Foreign Affairs (MoFA)\nin Cyprus. Based on the name of the document (National Day Reception (Dina Mersine Bosio Ambassador’s Secretary).doc, it\nis presumed it may have been sent from the Qatar Ambassador’s secretary to the MoFA, possibly indicating Turla already had\ncontrol of at least one system within Qatar’s diplomatic network.\nThe document contains a malicious macro, very similar to previous macros used by Turla in the past to deliver Wipbot,\nSkipper, and ICEDCOFFEE. However, the macro did contain a few modifications to it, mainly the XOR routine used to\ndecode the initial JavaScript and the use of a “marker” string to find the embedded payload in the document.\nNew XOR Routine\nBelow is a snippet of the new XOR routine used to decode the initial JavaScript payload. Turla has consistently changed the\nvalues used in this routine over the last year, presumably to avoid easy detection:\nHere is a function written in Python to assist in decoding of the initial payload:\nPayload Oﬀset\nAnother change in the macro is the use of a “marker” string to find the payload offset in the document. Instead of using hard\ncoded offsets at the end of the document as in ICEDCOFFEE, the macro uses the below snippet to identify the start of the\npayload:\nSecond Layer JavaScript\nOnce the marker is found, the macro will carve out “15387 + 1” bytes (hard coded) from the end of the marker and pass that\nbyte array to the aforementioned decoding routine. The end result is a JavaScript file (mailform.js – MD5:\n05d07279ed123b3a9170fa2c540d2919) written to “%APPDATA%MicrosoftWindows”.\nmailform.js – malicious obfuscated JavaScript payload\nThis file is then executed using Wscript.Shell.Run() with a parameter of “NPEfpRZ4aqnh1YuGwQd0”. This parameter is an\nRC4 key used in the next iteration of decoding detailed below.\nThe only function of mailform.js is to decode the third layer payload stored in the JavaScript file as a Base64 string. This\nstring is Base64 decoded, then decrypted using RC4 with the key supplied above as a parameter\n(“NPEfpRZ4aqnh1YuGwQd0”). The end result is yet another JavaScript which is passed to the eval() function and executed.\nThird Layer JavaScript\nThe third layer payload is where the C2 beaconing and system information collection is performed. This JS will begin by\ncopying itself to the appropriate folder location based on the version of Windows running:\n1. c:Users<USERNAME>AppDataLocalMicrosoftWindowsmailform.js\n2. c:Users<USERNAME>AppDataLocalTempmailform.js\n3. c:Documents and Settings<USERNAME>Application DataMicrosoftWindowsmailform.js\nPersistence\nNext, it will establish persistence on the victim by writing to the following registry key:\nKey: HKEY_CURRENT_USERsoftwaremicrosoftwindowscurrentversionrunmailform\nValue: wscript.exe /b “<PATH_TO_JS> NPEfpRZ4aqnh1YuGwQd0”\nProﬁling\nAfter establishing its persistence, it will then execute a series of commands on the victim system using “cmd.exe /c” and\nstore them to a file named “~dat.tmp”, in the same folder where “mailform.js” is located:\nsysteminfo\nnet view\nnet view /domain\ntasklist /v\ngpresult /z\nnetstat -nao\nipconfig /all\narp -a\nnet share\nnet use\nnet user\nnet user administrator\nnet user /domain\nnet user administrator /domain\nset\ndir %systemdrive%Users*.*\ndir %userprofile%AppDataRoamingMicrosoftWindowsRecent*.*\ndir %userprofile%Desktop*.*\ntasklist /fi “modules eq wow64.dll”\ntasklist /fi “modules ne wow64.dll”\ndir “%programfiles(x86)%”\ndir “%programfiles%”\ndir %appdata%\nOnce the information is collected into the temporary “~dat.tmp” file, the JavaScript reads its contents into memory, RC4\nencrypts it with the key “2f532d6baec3d0ec7b1f98aed4774843”, and deletes the file after a 1 second sleep, virtually\neliminating storage of victim information on disk and only having an encrypted version in memory.\nNetwork Communications\nWith the victim info stored in encrypted form in memory, the JavaScript then will perform the necessary callback(s) to the\nC2 servers which are hard coded in the payload. The addresses seen in this payload were as follows:\nhttp://soligro[.]com/wp-includes/pomo/db.php\nhttp://belcollegium[.]org/wp-admin/includes/class-wp-upload-plugins-list-table.php\nIt should be noted that the above domains appear to have been compromised by the actor based on the locations of the\nPHP scripts.\nBelcollegium[.]org – a legitimate website compromised and used for C2\nVictim data is sent to the C2 servers in the form of a POST request. The headers of the POST request contain a unique User-\nAgent string that will remain the same per victim system. The User-Agent string is created by performing the following\nsteps:\n1. Concatenate the string “KRMLT0G3PHdYjnEm” + <SYSTEM_NAME> + <USER NAME>\n2. Use the above string as input to the following function (System Name and User Name have been filled in with example\ndata ‘Test’ and ‘Admin’):\nThe function above will produce a unique “UID” consisting of a 16-digit number with the string “KRMLT0G3PHdYjnEm”\nappended to the end. In the example above using the System Name “Test” and User Name “Admin”, the end result\nwould be “2356406508689132KRMLT0G3PHdYjnEm”\n3. Prepend the string “user-agent:”, “Mozilla/5.0 (Windows NT 6.1; Win64; x64); ” to the result from the last step. This will\nnow be the unique User-Agent value for the victim callbacks. In this example, the final result will be “user-agent:”,\n“Mozilla/5.0 (Windows NT 6.1; Win64; x64); 2356406508689132KRMLT0G3PHdYjnEm”.\nThe POST request will contain the unique User-Agent string above as one of the headers and also the Base64 encoded\nversion of the RC4 encrypted victim data collected earlier.\nThe C2 will respond in one of four ways after the POST request:\n1. “good”\n2. “exit”\n3. “work”\n4. “fail”\nIn the case of an answer of “good”, the JavaScript will then sleep for a random amount of time, ranging from 3600-3900\nseconds.\nThe “exit” command will cause script to exit gracefully, thus shutting down the communications to the C2 server until next\nstartup / login from the user.\nThe “fail” command is for uninstalling the JavaScript and its persistence. Both the “mailform.js” file and registry key created\nfor persistence will be deleted upon receipt of this command.\nThe “work” command is used to task the victim’s system to run arbitrary commands via Wscript.shell.run(). It begins by\nchecking to see if a file “mailform.pif” exists in the same directory as the JavaScript, and if so, it will delete it. The victim will\nthen send a POST request to the C2 much in the same way as before with the beacon traffic, but with some slight\ndifferences. The User-Agent header will remain the same as in the beacon traffic, but the data sent to the C2 will consist of\nthe 4-byte string “work”. If the response from the server after this acknowledgement is “200 OK”, then the system will\nproceed to read the response data into memory, RC4 encrypt it using the same key\n“2f532d6baec3d0ec7b1f98aed4774843”, then write it out to the “mailform.pif” file referenced above. The command file is\nrun, the JavaScript will sleep for 30 seconds, and then the file is subsequently deleted.\nVictims and Sinkholing\nOne of the domains involved in this new malware (soligro[.]com) expired in July 2016 and was was available for purchase\nand sinkhole at the time of the analysis. Sinkhole data shows several potential victims, with one high profile victim\n(195.251.32.62) located within the Greek Parliament:\nThe majority of connections to the sinkhole server have been observed from IP ranges residing within Greece. This leads us\nto believe the main target for the specific document above was Greece, although we also have indications of targeting in\nRomania and Qatar based on other data.\nConclusions\nIn recent months, the Turla actors have increased their activity significantly. The addition of KopiLuwak to their already\nexisting ICEDCOFFEE JavaScript payload indicates the group continues to evolve and deliver new tools to avoid detection\nby known malware signatures.\nCurrently, it seems the Turla actors continue to rely heavily on embedded macros in Office documents. While this may\nappear to be an elementary technique to use for such a sophisticated actor, they are repeatedly successful in compromising\nhigh value targets with this method. It is advised that users disable macros in their enterprise and not allow the user to\nenable said content unless absolutely necessary. Furthermore, using the polymorphic obfuscation technique for the macros\nhas caused difficulties in writing signatures for detection.\nAPT JAVASCRIPT  MACROS  MALWARE DESCRIPTIONS  TURLA\nRelated Posts\nLEAVE A REPLY\nYour email address will not be published.  Required fields are marked *\nEnter your comment here\nName *\nEmail *\nSave my name, email, and website in this browser for the next time I comment.\n \nSUBMIT\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\n APT REPORTS\nKopiLuwak: A New JavaScript Payload\nfrom Turla\nBy Brian Bartholomew  on February 2, 2017. 3:00 pm\n \nNotify me when new comments are added.\n© 2020 AO Kaspersky Lab.  All Rights Reserved. \nRegistered trademarks and service marks are the property of their respective owners.\nContact us  | Privacy Policy  | License AgreementEmail\n I agree to provide my email address to “AO Kaspersky Lab” to\nreceive information about new posts on the site. I understand\nthat I can withdraw this consent at any time via e-mail by\nclicking the “unsubscribe” link that I find at the bottom of any e-\nmail sent to me for the purposes mentioned above.\nSUBSCRIBE\n1\n2\n3\n4\n5\n6\n7\n8\n9 \n Function  Q7JOhn5pIl648L6V43V (EjqtNRKMRiVtiQbSblq67 () As Byte, M5wI32R3VF2g5B21EK4d As Long) As Boolean\n   Dim THQNfU76nlSbtJ5nX8LY6 As Byte \n   THQNfU76nlSbtJ5nX8LY6  = 45 \n   For i = 0 To M5wI32R3VF2g5B21EK4d  - 1 \n  EjqtNRKMRiVtiQbSblq67 (i) = EjqtNRKMRiVtiQbSblq67 (i) Xor THQNfU76nlSbtJ5nX8LY6  \n  THQNfU76nlSbtJ5nX8LY6  = ((THQNfU76nlSbtJ5nX8LY6 Xor 99) Xor (i Mod 254)) \n  Next i \n   Q7JOhn5pIl648L6V43V  = True \n End Function  \n \n1\n2\n3\n4\n5\n6\n7 \n def decode(payload , length): \n    varbyte  = 45 \n    i = 0 \n    for byte in payload : \n       payload [i] = byte ^ varbyte  \n       varbyte  = ((varbyte  ^ 99) ^ (i % 254)) \n       i += 1 \n \n1\n2\n3 \n Set VUy5oj112fLw51h6S  = CreateObject (\"vbscript.regexp\" ) \n VUy5oj112fLw51h6S .Pattern  = \"MxOH8pcrlepD3SRfF5ffVTy86Xe41L2qLnqTd5d5R7Iq87mWGES55fswgG84hIRdX74dlb1SiFOkR1Hh\"\n Set I4j833DS5SFd34L3gwYQD  = VUy5oj112fLw51h6S .Execute (KqG31PcgwTc2oL47hjd7Oi ) \n \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14 \n function  EncodeUserAgent () { \n   var out = \"\"; \n   var UserAgent  = 'KRMLT0G3PHdYjnEm'  + 'Test' + 'Admin' ; \n   for (var i = 0; i < 16; i++) { \n  var x = 0 \n  for (var j = i; j < UserAgent .length - 1; j++) { \n     x = x ^ UserAgent .charCodeAt (j); \n  } \n  x = (x % 10); \n  out = out + x.toString (10); \n   } \n   out = out + 'KRMLT0G3PHdYjnEM' ; \n   return out; \n } \n \nHunting APTs with YARA\n MonitorMinor: vicious\nstalkerware?\nRoaming Mantis, part V\nTHREATS\n CATEGORIES\n TAGS\n STATISTICS ENCYCLOPEDIA DESCRIPTIONS KSB 2019\n English\nSolutions\n Industries\n Products\n Services\n Resource Center\n Contact Us GDPR GET IN TOUCH\nWe use cookies to make your experience of our websites better. By using and further navigating this website you accept this. Detailed\ninformation about the use of cookies on this website is available by clicking on more information .ACCEPT AND CLOSE\n "
}