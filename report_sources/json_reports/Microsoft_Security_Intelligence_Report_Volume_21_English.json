{
    "title": "Microsoft_Security_Intelligence_Report_Volume_21_English",
    "text": " \n \n \nMicrosoft Security  \nIntelligence Report  \nVolume 21 | January  through June, 2016   \n \n \n \n \n \n \n \n \n \n \n \n \n \nThis document is for informational purposes only. MICROSOFT MAKES NO \nWARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION \nIN THIS DOCUMENT.  \nThis document is provided “as -is.” Information and views expressed in this \ndocument, including URL and other Internet Web site references, may change \nwithout notice. You bear the risk of using it.  \nCopyright © 201 6 Microsoft C orporation. All rights reserved.  \nThe names of actual companies and products mentioned herein may be the \ntrademarks of their respective owners.  \n   \nii ABOUT THIS REPORT   \n Authors  \nCharlie Anthe  \nCloud and Enterprise Security  \nEvan Argyle  \nWindows Defender  Labs  \nEric Douglas  \nWindows Defender  Labs  \nSarah Fender  \nAzure Security  \nElia Florio  \nWindows Defender  Labs  \nChad Foster  \nBing  \nRam Gowrishankar  \nWindows Defender  Labs  \nVolv Grebennikov  \nBing  \nPaul H enry  \nWadeware LLC  \nAaron Hulett  \nWindows Defender  Labs   \nIvo Ivanov  \nWindows Defender  Labs  Michael Johnson  \nWindows Defender  Labs  \nJeff Jones  \nCorporate Communications  \nTim Kerk  \nWindows Defender  Labs  \nMathieu Letourneau  \nWindows Defender  Labs  \nMarianne Mallen  \nWindows Defender  Labs  \nMatt Miller  \nMicrosoft Security Response \nCenter  \nChad Mills  \nSafety Platform  \nNam Ng  \nEnterpr ise Cybersecurity \nGroup  \nHamish O'Dea  \nWindows Defender  Labs  \nJames Patrick Dee  \nWindows Defender  Labs  Siddharth Pavithran  \nWindows Defender  Labs  \nDaryl Pecelj  \nMicrosoft IT Information \nSecurity and Risk \nManagement  \nFerdinand Plazo  \nWindows Defender  Labs  \nTim Rains  \nCommer cial Communications  \nPaul Rebriy  \nBing  \nKarthik Selvaraj  \nWindows Defender  Labs  \nTom Shinder  \nAzure Security  \nNitin Sood  \nWindows Defender  Labs  \nTomer Teller  \nAzure Security  \nVikram Thakur  \nWindows Defender  Labs  \nContributors  \nEric Avena  \nWindows Defender  Labs  \nIaan D'Souza - Wiltshire  \nWindows Defender  Labs  \nDustin Duran  \nWindows Defender  Labs  \nTanmay Ganacharya  \nWindows Defender  Labs  \nChris Hallum  \nWindows and Devices Group  Satomi Hayakawa  \nCSS Japan  Security Response \nTeam  \nSue Hotelling  \nWindows and Devices Group  \nYurika Kakiuchi  \nCSS Japan  Security Response \nTeam  \nLouie Mayor  \nWindows Defender  Labs  \nDolcita Montemayor  \nWindows Defender  Labs  Heike Ritter  \nWindows and Devices  Group  \nNorie Tamura  \nCSS Japan  Security Response \nTeam  \nSteve Wacker  \nWadeware LLC  \nDavid Weston  \nWindows Defender  Labs   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    iii \n Table of c ontents  \nAbout this report  ................................ ................................ ................................ ..........................  v \nHow to use this report  ................................ ................................ ................................ ...............  vi \nFeatured intelligence  1 \nProtecti ng cloud infrastructure: Detecting and mitigating threats using Azure \nSecurity Center  ................................ ................................ ................................ ..............................  3 \nThreats against cloud deployments and infr astructure  ................................ ..........................  3 \nThe cyber kill chain: On -premises and in the cloud  ................................ ................................ . 7 \nCountering threats with Azure Security Center Advanced Threat Detection  ..................  11 \nSummary  ................................ ................................ ................................ ................................ ............  20 \nPROMETHIUM and NEODYMIUM: Parallel zero -day attacks targeting individuals \nin Europe  ................................ ................................ ................................ ................................ ....... 21 \nActivity Group Profile: PROMETHIUM  ................................ ................................ .......................  22 \nActivity Group Profile: NEODYMIUM  ................................ ................................ .........................  23 \nMitigation  ................................ ................................ ................................ ................................ ..........  29 \nSummary  ................................ ................................ ................................ ................................ ............  32 \nIndicators  ................................ ................................ ................................ ................................ ...........  32 \nTen years of exploits: A long -term study of exploitation of vulnerabilities in \nMicrosoft software  ................................ ................................ ................................ .....................  35 \nWorldwide threat assessment  41 \nVulnerabilities  ................................ ................................ ................................ ..............................  43 \nIndustry -wide vulnerability disclosures  ................................ ................................ .....................  43 \nVulnerability severity  ................................ ................................ ................................ ......................  44 \nVulnerability complexity  ................................ ................................ ................................ ................  46 \nOperating system, browser, and application vulnerabilities ................................ ................  47 \nMicrosoft vulnerability disclosures  ................................ ................................ ..............................  49 \nGuidance: Developing secure software  ................................ ................................ ....................  49 \nExploits  ................................ ................................ ................................ ................................ ...........  51 \nExploit families  ................................ ................................ ................................ ................................ .. 53 \nExploit kits  ................................ ................................ ................................ ................................ ..........  54 \nJava exploits  ................................ ................................ ................................ ................................ ...... 57  \niv ABOUT THIS REPORT   \n Operating system exploits  ................................ ................................ ................................ ............  59 \nDocument exploits  ................................ ................................ ................................ ...........................  61 \nAdobe Flash Player exploits  ................................ ................................ ................................ .........  62 \nBrowser exploits  ................................ ................................ ................................ ..............................  64 \nExploit detection with Internet Explorer and IExtensionValidation  ................................ .... 65 \nExploits used in targeted attacks  ................................ ................................ ................................  66 \nMalicious and unwanted software  ................................ ................................ ........................  71 \nLearning about new threats with cloud -based protection in Windows Defender ........ 73 \nMalicious and unwanted software worldwide  ................................ ................................ .........  73 \nThreat categories  ................................ ................................ ................................ .............................  81 \nThreat families  ................................ ................................ ................................ ................................ .. 85 \nRansomware  ................................ ................................ ................................ ................................ ..... 92 \nThreats from targe ted attackers  ................................ ................................ ................................ . 97 \nPotentially unwanted applications in the enterprise  ................................ ............................  101 \nSecurity software use  ................................ ................................ ................................ ...................  104 \nGuidance: Defending against malware  ................................ ................................ .................... 109 \nMalicious websites ................................ ................................ ................................ .....................  111 \nPhishing sites  ................................ ................................ ................................ ................................ ... 112 \nMalware hosting sites  ................................ ................................ ................................ ...................  116 \nDrive -by download sites  ................................ ................................ ................................ ..............  119 \nGuid ance: Protecting users from unsafe websites  ................................ ................................ 122 \nMalware at Microsoft: Dealing with threats in the Microsoft environment  ..........  123 \nAntimalware usage  ................................ ................................ ................................ ........................ 123 \nMalware de tections  ................................ ................................ ................................ ......................  124 \nMalware infections  ................................ ................................ ................................ .........................  127 \nWhat IT departments can do to protect their users  ................................ ............................. 129 \nAppendixes  133  \nAppendix A: Threat naming conventions  ................................ ................................ .........  135 \nAppendix B: Data sources  ................................ ................................ ................................ ....... 137 \nAppendix C: Worldwide encounter and infection rates  ................................ ...............  140 \nGlossary  ................................ ................................ ................................ ................................ ........  145 \nThreat families referenced in this report  ................................ ................................ ...........  155 \nIndex  ................................ ................................ ................................ ................................ .............  162  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    v \n About this report  \nThe Microsoft Security Intelligence Report (SIR)  focuses on software \nvulnerabilities , software vulnerability exploits, malware , and unwanted software. \nPast reports and related resources are available for download at \nwww.microsoft.com/sir . We hope that readers find the data, insights, and \nguidance provided in this report useful in helping them protect their \norganizations, software, and users.  \nReport ing period  \nThis volume of the Microsoft Security Intelligence Report  focuses on the first and \nsecond quarters of 2016, with trend data for the last several quarters presented \non a quarterly basis. Because vulnerability disclosures can be highly inconsistent \nfrom quarter to quarter and often occur disproportionately at cert ain times of \nthe year, statistics about vulnerability disclosures are presented on a half -yearly \nbasis.  \nThroughout the report, half -yearly and quarterly time periods are referenced \nusing the nHyy or nQyy formats, in which yy indicates the calendar year and  n \nindicates the half or quarter. For example, 1H16 represents the first half of 2016 \n(January 1 through June 30), and 4Q15 represents the fourth quarter of 2015 \n(October 1 through December 31). To avoid confusion, please note the reporting \nperiod or perio ds being referenced when considering the statistics in this report.  \nConventions  \nThis report uses the Microsoft Malware Protection Center  (MMPC) naming \nstandard for families and variants of malware . For information about this \nstandard, see “ Appendix A: Threat naming conventions ” on page 135. In this \nreport, any threat or group of threats that share a common unique base name is \nconsidered a family for the sake of presentation. This consideration includes \nthreats that may not otherwise be considered families according to common \nindustry practices, such as generic  and cloud -based detections. For the \npurposes of this report, a threat is defined as a malicious or unwanted software \nfamily or variant that is detected by the Microsoft Malware Protectio n Engine .  \nvi HOW TO USE THIS REPO RT  \n How to use this report  \nThe Microsoft Security Intelligence Report  has been released twice a year since \n2006. Each volume is based upon data collected from millions of computers all \nover the world, which not only provides valuable insights on the worldwide \nthreat landscape, both at home and at work, but also provides det ailed \ninformation about threat profiles faced by computer users in more than a \nhundred individual countries and regions.  \nTo get the most out of each volume, Microsoft recommends the following:  \nRead  \nEach volume of the report consists of several parts. The p rimary report typically \nconsists of a worldwide threat assessment, one or more feature articles, \nguidance for mitigating risk, and some supplemental information. A summary of \nthe key findings in the report can be downloaded and reviewed separately from \nthe full report; it highlights a number of facts and subjects that are likely to be of \nparticular interest to readers. The regional threat assessment, available for \ndownload and in interactive form at www.microsoft.com/security/sir/threat , \nprovides individual summaries of threat statistics and security trends for more \nthan 100 countries and regions worldwide.  \nReading the volume in its entirety will provide readers with the most benefit and \ncontext,  but the report is designed to provide value in small doses as well. Take \na few minutes to review the summary information to find the information that \nwill be of most interest to you and your organization. Consult the table of \ncontents and the index to lea rn more about particular topics of interest.  \nShare  \nMicrosoft also encourages readers to share each released volume, or its \ndownload link, with co -workers, peers, and friends with similar interests. The \nMicrosoft Security Intelligence Report  is written to b e useful and accessible to a \nwide range of audiences. Each volume contains thousands of hours of research \ndisseminated in easy to understand language, with advanced technical jargon \nkept to a minimum. Each section and article is written and reviewed to pro vide \nthe most value for the time it takes to read.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    vii \n Assess your own risk  \nReading about the threats and risks that affect different types of environments \npresents a good opportunity to assess your own risks. Not every computer and \nentity faces the same risk from all threats. Assess your own risks and determine \nwhich topics and information can help you to best defend against the most \nsignificant risks.  \nThe volume and scope of threats facing the typical organization make it \nimportant to prioritize. The greatest  risk to any computer or organization is \nposed by currently and recently active threats. Pay attention to the threats that \nhave most commonly affected your region or industry, focusing particularly on \nthe most common successful attacks in the wild that cau se the most problems. \nGive less consideration to very rare or theoretical -only attacks, unless your \ncomputers are at particular risk for such threats.  \nEducate  \nMicrosoft strives to make this report one of the most valuable sources of threat \nand mitigation i nformation that you can read and share. We encourage you to \nuse the Microsoft Security Intelligence Report  as a guide to educate your \nemployees, friends, and families about security -related topics.  \nAnyone, including a business, may link, point to, or re -use articles in the \nMicrosoft Security Intelligence Report  for informational purposes, provided the \nmaterial is not used for publication or sale outside of your company and you \ncomply with the following terms: You must not alter the materials in any way. \nYou must provide a reference to the URL at which the materials were originally \nfound. You must include the Microsoft copyright notice followed by “Used with \npermission from Microsoft Corporation.” Please see Use of Microsoft \nCopyrighted Content  for further information.  \nAsk questions  \nContact your local Microsoft representative  with any questions you have about \nthe topics and facts presented in this report. We hop e that each volume \nprovides a good educational summary and helps promote dialog between \npeople trying to best secure their computing devices. Thank you for trusting \nMicrosoft to be your partner in the fight against malware , hackers, and oth er \nsecurity threats.   \nFeatured intelligence  \nProtecting cloud infrastructure: Detecting and \nmitigating threats using Azure Security Center  ... 3 \nPROMETHIUM and NEODYMIUM: Parallel zero -\nday attacks targeting individuals in Europe  ........  21 \nTen years o f exploits: A long -term study of \nexploitation of vulnerabilities in Microsoft \nsoftware  ................................ ................................ .........  35 \n \n   \n2 HOW TO USE THIS REPO RT  \n   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    3 \n Protecting cloud \ninfrastructure: Detecting and \nmitigating threats  using \nAzure Security Center  \nCloud computing introduces new challenges to security organizations of all \nsizes. Enterprise IT teams have established policies and procedures designed for \nenterprise infrastructure and applications, based on their decades of s ecurity \nexperience dealing with on -premises threats. Many of these policies and \nprocedures can be used effectively in public and hybrid cloud environments. \nHowever, security teams need to keep abreast of changes in the threat \nlandscape brought on by the em ergence of cloud computing.  \nThreats against cloud deployments and infrastructure  \nNew types of threats can be related to characteristics of the public cloud only, or \nto issues introduced by connectivity between on -premises environments and \nthe public cloud.  The following subsections provide descriptions of some new \ntypes of threats.  \nDisclosing secrets on public sites  \nPublic code repositories such as GitHub  have become very popular with \ndevelopers because they enable easy collaboration and sou rce control and \nremove the responsibility for maintaining the repository infrastructure from \ndevelopers. But public repositories can be a double -edged sword. Documented \ncases exist of developers accidentally publishing secret keys on GitHub and \nother publi c code repositories, which were discovered by attackers and used to \ncompromise cloud services. Such incidents can sometimes give attackers access \nto a service’s entire account/subscription database, or allow them to misuse its \ncompute resources for malicio us purposes.   \n4 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE SE CURITY CENTER   \n Pivot back attacks  \nA pivot back attack occurs when an attacker compromises a public cloud \nresource to obtain information that they then use to attack the resource \nprovider’s on -premises environment. Public facing endpoints in the cloud are \noften under constant brute force attack through protocols such as Remote \nDesktop Protocol (RDP)  and Secure Shell (SSH). Although the overwhelming \nmajority of these attacks fail, a ve ry small percentage of them succeed. When \nthey do, an attacker can sometimes find sensitive information in unexpected or \nobscure places.  \nFor example, they  could find such secrets in a Bash session \nhistory or a text file in the root directory of the virtual machine’s \ndesktop. Such information can be used to access resources such \nas databases, SharePoint  sites, and cloud storage . If left \nunimpeded, an attacker could continue gathering information \nthat could provide greater access to the enterprise infrastructure \nand data.  \nAttacks against cloud administrators  \nTargeted attacks against on -premises and cloud infrastructures  \nalike often focus on IT administrators. The intent is to take \ncontrol of an email account that has a high probability of containing credentials \nthat can be used to gain access to the public cloud administrator portal.  \nAfter logging into the administrator portal, an attacker can gather information \nand make changes to gain access to other cloud -based resources, execute \nransomware, or even pivot back to the on -premises environment, as explained \nearlier.  \nMan in the Cloud (MitC) attacks  \nAnother new threat is p osed by what the security company Imperva has dubbed \n“Man in the Cloud,” or MitC attacks,1 In which an attacker induces a prospective \nvictim to install a piece of malware using a typical mechanism, such as an email \nwith a link to a malicious website. After  the malware is downloaded and installed, \n                                                           \n1 “Man in the Cloud (MITC) Attacks,” Imperva Hacker Intelligence Initiative Report, \nhttps://www.imperva.com/docs/HII_Man_In_The_Cloud_Attacks.pdf . Targeted attacks \nagainst on -\npremises and \ncloud infra -\nstructures often \nfocus on IT \nadministrators.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    5 \n it finds a cloud storage  folder on the user’s computer. It then switches out the \nuser’s cloud storage synchronization token with the attacker’s token.  \nAfter the token switch, the attacker will  receive copies of each file the user places \nin cloud storage , which effectively makes the attacker a “man in the middle” for \ncloud storage. One of the attacker’s advantages in this threat scenario is that the \nmalware is removed after  the token is switched out, which makes it harder to \ndetect the compromise.  \nSide -channel attacks  \nIn a side -channel attack, an attacker attempts to put a virtual machine on the \nsame physical server as the intended victim. If such a successful co -location ca n \nbe achieved, the attacker will be able to launch local attacks against the victim. \nThese attacks might include local DDoS , network sniffing, and man -in-the-\nmiddle  attacks, all of which can be used to extract information.  \nIt should be noted that side -channel attacks are not trivial. Microsoft Azure \nemploys a number of obfuscation methodologies to significantly decrease the \nchances of such an attack succeeding.  \nResource ransom  \nRansomware  is well -known in the desktop operating system space. This malware \nrestricts access to components of an operating system or to files stored on disk, \ntypically through encryption, and demands that the victim pay the attacker to \nget the keys required to restore access.  \nAttackers have made similar attempts to hold cloud resources hostage by \nbreaking in to a prospective victim’s public cloud account using any one of a \nnumber of methods, including some of the methods discussed in this section. \nWhen they have control of the account, the attackers attempt to encrypt or \notherwise restrict access to as many cloud resources as possible. The attackers \nthen require the victim to pay the ransom to  release the restricted resources.  \nThe challenge for the attacker is to inform the victim that the attack has taken \nplace, and how to pay the ransom. Because servers usually don’t have signed in \nusers, attackers need to use methods other than those used fo r desktop \nransomware. One way an attacker can inform cloud resource ransom victims is \nthrough the use of bot technology, which presents another, and perhaps \nunexpected, use case for the new and growing ecosystem of bot technologies.   \n6 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE SE CURITY CENTER   \n Cloud weaponization  \nIn the cloud weaponization threat scenario, an attacker establishes a foothold \nwithin a cloud infrastructure by compromising and taking control of a few virtual \nmachines. The attacker can then use these virtual machines to attack, \ncompromise, and control thou sands of virtual machines – some within the same \npublic cloud service provider as the initial attack, and others inside other public \ncloud service providers.  \nEach of the compromised virtual machines has malware installed that establishes \na backdoor  connection to the attacker’s command and control servers, from \nwhich the attacker can issue commands to the thousands of compromised \nvirtual machines to attack targets throughout the Internet.  \nCloud weaponization can be implemented in a number  of ways using a variety \nof attacks, including SSH, RDP , distributed denial -of-service (DDoS ), unsolicited \nmessaging (spamming), port scanning, and port sweeping.  \nAzure actively monitors for cloud weaponization. Figure 1 shows the distribution \nof the outbound attacks discovered (and in many cases mitigated) by Azure \nSecurity Cen ter’s advanced detection mechanisms.  \nFigure 1. Outbound attacks from Azure virtual machines, September 2016  \n \nFigure 2 and Figure 3 show where incoming and outgoing attacks originate \nfrom.  \nCommunication \nwith malicious IP\n41.0%RDP brute force\n25.5%Spam\n20.5%\nDDoS\n7.6%SSH brute force\n2.2%\nPort sweeping\n1.7%\nOther\n1.5% \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    7 \n Figure 2. Incoming attacks detected by Azure Security Cen ter in September 2016, by country/region of origin  \n \nFigure 3. Outgoing communication to malicious IP addresses detected by Azure Security Center in September 2016, by address \nlocation  \n \nThe cyber kill chain: On -prem ises and in the cloud  \nThe cyber kill chain is a model defined by analysts at Lockheed Martin  to aid \ndecision making with regard to detecting and responding to threats.2 This \n                                                           \n2 Eric M. Hutchins, Michael J. Cloppert, Rohan M. Amin, Ph.D., “Intelligence -Driven Computer Network Defense \nInform ed by Analysis of Adversary Campaigns and Intrusion Kill Chains,” Lockheed Martin  Corporation, 2011, \nwww.lockheedmartin.com/content/dam/lockheed/data/corporate/documents/LM -White -Paper -Intel-Driven -\nDefense.pdf . \n \n8 PROTECTING CLOUD  INFRASTRUCTURE: DET ECTING AND MITIGATIN G THREATS USING AZUR E SECURITY CENTER   \n model has become very popular with IT security groups within both small and \nlarge IT organizations. It includes the following phases:  \n Reconnaissance. The attacker determines the best targets by probing a \nnumber of online and offline resources.  \n Weaponization. Files (such as documents) can be changed in ways to  make \nthem useful “weapons” against a target system and can also be used to \nenable installation of malicious code.  \n Delivery. Weaponized files are placed on the target.  \n Exploitation. Weaponized files are “detonated” to take advantage of \nweaknesses in the t arget operating system or applications.  \n Installation. A back door mechanism is installed on the compromised device \nso that that the attacker has persistent access.  \n Command and control (C2). Malware on the compromised device \ncommunicates with a command -and-control system that provides the \nattacker with access to resources required to carry out actions.  \n Actions on objectives. The attacker moves forward to carry out objectives, \nwhich may be predefined, or evolve based on discovery.  \nThe cyber kill chain was de fined at a time when cloud computing was still \ngaining traction and did not explicitly consider the some of the unique aspects \nof cloud computing. There are some differences in how to approach the various \nphases in the kill chain between on -premises and cl oud computing scenarios.  \nFigure 4 reformulates the cyber kill chain phases to  make it easier to understand \nsome of the differences in the cyber kill chain between on -premises and cloud  \nenvironments . \nFigure 4. The cyber kill chain on -premises and in the public cloud  \nPhase  On-premises  Public cloud  \nActive reconnaissance  HUMINT, OSINT (users)  Foot printing (services)  \nDelivery  Browser, mail, USB (user \ninteraction)  Hacking (no user interaction)  \nExploitation  Client -side vulnerabilities  Server -side vulnerabilities  \nPersistence  File system based  Memory based  \nInternal reconnaissance  Custom tools  Built -in admin tools  \nLateral movement  Machine pivot  Resource pivot  \n  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    9 \n Active reconnaissance  \nDuring the active reconnaissance phase, the attacker learns about the intended \nvictim to improve their chances of a successful attack. In the on -premises world, \nthe attacker can take advantage of social networks to learn information about \nthe target that c an be used to induce the victim to download malware during \nthe delivery phase.  \nThe same ruse isn’t as easy in the cloud. There’s no social \nnetwork for servers and services to help the attacker learn \nmore about them. The attacker must go through a time and \neffort -intensive process of scanning the network, doing port \nscans to discover devices, and then testing active service \nports. All this activity provides the defender an opportunity \nfor discovering the attacker’s activities.  \nDelivery  \nThe attacker places malware on the target during the delivery phase. In the on -\npremises world, the attacker can create an email that has a malicious link to a \nwebsite or include an attachment that leads to the installation o f malicious code. \nAnother option is to copy the malware onto a USB key and then place the USB \nkey in a strategic location so that the intended target finds it. The victim then \nputs the USB key into their computer, which compromises it.  \nIn the public cloud , the attacker needs to deliver the malicious payload to a \nserver. Because it’s unlikely to find a logged on user on a server to install \nmalicious code, the attacker needs to find a way to gain direct access. One way \nto accomplish this is through a brute f orce attack. If such an attack is successful, \nthe attacker will be able to place malware on the server.  \nThe defender has an opportunity to detect the malware on the server before the \nattacker moves on to the exploitation phase.  \nExploitation  \nOn-premises ex ploitation typically focuses on client -side vulnerabilities . In the \npublic cloud the focus is on server -side vulnerabilities.  Active \nreconnaissance \nisn’t as easy in the \ncloud.   \n10 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE SE CURITY CENTER   \n Persistence  \nIn most cases, attackers of client operating systems will use tools that persist on \nthe compromised device by placing them on the local hard disk. Tools aren’t \nplaced in memory because client computers reboot relatively often for system \nupdates, policy changes, or even simple password changes or bug checks.  \nIn contrast, server uptime is much longer, which benefits attackers because they \ncan load exploit code into memory and have the code persist for an extended \nperiod of time. Longer server uptime reduces the risk of detection because there \nis no persistent code on disk that’s easy to detect.  \nAlthough traditional disk scanning techniques won’t find evidence of in -memory \nmalware, defenders can use crash dump analysis to discover and examine \nmalware that exists only in memory.  \nInternal reconnaissance  \nIn many on -premises client attack scenarios,  the attacker uses custom tools. \nBuilt -in toolsets are not as robust as those found on servers and therefore don’t \nmeet their needs.  \nSuch custom toolsets aren’t seen very often in the cloud. Attackers take \nadvantage of built -in admin tools, which are typic ally more powerful than what’s \nfound on client operating systems. These built -in admin tools help attackers by \nreducing the risk of detection; they don’t need to place custom attack tools on \ndisk.  \nBecause new attack tools aren’t being installed on cloud -based virtual machines, \nthey can’t be detected with disk scanning techniques. Instead, defenders can use \nmachine learning and behavioral analytics to differentiate between legitimate \nadmin activity and malicious activity.  \nLateral movement  \nLateral movement ac ross on -premises networks uses a machine (or virtual \nmachine) pivot. Attackers move from machine to machine by obtaining \nincreasingly privileged credentials as they expand outward. Tools such as \nmimikatz  are used by attackers to harvest su ch credentials.  \nThe machine pivot isn’t currently the norm in the cloud. There are a number of \nreasons for this, such as the fact that tenants maintain a number of resource  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    11 \n islands in the cloud. Also, in most cases there is limited trust between the cloud \nand on -premises deployments.  \nIn the cloud, the primary pivot appears to cloud resources. \nFor example, with resource pivoting, an attacker will \ncompromise an IaaS virtual machine, find credentials fo r a \nstorage service, where more credentials are discovered, \nsome of which allow access to a SQL  instance. The attacker \nhops services instead of virtual machines.  \nThis service hopping behavior enables the defender to focus on this type of \nactiv ity and enables another avenue for detection.  \nCountering threats with Azure Security Center Advanced Threat \nDetection  \nAzure Security Center helps protect, detect, and respond to security threats \nagainst Azure cloud -based resources. Security Center provide s protection by \nanalyzing the security status of Azure resources and then providing \nrecommendations on how to increase the level of security.  \nProtection is just the first level. The ability to detect that an intrusion has taken \nplace is critical. Without powerful detection, there can be no response. Azure \nSecurity Center uses advanced threat detection technologies and \nmethodologies to detect threats that would have been very difficult to find prior \nto the advent of machine learning and big data.  \nAzure Sec urity Center uses a number of methods that work together to provide \nadvanced threat detection. These methods include:  \n Atomic detections  \n Threat intelligence feeds  \n Behavioral analysis  \n Anomaly detection  \n Detection fusion  \nAtomic detections  \nAtomic detections are based on well -known malicious patterns that are \nconsistent with indicators of compromise (IoC). These patterns are not subject to \nmutation, and therefore are considered unambiguous. They can be determined Without powerful \ndetection, there \ncan be no \nresponse.   \n12 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE S ECURITY CENTER   \n by a single entity, such as a  single packet, single behavior, or single event \n(recorded in a log entry). This determination is similar to how an intrusion \ndetection system (IDS) works, but instead of using on -the-wire packet analysis, \natomic threat detection typically uses log entries . \nAtomic threat detection has a high return on investment because development \noverhead is relatively low. In addition, there is also a very low false positive rate. \nMost commodity malware can be found with atomic detections.  \nA disadvantage of atomic detect ion is that it isn’t the best method for detecting \nmore sophisticated attacks. Atomic detections are very threat specific, and so it \nis relatively easy for skilled attackers to evade them. However, this isn’t a \nproblem because Azure Security Center uses a multi -tier detection strategy that \nprovides the ability to detect attacks at multiple levels.  \nSuspicious processes provide an example of an attack type that lends itself to \natomic detection. In the example seen in Figure 5, you can see that Azure \nSecurity Center has detected that the mimikatz .exe process is running. Mimikatz \nis a tool that has been  used by malicious attackers to steal credentials from a \ncompromised machine.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    13 \n Figure 5. Azure Security Center detects and alerts on the mimikatz  malware  \n \nThreat intelligence feeds  \nAzure Security Center uses a number of threat intelligence (TI) feeds,  such as \nthose from the Microsoft Digital Crime Unit , to help detect potential threats \nagainst Azure resources. Azure Security Center uses these feeds primarily for \nbot detection.  \nSeveral actions are possible if a virt ual machine hosted on Azure appears in one \nof these feeds. For example, observing network traffic can confirm that the \npotentially compromised virtual machine is in contact with a command -and-\ncontrol server. If this network communication is successfully ve rified, it’s possible \nto take over the compromised VM’s DNS, which can provide additional insight \ninto the botnet infrastructure and IP addresses used by the command -and-\ncontrol servers.  \n \n14 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE SE CURITY CENTER   \n Similar to atomic detections, TI feeds provide a high ROI for threat  detection \nbecause of the simple logic required to attain high fidelity alerts. And as more TI \nproviders are added, more detections are possible.  \nAzure Security Center alerts users when their virtual machines are discovered to \nbe communicating with comman d-and-control servers. These connections are \nconsistent with bot links from computers infected with malware similar to Alina \nor Conficker . Figure 6 shows an alert generated by Azure Security Center based \non such a detection.  \nFigure 6. Azure Security Center showing communication with a C&C server  \n \nBehavioral analysis  \nAtomic and threat intelligence -based detections are essentially pattern \nmatching. To detect more complex threats, more advanced methods of threat \ndetection are required.  \nOne such method is behavioral analysis. In contrast to pattern matchi ng, \nbehavioral analysis moves beyond pattern matching and signatures and focuses \non the malicious behavior . This focus enables defenders to counter attackers \nwho generate an almost infinite number of variants for a particular malware. \nMalware designers can  change the hash, switch a bit or byte, change a packet or \npattern; each of these changes would require a new signature.  \nBehavioral analysis drills down to what the malware is doing  on the system. \nThere’s no need to pattern match each malware variant if th e behavior  of the \nmalware can be identified. In the final analysis, it’s the behavior that is of most \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    15 \n interest. Each malicious behavior can represent literally thousands of individual \nsignature variants. Behavioral analysis is variant resistant.  \nHowever, t here are gray areas in some of the behaviors. Such borderline cases \ncould lead to false positives. When the system detects these ambiguous \nbehaviors, Azure Security Center looks for other behaviors or detections to \nconfirm the initial suspicion. More infor mation about the confirmation process is \nprovided in the discussion on detection fusion later in this section.  \nAn example of behavioral analysis: system processes that run in an abnormal \ncontext. Azure Security Center can detect these situations and fire a n alert. In \nthe example seen in, you can see that Azure Security Center has detected that \nSVCHOST was running in an abnormal context. SVCHOST is a container process \nfor many other system processes and malware often tries to take advantage of \nthis to hide i ts activity.  \nFigure 7. Azure Security Center detects processes running in an abnormal context  \n \n \n16 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE SE CURITY CENTER   \n Anomaly detection  \nBehavioral analysis discovers  known threats by detecting known behaviors. This \nprocess is immensely useful, and significantly extends detection capabilities \nbeyond simple signature -based detections.  \nThe logical next step is to detect unknown threats, which is where anomaly \ndetection comes into play.  \nWith anomaly detection, the system builds a baseline. The baseline is defined by \nthe history of a certain element of the virtual machine. If a statistically significant \ndeviation from that baseline is detected, an alert might be generated.   \nIt’s important to note that while the system might  generate an alert, it’s possible \nthat no alert will be generated. The reason for this possibility is \nthat not all deviations from baseline are detrimental. Similar to \nother detections, when the system detects ambiguous activity, \nsupporting evidence and co rrelation with other detections are \nsought to confirm.  \nOne of the major advantages of anomaly detection is that it \nenables detections to move past what is already known, and \ndiscover possible new exploits. Anomalies can lead researchers \nto dig deeper, and come up with new analytics that define new \n“known” threats.  \nAn example of an anomaly -based detection is a brute force attack. A brute force \nattack is characterized by repeated attempts to log onto a virtual machine with \nguessed user names and passwords. Az ure Security Center can detect that the \nnumber of failed log on attempts has reached a statistically significant level and \ngenerate an alert, as seen in Figure 8.  Anomaly detection \nmakes it possible \nto move past what \nis already known, \nand discover \npossible new \nexploits.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    17 \n Figure 8. Azure Security Center detects a failed brute force attack  \n \nDetection fusion  \nAs stated several times in this section, instances exist when a specific detection is \nnon-specific, which requires supporting evidence to reduce the probability of a \nfalse positive. A very effective method for reducing ambiguity (and the false \npositive rate) is to correlate individual alerts generated throughout the cyber kill \nchain.  \nThe correlations provide the context needed to confirm that the findings of each \nof the individual alerts represents an actual security event. We call this \ncombination or correlation of multiple alerts along the kill chain a security \nincident .  \nSecurity incidents are explicitly identified in the alerts section  of Azure Security \nCenter. In addition, incidents help to reduce investigation time by providing \ninsight into what steps the attacker took, and what specific resources were \naffected.  \n \n18 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG A ND MITIGATING THREAT S USING AZURE SECURI TY CENTER   \n Incidents tie together alerts during attack progression. A simplified \ncharacterization of the cyber kill chain places incidents into one of three phases:  \n Target and attack  \n Install and exploit  \n Post breach  \nTarget and attack  \nThe target and attack phase represents the reconnaissance and deliver phases \nof the cyber kill chain.  \nFor e xample, a brute force attack against a virtual machine fits into this phase; \nalerts related to brute force attacks are placed here.  \nWhen an attacker launches a brute force attack against a virtual machine, Azure \nSecurity Center will use anomaly detection to determine whether the number of \nlogon attempts exceeds what is expected. If so, Azure Security Center surfaces a \nfailed brute force attempt alert to the user.  \nInstall and exploit  \nThe system analyzes the results of the initial attack during the install and exploit \nphase.  \nSome of the things considered during this phase include:  \n Evidence of existing malware signatures (using Microsoft antimalware or \npartner solutions)  \n In-memory malware (using crash dump analysis)  \n Suspicious process execution (using behavioral analysis)  \n Lateral movement  \n Internal reconnaissance  \nSuppose an attacker were able to gain access to a virtual machine using a brute \nforce attack (which would have taken place during the target and attack phase). \nMalware is installed on the machi ne (during the install and exploit phase) and \nthe malware ends up causing a process to crash.  \nAzure Security Center will collect a copy of the crash dump and scan it for \nevidence of in -memory malware. If an exploit (such as malicious shellcode) is  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    19 \n found, an alert will be generated and assigned to the target and attack phase of \nthe kill chain.  \nPost breach  \nAttackers execute their plans during the post breach phase, which includes all \nthe activities attackers carry out using automated or manual processes on \ncompromised virtual machines.  \nFor example, a virtual machine is compromised by a brute force attack during \nthe target and attack phase and an alert is generated. The attacker installs \nmalware, and another alert is generated during the install and exploit ph ase. \nFinally, the malware generates large amounts of SMTP traffic. This SMTP traffic is \ncorrelated with the Office 365  SPAM database to determine whether this traffic \nis legitimate or SPAM. If the assessment is SPAM, an alert is generate d by Azure \nSecurity Center.  \nIn addition to these alerts, an incident  (defined as a collection of alerts) is \ngenerated by Azure Security Center indicating a very high probability that a \nsuccessful compromise has taken place because of the correlation and \nverification of and by multiple alerts.  \nFigure 9 shows a number of security incidents as reported by Azure Security \nCenter.  \nFigure 9. A list of security incidents in Azure Security Center  \n \nAzure Security Center also provides the ability to drill down on a security \nincident and provide detailed information on the individual alerts that were \ncorrelated to create the incident, as sh own in Figure 9. \n \n20 PROTECTING CLOUD INF RASTRUCTURE: DETECTI NG AND MITIGATING TH REATS USING AZURE SE CURITY CENTER   \n Figure 10. Azure Security Center provides additional information about security events  \n \nSummary  \nThe cloud introduces a number of new attack vectors that were previously \nunavailable to intruders in the on -premises world. These new attack types \nrequire that we evolve our methods of attack detection. Detecting cloud -based \nattacks requires us to address and act on the differences between the on -\npremises and cloud kill chains. There are also security benefits from running \nyour workloads in the cloud, as you’ll benefit from Microsoft’s comprehensive \nthreat intelligence and security expertise. Azure Security  Center takes advantage \nof a multi -layered approach to threat detection, which ranges from rudimentary \nsignature based systems all the way up to machine learning driven approaches \nand detection fusion. See azure.m icrosoft.com  for more details and to take \nadvantage of a 90 day free trial of Azure Security Center.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    21 \n PROMETHIUM and \nNEODYMIUM: Parallel zero -\nday attacks targeting \nindividua ls in Europe  \nWindows Defender  ATP \nMicrosoft proactively monitors the threat landscape for emerging threats. Part \nof this job involves observing the activities of targeted activity groups, which are \noften the first ones to introduce  new exploits and techniques that are later used \nby other attackers. The previous  two volumes of the Microsoft Security \nIntelligence Report  explored the activities  of two such groups, code -named  \nSTRONTIUM  and PLATINUM , which used previously unknown vulnerabilities  and \naggressive, persistent techniques to target specific individuals and institutions —\noften including military installations, intelligence agencies , and other \ngovernment bodies.  \nThis volume chronicles two activity groups, code -named PROMETHIUM  and \nNEODYMIUM , both of which target individuals in a specific area of Europe. \nAlthough most malware  today either seeks monetary gain or conducts \nespionage for economic advant age, both of these activity groups appear to \nseek information about specific individuals.  \nIn May 2016, both PROMETHIUM  and NEODYMIUM  were observed to launch \nattack campaigns. These campaigns used completely distinct infrastructure and \nprimary malware , which indicated a lack of association at the operational level. \nHowever, the similarity in the campaigns’ victim locale, timing, and use of the \nsame zero -day exploit prior to public disclosure strongly indicates that the \nactivity groups may be related at a higher organizational tier.  \nMicrosoft is sharing information about these groups  to raise awareness of their \nactivities, and to help individuals and organizations implement existing \nmitigation options that significantly reduce risk from these attack groups and \nother similar groups.   \n22 PROMETHIUM AND NEODY MIUM: PARALLEL ZERO -DAY ATTACKS TARGETIN G INDIVIDUALS IN EUR OPE   \n Activity Group Profile: PROMETHIUM  \nCampaign summary : PROMETHIUM  is an activity group that has been active \nsince at least 2012. In 2016, an attack campaign by this group was recorded in \nearly May that made use of an exploit for CVE-2016 -4117, a vulnerability in \nAdobe Flash Player , which at the time was both unknown and unpatched. \nAdobe promptly and publicly acknowledged the zero -day vulnerability and \npushed a security update.  \nThe attack itself began with certain individuals receiving links in \ninstant messenger clients. These links led to malicious \ndocuments that invoked exploit code and eventually  executed a \npiece of malware  called Truvasys  on unsuspecting victims’ \ncomputers.  \nAdministrators and users wondering whether they were \ntargeted by PROMETHIUM can scan their network by using the \nindicators listed in the appen dix, by using Windows Defender  to \nexamine their logs for “Truvasys ,” or by searching for PROMETHIUM in their \nWindows Defender Advanced Threat Protection  product console alerts.  \nAttack deta ils: Truvasys  has been previously documented  by peer organizations \nin the security industry. The  malware  and its developers have been active for a \nfew years and have conducted multiple attack campaigns by masquerading as \ncommon computer utilities such as WinUtils , TrueCrypt , WinRAR , and San Disk. \nIn each of the campaigns, the Truvasys malware was updated to include \nadditional features, showing close collaboration between the activity groups \nbehind the campaigns and the developers of the malware.  \nTruvasys  is a collection of modules written in the Delphi  programming language, \na variant of Pascal. It runs on 32 -bit and 64 -bit editions of multiple versions of \nWindows, including Windows Vista , Windows 7 , Windows 8 , and Windows 10 , in \nboth standard user and administrator modes. It includes a number of features \ndesigned to evade detection, including virtual environment detection and \ntampering with security software.  \nTruva sys connects to a remote command and control (C&C) server to retrieve \ninstructions from an attacker, who can use the malware  to execute arbitrary \nfunctionality on the compromised computer.  PROMETHIUM and \nNEODYMIUM both  \ntarget individuals \nin a specific area of \nEurope .  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    23 \n This malware  famil y has targeted individuals through the combined use of spear \nphishing  and watering hole techniques for a number of years. In most cases, \nTruvasys  is embedded with legitimate installers of applications, compr omising \nindividual computers by tricking users into running the installers. One campaign \ninvolved a fake Adobe Flash  Player  installer, with a social engineering lure in \nTurkish . \nFigure 11. In one campaign, Truvasys  was distributed via social engineering lures in the Turkish language  \n \nThe language used in this example is consistent with the geography of Truvasys  \nvictims, as observed over the years. Most Truvasys activities have been observed \nacross western Europe with a large majority of computers using the Turkish \nlocale  setting, which suggests that most of them are Turkish citizens or \nexpatriates.  \nWhile studying Truvasys , Microsoft uncovered a previously undocumented \npiece of malware  known as Myntor  that is a completely separate malware family. \nMyntor is pushed onto victims’ computers that are selected by an unknown logic \ndevised by PROMETHIUM.  \nActivity Group Profile: NEODYMIUM  \nCampaign summary : NEODYMIUM is an activity group that, like PROMETHIUM, \nconducted an attack campaign in early May 2016. NEODYMIUM also used the \nexact same CVE -2016 -4117 exploit code that PROMETHIUM  used, prior to public \nknowledge of the vulnerability’s existence.  \n \n24 PROMETHIUM AND NEOD YMIUM: PARALLEL ZERO -DAY ATTACKS TARGETI NG INDIVIDUALS IN EU ROPE   \n NEODYMIUM used a backdoor  detected by Windows Defender  as Wingbird , \nwhose characteristics closely match  FinFisher , a government -grade commercial \nsurveillance  package . Data about Wingbird activity indicates that it is typically \nused to attack individuals and individual computers instead of networks.  \nAdministrators and users wondering whether they were targeted by \nNEODYMIUM can scan their networks by using the indicators listed in the \nappendix, by using Window s Defender  to examine their logs for “Wingbird ,” or \nby searching for NEODYMIUM in their Windows Defender Advanced Threat \nProtection  product console alerts.  \nAttack details : Target individuals were sent customized spear phishing  emails. \nAn image of one such cus tomized email from this campaign is shown in the \nfollowing figure.  \nFigure 12. The spear phishing  campaign that NEODYMIUM launched in May 2016 is highly customized to target individual s; a large \nportion of the email has been redacted to protect the privacy of the targeted individual , which  shows the extent of personalization of \nthe malicious email  \n \nWhen the user opened the attachment, a blank document displayed. In the \nbackground, a series of events, including the use of the CVE -2016 -4117 zero -day \nexploit, ultimately led to the download and execution of a backdoor . The exploit \ncode executes only if the Microsoft Office  Protected  View setting is turned off. \nBy default, documents opened from the Internet (using web browsers or email \nclients) are opened in protected vie w mode, which prevents execution of \nembedded objects and potentially malicious code.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    25 \n Figure 13. The NEODYMIUM attack chain shows how the exploit CVE -2016 -4117 was used to infect target individuals’ computers  \n \nThe backdoor  payload showed behavior that matched publicly documented \ntraits of a program called FinFisher , a government -grade commercial \nsurveillance  package marketed to law enforcement and intelligence agencies . \nThe publisher, FinFisher GmbH , claims  that it sells the software exclusively to \ngovernment agencies for use in targeted and lawful criminal investigations . It is \nlikely that the backdoor  payload is a relatively new version of the commercial \nspyware.   \nThe apparent use of a version of FinFisher  suggest s that the exploit and the \nspear fishing  campaign that delivered it were the work of an attack group \nprobably connected in som e way to a state actor.   \nWindows Defender  detects the backdoor  payload as Wingbird . Visibility into the \nusage of Wingbird shows it has been used only against individuals, not against \ncomputers tha t are part of an organization’s network.  \nResearch into Wingbird  from May through November 2016 showed only tens of \nvictims, predominantly in Turkey . \n \n26 PROMETHIUM AND NEODY MIUM: PARALLEL ZERO -DAY ATTACKS TARGETIN G INDIVIDUALS IN EUR OPE   \n Figure 14. NEODYMIUM victim breakdown, by country for May through November 2016  \n \nLike Truvasys , Wingbird  is designed to run on both 32 -bit and 64 -bit Windows \nplatforms. The malware  is a native 32 -bit PE executable that installs a num ber of \nadditional executables and files. These components are all embedded within the \ndropper  itself, which allows the malware to avoid downloading components and \nconsequently attracting attention.  \nAfter the backdoor  exec utes, the malware  checks the underlying operating \nsystem version and, depending on what platform it is running on, drops several \nfiles to % ProgramData %\\RpcSrv  (on 32 -bit computers) or \n%ProgramData %\\AuditService  (on 64 -bit computers).  \nIn addition, on 64 -bit computers the dropper  creates a secondary native 64 -bit \npayload executable, referred to in the following diagram as [Payload64].exe . The \n32-bit processes are isolated from 64 -bit processes and restricted in the actions \nthey can perform. By providing a separate 64 -bit payload, Wingbird  attempts to \ninject code into 64 -bit processes as well as 32 -bit processes.  \nTurkey\n84%US\n6%Germany\n5%UK\n5% \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    27 \n Figure 15. Wingbird  behaves differently on 32-bit compu ters and 64-bit computers  \n \nThe main goal of the original dropper  is to indirectly deliver executables  by \ninjecting malicious code and data into two Windows system processes, \nServices.exe  and Winlogon.exe . The primary Wingbird  payload uses  anti-VM, \nanti-debugging, and anti -AV mechanisms to evade discovery and analysis . \nOn 32 -bit computers , the original dropper  creates three  files, as shown in Figure \n5. Of the three files, the only true binary is rpcsrv.dat , a kernel rootkit  that \nenables the attacker to load and run privileged unsigned code. The other two \nfiles, installer.cab and the randomly named [xxxxx].cab, are encrypted data files.  \nWingbird  attempts to detect and evade s ecurity products . For example, some of \nthe strings found in running process es, such as avcuf32.dll and <un -wnd -\n%.08x>, indicate that the malware  checks for the presence of one of several \nversions of Bitdefender security software.  \nThrough a series of actions and code injections, the original malware  installs the \nrootkit  driver, rpcsrv.dat, a non -standard kernel driver. The attackers know that \n64-bit computers are much more secure because they prevent loading o f \nunsigned drivers, so they do not even attempt this technique on 64 -bit systems.  \nThe malware searches  for a file called ico_ty23.ico, which is publicly documented  \nas the filename one of the key user mode DLL components of FinFisher . \n \n28 PROMETHIUM AND NEODY MIUM: PARALLEL ZERO -DAY ATTACKS TARGETIN G INDIVIDUALS IN EUR OPE   \n On 64 -bit computers , the installation of Wingbird  is a lot more complicated. The \n64-bit version of the original payload creates a n ew folder, \n%ProgramData %\\AuditService , and copies the Windows system file lsass.exe \nfrom %SystemFolder%  into the new folder . At the same time, the payload drops \na malicious file known as  sspisrv.dll alongside the copy of lsass.exe. This \nsspisrv.dll  file sh ares its name with a code library that implements several APIs \nthat lsass.exe  is designed to import.  \nFigure 16. Wingbird  payload’s behavior on 64 -bit computers  \n \nThe original 32 -bit dropper  continues monitoring until the folder and file are \ncreated. After the 64 -bit payload is done copying files, its parent process (the \n32-bit dropper ) deletes it. The parent process then deletes itself as an attempt to \nhide its tracks and pr event analysis by security professionals.  \nThe 64 -bit malware  then injects code into services.exe , the Service Control \nManager, to register a service using a clean lsass.exe that would load the \nmalicious sspisrv.dll , which would then inject malicious code into svchost.exe . \nThe constant delegation of malicious code control from one process to the next \nis a way to hide execution of unwanted code and make it extremely difficult to \ndetect the presence of Wingbird . \nThis version of  Wingbird  has also been observed with the ability to execute \nhighly privileged kernel code by injecting code through vulnerable signed \n\\AuditService\\LSASS.exe\nInfected SvcHost.exe[Payload32].exe detects it \nexecutes on 64-bit platform and \ndrops  [Payload64].exe[Payload32].exe starts \nup[Payload64.exe] \n Drops SSPISRV.dll \n Copies a clean LSASS.exe\n Injects code into winlogon.exe \nand services.exeThe infected services.exe \nregisters a new service using the \ncopy of the clean  LSASS.exe\nVulnerable Digitally \nSigned Kernel Driver\\AuditService\\LSASS.exe \nstarts up and loads \nSSPISRV.dll\nSSPISRV.dll injects code into \nsvchost.exeThe implant in the infected \nSvcHost.exe exploits a vulnerable \nkernel driver\n[Payload64]\n Services.exe\nSSPISRV.dll\n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    29 \n drivers. It maintains a list of legitimate yet vulnerable drivers that can be \nexploit ed to inject and ex ecute kernel code.   \nIt appears that Wingbird  obfuscates its code at source level, rather than binary \nlevel, to evade analysis tools and security solutions.  \nSimilar to the 32 -bit version, this version of Wingbird  performs a check for a file \nnamed ico_sf46.ico , which is a known component of FinFisher . \nMitigation  \nStopping zero -day exploits in Windows 10  \nPROMETHIUM and NEODYMIUM both used a zero -day \nexploit that executed code to download a malicious payload. \nProtecte d view , a security feature that was introduced in \nMicrosoft Office  2010, prevents the malicious Flash code \nfrom loading when the document is opened. Control Flow \nGuard , a security feature that is turned on by default in \nWindows 10  and Microsoft Office 365  64-bit version, can \nhelp by making it more difficult to exploit memory corruption \nvulnerabilities . The Flash vulnerability CVE-2016 -4117 is a type \nconfusion vulnerability in  the DeleteRangeTimelineOperation \nclass. The referenced exploit only reliably works  on specific Windows platform s \nbecause of  a ByteArray mitigation in Flash Player , which causes Microsoft to \nbelieve  that the exploit was authored with pre -knowledge o f the victim’s \ncomputer  information. The ex ploit uses the Adobe Flash Player ’s Function object \nvftable corruption method to achieve code execution.  \nBecause 64 -bit versions of Windows 10  enforce driver signing, malicious code \nthat attempts to load a loca lly made, untrusted driver will be stopped in its \ntracks.  \nIn addition, the technique of using lsass.exe  to load a malicious DLL files can be \nmitigated by an optional feature introduced in Windows 10  called Credential \nGuard . Microsoft highly recommends that network administrators test and \nenable this feature. In Wingbird ’s case, the malicious sspisrv.dll  will not load \nbecause it wasn’t signed by a trusted certificate.  \nThe Hypervisor Code Integrity  (HVCI ) service enables the Device Guard feature \nin Windows 10  to help protect kernel mode processes and drivers from Control Flow \nGuard makes it \nmore difficult to \nexploit memory \ncorruption \nvulnerabilities.   \n30 PROMETHIUM AND  NEODYMIUM: PARALLEL  ZERO -DAY ATTACKS TA RGETING INDIVIDUALS IN EUROPE   \n vulnerability exploits and zero -day exploits. HVCI uses the process or’s \nfunctionality to force all software running in kernel mode to safely allocate \nmemory, which means that after memory has been allocated, its state must be \nchanged from writable to read -only or execute -only. By forcing memory into \nthese states, HVCI hel ps ensure that attacks are unable to inject malicious code \ninto kernel mode processes and drivers through techniques such as buffer \noverflows and heap spraying.  \nDetecting malicious behavior  with Windows Defender Advanced Threat \nProtection  \nWindows Defender Advanced Threat Protection  (ATP) is a new built -in detection \nservice that ships natively with Windows 10  and helps enterprises to detect \ntargeted and advanced attacks. When activated, it  captures behavioral signals \nfrom the endpoint and then uses cloud -based security machine learning \nanalytics and threat intelligence to flag suspicious attack -related activities.  \nThe NEODYMIUM attack campaign executed the following five malicious \nbehavior s, all of whichare detected by Windows Defender ATP : \n1. Zero -day exploit code causes a Microsoft Office  file to generate and open \nan executable file.  \nFigure 17. Windows Defender ATP shows an alert for an exploit resulting in a malicious file executing on an endpoint  \n \n2. Zero -day exploit code allows an e xecutable file  to gain  higher privi lege s. \n3. A suspicious file  self-deletes , a behavior associated with malware that erases \ntraces of infection as a way to evade forensic analysis.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    31 \n Figure 18. Windows Defender ATP shows an alert for processes that attempt self -deletion  \n \n4. Malware executes DLL -side loading, a technique in which attackers replace \nlegitimate DLL files in non -standard folders with malicious ones so that the \nmalicious file is loaded when the application or operating system starts.  \nFigure 19. Windows Defender ATP shows an alert for DLL -side loading  \n \n5. Malware injects code into legitimate processes, which is usually done to load \nthe malware when system processes run.  \nFigure 20. Windows Defender ATP shows an alert for suspicious code injections  \n \nWindows Defender Advanced Threat Protection  alerts enterprise securi ty teams \nof detections and allows them to investigate and respond to each security \nincident in a timely and effective manner. The service complements and works \n \n32 PROMETHIUM AND NEODY MIUM: PARALLEL ZERO -DAY ATTACKS TARGETIN G INDIVIDUALS IN EUR OPE   \n along with Windows Defender or third -party antivirus security solutions. \nAdditional information about the service is available here . \nSummary  \nIn May 2016, two apparently unrelated activity groups, PROMETHIUM and \nNEODYMIUM, conducted attack campaigns in Europe that used the same zero -\nday exploit while the vulnerability was publicly  unknown. Although the use of the \nsame exploit code could be attributed to a number of coincidences, the timing \nof the campaigns and victim demographics lend credence to the theory that the \ncampaigns were associated.  \nOne threat family, Wingbird , appears to be a version of a commercially available \ntool sold to organizations conducting lawful interception. Wingbird is a fairly \nadvanced threat family that must have required the authors several months’ \nworth of man -hours to generate. Even so, W ingbird as -is does not execute in \nWindows 10 . \nEach activity group uses a unique set of tools and methods to perform actions \nlike lateral movement and data exfiltration. One of the purposes of tracking \nactivity groups is to research uniqu e attacker techniques and to develop \nmitigations for the native operating system. Microsoft has built  proactive \nsecurity mitigations  into its products, which increases the investment barrier for \nattackers who try to victimize users of the latest versions o f Windows.  \nThe Windows security service Windows Defender  ATP provides an additional \npost -breach layer of security to enterprises organizations. As this article shows, \nproactive mitigation in Wind ows 10  and Office on 64 -bit systems does not allow \nthe exploit vector for these two attack campaigns or the exploitation of kernel \ndrivers to succeed. In addition, Windows Defender ATP detects suspicious \nevents on endpoints, alerts secur ity operators about undesired activities, and \nprovides the required tool to respond.   \nIndicators  \nThe following table includes a sampling of indicators on the malware  used by  \nPROMETHIUM and NEODYMIUM . This is just a snippet of the informatio n \ncollected while studying these malware and the corresponding attack \ncampaigns.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    33 \n Figure 21. PROMETHIUM and NEODYMIUM indicators  \nSHA1 or other indicator  Association  \n21a3862dfe21d6b216359c6baa3d3c2beb50c7a3  Malicious document  \n0b16135d008f6952df0caca104449c33d736e5fc  Malicious document  \n21a3862dfe21d6b216359c6baa3d3c2beb50c7a3  Malicious document  \n 0852aa6b8df78069d75fa2f09b53d4476cdd252b  Malicious document  \n05dbe59a7690e28ca295e0f939a0c1213cb42eb0  Wingbird  \n3c2c 7ac8fddbc3ee25ce0f73f01e668855ccdb80  Wingbird  \n211a111586cb5914876adb929ccae736928d8363  Wingbird  \nc972bf5751438c99fe3e02ecacf6fa759388c40e  Wingbird  \n72722073f0adba1919dc31ffa26638555ad5867f  Wingbird  \n2fb49455d65ad8baf18e3c604cd1b992b7ebbefa  Wingbird  \nf41b999f41312f2a0fe4eaf08e90824f73e0e186  Wingbird  \nd8d54574a082162220c3c2f3d3f4c1b1bd4d6255  Wingbird  \n86580603f5e1d817af87e8bf3ba4dc4ea9e306 9d Wingbird  \ncb5d0d1d557a1266f77357a951358c78196e97ff  Wingbird  \nd75d12d250e7a36f9ef1173d630a0059b8ea5349  Wingbird  \na77db6e89d604eabf29a6114a30345a705b05107  Wingbird  \nb32b0d52fff7c09c60bb64bc396dc7522a457399  Wingbird  \nade19bde9716770bef84ce4414a45c0462c2eba2  Wingbird  \ne4d82ab117b86fd44c02ff3289976d15a9d9ced4  Wingbird  \n88cb78d99fa0275db8123c17a2bd3b3d58f541da  Wingbird  \na248f9ad5d757d589a06a253dc46637f4128eea9  Wingbird  \n532b0d52fff7c09c60bb64bc396dc7522a457399  Wingbird  \nsrv601[.]ddns[.]net  Wingbird  \nsrv602 [.]ddns[.]net  Wingbird  \n980d96d83f0bae8132fd13eb7d0e799999141492  Truvasys  \n7ab2d32b2603c2b12e814264230572584e157d42  Truvasys  \na4f72ee3d337e5a0db78f33fd31958b41e9e9d4f  Truvasys  \n6de50cf42cd3ff8429a405e9c62d38c11fb2edd6                Truvasys  \n8d847ea0ffa06b8d48bbd9c943c50b05b23d310b              Truvasys  \n7047ed9ae510377f4625db256e52af02694ef153  Truvasys  \nbb66c7d655021234ede01bc59e808c6b8f3fa91b  Truvasys   \n34 PROMETHIUM AND NEODY MIUM: PARALLEL ZERO -DAY ATTACKS TARGETIN G INDIVIDUALS IN EUR OPE   \n SHA1 or other indicator  Association  \nwww[.]updatesync[.]com  Truvasys  \nwww[.]svnservices[.]com  Truvasys  \nftp[.]mynetenergy[.]com  Truvasys  \nwww[.]windriversupport[.]com  Truvasy s \nwww[.]truecrypte[.]org  Truvasys  \nwww[.]edicupd002[.]com  Truvasys  \n \n  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    35 \n Ten years of exploits: A long -\nterm study of exploitation of \nvulnerabilities in Microsoft \nsoftware  \n \nMicrosoft researche rs conducted a study of security vulnerabilities and \nthe exploitation of the most severe vulnerabilities in Microsoft software \nover a 10 -year period ending in 2015. In the second half of the past \ndecade there have been an increasing number of vulnerability  disclosures \nacross the entire industry. However, despite the increasing number of \ndisclosures, the number of remote code execution  (RCE ) and elevation of \nprivilege  (EOP ) vulnerabilities in Microsoft software has declined \nsignificantly. The results of the study suggest that while the risk posed by \nvulnerabilities appeared to increase in recent years, the actualized risk of \nexploited vulnerabilities in Microsoft software has steadily declined.  \nIt is impossible to completely prevent vulnerabilities from being introduced \nduring the development of large -scale software projects. As long as human \nbeings write software code, no software is perfect and mistakes that lead to \nimperfections in software will be made. This fact is reflected in the long -term \nindustry vulnerability disclosure data illustrated in Figure 22. Thousands of \nvulnerabilities are publicly disclosed across the industry every year. The 4,512 \nvulnerabilities disclosed during the second half of 2014 ( 2H14 ) is the largest \nnumber of vulnera bilities disclosed in any half -year period since the Common \nVulnerabilities and Exposures  system was launched in 1999.   \n36 TEN YEARS  OF EXPLOITS: A LONG -TERM STUDY OF EXPLO ITATION OF VULNERABI LITIES IN MICROSOFT SOFTWARE   \n Figure 22. Industrywide vuln erability disclosures, 2006 -2015  \n \nMicrosoft researchers performed a study on the exploitation of vulnerabilities in \nMicrosoft software that enabled remote code execution  (RCE ) and/or elevation \nof privilege  (EOP ) spanning the last 10 years. These vulnerabilities represent the \nvulnerabilities in Microsoft software with the highest severity scores and are \ngenerally the vulnerabilities that security and risk professionals are most \nconcerned with.  \n05001,0001,5002,0002,5003,0003,5004,0004,5005,000\n1H 2H 1H 2H 1H 2H 1H 2H 1H 2H 1H 2H 1H 2H 1H 2H 1H 2H 1H 2H\n2006 2007 2008 2009 2010 2011 2012 2013 2014 2015Industrywide vulnerability disclosures \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    37 \n Figure 23. Remote code executable (RCE ) and elevation of privilege  (EOP ) vulnerability disclosures in Microsoft software known to be \nexploited before the corresponding security update release or within 30 days afterward, 2006 –2015  \n \n Over the past 6 years, Microsoft has observed a sustained decrease in both \nthe percentage and number of vulnerabilities for which there is evidence of \ntheir being exploited within 30 days of a security update being available. \n(Exploitation risk tends to decrease significantly after 30 days, as most \norganizations have typically tested and deployed the update by that point.)  \n In 2015, only 5% of Microsoft remote code execution (RCE ) and elevation of \nprivilege (EOP ) vulnerabilities had evidence of being exploited within 30 \ndays of a security update being available.  \n Microsoft believes that multiple factors have contributed to this decline, such \nas additional hardening measures that are present in the latest versions of \nMicrosoft products and the Security Development Lifecycle (SDL) . \n2418 19 2561\n4325\n21 18 189793 114 130157\n156116\n266 282 397\n0%10%20%30%40%50%60%70%80%90%100%\n2006 2007 2008 2009 2010 2011 2012 2013 2014 2015Percent of RCE and EOP CVEs\nExploited within 30 days of patch Not known to be exploited \n38 TEN YEARS OF EXPLOIT S: A LONG -TERM STUDY  OF EXPLOITATION OF VULNERABILITIES IN M ICROSOFT SOFTWARE   \n Figure 24. Timing of the exploitation of RCE  and EOP  vulnerabilities in Microsoft software per year,  2006 –2015  \n \n Over the last six years, it has been observed that if Microsoft vulnerabilities \nare exploited at all, they are most likely to be exploited as zero -day exploits \n– that is, exploited before a security update is available.  \n This observation suggests that exploiting vulnerabilities after a security \nupdate has been released is not generally seen as desirable by attackers. \nOne contributing factor  might be the mature security update release and \ndeployment model that Microsoft uses to help ensure customers are kept \nup-to-date.  \nEach year over the past decade, thousands of vulnerability disclosures have \nbeen made across the industry. A series of vulnerability disclosure increases \nacross the industry since the second half of 2011 culminated in the largest \nnumber of vulnerabilities disclosed in any half -year period since the CVE system \nwas launched in 1999, with 4,512 vulnerabilities disclosed du ring the second half \nof 2014.  \nDespite these increases, the number of RCE  and EOP  vulnerabilities in Microsoft \nsoftware for which there was evidence of  their being exploited decreased by \nalmost 60% during the same period, and decreased by more than 70% since \n2010. This evidence suggests that although potential risk due to vulnerabilities \n17 14\n416\n2019131215\n127 4\n15941241293\n65561011\n145 4\n6 6\n0%10%20%30%40%50%60%70%80%90%100%\n2006 2007 2008 2009 2010 2011 2012 2013 2014 2015Percent of RCE and EOP CVEs\nBefore patch (0-day) Within 30 days of patch More than 30 days after patch \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    39 \n has appeared to increase in recent years, the actualized risk cause d by exploited \nvulnerabilities in Microsoft software has declined year over year.  \nNewer software typically has fewer vulnerabilities than older \nsoftware. Newer software that uses mitigations built into the \nWindows platform, such as Address Space Layout \nRandomization  (ASLR ), Data Execution Prevention (DEP ), \nStructured Exception Handler Overwrite Protection (SEHOP ), \nand others, make it harder to successfully exploit \nvulnerabilities that do exist. Microsoft Edge  has advan ced \nsecurity technologies  and significantly less of an attack \nsurface than older browsers, making exploitation much more \ndifficult and helping make the web a safer experience.3 \nWindows 10  has been hardened against attacks from every \ndirection and at every layer of the stack; more information is available here .4 The \nMicrosoft cloud provides a more holistic security platform, with unique insights \ninto the threat landscape, informed by trillions of signals from billions of sources, \nthan what most customers have in their on -premises IT environmen ts today. For \nmany organizations, these capabilities make the cloud a key part of their risk \nmanagement strategy.  \n \n                                                           \n3 https://blogs.windows.com/msedgedev/201 5/05/11/microsoft -edge -building -a-safer -browser/   \n4 https://blogs.windows.com/business/2016/06/29/advancing -security -for-consumers -and-enterprises -at-\nevery -layer -of-the-windows -10-stack/   Mitigations such as \nASLR, DEP, and \nSEHOP make it \nharder to \nsuccessfully exploit \nvulnerabilities that \ndo exist.   \nWorldwide threat \nassessment  \nVulnerabilities  ................................ ..............................  43 \nExploits  ................................ ................................ ............  51 \nMalicious and unwanted software  .........................  71 \nMalicious websites  ................................ .....................  111 \nMalware at Microsoft: Dealing with threats in the \nMicrosoft environment  ................................ ............  123 \n \n   \n42 TEN YEARS OF EXPLOIT S: A LONG -TERM STUDY  OF EXPLOITATION OF VUL NERABILITIES IN MICR OSOFT SOFTWARE   \n   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    43 \n Vulnerabilities  \nVulnerabilities , in the context of computer security,  are \nweaknesses in software that could allow  an attacker to \ncompromise the integrity, availa bility, or c onfidentiality of the \nsoftware . Some of the worst vulnerabilities allow attackers to \nexploit the compromised system by causing it to run malicious \ncode without the user’s knowledge . \nIndustry -wide vulnerability disclosures  \nA disclosure , as the term is used in the Microsoft Security Intelligence Report , is \nthe revelation of a software vulnerability to the public at large. Disclosures can \ncome from a variety of sources, including publishers of the affected software , \nsecurity software vendors, independent security researchers , and even malware  \ncreators.  \nThe information in this section is compiled from vulnerability disclosure data that \nis published in the National Vulnerability Database (NVD ), the US government ’s \nrepository of standards -based vulnerability management data  at nvd.nist.gov . \nThe NVD  represents all disclosures that have a published CVE (Common \nVulnerabilities and Exposures ) identifier.5  \nFigure 25 illustrates the number of vulnerability disclosures across the software \nindustry for each half -year period since 2H13 . (See “ Appendix A: Threat naming \nconventions ” on page 135 for an explanation of the reporting period \nnomenclature used in this report.)  \n                                                           \n5 CVE entries are subject to ongoing revision as software vendors and security researchers publish more \ninformation abou t vulnerabilities . For this reason, the statistics presented here may differ slightly from \ncomparable statistics published in previous volumes of the Microsoft Security Intelligence Report .  \n44 VULNERABILITIES   \n Figure 25. Industry wide vulnerability disclosur es, 2H13 –1H16  \n \n Vulnerability disclosures across the industry decreased 9.8 percent between \n2H15 and 1H16, to just above 3,000.  \n Prior to the decrease in 1H16, vulnerability disclosure s had trended generally \nupward over the past three years, with the exception of a spike in 2H14 \ncaused by a research project at the Computer Emergency Response Team \n(CERT) Coordination Center (CERT/CC) that uncovered SSL -related man -in-\nthe-middle  vulnerabilities in a large number of Android  apps in the Google  \nPlay Store .  \nVulnerability severity  \nThe Common Vulnerability Scoring System (CVSS ) is a standardized, platform -\nindependent scoring system for rating IT vulnerabilities. The CVSS  base metric \nassigns a numeric value between 0 and 10 to vulnerabilities based on factors \nsuch as potential impact, access vectors, and ease of exploitation , with higher \nscores representing greater severity. (See  A Complete Guide to the Common \nVulnerability Scoring System Version 2.0  at first.org for more information.)  \n05001,0001,5002,0002,5003,0003,5004,0004,5005,000\n2H13 1H14 2H14 1H15 2H15 1H16Industrywide vulnerability disclosures \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    45 \n Figure 26. Industry wide vulnerability disclosures by s everity, 2H13 –1H16  \n \n Disclosures of high -severity vulnerabilities —those with CVSS  scores of 7 and \nabove —decreased 16.9 percent across the industry in 1H16, to account for \n38.3 percent of al l vulnerabilities, smaller than in 2H15 but larger than in any \nother period over the last several years.  \n Of these, the highest severity vulnerabilities —those rated 9.9 or higher —\naccounted for more than a third of all high -severity vulnerabilities, or 10.9 \npercent of vulnerabilities overall, as shown in Figure  27. \nFigure  27. Industry wide vulnerability disclosures in 1H16 , by severity  \n \n05001,0001,5002,0002,5003,0003,500\n2H13 1H14 2H14 1H15 2H15 1H16Industrywide vulnerability disclosuresMedium (4–6.9)\nLow (0–3.9)High (7–10)\nLow (0–\n3.9)\n9.0%Medium (4 –6.9)\n52.7%\nHigh (7–9.8)\n27.4%\nHigh (9.9 +)\n10.9% \n46 VULNERABILITIES   \n  Disclosures of medium - and low -severity vulnerabilities also decreased \nslightly between 2H15 and 1H16, and accounted for 52.7 percent and 9.0 \npercent of all vulnerabilities, respectively.  \nVulnerability complexity  \nSome vulnerabilities are easier to exploit than others, and vulnerability \ncomplexity is an important factor to consider in determining the magnitude of \nthe threat that a vulnerability poses. A h igh-severity vulnerability that can only \nbe exploited under very specific and rare circumstances might require less \nimmediate attention than a lower -severity vulnerability that can be exploited \nmore easily.  \nThe CVSS  assigns each vulnerability a complexity ranking of Low, Medium, or \nHigh. (See  A Complete Guide to the Common Vulnerability Scoring System \nVersion 2.0  at first.org  for more information about the CVSS  complexity ranking \nsystem.) Figure 28 shows complexity trends for vulnerabilities dis closed since \n2H13 . Note that Low complexity in Figure 28 indicates greater risk, just as High \nseverity indicates greater risk in  Figure 26. \nFigure 28. Industry wide vulnerability disclosures by access comp lexity, 2H13 –1H16  \n \n Disclosures of low -complexity vulnerabilities —those that are the easi est to \nexploit —accounted for the largest category of disclosures, at 52.7 percent \nof all disclosures for the period. Low -complexity vulnerabilities reversed a \n05001,0001,5002,0002,5003,000\n2H13 1H14 2H14 1H15 2H15 1H16Industrywide vulnerability disclosuresMedium complexity \n(medium risk)\nHigh complexity \n(lowest risk)Low complexity \n(highest risk) \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    47 \n multi -year trend of increases in 1H16, and ended the period with the fewest \nlow-complexity vulner abilities since 1H14.  \n Medium -complexity vulnerabilities accounted for the second largest share, \nat 42.5 percent of all vulnerabilities. After increasing slightly in 2H15, \nmedium -complexity vulnerabilities decreased again in 1H16 to nearly the \nsame number a s a year prior.  \n Disclosures of high -complexity vulnerabilities more than \ndoubled from 2H15 to 1H16, but still only account ed for \n4.8 percent of all disclosures.  \nOperating system, browser, and application \nvulnerabilities  \nComparing vulnerabilities that affect a computer’s operating \nsystem to vulnerabilities that affect other components, such \nas applications and utilities, requires a determination of \nwhether the affected component is considered part of the \noperating system . This determination is not  always simple \nand straightforward, given the componentized na ture of \nmodern operating systems. Some programs (media players, for example) ship \nby default with some operating system software but can also be downloaded \nfrom the software vendor’s website and installed individually. Linux  distributions, \nin particular, are often assembled from components developed by different \nteams, many of which provide crucial operating functions such as a graphical \nuser interface ( GUI) or Internet browsing.  \nTo facilitate analysis of operating system and browser vulnerabi lities, the \nMicrosoft Security Intelligence Report distinguishes among four different kinds of \nvulnerabilities:  \n Core operating system vulnerabilities are those with at least one operating \nsystem platform enumeration (/o) in the NVD  that do not also have any \napplication platform enumerations (/a).6 \n Operating system application vulnerabilities are those with at least one /o \nplatform enumeration and at least one /a platform enumeration listed in the \nNVD , except as described in the next bullet point.  \n                                                           \n6 See nvd.nist.gov/cpe.cfm  for information about the Common Platform Enumeration (CPE) standard for \nnaming information technology systems, software, and packages.  Disclosures of \nhigh -complexity \nvulnerabilities \nmore than \ndoubled, but still \nonly accounted for \n4.8 percent of all \nvulnerabilities.   \n48 VULNERABILITIES   \n  Browser vulnerabilities are those that affect components defined as part of a \nweb browser, including Internet Explorer  and Apple’s Safari  (which ship with \noperating systems) along with third -party browsers such as Mozilla Firefox  \nand Google  Chrome . \n Other application vulnerabilities are those with at least one /a platform \nenumeration in the NVD  that do not have any /o platform enumerations, \nexcept as described in the previous bullet point.  \nFigure 29 shows indus trywide vulnerabilities for operating systems, browsers, \nand applications since 2H13 . \nFigure 29. Industry wide operating system, browser, and applica tion vulnerabilities, 2H13 –1H16  \n \n Disclosures of vulnerabilities in applications other than web browsers and \noperating system applications decreased slightly in 1H16, but remained the \nmost common type of vulnerability during the period, accounting for 45.8 \npercent of all disclosures for th e period.  \n Core operating system vulnerability disclosures were down from 2H15, but \nremained in second place in 1H16, at 22.5 percent of all disclosures.  \n Operating system application vulnerability disclosures accounted for 22.4 \npercent of all disclosures in 1H16, just behind core operating system \nvulnerability disclosures.  \n05001,0001,5002,0002,5003,0003,500\n2H13 1H14 2H14 1H15 2H15 1H16Industrywide vulnerability disclosuresCore operating \nsystem\nWeb browsersOperating \nsystem \napplicationsOther\napplications \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    49 \n  Browser vulnerability disclosures decreased by nearly a third from 2H15 to \naccount for 9.3 percent of all disclosures in 1H16.  \nMicrosoft v ulnerability disclosures  \nFigure 30 shows trends for vulnerability disclosures that affect Microsoft \nproducts compared to the rest of the industry.  \nFigure 30. Vulnerability disclosures for Micr osoft and non -Microsoft products, 2H13 –1H16  \n \n Microsoft vulnerability disclosures decreased from 305 disclosures in 2H15 to \n225 in 1H16, a decrease of 26.2 percent.  \nGuidance: Developing secure software  \nThe Security Development Lifecycle (SDL) (www.microsoft.com/sdl ) is a free \nsoftware development methodology that incorporates security and privacy best \npractices throughout all phases of the development process , with the goal of \nprotecting software users. Using such a methodology can help reduce the \nnumber and severity of vulnerabilities in software and help manage \nvulnerabilities that might be discovered  after deployment.   \n“Life in the Digital Crosshairs ,” at sdlstory.com, is a multimedia presentation that \nexplores the genesis and development of the SDL from its origins in the \nWindows team’s well -documented all -hands security push in the early 2000s.  It \nincludes interviews with several of the pivotal figures in the history of the SDL \n05001,0001,5002,0002,5003,0003,5004,0004,5005,000\n2H13 1H14 2H14 1H15 2H15 1H16Industrywide vulnerability disclosuresNon -Microsoft\nMicrosoft \n50 VULNERABILITIES   \n and Microsoft’s focus on secure software. Security professionals and anyone else \nwith an interest in secure development are likely to find the site invaluable for \nputting  the SDL into historical context and understanding what the future holds.  \nTo learn more about how the SDL is applied in the present day, see “ Secure \nSoftware Development Trends in the Oil & Gas Sectors ” at the Microsoft  \nDownload Center ( www.microsoft.com/download ) for an example of how the \nSDL has helped one critical industry.    \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    51 \n Exploits  \nAn exploit  is a piece of  code that uses  software vulnerabilities \nto access information on  a computer or install malware . \nExploits  target vulnerabilities in operating systems, web \nbrowsers, applications, or  other  software components that ar e \ninstalled on a computer .  \nIn some scenarios, targeted components are add -ons that may be  pre-installed \nby the computer manufacturer before the computer is sold. A user may not \neven use the vulnerable add -on or be aware that it is installed. In addition, some \nsoftware has no facility for updating itself, so even if the software vendor \npublishes an update that fixes the vulnerability, the user may not know that the \nupdate is available or how to obtain it and therefore remains vulnerable to \nattack.  \nSoftware vulnerabilities are enumerated and documented in \nthe Common Vulnerabilities and Exposures  (CVE) list \n(cve.mitre.org ), a standardized repository of vulnerability \ninformation. Here and throughout this report, exploits are \nlabeled with the CVE identifier that pertains to the affected \nvulnerability, if applicable. In addition, exploits that affect \nvulnerabilit ies in Microsoft software are labeled with the \nMicrosoft Security Bulletin  number that pertains to the \nvulnerability, if applicable.7 \nMicrosoft real -time security products can detect and block attempts to exploit \nknown vulnerabilities whether the computer is affected by the vulnerabilities or \nnot. For example, the CVE-2010 -2568  CplLnk  vulnerability has never affe cted \nWindows 8 , but if a Windows 8 user receives a malicious file that attempts to \nexploit that vulnerability, Windows Defender  is designed to detect and block it \nanyway. Encounter data provides important informat ion about which products \nand vulnerabilities are being targeted by attackers, and by what means. \nHowever, the statistics presented in this report should not be interpreted as \n                                                           \n7 See technet.microsoft.com/security/bulletin  to search and read Microsoft Security Bulletins.  Some e xploits \ntarget add -ons \nthat may be \npreinstalled by the \ncomputer \nmanufacturer.   \n52 EXPLOITS   \n evidence of successful exploit attempts, or of the relative vulnerability of \ncomp uters to different exploits.  \nFigure 31 shows the prevalence of different types of exploits detected by \nMicrosoft antimalw are products each quarter from 3Q15 to 2Q16 , by encounter \nrate. Encounter rate  is the percentage of computers running Microsoft real -time \nsecurity products that report a malware  encounter. For example, the encounter \nrate for operating system  exploit attempts in 2Q16 was 0.14 percent , meaning \nthat 0.14  percent of computers running Microsoft real -time security software in \n2Q16  encountered operating sy stem exploit attempts, and 99.86  percent did \nnot. In other words, a computer selected at rand om would have had about a \n0.14 percent chanc e of encountering an operating system exploit attempt in \n2Q16 . Only  computers whose users have opted in to provide data  to Microsoft \nare considered when calculating encounter rates.8 See page 71 for more \ninformation about the encounter rate metric . \nFigure 31. Encounter rates for  different types of exploit  attempt s, 3Q15 –2Q16  \n \nComputers that report more than one type of exploit are counted for each type detected . * Figures for exploit kits , Java , and Adobe \nFlash Player  exploits are affected by IExtensionValidation  in Internet Explorer , which blocks many threats before they are \nencountered. See page 65 for more information.  \n                                                           \n8 For information about the products and services that provide data for this rep ort, see “ Appendix B: Data \nsources ” on page 137. \n0.0%0.2%0.4%0.6%0.8%1.0%1.2%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Exploit kits*\nOperating system\nHTML/JavaScript\nDocuments\nBrowserAdobe Flash \nPlayer*Java*\nOther \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    53 \n  After increasing significantly between 3Q15 and 4Q15, encounters with \nexploit kits  decreased by more than a third from 4Q15 to 1Q16. They \nremained the most commonly encountered type of exploit in the second \nhalf of the year, with an encounter rate more  than four times that of the next \nmost common type of exploit. See “ Exploit kits ” on page 54 for more \ninformation about these exploits.  \n Exploit attempts involving Adobe Flash Player  increased significantly in 1Q16 \nwith the appearance of SWF/Netis , then returned to much lower levels in \n2Q16 as Netis encounters decreased.  \n The number of encounters with exploits that target operating systems \ndecreased slightly during both quarters in 1H16, but ended the period in \nsecond place as Adobe Flash  Player  exploits receded. See “ Operating \nsystem exploits ” on page 59 for more information.  \n Encounters with Java  exploits, HTML/JavaScript  exploits, and other types of \nexploits each accounted for less than 0.1 percent of all malware  encounters \nin 1H16. See the remainder of this section for more information about these \nexploits.  \nExploit families  \nFigure 32 lists the exploit -related malicious software families  that were detected \nmost often during the first half of 201 6. \nFigure 32. Quarterly encounter rate trends fo r the exploit families  most commonly  detected  and blocked  by Microsoft real-time \nantimalware products in 1H16 , shaded according to relative prevalence  \nExploit  Type  3Q15  4Q15  1Q16  2Q16  \nJS/Axpergle  Exploit kit  0.71%  0.92%  0.53%  0.40%  \nSWF/Netis  Adobe Flash Player  0.00%  0.00%  0.27%  0.00%  \nCVE-2010 -2568  (CplLnk ) Operating system  0.18%  0.24%  0.13%  0.13%  \nHTML/Meadgive  Exploit kit  0.07%  0.17%  0.08%  0.10%  \nJS/NeutrinoEK  Exploit kit  0.01%  0.11%  0.04%  0.10%  \nHTML/IframeRef  Generic  0.04%  0.05%  0.03%  0.02%  \nShellCode  Adobe Flash Player  0.01%  0.03%  0.02%  0.02%  \nSWF/Dlcypt  Adobe Flash Player  — — 0.01%  0.01%  \nJS/Anogre  Exploit kit  0.01%  0.01%  0.01%  0.01%  \nWin32/Pdfjsc  Documents  0.01%  0.01%  0.01%  0.00%  \nTotals  shown in the table for individual vulnerabilities do not include exploits that were de tected as part of exploit kits .  \n54 EXPLOITS   \n  Exploit kits accounted for four of the 10 most commonly encountered exploit  \ndetection s during 1H16. See “ Exploit kits ” on page 54 for more information \nabout exploit kits . \n SWF/Netis  uses a critical vulnerability in Adobe Flash Player  (CVE-2015 -5119) \nto download and run files on the infected computer. Adobe released \nSecurity Bulletin  APSB15 -16 in July 2015 to address the issue.  \n CVE-2010 -2568  is a vulnerability in Windows Shell. \nDetections are often identified as variants in the Win32/CplLnk  \nfamily, although several other malicious software families \nattempt to exploit the vulnerability as well. An attacker exploits \nCVE-2010 -2568  by creating a malformed shortcut file —typically \ndistributed through social engineering or other methods —that \nforces a vulnerable computer to load a malicious file when the \nshortcut icon is displayed in File Explorer. The vulnerability was \nfirst discovered being used by the malware  family \nWin32/Stuxnet  in mid -2010, and it has since been exploited by a \nnumber of other families, many of which predated the \ndisclosure of th e vulnerability and were subsequently adapted to attempt to \nexploit it. Microsoft published Security Bulletin  MS10 -046 in August 2010 to \naddress th e issue. Windows 8  and subsequently released versions of \nWindows have never been vulnerable to exploits of CVE -2010 -2568 . \n HTML/IframeRef  is a generic  detection for specially formed HTML inline \nframe (IFrame) tags that redirect to remote websites that contain malicious \ncontent. More properly considered exploit downloaders t han true exploits, \nthese malicious pages use a variety of techniques to exploit vulnerabilities in \nbrowsers and plug -ins. The only commonality is that the attacker uses an \ninline frame to deliver the exploits to users. The exact exploit delivered and \ndetec ted by one of these inline frames might be changed frequently.  \n SWF/Dlcypt  is an Adobe Flash Player  file that may be used by attackers to \ndecrypt and execute encrypted JavaScript  files. It is configured to a run with \na frame size of zero by zero pixels, which allows it to run without being \nnoticed.  \nExploit kits  \nExploit kits  are collections of exploits bundled together and sold as commercial \nsoftware or as a service. Prospective attackers buy or rent exploit kits on \nmalicious hacker forums and through other illegitimate outlets. A typic al kit Exploit kits \naccounted for four \nof the 10 most \ncommonly \nencountered \nexploit detections \nduring 1H16.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    55 \n comprises  a collection of webpages that contain exploits for several \nvulnerabilities in popular web browsers and browser add -ons. When the \nattacker installs the kit on a malicious or compromised web server, visitors who \ndon’t have the appropriate se curity updates installed are at risk of having their \ncomputers compromised  through drive -by download attacks. (See page 119 for \nmore information about drive -by dow nloads.)  \nFigure 33. How a typical exploit kit works  \n \nMicrosoft security products detect and block the characteristic techniques that a \nnumber of common exploit kits use to infect computers, along with several \ngeneric  HTML and JavaScript  exploit techniques. Figure 34 shows the \nprevalence of several top web -based  exploit  kits and techniques  during each of \nthe four most recent quarters.  \n \n56 EXPLOITS   \n Figure 34. Trends for the top exploit  kit-related threats  detected and blocked by Microsoft real -time antimalware products in 1H16  \n \n JS/Axpergle , a detection for the so -called Angler  exploit kit, was the most \ncommonly encountered exploit kit family in 1H16. It is known to target a \nnumber of vulnerabilities in Silverlight  (CVE-2013 -0074 ), Internet Explorer  \n(CVE-2013 -2551 ), Adobe Flash Player  (CVE-2015 -0310 , CVE-2015-0311, and \nCVE-2015 -0313 , among others), and Java  (CVE-2013 -2460 ), although exploit \nkit authors frequently change the exploits included in their kits in an effort to \nstay ahead of software publishers and securit y software vendors. Encounters \ninvolving Axpergle fell sharply at the end of 2Q16, a development that some \nnews reports have linked to the breakup of a cybercrime ring by Russian  \nfederal authorities in June.9 If Angler  remai ns dormant, encounters involving \nits two most active competitors, RIG  and Neutrino , may be expected to rise \nsignificantly in the second half of the year.  \n Encounters involving the RIG  exploit kit (detected as HTML/Meadgive ) \ndeclined somewhat from 2H15, but remained the second most commonly \nencountere d kit during both quarters in 1H16. It targets vulnerabilities in \nAdobe Flash Player  (CVE-2015 -8651  and CVE-2015 -0311), Java  (CVE-2013 -\n2423 , CVE-2013 -1493 , and CVE-2012 -1723 ), and Silverlight  (CVE-2013 -3896  \nand CVE-2013 -0074 ), among other components.  \n                                                           \n9 Kevin Townsend, “ Did Angler  Exploit Kit Die With Russian Lurk Arrests? ”, SecurityWeek, June 13, 2016, \nwww.securityweek.com/did -angler -exploit -kit-die-russian -lurk-arrests . \n0.0%0.1%0.2%0.3%0.4%0.5%0.6%0.7%0.8%0.9%1.0%\n1Q15 2Q15 3Q15 4Q15Encounter rate (percent of all reporting computers)Axpergle (Angler)\nJS/NeutrinoEK\n(Neutrino)\nHTML/Meadgive\n(RIG)\nWin32/Anogre\n(Sweet Orange)\nHTML/Kaixin\n(KaiXin) \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    57 \n  The Neutrino  exploit kit (detected as JS/NeutrinoEK ) added a number of \nnew Adobe Flash Pla yer exploits in 1H16, including CVE-2016 -4117, CVE-\n2016 -1019, and CVE-2015 -8651 .  \nJava  exploits  \nFigure 35 shows the prevalence of different Java  exploits by quarter.  \nFigure 35. Trends for the top Java  exploits detected and blocked by Microsoft real-time antimalware products in 1H16  \n \nEncounter figures are affected by IExtensionValidation  in Internet Explorer , which blocks many threats before they are encountered. \nSee page 65 for more informat ion. \n Overall, encounters with Java  exploits continued to decrease significantly in \n1H16. This decrease is likely caused by several important changes in the way \nweb browsers evaluate and execute Java  applets:  \n The IExtensionValidation  interface in Internet Explorer  11, released in late \n2013, provides a mechanism for security software to validate that a \nwebpage is safe before allowing instan tiation of ActiveX  controls, such \nas the control that hosts embedded Java  applets. If a webpage is \ndetermined to be malicious, the ActiveX controls are blocked from \nloading, and the actual Java  exploit itself is therefore never encountered. \n(See “ Exploit detection with Internet Explorer and IExtensionValidation ” \non pag e 65 for more information.) Subsequent Internet Explorer security \nupdates released in 2014 added an isolated heap mechanism and a \n0.000%0.002%0.004%0.006%0.008%0.010%0.012%0.014%0.016%0.018%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)CVE -2012 -1723\nCVE -2010 -0840\nCVE -2013 -0422ObfuscatorCVE -2012 -0507 \n58 EXPLOITS   \n deferred -free method to mitigate  use-after -free bugs, which further \nhardened Internet Explorer against Java  exploitation.  \n Beginning with Java  7 update 51, released in January 2014, the Java  \nRuntime Environment (JRE ) requires Java  applets running in web \nbrowsers to be digitally signed by default.  \n In September 2014, Microsoft published updates for \nversions 8 through 11 of Internet Explorer  to begin blocking out -\nof-date ActiveX  controls , including controls that host older \nversions of the JRE  in the browser. As explained in this section, \nthe most commonly encountered Java  exploits all target \nvulnerabilities that were addressed with security updates years \nago, but remain present in out -of-date Java  installations. When \na webpage attempts to load one of the vulnerable versions of Java  in \nInternet Explorer with the update applied, the control is blocked by \ndefault and the user is urged to update Java  to a more secure version.  \nFigure 36. Internet Explorer  blocks out -of-date ActiveX  controls from running  \n \n In January 2016, Oracle  announced that it would be deprecating the \nJava  browser plugin in JDK 9, scheduled for release in 2017.  \n Microsoft Edge , the newest Microsoft web browser and the default \nbrowser in Windows 10 , does not support Java  or other ActiveX  plugins , \nwhich eliminates the possibility of Java  exploits being delivered within \nthe browser. See “ A break from the past, part 2: Saying goodbye to \nActiveX, VBScript, attachEvent… ” (May 6, 2015) at the Microsoft Edge \nDev Blog at blogs.windows.com/msedgedev for more information.  \n CVE-2012 -1723 , the most commonly encountered individual Java  exploit in \n1H16, is a type -confusion vulnerability in the Java  Runtime Environment (JRE ) \nthat is exploited by tricking the JRE  into treating one type of variab le like \nanother type. Oracle  confirmed the existence of the vulnerability in June \n2012, and addressed it the same month with its June 2012 Critical  Patch \nUpdate . The vulnerability was observed being exploited in the wild \nbeginning in early July 2012, and has been used in a number of exploit kits .  \nEncounters with \nJava exploits con -\ntinued to decrease \nsignificantly in \n1H16.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    59 \n For more information about this exploit, see the entry “ The rise of a new \nJava  vulnerability - CVE-2012 -1723 ” (August 1, 2012) in the Microsoft \nMalware Protection Center (MMPC) blog at blogs.technet.com/mmpc.  \n CVE-2010 -0840  is a JRE  vulnerability that wa s first disclosed in March 2010 \nand addressed by Oracle  with a security update  the same month. The \nvulnerability was previously exploited by some ve rsions of the Blackhole \nexploit kit  (detected as JS/Blacole ), which has been inactive in recent years.  \n CVE-2012 -0507  allows an unsigned Java  applet to gain \nelevated permis sions and potentially have unrestricted \naccess to a host system outside its sandbox environment. \nThe vulnerability is a logic error that allows attackers to \nrun code with the privileges of the current user, which \nmeans that an attacker can use it to perfor m reliable \nexploitation on other platforms that support the JRE , \nincluding Apple Mac OS X , Linux , VMWare , and others. \nOracle  released a security update  in February 2012 to \naddress the issue.  \n Obfuscator  is a generic  detection for programs that have \nbeen modified by malware  obfuscation, often in an attempt to avoid \ndetection by security software. Files identified as Java/Obfuscator can \nrepresent exp loits that target many different Java  vulnerabilities.  \n CVE-2013 -0422  first appeared in January 2013 as a zero -day vulnerability. \nCVE-2013 -0422 is a package access check vulnerability that allows an \nuntrusted Java  applet to access code in a trusted class, which then loads the \nattacker’s own class with elevated privileges. Oracle  published a security \nupdate  to address the vulnerability on January 13, 2013.  \nFor more information about CVE-2013 -0422 , see the entry “ A technical \nanalysis of a new Java  vulnerability (CVE -2013 -0422) ” (January 20, 2013) in \nthe MMPC blo g at blogs.technet.com/mmpc.  \nOperating system exploits  \nAlthough most operating system exploi ts detected by Microsoft security \nproducts are designed to affect the platforms on which the security products \nrun, malicious or infected files that affect other operating systems  are sometimes \ndownloaded . Figure 37 shows trend s for the individual exploits most commonly \ndetected and blocked or removed during each of the past  four quarters.  Microsoft Edge, \nthe default \nbrowser in \nWindows 10, does \nnot support Java or \nother ActiveX \nplugins .  \n60 EXPLOITS   \n Figure 37. Trends for the top  operating system exploits detected and blocked by Microsoft real-time antimalware products , 3Q15 –\n2Q16  \n \n Win32/CplLnk , an exploit that targets a vulnerability in Windows Shell, \nremained the most commonly encountered operating system exploit in \n1H16. An attacker exploits the vulnerability ( CVE-2010 -2568 ) by creating a \nmalformed shortcut file that forces a vulnerable computer to load a \nmalicious f ile when the shortcut icon is displayed in File Explorer. Microsoft \nreleased Security Bulletin  MS10 -046 in August 2010 to address this issue.  \n Two o f the five most commonly encountered operating system exploits on \nWindows computers in 1H16 actually target the Android  mobile operating \nsystem published by Google  and the Open Handset Alliance. Microsoft \nsecurity products de tect these threats when Android devices or storage \ncards are connected to computers running Windows, or when Android \nusers knowingly or unknowingly download infected or malicious programs \n0.00%0.05%0.10%0.15%0.20%0.25%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Win32/CplLnk\n(see below)\n0.000%0.001%0.002%0.003%0.004%0.005%0.006%0.007%0.008%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Unix/LotoorCVE -2014 -6332\nCVE -2011 -1823\n(GingerBreak)\nCVE -2012 -0056 \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    61 \n to their computers before transferring the software to their devices . Most \ndetections that affect Android involve exploits that enable an attacker or \nother user to obtain root privileges on vulnerable Android devices. Device \nowners sometimes use such exploits intentionally to gain access to \nadditional functionality (a prac tice often called rooting  or jailbreaking ), but \nthese exploits can also be used by attackers to infect devices with malware  \nthat bypasses many typical security systems.  \n Unix/Lotoor  is an exploit family that exploits \nvulnerabilities in the Android  operating system to \ngain root privileges on a mobile device. Google  \npublished a source code update in March 2011 to \naddress the vulnerability.  \n CVE-2011-1823  is sometimes called the GingerBreak \nvulnerability because of its use by a popular rooting  \napplication of that name. It is also use d by \nAndroidOS/GingerMaster , a malicious program that \ncan allow a remote attacker to gain access to the mobile device . \nGingerMaster might be bundled with clean applications, and includes an \nexploit for the CVE -2011-1823 vulnerability disguised as an image file. \nGoogle  published a source code update in May 2011 to address the \nvulnerability.  \n CVE-2014 -6332  is a vulnerability in Windows Object Linking and Embedding \n(OLE) that can be used to launch remote attacks on a computer through \nInternet Explorer  in some circumstances. Microsoft released Security Bulletin  \nMS14 -064 in November 2014 to address this issue. See “The life and times of \nan exploit” on pages 3 –10 of Microsoft Security Intelligence Report, Volume \n18 (July –December 2014) , available fr om the Microsoft Download Center, for \nmore information about this vulnerability and what Microsoft has done to \nmitigate it.  \nDocument exploits  \nDocument exploits are exploits that target vulnerabilities i n the way a document \nediting or viewing application processes a particular file format. Figure  38 shows \nencounter rates for individual exploits.  Microsoft released \nSecurity Bulletin \nMS14 -064 in \nNovember 2014 to \naddress CVE -2014 -\n6332.   \n62 EXPLOITS   \n Figure  38. Trends for the top d ocument exploits detected and blocked by Microsoft  real-time  antimalware products , 3Q15 –2Q16  \n \n Most detections of exploits that affect Adobe Reader  and Adobe Acrobat  \nwere associated with the exploit family Win32/Pdfjsc , a detection for PDF  \nfiles containing a malicious JavaScript  that targets CVE-2010 -0188  and other \nvulnerabilities. Adobe released Security Bulletin  APSB10 -07 in February 2010 \nto address CVE -2010 -0188. Pdfjsc and related exploits we re particularly \nprevalent in eastern Europe . Pdfjsc mostly targets older Java  vulnerabilities, \nso attackers may find it less useful as more computers are updated to newer \nversions of Java , which could explain the decrease in encounters over the \npast several quarters.  \n CVE-2012 -0158  is a remote code execution  in Windows Common Controls \nthat affects certain older versions of Microsoft Office . Microsoft released \nSecurity Bulletin  MS12 -027 in April 201 2 to address the issue.  \n CVE-2010 -3336  is a memory corruption vulnerability in several olde r \nversions of Microsoft Office  and Microsoft Word  that allows a remote \nattacker to execute arbitrary code via a malicious document. Microsoft \nreleased Security Bulletin  MS10 -087 in November 2010 to address the issue.  \nAdobe Flash Player exploits  \nFigure 39 shows the prevalence of different Adobe Flash Player exploits by \nquarter.  \n0.000%0.001%0.002%0.003%0.004%0.005%0.006%0.007%0.008%0.009%0.010%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Win32/Pdfjsc\nCVE -2012 -0158\nCVE -2011 -0097CVE -2010 -3336\nCVE -2014 -1761 \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    63 \n Figure 39. Adobe Flash Player exploits detected and blocked by Microsoft real-time antimalware products , 3Q15 –2Q16  \n \nEncounter figures are affected by IExtensionValidation  in Internet Explorer , which blocks many threats before they are encountered. \nSee page 65 for more information.  \n SWF/Netis  uses a critical vulnerability in Adobe Flash Player ( CVE-2015 -5119) \nto download and run files on the infected computer. Adobe released \nSecurity Bulletin  APSB15 -16 in July 2015 to address the issue. Netis appeared \nin 1Q16 at a  worldwide encounter rate of 0.27 percent, making it the second \nmost commonly encountered exploit during the quarter, before encounters \ndropped to much lower levels in 2Q16.  \n Win32/ShellCode  is a detection for a Flash Player file that attempts to exploit \nseveral vulnerabilities in versions of Adobe Acrobat  and Adobe Reader . In \nthe wild, th e malicious .swf file has been observed to be embedded in a PDF  \nattachment in spam  email messages, alongside other malware  components.  \n Although Adobe Flash Player continues to be a primary target for exploit kits  \nand targeted attackers, evidence suggests that attackers had a harder time \nexploiting it in 1H16 than in previous periods: fewer zero -day Flash Player \nexploits were discovered in 1H16 than  during comparable periods in 2015, \nand fewer post -update exploits were incorporated into exploit kits. Part of \nthis change is likely due to aggressive efforts on the part of Adobe to add \nnew exploit mitigations to Flash Player in recent years, including a dopting \nthe Control Flow Guard  technology in Windows 10 , which makes memory \n0.000%0.005%0.010%0.015%0.020%0.025%0.030%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers) Win32/ShellCode\nCVE -2010 -3653\nCVE -2011 -0611SWF/Netis\nCVE -2010 -1297 \n64 EXPLOITS   \n corruption vulnerabilities harder to successfully exploit.10 Exploit writers tend \nto take a “low hanging fruit” approach of concentrati ng their efforts on the \nvectors that they believe are easiest to exploit. If attackers continue to find \nFlash Player harder to exploit, they may begin to shift their attention to other \npotential vectors, in much the same way that they largely stopped \nattem pting to exploit the Java  Runtime Environment  in favor of Flash Player \na few years ago.  \nBrowser exploits  \nFigure 40 shows the prevalence of different browser  exploits by quarter.  \nFigure 40. Browser exploits detected  and blocked by Microsoft real-time antimalware pr oducts , 3Q15 –2Q16  \n \nEncounter figures are affected by IExtensionValidation  in Internet Explorer , which blocks many threats before they are encountered. \nSee below  for more information.  \n Exploits  that targeted vulnerabilities addressed by Securi ty Bulletin  MS09 -\n002, published by Microsoft in February 2009, accounted for the largest \nshare of browser -related exploits encountered in 1H16.  \n CVE-2015 -0072  is a cross -site scripting  (XSS ) vulnerability in Internet \nExplorer  versions 9 through 11 that can allow remote attackers to bypass the \nsame -origin policy, which is intended to prevent malicious scripts on \n                                                           \n10 See “ Community Collaboration Enhances Flash ” (December 21, 2015) and “ Reflections on Pwn2Own ” (April \n18, 2016) on the Security @ A dobe blog at blogs.adobe.com/security  for more information about collaborative \nefforts to improve the security of Adobe Flash Player . \n0.0000%0.0002%0.0004%0.0006%0.0008%0.0010%0.0012%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)MS09 -002\nCVE -2015 -0072\n(MS15 -018)\nCVE -2012 -1889\n(MS12 -043)\nCVE -2008 -2551JS/HeapAli \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    65 \n compromised pages from accessing resources located elsewhere. Microsoft \nreleased Security Bulletin  MS15 -018 in March 2015 to address the issue.  \n CVE-2012 -1889 , a memory corruption vulne rability that affects older \nversions of Microsoft XML Core Services, was addressed by Microsoft with \nSecurity Bulletin  MS12 -043, released in July 2 012. \n None of the most commonly encountered browser exploits in 1H16 affected \nMicrosoft Edge . \nExploit detection with Internet Explorer and IExtensionValidation  \nIExtensionValidation  is an interface introduced in Internet Explorer 11 that real -\ntime security software can implement to block ActiveX controls from loading on \nmalicious pages. (Microsoft Edge , the newest Microsoft web browser and the \ndefault browser in Windows 10 , does not support ActiveX plug -ins at all, and \ntherefore does not use IExtensionValidation .) When Internet Explorer loads a \nwebpage that includes ActiveX controls, if the security software has \nimplemented IExtensionValidation , the browser calls the security software to \nscan the HTML and script content on the page before loading the controls \nthemselves. If the security software determines that the page is malicious (for \nexample, if it identifies the page as an exploit kit  landing page), it can direct \nInternet Explorer to prevent individual controls or the entire page from loading.  \nFigure 41. Internet Explorer 11 can block pages that contain ActiveX controls if security software determines that the page is malicious  \n \nFigure 42 shows the types of ActiveX controls identified on malicious webpages \nin Internet Explorer 11 for each quarter from 3Q 15 to 2Q16.  \n \n66 EXPLOITS   \n Figure 42. ActiveX controls detected on malicious webpages through IExtensionValidation, 3Q15 –2Q16, by control type  \n  \n Adobe Flash Player  objects were the most commonly detected type of \nobject hosted on malicious pages in each of the past four quarters, reaching \na high of 99.2 percent in 4Q15 before declining to 69.3 percent in 2Q16.  \n Pages hosting malicious Silverlight  objects increased in 1H16 as several \nexploit kits  added exploits for two recently disclosed Silverlight \nvulnerabilities, CVE-2015 -1671 and CVE-2016 -0034 . Microsoft published \nSecurity Bulletins  MS15 -044 in May 2015 and MS16 -006 in January 2016, \nrespectively, to address the vulnerabilities.  \nExploits  used in targeted attacks  \nA targeted attack is an attack against the computers or networks of a specific \ngroup of companies or individuals. This type of attack usually attempts to gain \naccess to the computer or network before trying to steal information or disrupt \nthe infected computers. Figure 43 lists some of the exploits Microsoft has  \nobserved being used in targeted attacks in 1H16 . \n0%10%20%30%40%50%60%70%80%90%100%\n3Q15 4Q15 1Q16 2Q16Percent of IExtensionValidation detections\nAdobe Flash Silverlight Adobe Reader Java Other \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    67 \n Figure 43. Some of the zero -day exploits used in targeted attacks in 1H16  \nCVE Exploit Type  Type  Affecting  Security Update  Used \nby EK?  \nCVE-2016 -0034  Silverlight “GetChars()” memory \ncorruption  RCE Microsoft \nSilverlight  MS16 -006 (Jan. 2016)  YES \nCVE-2016 -1010  Flash “copyPixels” integer overflow  RCE Adobe Flash  APSB16 -08 (Mar . 2016)  NO \nCVE-2016 -1019  Flash “ASNative” type confusion  RCE Adobe Flash  APSB16 -10 (Apr . 2016)  YES \nCVE-2016 -0167  Win32k!xxxMNDestroyHandler Use -\nAfter -Free  EoP Microsoft \nWindows  MS16 -039 (Apr . 2016)  n/a \nCVE-2016 -0165  Win32k!NtGdiPathToRegion  EoP Microsoft \nWindows  MS16 -039 (Apr . 2016)  n/a \nCVE-2016 -4117  Flash “DeleteRangeTimelineOperation” \ntype confusion  RCE Adobe Flash  APSB16 -15 (May 2016)  YES \nCVE-2016 -0189  VBSCRIPT engine memory corruption  RCE Microsoft \nInternet \nExplorer  MS16 -051 (May 2016)  YES \nCVE-2016 -4171  Flash malformed ExecPolicy tag RCE Adobe Flash  APSB16 -18 (Jun. 2016)  NO \n \nAdobe Flash  Player  \nAlthough the majority of remote code execution (RCE ) zero -day vulnerabilities \nused in 1H16 targeted attacks affected Adobe Flash, there were fewer Flash \nPlayer exploits compared to previous periods, and exploit kit  authors have not  \nbeen integrating Flash exploits as quickly as in 2015.  \n CVE-2016 -1010 - Flash  Player  “copyPixels” integer overflow: This vulnerability \nwas exploited in limite d attacks targeting multiple browsers from different \nvendors and distributed in a particular region of the world, most likely used \nin a campaign since December, 2015. The attacker was able to inject on -the-\nfly the Flash  Player  exploit on certain websites t hrough some form of MITM \nand JavaScript  redirection. Adobe released Security Bulletin  APSB16 -08 out-\nof-band to neutralize the attack as soon as possible, and the exploit was not \nsubsequently observed being used by exploit kits .  \n68 EXPLOITS   \n  CVE-2016 -1019 - Flash  Player  “ASNative” type confusion: This zero -day \nexploit, first reported by researchers at FireEye11 and Proofpoint ,12 is unusual \nin that it was first o bserved being used by an exploit kit  in April 2016, rather \nthan by a targeted attack group. A few exploit kits have used this \nvulnerability to target Internet Explorer , while Microsoft Edge  was not \ntargeted because of its additional capabilities for mitigating common \nexploitation techniques used by this exploit.  \n CVE-2016 -4117 – Flash  Player  “DeleteRangeTimelineOperation” type \nconfusion: This Flash  Player  vulnerability was exploited through \na malicious RTF document sent as an email attachment that \nembedded a Flash payload with the exploit as reported by \nFireEye .13 The attack was limited and targeted a few selected \nindividuals and telco companies in the Middle East. (See \n“PROMETHIUM and NEODYMIUM: Parallel zero -day attacks \ntargeting individua ls in Europe ” on page 21 for more \ninformation about this a ttack. ) This exploit was later integrated \ninto exploit kits  and used also by other activity groups (for \nexample, STRONTIUM ) in different campaigns after the \ndisclosure and release of the patch.  \n CVE-2016 -4171 – Flash  Player  malformed ExecPolicy tag: This zero -day \nexploit was found by Kaspersky  researchers14 and used in limited targeted \nattacks by an activity group that Kaspersky has dubbed “ScarCruft ”.15 \nMicrosoft telemetry suggests evidence of this vulnerability being exploited \nthrough targeted spear -phishing emails sent to selected targets, including \nvictims in Korea  and China . This exploit was not observed being used by \nexploit kits  after Adobe released the corresponding security update.   \n                                                           \n11 Genwei Jiang, “ CVE-2016 -1019: A New Flash Exploit Included in Magnitude  Exploit Kit ,” FireEye  Threat \nResearch Blog, April 7, 2016, https://www.fireeye.com/blog/threat -research/2016/04/cve -2016 -\n1019_a_new.html . \n12 Kafei ne, “ Killing a Zero -Day in the Egg: Adobe CVE -2016 -1019,” Proofpoint , April 7, 2016, \nhttps://www.proofpoint.com/us/threat -insight/post/killing -zero -day-in-the-egg.  \n13 Genwei Jiang, “ CVE-2016 -4117: Flash Zero -Day Exploited in the Wild ,” FireEye  Threat Resear ch Blog, May 13, \n2016, https://www.fireeye.com/blog/threat -research/2016/05/cve -2016 -4117-flash -zero -day.html.  \n14 Costin Raiu, “ CVE-2016 -4171 – Adobe Flash Zero -day used in targeted attacks ,” Securelist, June 14, 2016, \nhttps://securelist.com/blog/research/75082/cve -2016 -4171-adobe -flash -zero -day-used -in-targeted -attacks/ . \n15 Costin Raiu and Anton Ivanov, “Operation Daybreak: Flash ze ro-day exploit deployed by the ScarCruft  APT \nGroup ,” Securelist, June 17, 2016, https://securelist.com/blog/research/75100/operation -daybreak/ . CVE-2016 -1010 was \nexploited in limited \nattacks targeting \nmultiple browsers \nfrom different \nvendors .  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    69 \n Microsoft products  \nThe two exploits affecting Microsoft Windows are both elevation of privilege  \n(EoP) exploits used as second -stage payloads immediately after an initial remote \ncode execution  (RCE)  exploit to gain higher privileges or escape a sandbox. \nWindows, Silverlight , and Internet Explorer  were the only Microsoft products \naffected by zero -day RCE vulnerabilities. Microsoft Edge  was not affected by any \nknown zero -day exploits used in targeted attacks in 1H16.  \n CVE-2016 -0034  - Silverlight  “GetChars()” memory \ncorruption: This exploit targeted a Remote Code \nExecution vulnerability affecting the Microsoft Silverlight \nbrowser plugin. Discovered by Kaspersky  researchers in \nJanuary 2016,16 the exploit was probably created in \napproximately July 2015 and used in a campaign that \ntargeted computers in southeast Asia . Evidence found by \nsecurity researchers suggests a link between this exploit \nand the 2015 breach of the Hacking Team  security \ncompany, w hich resulted in details of multiple exploits \nbeing disclosed to the public. After Microsoft released Security Bulletin  \nMS16 -006 in Janu ary 2016 to address the issue, it was integrated into a \nnumber of exploit kits . \n CVE-2016 -0167  – Microsoft Windows Win32k!xxxMNDestroyHandler Use -\nAfter -Free: This privilege escalation exploit (EoP) was discovered by FireEye  \nresearchers in a campaign that specifically targeted computers running \nWindows 7  in a number  of retail sectors, and used by attackers to elevate \nprivileges, dump credentials, and move laterally across the network, stealing \npoint -of-sale (PoS) and payment card data.17 Attackers used social \nengineering to induce users to execute Microsoft Word  binary documents \nthat contained malicious macros. Microsoft released Security Bulletin MS16 -\n039 in April 2016 to address the issue.  \n                                                           \n16 Costin Raiu and Anton Ivanov, “ The mysterious case of CVE -2016 -0034 : the hunt for a Microsoft Silverlight  0-\nday,” Securelist, January 13, 2016, https://securelist.com/blog/research/73255/the -mysterious -case -of-cve-\n2016 -0034 -the-hunt -for-a-microsoft -silverlight -0-day/.  \n17  Dhanesh Kizhakkinan, Yu Wang, Dan Caselden, and Erica Eng , “Threat Actor Leverages Windows Zero -day \nExploit in Payment Card Data Attacks ,” FireEye  Threat Research Blog, May 11, 2016, \nhttps://www.fireeye.com/blog/threat -research/2016/05/windows -zero -day-payment -cards.html . \n CVE-2016 -0034 \nwas used in a \ncampaign that \ntargeted \ncomputers in \nsoutheast Asia.   \n70 EXPLOITS   \n  CVE-2016 -0189  - VBScript engine memory corruption: This exploit was \ninitially used in a limited targeted attack in Asia , particularly South Korea .18 \nThe exploit was hosted on a compromised legitimate website and crafted \nspecifically to target Internet Explorer  users running Windows 7 ; the exploit \nis ineffective against the latest versions of Windows because of mitigations \nsuch as Control Flow Guard  (CFG), introduced in Windows 8 .1. After \nMicrosoft released Security Bulletin  MS16 -051 in May 2016 to address the \nissue, other researchers published a proof -of-concept fully working exploit \nfor this vulnerability, and the exploit code was soon integrated into multiple \nexploit kits . \nSee the entry “ Targeted Attacks Video Series ” (June 13, 2013) on the Microsoft \nCyber Trust blog at blogs.microsoft.com/cybertrust for an informative series of \nvideos an d papers about targeted attacks, the techniques used by attackers, and \nsome of the steps that organizations can take to secure their networks against \ntargeted attacks.  \n                                                           \n18 Symantec Securi ty Response, “ Internet Explorer  zero -day exploit used in targeted attacks in South Korea ,” \nSymantec Official Blog, May 10, 2016, https://www.symantec.com/connect/blogs/internet -explorer -zero -day-\nexploit -used -targeted -attacks -south -korea .  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    71 \n Malicious and unwanted \nsoftware  \nMost attempts by malware to infect computers are \nunsuccessful . More than three -quarters of Internet -connected \npersonal com puters worldwide are protected by real -time \nsecurity software that constantly monitors the computers and \nnetwork traffic for threats and blocks them before they can \ninfect the computers, if possible . Therefore, a comprehensive \nunderstanding of the malware landscape requires \nconsideration of infection attempts that are blocked as well as \ninfections that are removed .  \nMicrosoft uses two different metrics to measure malicious and unwanted \nsoftware prevalence:19 \n Encounter rate  is simply the percentage of compute rs running Microsoft \nreal-time security products that report a malware encounter.20 For example, \nthe encounter rate for the malware family JS/Axpergle  in Canada  in 2Q16 \nwas 2.7 percent. This data means that, of the computers in Canada that \nwere running Microsoft real -time security software in 2Q16, 2.7 percent \nreported encountering the Axpergle family, and 97.3 percent did not. \nEncountering a threat does not mean  the computer has been infected. Only \ncomputers whose users have opted in to provide data to Microsoft are \nconsidered when calculating encounter rates.21 \n                                                           \n19 Microsoft regularly reviews and refines its data collection methodology to improve its scope and accuracy. \nFor this reason, the statistics presented in this volume of the Microsoft Security Intelligence Report  may differ \nslightly fro m comparable statistics in previous volumes.  \n20 Encounter rate does not include threats that are blocked by a web browser before being detected by \nantimalware software. In particular, IExtensionValidation  in Internet Explorer  11 enables security software to \nblock pages that contain exploits from loading. (See “ Exploit detection with Internet Explorer and \nIExtensionValidation ” on page 65 for information about IExtensionValidation  and the threats it blocks.) For this \nreason, encounter rate figures may not fully reflect all of the threats encountered by computer users.  \n21 For in formation about the products and services that provide data for this report, see “Appendix B: Data \nsources ” on page  137.  \n72 MALICIOUS AND UNWANT ED SOFTWARE   \n  Computers cleaned per mille , or CCM , is an infe ction rate metric that is \ndefined as the number of computers cleaned for every 1,000 unique \ncomputers that run the Malicious Software Removal Tool  (MSRT ), a free tool \ndistributed through Microsoft update services that removes more than 200 \nhighly prevalent or serious threats from computers. Because it is not a real -\ntime tool, the MSRT  only detects and removes threats that are  already \npresent on the computer; it does not block infection attempts as they \nhappen.  \nFigure 44 illustrates the difference between these two metrics.  \nFigure 44. Worldwide encounter and infection rates, 3Q15 –2Q16, by quarter  \n \nAs Figure 44 shows, and as one would expect, encounters are much more \ncommon than infections. On average, about 20.6  percent of reporting \ncomputers worldwide encountered threats  over the past four quarters. At the \nsame time, the MSRT  removed threats  from about 10.1 out of every 1,000 \ncomputers, or 1.01 percent. Together, encounter and infection rate information \ncan help  provide a broader picture of the threat landscape by offering different \nperspectives on how threats propagate and how computers get infected.  \n050100150200250\n0%5%10%15%20%25%\n3Q15 4Q15 1Q16 2Q16\nComputers cleaned per 1,000 scanned (CCM)Encounter rate (percent of all reporting computers)\nEncounter rate Infection rate \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    73 \n Learning about new threats with cloud -based protection in \nWindows Defender  \nSeveral of th e threats discussed in this volume of the Security Intelligence Report , \nsuch as Win32/Spursint  and Win32/Rundas , are identified as cloud -based \ndetections . These are not true malware families as the term is usually used. \nInstead, they are detections for malicio us files that have been automatically \nidentified through the cloud -based protection feature of Windows Defender in \nWindows 10 .  \nWhen cloud -based protection is enabled, Windows Defender queries the cloud \nprotection backend when encounteri ng a suspicious but undetected file. The \nbackend service uses heuristics, machine learning, and automated file analysis to \ndetermine whether the file is malicious. If the cloud protection service \ndetermines that the file is malicious, Windows Defender bloc ks it, and the service \nuses the information to provide enhanced protection to other users. In many \ncases, this process can reduce the response time when a new threat emerges \nfrom hours to seconds. Some of these automatically identified threats have \nproven to be highly prevalent —Spursint , for example, was the second most \ncommonly encountered malicious software detection in 2Q16, and the fourth \nmost commonly encountered malicious software detection in 1H16 overall. The \nprevalence of these thr eats serves as a vivid example of the potential for \nincreased protection offered by cloud -based antimalware technologies.  \nCloud -based protection is enabled by default in the Anniversary  Update  edition  \nof Windows 10 . For more information about the feature and guidance for \nadministering it in network environments, see the article “ Block at First Sight ” at \ntechnet.microsoft.com.  \nMalicious and unwanted software worldwide  \nThe telem etry data generated by Microsoft security products from computers \nwhose administrators or users  choose to opt in to provide data to Microsoft \nincludes information about the location of the computer, as determined by IP \ngeolocation. This data makes it possi ble to compare infection  and encounter  \nrates, patterns, and trends in different locations around the world.22 \n                                                           \n22 For more information about this process, see the entry “ Determining the Geoloca tion of Systems Infected \nwith Malware ” (November 15, 2011) in the Microsoft Cyber Trust  Blog (blogs. microsoft .com/ cybertrust ).  \n74 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 45. Encounter rate t rends for the locations with the most computers reporting malicious and unwanted  \nsoftware  encounters in 1H16, by number of computers reporting  \nCountry/Region  3Q15  4Q15  1Q16  2Q16  \nUnited States  10.8%  12.5%  11.9%  12.0%  \nChina  14.9%  18.9%  19.1%  21.1%  \nBrazil  29.2%  34.4%  29.9%  29.4%  \nRussia  22.8%  28.7%  27.2%  24.9%  \nIndia  36.5%  44.2%  35.4%  32.6%  \nTurkey  32.6%  40.3%  34.8%  31.4%  \nFrance  18.8%  19.4%  17.0%  15.3%  \nMexico  23.9%  28.5%  24.4%  23.8%  \nUnited Kingdom  11.9%  13.9%  13.7%  11.5%  \nGermany  12.2%  13.8%  13.0%  13.0%  \nWorldwide  17.8%  20.8%  18.3%  21.2%  \n \n Locations in Figure 45 are ordered by the number of computers reporting \ndetections in 1H16.  \n The encounter rate in the United States  was about 40 percent lower (or \napproximately 8 –9 percentage points lower) than the worldwide encounter \nrate in 1H16. The exploit kit  JS/Axpergle  and the rogue security so ftware  \nprogram JS/FakeCall  were the most common malware families encountered \nin the US during the period. FakeCall is a detection for webpages that show \na message falsely claiming the computer is infected with malware and \noffering to help clean it for a fee. FakeCall was significan tly more common in \nthe United States than in most of the rest of the world; it only ranked 38th \nworldwide.  \nSee “ Threat families ” beginning on page 85 for more information about \ncommonly encountered malicious and unwanted software families.  \n The threat landscape in China  is typically dominated by m alware families \nthat are much less common worldwide, and 1H16 was no exception. Several \nof the most prevalent threat families worldwide, including Axpergle , the \nbrowser modifier  Win32/SupTab , and the software bundler  Win32/Tillail , \nwere not among the 100 most commonly encountered families in China in \n1H16.  \nThe most common  threat  family in China  in 1H16 was  Win32/Xiazai , a \nChinese -language  browser modifier  that ranked 35th worldwide. Other  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    75 \n unusually common  threat  families in Chi na included the virus  \nDOS/JackTheRipper  (ranked fifth in China, 75th worldwide) and the browser \nmodifiers  Win32/Hao123  (tenth in China, 120th wor ldwide) and \nWin32/Riccietex  (twelth in China, 137th worldwide).  \n The encounter rate in Brazil  was about 50 percent higher \nthan the worldwide encounter rate in 1H16. Encounters in \nBrazil were led by the cloud -based detection  \nWin32/Spursint  and the downloader /dropper  family \nWin32/Banload . (See “Win32/Banload and Banking \nMalware” on page 21 of Microsoft Security Intelligence \nReport, Volume 19 (January –June 2015)  for more \ninformation about Banload and related families in Brazil.) \nThreat families that were unusually common in Brazil \ninclu ded Banload (ranked second in Brazil, 63rd \nworldwide), the software bundler  Win32/Fourthrem  \n(eighth in Brazil, 77th worldwide), and the downloader  \nfamily Win32/Sventore  (11th in Brazil, 42nd worldwide).  \n The encounter rate in Russia  was about 33 percent higher than the \nworldwide encounter rate in 1H16. Threat families that were unusually \ncommon in Russia in 1H16 included the software bundler  Win32/DLHelper  \n(ranked sixth in Russia, 52nd worldwide), the downloader  family \nWin32/Ogimant  (ranked eighth in Russia, 67th worldwide) and the browser \nmodifier  Win32/Neobar  (ranked ninth in Russia, 40th worldwide).  \n The encounter rate in India  was about 73 percent higher than the worldwide \nencounter rate in 1H16, led by the worm  family Win32/Gamarue , which \nranked first in India and fourth worldwide. Unusually common threat families \nin India included the virus  family Win32/Sality  (11th in India, 26th worldwide) \nand the worm  family MSIL/Mofin  (13th in India, 144th worldwide).  \n The encounter rate in Turkey  was about 69 percent higher than the \nworldwide encounter rate in 1H16, led by Gamarue  and the generic  trojan  \ndetections Win32/Peals  and Win32/Skeeyah . The trojan  family \nWin32/BeeVry  (11th in Turkey, 201st worldwide) was unusually common in \nTurkey, which accounted for about 95 percent of all BeeVry dete ctions \nduring 1H16.  \n The encounter rate in France  was about 18 percent lower than worldwide \nencounter in 1H16. The overall mix of threats in France was similar to that of The threat \nlandscape in China \nis typically \ndominated by \nmalware families \nthat are much less \ncommon \nworldwide .  \n76 MALICIOUS AND UNWANT ED SOFTWARE   \n the world as a whole: all of the ten most common threat families in Fra nce \nwere also among the top 25 threats worldwide.  \n The encounter rate in Mexico  was about 23 percent higher than the \nworldwide encounter rate i n 1H16. Unusually common threat \nfamilies in Mexico included SWF/Netis  (fifth in Mexico, 29th \nworldwide) , an exploit family, and the worm  family JS/Bondat  \n(seventh in Mexico, 66th worldwide).  \n The encounter rate in the United Kingdom  was about 36 \npercent lower than the worldwide encounter rate in 1H16. The \nadware  program Win32/Adposhel  (ranked sev enth in the UK, \n37th worldwide) was unusually common in the UK, which \naccounted for about 10 percent of all Adposhel encounters in \n1H16.  \n The encounter rate in Germany  was about 34 percent lower than the \nworldwide encounter rate in 1Q16. The  most commonly encountered threat \nfamily in Germany during 1H16 was Win32/Bervisec , a software bundler  \ndistributed on German -language  websites that was only the 87th most \ncommonly encountered threat family worldwide. About 60 percent of all \nBervisec encounters in 1H16 occurred in Germany.  \nFor a different perspective on threat patter ns worldwide, Figure 46 shows the \ninfection and encounter rates in locations around the world in  2Q16.  Win32/Bervisec is a \nsoftware bundler \nthat is primarily \ndistributed on \nGerman -language \nwebsites.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    77 \n Figure 46. Encounter  rates (top) and infection rates (bottom) by countr y/region in 2Q16  \n \n \nThe next several  figures illustrate trends for specific locations around the world  \nwith particularly high or low incidences of threat detection . Figure 47 and Figure \n48 show trends for the locations with the highest rates of detection as \ndeterm ined by encounter rate  and CCM , respectively.  \n \n78 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 47. Trends for the five lo cations with the highest encounter rates in 1H16 (100,000 reporting computers minimum)  \n \nFigure 48. Trends for the five locations with the highest infection rates in 1H16 , by CCM (100,000 MSRT  computers  minimum)  \n \n The locations with the highest encounter rates were Indonesia , Pakistan , \nVietnam , Myanmar , and Mongolia . Mongolia also had one of the highest \ninfection rates in 1H16, accompanied by Libya , Iraq , the Palestinian \nterritories , and Morocco . \n0%10%20%30%40%50%60%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Pakistan\nIndonesiaMongolia\nMyanmar\nVietnam\nWorldwide\n0102030405060708090100\n3Q15 4Q15 1Q16 2Q16Computers cleaned per 1,000 scanned (CCM)MoroccoPalestinian\nAuthorityIraq\nMongoliaLibya\nWorldwide \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    79 \n  As is frequently the case, exploit kits were relatively rare in the locations \nwith the highest encounter rates. JS/Axpergle , the most commonly \nencountered exploit kit  worldwide in 1H16 and the 10th most commonly \nencountered  threat  family overall, ranked no higher than 98th in any of \nthe locations with the highest encounter rates.  Exploit kits usually offer \nweb-based control panels that enable attackers to \ntarget specific populations, such as geographic \nregions, operating syst em versions, browsers, and so \non. The Angler  kit (Axpergle) appears clearly to be \ntargeted predominantly at wealthier countries and \nregions in Europe  and the Americas , possibly \nbecause of a belief that computers in those areas \nhave more valuable data to steal than in others.  \n Threat families that were unusually common in \nMongolia  include Win32/Lightmoon  (ranked 12th in \nMongolia, 241st worldwide), a  mass -mailing worm  \nthat sends itself to email addresses found on the \ninfected computer. It also attempts to propagate  via P2P applications. \nSome variants can disable system tools, log keystrokes, and take other \nmalicious actions.  Encounter rates for Lightmoon were more than three \ntimes as high in Mongolia as in any other country or region in 1H16.  \n Threat families that we re unusually common in Myanmar  include the \nworm  families Win32/Macoute  (first in Myanmar, 112th worl dwide) and \nWin32/Conustr  (eighth in Myanmar, 491st worldwide), and the virus  \nfamily Win32/Madang  (second in Myanmar, 226th worldwide). Macoute \nis a worm  that can spread itself to removable USB drives, and  may \ncommunicate with a remote host.  Madang is a virus  that infects .exe and \n.scr files, and connects to specific websites to possibly download other \nmalware. Encounter rates for Madang were highest in Myanmar and \nIndonesia , which together accounted for about three -fourth of all \nMadang encounters worldwide.  \n Threat f amilies that were unusually common in Vietnam  included the \nsoftware bundler  Win32/Prepscram  (ranked third in Vietnam, 57th \nworldwide) and the virus  family DOS/Sigru  (twelfth in Vietnam, 148th \nworldwide). Prepscram is often d istributed as a mountable .iso disk file \ncontaining a software installer, which installs unwanted software The Angler exploit \nkit appears clearly \nto be targeted \npredominantly at \nwealthier countries \nand regions in \nEurope and the \nAmericas .  \n80 MALICIOUS AND UNWANT ED SOFTWARE   \n alongside the desired applications . Vietnam accounted for about 20  \npercent of all Prepscram encounters worldwide in 1H16. Sigru is a virus  \nthat can stop some files from working correctly in Windows XP  and \nearlier operating systems. It spreads by infecting  the master boot record \n(MBR) on connected hard disks and floppy disks.  Vietnam accounted for \nabout 40 percent of all Sigru encounters worldwide in 1H126, with China  \naccounting for most of the rest.  \n Threat f amilies that were unusually common in Pakistan  included the \nworm  families Win32/Ippedo  (ranked third in Pakistan, 30th worldwide) \nand Win32/Nuqel  (eighth in Pakistan, 71st worldwide).  \n Threat f amilies that were unusually prevalent in Indonesia  included the \nvirus  family Win32/Virut  (ranked sixth in Indonesia, 48rd worldwide) and \nthe worm  family Win32/Copali  (14th in Indonesia, 145th worldwide).  \nFigure 49. Trends for  locations with low encounter  rates in 1H16 (100,000 reporting computers minimum)  \n \n0%5%10%15%20%25%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Worldwide\nDenmarkSweden\nJapanFinlandNorway \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    81 \n Figure 50. Trends for locations with low infection  rates in 1H16, by CCM  (100,000 reporting computers  minimum)  \n \n The Nordic countries, including Denmark , Finland , Iceland , Norway , and \nSweden , have perennially been among the healthiest locations in the world \nwith regard to malware exposure, as has Japan . In 1H16, the infection and \nencounter rates for these locations were typically about half of the \nworldwide averages.  \n All of the locations shown in Figure 49 and Figure 50 had similar encounter \nand infection statistics in 1H16, with relatively few threat families that were \nparticularly common or uncommon compared to the wor ld as a whole. The \nadware  program Win32/Adposhel , which ranked sixth in Norway  and 11th in \nDenmark  but only 37th worldwide, was an outlier.  \nThreat categories  \nThe MMPC classifies individual threats into types based on a number of factors, \nincluding how the threat spreads and what it  is designed to do. To simplify the \npresentation of this information and make it easier to understand, the Microsoft \nSecurity Intelligence Report groups these types into categories based on \nsimilarities in function and purpose.  \n024681012141618\n3Q15 4Q15 1Q16 2Q16Computers cleaned per 1,000 scanned (CCM) DenmarkNorway\nFinlandJapanGermanyWorldwide \n82 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 51. Encounter rates for significant  malicious software  categories, 3Q15 –2Q16  \n \n Trojans  remained the most commonly encountered category of malicious \nsoftware in 1H16, due to continued high encounter rates for the generic  \ndetections Win32/Dynamer , Win32/Peals , and Win32/Skeeyah , and to \nincreased encounters involving Win32/Spursint  and Win32/Lodbak . See \n“Threat families ” beginning on page 85 for more information about these \nand other malicious and unwanted software families.  \n Worms  remained the second most commonly encountered category, driven \nby the high encounter rate of Win32/Gamarue . \n Encounters involving the Other Malware  category increased in 1H16 to make \nit the third most commonly encountered category during the period, largely \nbecause of Win32/Hadsruda , a cloud -based detection  for files that have \nbeen automatically determined to be malicious by Windows Defender . (See \n“Learning about new threats with cloud -based protection in Windows \nDefender ” on page 73 for more information about cloud -based detections.)  \n0%2%4%6%8%10%12%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Trojans\nDownloaders & \nDroppers\nPassword Stealers\n& Monitoring ToolsWorms\nObfuscators & \nInjectorsExploits\nViruses\nBackdoors\nRansomwareOther Malware \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    83 \n Figure 52. Encounter rates for unwanted software  categories, 3Q15 –2Q16  \n \n Encounters involving browser modifiers  declined significantly in 1H16, driven \nby fewer detections of Win32/Diplugem  and Win32/SupTab . See “ Threat \nfamilies ” beginning on page 85 for more information about these and other \nmalicious and unwanted software families.  \n Encounters  involving software bundlers  rose in 1Q16, primarily because of \nincreased detections of Win32/Mizenota  and Win32/Tillail , then fell in 2Q16 \nas encounters involving those threat families receded.  \nThreat categories by location  \nSignificant differences exist in the types of threats that affect users in different \nparts of the world. The spread of malware can be  highly dependent on \nlanguage and socioeconomic  factors  as well as  on the methods used for \ndistribution. Some threats are s pread using techniques that target people who \nspeak a particular language or who use online services that are local to a specific \ngeographic region. Other threats target vulnerabilities  or operating system \nconfigurations and applica tions that are unequally distributed around the world . \nFigure 53 shows the relative prevalence of different categories of malware in \nseveral locations around the worl d in 2Q16 . \n0%1%2%3%4%5%6%7%8%9%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)AdwareSoftware\nBundlersBrowser \nModifiers \n84 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 53. Threat cate gory prevalence  in 2Q16,  worldwide and in the 10 locations with the most  computers reporting  encounters   \nCategory  \nWorldwide  \nUnited States  \nChina  \nBrazil  \nRussia  \nIndia  \nTurkey  \nFrance  \nMexico  \nUnited Kingdom  \nGermany  \nTrojans  11.3%  5.1%  13.5%  21.9%  19.2%  26.6%  31.6%  6.0%  16.0%  4.7%  5.3%  \nBrowser Modifiers  4.1%  2.2%  6.8%  8.4%  7.0%  7.6%  5.5%  4.0%  4.6%  1.7%  3.1%  \nSoftware Bundlers  3.9%  1.9%  0.2%  6.0%  12.1%  8.8%  5.3%  3.8%  3.0%  2.6%  4.6%  \nWorms  3.8%  0.5%  2.9%  4.6%  1.9%  21.0%  8.1%  1.0%  9.6%  0.6%  0.4%  \nOther Malware  1.6%  1.0%  1.5%  3.3%  2.2%  2.5%  3.0%  1.0%  1.8%  0.8%  0.8%  \nDownloaders & \nDroppers  1.6%  1.0%  1.6%  5.1%  1.4%  2.9%  1.1%  1.7%  2.0%  1.2%  0.9%  \nExploits  1.5%  1.0%  0.7%  0.9%  0.4%  1.3%  1.1%  1.9%  0.7%  2.0%  1.5%  \nViruses  1.3%  0.2%  4.5%  1.1%  0.6%  3.5%  2.7%  0.2%  0.6%  0.2%  0.1%  \nObfuscators & \nInjectors  1.1%  0.3%  1.3%  1.5%  2.3%  3.0%  2.4%  0.6%  1.1%  0.4%  0.4%  \nAdware  1.0%  1.0%  0.0%  1.0%  1.3%  1.1%  1.0%  1.7%  0.9%  1.4%  1.5%  \nBackdoors  0.4%  0.2%  0.6%  0.8%  0.4%  1.1%  1.0%  0.3%  0.3%  0.2%  0.2%  \nRansomware  0.3%  0.4%  0.0%  0.1%  0.3%  0.2%  0.4%  0.2%  0.2%  0.2%  0.2%  \nPassword Stealers \n& Monitoring Tools  0.2%  0.1%  0.2%  0.2%  0.2%  0.3%  0.3%  0.1%  0.2%  0.1%  0.1%  \n \n Within each row of Figure 53, a darker color indicates that the category is \nmore prevalent in the specified location than in the others and a lighter \ncolor indicates that the category is less prevalent. As in Figure 45 on page \n74, the locations in the table are ordered by number of computers reporting \ndetections in 1H16.  \n Turkey  and India  had high encounter rates for Trojans , driven by a number \nof generic  detections including Win32/Peals  and Win32/Dynamer , and by \nWin32/Lodbak , associated with the worm  family Win32/Gamarue . \n Russia  had a high encounter rate for Software Bundlers , led by \nWin32/DLHelper , which was unusually common in Russia in 2Q16.  \n Brazil  had high encounter rates for Browser Modifiers , led by  \nWin32/SupTab , and for Downloaders & Droppers , led by Win32/Banload .  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    85 \n  The high encounter rate for viruses in China  is driven by \nDOS/JackTheRipper , a destructive virus  that affects versions of MS -DOS  and \nWindows through Windows XP , but is ineffective against all currently \nsupported Windows versions. JackTheRipper is a very old virus : the code \ncontains a spurious copyright date of 1992, and samples have been \ncollected in the wild since at least 1993 or 1994.  \n France , the United Kingdom , and Germany  all had high encounter rates for \nExploits , led by JS/Axpergle , and Adwa re, influenced by Win32/EoRezo  and \nWin32/Adposhel . \n The United States  had a high encounter rate for Ransomware , led by \nWin32/Tescrypt . \nSee “ Appendix C: Worldwide encounter and infection rates ” on page 140 for \nmore information about malware around the world.  \nThreat families  \nFigure 54 and Figure 55 show trends for the top  malicious software families  that \nwere detected on computers by Microsoft  real-time  antimalware products  \nworldwide  in 1H16 . \nFigure 54. Quarterly trends for the top 10 malicious software families  encountered  by Microsoft  real-time  antimalware products in \n1H16 , shaded according to relative encounter rate  \nRank  Family  Most significant category23 3Q15  4Q15  1Q16  2Q16  \n1 Win32/Dynamer  Trojans  0.58%  0.98%  1.01%  1.10%  \n2 Win32/Peals  Trojans  1.33%  1.06%  1.15%  0.88%  \n3 Win32/Gamarue  Worms  1.20%  1.82%  1.08%  0.95%  \n4 Win32/Spursint  Trojans  0.05%  0.60%  0.95%  1.00%  \n5 Win32/Skeeyah  Trojans  1.55%  0.98%  1.00%  0.84%  \n6 JS/Axpergle  Exploits  0.71%  0.92%  0.78%  0.69%  \n7 Win32/Obfuscator  Obfuscators & Injectors  1.08%  1.09%  0.81%  0.51%  \n8 INF/Autorun  Obfuscators & Injectors  0.54%  0.69%  0.59%  0.54%  \n9 VBS/Jenxcus  Worms  0.54%  0.67%  0.52%  0.51%  \n10 Win32/Lodbak  Trojans  0.28%  0.23%  0.14%  0.86%  \n \n                                                           \n23 Some threat families have multiple variants that belong to different categories. For each family, “most \nsignificant category” r efers to the category with the highest encounter rate for the family during the period.   \n86 MALICIOUS A ND UNWANTED SOFTWARE   \n Figure 55. Encounter rate trends for a number of notable malicious software families in 1H16  \n \n Win32/Dynamer , Win32/Pea ls, and Win32/Skeeyah  are generic  detections \nfor a variety of threats that share certain characteristics.  \n Win32/Gamarue , the most commonly encountered non -generic  threat in \n1H16, is a worm  that is commonly distributed via exploit kits  and social \nengineering. Variants have been observed stealing information from the \nlocal computer and communicating with command -and-control (C&C) \nservers managed by attackers . Gamarue was especially prevalent in \nsouthern and southeast Asia , with India  and Indonesia  together accounting \nfor about 25 percent of all Gamarue encounters during the period. Despite \nits prevalence worldwide,  Gamarue was rarely detected in most countries \nand regions in North America  and western Europe , including the United \nStates , where it was only the 32nd most commonly encountered threat \nfamily in 1H16; Canada , where it ranked 51st; Russia , where it ranked 52nd; \nand France , where it ranked 70th.  \nFor more information about Gamarue , see the following entries in the \nMMPC blog at blogs.technet .com/mmpc:  \n Get gamed and rue the day…  (October 25, 2011)  \n The strange case of Gamarue propagation  (February 27, 2013)  \n0.0%0.2%0.4%0.6%0.8%1.0%1.2%1.4%1.6%1.8%2.0%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)Win32/Gamarue\nJS/AxpergleWin32/LodbakWin32/Spursint\nWin32/Peals\nWin32/SkeeyahWin32/Dynamer \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    87 \n  JS/Axpergle , a detection for the Angler  exploit kit , is the only exploit -related \nfamily in the top ten in 1H16. See “ Exploit kits ” on page 54 for more \ninformation about Axpergle and other exploit kits.  \n Win32/Spursint  is a cloud -based detection  for files that \nhave been automatically determined to be malicious by \nWindows Defender . (See “ Learning about new threats \nwith cloud -based protection in Windows Defender ” on \npage 73 for more information about cloud -based \ndetections.) Spursint dispropor tionately affected eastern \nEurope  during 1H16, with the highest Spursint encounter \nrates coming from the former Soviet republics of \nArmenia , Belarus , and Ukraine . \n Win32/Lodbak  is a trojan  that is usually installed on removable drives by \nGamarue , and which attempts to install Gamarue when the infected \nremovable drive is connected to a computer. As might be expected, it tends \nto be encountered in the same geographic regions where Gamarue is most \ncommonly found.  \n VBS/Jenxcus  is a worm  coded in VBScript that opens a backdoor  on an \ninfected computer, enabling an attacker to control it remotely. In addition to \nspreading via removable drives, Jenxcu s is often transmitted via a fake \nAdobe Flash Player  update from spoofed YouTube  webpages. Encounters \ninvolving Jenxcus decreased significantly after the Microsoft Digital Crimes \nUnit launched a takedown operation in June of 2014 that successfully \ndisrupted the Jenxcus botnet. The original owners of the botnet \nsubsequently left the project, but the Jenxcus code is now being used by \nother criminal organizations.  \nSee “The Micros oft DCU and the legal side of fighting malware” on pages \n29–32 of Microsoft Security Intelligence Report, Volume 17 (January –June \n2014) , available from the Microsoft Download Center, for more information \nabout the Microsoft takedown of the Jenxcus  botnet. For additional \ntechnical information about Jenxcus, see the following entries in the MMPC \nblog (blogs.technet.com/mmpc):  \n MSRT  February 2014 – Jenxcus  (February 11, 2014)  \n Microsoft Digital Crimes Unit  disrupts Jenxcus  and Bladabindi malicious \nsoftware families  (June 30, 2014)  Win32/ Gamarue \nwas rare ly detected \nin most countries \nand regions in \nNorth America and \nwestern Europe .  \n88 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 56 and Figure 57 show trends for the top  unwanted software  families that \nwere detected on computers by Microsoft  real-time  antimalware products  \nworldwide  in 1H16 . 24 \nFigure 56. Quarterly trends for the top five unwanted software  families encountered by Microsoft real -time antimalware products in \n1H16 , shaded according to  relative encounter rate  \nRank  Family  Most Significant Category  3Q15  4Q15  1Q16  2Q16  \n1 Win32/Mizenota  Software Bundlers  — 0.51%  1.29%  0.75%  \n2 Win32/SupTab  Browser Modifiers  3.47%  2.42%  1.16%  0.71%  \n3 Win32/Diplugem  Browser Modifiers  2.20%  2.65%  0.84%  0.53%  \n4 Win32/Tillail  Software Bundlers  — 0.46%  1.18%  0.17%  \n5 Win32/OutBrowse  Software Bundlers  0.87%  0.90%  0.66%  0.33%  \n \nFigure 57. Encounter rate  trends for the top unwanted software families in 1H16   \n \n The declining encounter trends shown in Figure 57 follow an effort by \nMicrosoft to focus on eradicating several specific highly common unwanted \nsoftware families, particularly Win32/SupTab  and Win32/Diplugem , which \nhad been the two most commonly  encountered unwanted software families \n                                                           \n24 Microsoft has published the criteria that the company uses to classify programs as unwanted software at \nwww.microsoft.com/security/portal/mmpc/shared/objectivecriteria.aspx . For programs that have been \nclassified as unwanted software, Microsoft provides a dispute resolu tion process to allow for reporting of \npotential false positives and to provide software vendors with the opportunity to request investigation of a \nrating with which they do not agree.  \n0.0%0.5%1.0%1.5%2.0%2.5%3.0%3.5%4.0%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)\nWin32/OutBrowseWin32/Diplugem\nWin32/TillailWin32/Sasquor\nWin32/Mizenota\nWin32/SupTab \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    89 \n in 2H15 by a large margin. SupTab is a browser modifier  \nthat installs itself and changes the browser’s default \nsearch provider without obtaining the user’s consent for \neither action. The SupTab authors shifted their focus to \nother malware after Microsoft added detections for the \nfamily in 3Q15, which likely ex plains much of the decline. \nDiplugem installs browser extensions without obtaining \nthe user’s consent. The browser extensions show extra \nadvertisements as the user browses the web and can \ninject additional advertisements into web search results \npages. Dipl ugem encounters began to decline after \ndetections for the family were added to the MSRT  in \nOctober 2015, and remained significantly lower through \n1H16.  \n Win32/Mizenota , the most commonly encountered unwanted software \nfamily in 1H16, is a software bundler  that installs other unwanted software \nfamilies, including SupTab  and Sasquor . \n Win32/Sasquor  first appeared in early April and quickly became the second \nmost common ly encountered unwanted software family in 2Q16. Sasquor is \na browser modifier  that modifies search and home page settings, and \ninstalls services and scheduled tasks to prevent the user from changing \nthem back. It can also downloa d additional malware, including SupTab  and \nWin32/Xadupi . \n Win32/OutBrowse  is a software bundler  that installs additional unwanted \nprograms alongside software th at the user wishes to install. It can remove or \nhide the installation program’s close button, leaving no option for users to \nclose or decline the installation of offered applications.  Win32/ SupTab is a \nbrowser modifier \nthat installs itself \nand changes the \nbrowser’s default \nsearch provider \nwithout obtaining \nthe user’s consent \nfor either action .  \n90 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 58. Win32/OutBrowse  installs software without a close or Cancel button to allow the user to decline \ninstallation  \n \nThreat families by platform  \nMalware does not affect all platforms equally. Some threats are spread by \nexploits that are ineffective against one or more  operating system versions. \nSome threats are more common in parts of the world where specific platforms \nare more or less popular than elsewhere. In other cases, differences between \nplatforms might  be caused by simple random variation.  \nFigure 59 and Figure 60 demonstrate how detections of the most prevalent  \nmalicious and unwanted software  famili es in 2Q16  ranked differently on \ncomputers running different operating system  versions . \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    91 \n Figure 59. The malicious software families  most commonly encountered  by Microsoft  real-time  antimalware solutions in 2Q1 6, and \nhow they ranked in prevalence on different platforms  \nRank \n(Overall)  Family  Most significant \ncategory  Rank (Win. \nVista)  Rank  \n(Win. 7)  Rank  \n(Win. 8)*  Rank  \n(Win. 10)  \n1 Win32/Dynamer  Trojans  4 3 3 1 \n2 Win32/Spursint  Trojans  12 6 6 2 \n3 Win32/Gamarue  Worms  13 2 1 6 \n4 Win32/Peals  Trojans  6 4 2 5 \n5 Win32/Lodbak  Trojans  19 5 4 4 \n6 Win32/Skeeyah  Trojans  11 7 5 3 \n7 JS/Axpergle  Exploits  22 1 13 13 \n8 Win32/Xadupi  Trojans  2 8 7 10 \n9 INF/Autorun  Obfuscators & Injectors  18 10 8 11 \n10 Win32/Rundas  Trojans  5 9 12 8 \n24 JS/FakeCall  Other Malware  3 31 26 26 \n69 Win32/Falrile  Trojans  1 30 27 62 \n* Includes Windows 8 .1 \n Encounters involving JS/Axpergle , a detection for the Angler  exploit kit  and \nthe only exploit -related family in the t op ten in 1H16, were mostly confined \nto computers running Windows 7 ; although Axpergle ranked first on that \nplatform, it ranked 22nd on Windows Vista  and 13th on both Windows 8  \n(including Windows 8. 1) and Windows 10 . The malicious webpages that \nexploit kits use to spread malware often include scripts that detect certain \naspects of the computer’s computing environment and only present their \nexploits to computers that meet criteria specified by the attacker. The Angler  \nexploit kit  clearly affects Windows 7 far more than other platforms, which \nmay partially be caused by the integration of Adobe Flash Player  into \nInternet Explorer  in Windows 8 and subsequent versions. The Angler  exploit \nkit relies heavily on exploiting vulnerabilities  in old, out -of-date versions of \nFlash Player, which must be installed as an add -on and updated separately \nfrom Internet Explorer in versions of Windows prior to Windows 8. Because \nFlash Player is integrated into Internet Explorer in Windows 8 and \nsubsequent versions, it receives security updates through Windows Update  \nand Microsoft Update  along with other operating system components, \nwhich makes it easier for users to stay current on security updates for the \ncomponent.   \n92 MALICIOUS AND UNWANT ED SOFTWARE   \n  Although the list of th e most commonly encountered malicious software \nfamilies was otherwise mostly consistent from platform to platform, \nWindows Vista  is noticeably different. The remaining installed base for \nWindows Vista, the oldest currently supported c lient version of Windows, is \nvery low relative to newer versions of Windows, and some of the variance \nseen in Figure 59 may be an artifact of the relatively small population of \ncomputers running Windows Vista.  \nAs Figure 60 illustrates, unwanted software is generally consistent between \nplatforms as well.  \nFigure 60. The unwanted software  families most commonly encountered by Microsoft real -time antimalware solut ions in 2Q16 , and \nhow they ranked in prevalence on different platforms  \nRank  \n(Overall)  Family  Most significant category  Rank (Win. \nVista)  Rank  \n(Win. 7)  Rank  \n(Win. 8)*  Rank  \n(Win. 10)  \n1 Win32/Mizenota  Software Bundlers  1 1 3 2 \n2 Win32/Sasquor  Browser Modifiers  12 4 2 1 \n3 Win32/SupTab  Browser Modifiers  3 2 1 3 \n4 Win32/Diplugem  Browser Modifiers  2 3 4 4 \n5 Win32/Stallmonitz  Software Bundlers  9 5 8 8 \n* Includes Windows 8 .1 \n Unlike malicious software, unwanted software delivery mechanisms typically \nmake little effort to distinguish between different platforms, and as a result \nthe list of the most commonly encountered unwanted software families is \nsimilar on each suppor ted platform.  \nRansomware  \nRansomware is a type of malware that is designed to  render a computer or its \nfiles unusable until the computer user pays a certain amount of money to the \nattacker or takes other actions.  Early ransomware families typically displayed \nwhat looked like official warnings from well -known law enforcement agencie s, \naccusing the computer user of committing a computer -related crime and \ndemanding  that the user pay a fine via electronic money transfer or a virtual \ncurrency such as Bitcoin  to regain control of the computer.  In recent years, \nmany of the more commonly encountered ransomware families have dropped \nthe pretense of coming from law enforcement: they simply encrypt important \nfiles on the computer and offer to sell the user the private key to decrypt them.  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    93 \n Attackers often demand payment in Bitcoi n, a popular virtual currency, or \nthrough other difficult -to-trace means.  \nFigure 61. Examples of the lock screens used by different ransomware families  \n \nRansomware affects different parts of the world in varyin g degrees . Figure 62 \nshows encounter rates for ransomware families by country and region in 2Q16.  \n \n94 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 62. Encounter rates for ransomware families by country/region in 2Q16  \n \n The location with the highest ransomware encounter rate in 2Q16 was Italy  \n(0.82 percent), followed by Bulgaria  (0.74 percent) and Taiwan  (0.67  \npercent).  \n Ransomware tends to target countries and regions that otherwise have \nrelatively low infection rates. Italy , with the highest ransomware infection \nrate in the world, had an overall encounter rate of 18.8 percent in 2Q16, \nlower than the worldwide encounter rate of 21.2 percent. South Africa , with \nthe fourth highest ransomware encounter rate in the world in 2Q16, had the \nlowest overall infection rate in Africa during the same period.  \nFigure 63 displays encounter rate trends for several of the most commonly \nencountered ransomware families worldwide.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    95 \n Figure 63. Trends for se veral commonly encountered ransomware families in 1H16, by quarter  \n \n Win32/Tescrypt , the most commonly encountered ransomware family \nworldwide in 1H16, is typic ally dropped by exploit kits  such as Angler  \n(Axpergle ) and Sweet Orange (Anogre ). It encrypts more than 180 different \ntypes of file by extension, and displays a demand for payment in Bitcoins  to \nbe paid to a dark website accessible via Tor . Encounter rates for Tescrypt \nwere highest in Bulgaria  (0.13 percent in 2Q16), Korea  \n(0.13 percent), and Italy  (0.12 percent).  In May of 2016, the \nTescrypt authors announced that they were ceasing \noperations and released the Tescrypt master key to the \npublic.  \n Win32/Locky  was the second most commonly \nencountered ransomware family worldwide in 1H16. \nEncounter rates were highest in South Africa  (0.13 \npercent in 2Q16), Croatia  (0.09 percent), and \nLuxembourg  (0.09 percent). First detected in February \n2016, Locky is typically downloaded to computers via \nthreats like JS/Nemucod  and O97M/Donoff , which are \nspread by spam  email messages, and by exploit kits  such as Neutrino  and \nRIG. After encrypting and renaming a victim’s files, Locky replaces the \ncomputer’s desktop background with a demand for payment in Bitcoins , \nand instructions for transmitting the payment to the attacker.  \n0.00%0.02%0.04%0.06%0.08%0.10%0.12%0.14%0.16%0.18%0.20%\n3Q15 4Q15 1Q16 2Q16Encounter rate (percent of all reporting computers)\nJS/FakeBsodWin32/CrowtiJS/BroloWin32/CerberWin32/LockyWin32/TescryptWin32/Locky en -\ncrypts and remains \nthe victim’s files, \nand then replaces \nthe desktop \nbackground with a \ndemand for \npayment.   \n96 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 64. Desktop background and web page used by Win32/Locky  \n \nLocky  searches for and encrypts more than 450 different types of file by \nextension. It is typically configured to avoid computers located in Russia  or \nwhich use the Russian language , which gives a clue to its origins: att ackers \noften try not to infect computers located in their home country  or region , in \nan effort to avoid drawing attention from local authorities. Locky has been \nrevised several times since its discovery in February to add code \nobfuscation, offline encrypti on, and other features. The Locky authors \nappear to use affiliates to distribute it, based on the presence of affiliate IDs \nfound in the malware.  \nFor additional information about Locky , see the following entry in the MMPC  \nblog (blogs.technet. com/mmpc):  \n The new .LNK between spam  and Locky  infection  (October 19, 2016)  \n Win32/Cerber  is another new ransomware family, which is often spread via \nthe RIG  (Meadgive ) and Magni tude  (Pangimop ) exploit kits . Cerber is a \nransomware -as-a-service family, sold to prospective attackers by its creators \nand designed to be easy to use by novices. Encounter rates for  Cerber were \nhighest in Qatar  (0.10 percent in 2Q16), the Former Yugoslav Republic of \nMacedonia  (0.09 percent), and Bosnia and Herzegovina  (0.09 percent).  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    97 \n  Win32/Crowti  (known as “CryptoWall ” and “CryptoDefense ”), the most \ncommonly encountered ransomware family worldwide in 2H15, declined to \nmuch lower levels in 1H16 as its authors stopped actively distributing it. First \ndetected in late 2013, Crowti is a file encrypting ransomware family that \ntypically spreads through spam  or is installed by downloader  malware and \nexploits.  \nMicrosoft recommends that victims of ransomware infections not pay the so -\ncalled fine. Ransomware is distributed by malicious attackers, not legitimate \nauthorities, and paying the ransom is no guarantee that the attacker will restore \nthe affected computer to a usable state. Microsoft provides free tools and \nutilities, such as the Microsoft Safety Scanner  and Windows Defender Offline , \nthat can help remove a variety of malware infections even if the computer’s \nnormal operation is being blocked.  \nSee “Ransomware Protection in Windows 10  Anniversary Update ” at \nhttps://go.microsoft.com/fwlink/?linkid=837485  for information about new \nfeatures designed to fight ransomware in the latest release of Windows 10, and \nvisit www.microsoft.com/security/portal/mmpc/shared/ransomware.aspx  for \nmore information about ransomware and how computer users can avoid being \ntaken advantage of by this type of threat.  \nThreats from targeted attackers  \nAlthough using a real -time security software product from a reputable vendor \nand keeping the detection signatures up -to-date remains one of the best ways \nindividuals and o rganizations can protect  themselves against known threats, \nconventional antimalware software is often less effective against advanced \nattacks, such as those conducted by targeted attack groups . These g roups, \nwhich focus on targeting computers at specific institutions, often use specially \ncrafted threats that they test against popular antimalware solutions ahead of \ntime to ensure that they will not be detected. By the time detection signatures \nare available to stop such a threat, it may have already comprom ised the \norganization. To help organizations combat such attacks, Office 365 Advanced \nThreat Protection, available with select Office 365 plans, provides an additional \nlayer of defense against threats and malicious links that have never been \nencountered be fore.  \nWhen an incoming message includes a potentially dangerous attached file, \nOffice 365 Advanced Threat Protection  launches it in a detonation chamber —a  \n98 MALICIOUS AND UNWANT ED SOFTWARE   \n virtual sandboxed environment in which potential threats can run without \nposing harm to any other resources —and monitors it for suspicious behavior \nsuch as registry changes, attempts to access memory dumps, changes to \nexecutables, and other actions that malware characteristically takes. This \nmonitoring makes it possible to detect a nd block threats that have never been \nseen before and for which no detection signatures are  available. Some \nadvanced threats avoid taking malicious actions when they determine they are \nbeoing run in a virtual machine. Office 365 Advanced Threat Protection includes \nanti-sandbox detection features to combat  this behavior . \nFigure 65. How Office 365 Advanced Threat Protection works with Exchange Online  \n \nFigure 66 illustrates the file types of the malicious attachments blocked by Office \n365 Advanced Threat Protection in 1H16.  \nSafe \nMultiple filters + multiple antivirus engines  \nwith Exchange Online protection  \nLinks  \nRecipient  \nUnsafe  \nAttachment  \n• \nSupported file type  \n• \nClean by AV/AS filters  \n• \nNot in Reputation list  \nDetonation chamber  \n(sandbox)  \nExecutable?  \nRegistry call?  \nElevation?  \n……? \nSender  \nSafe l inks rewrite   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    99 \n Figure 66. Types of malicious files b locked by Office 365 Advanced Threat Protection in 1H16  \n \nExcludes unknown file types. Totals for JavaScript  and Other are incomplete due to a data collection error.  \n About 30 percent of the malicious files in Figure 66 were delivered inside \ncontainer files, such as .zip and .rar files.  \n Microsoft Word  files accounted for 38.5 percent of malicious files. Of these, \nthe most common file extensions were .doc, used for the binary file format \nused in Word  97-2003, and .docm, used for Word  documents that contain \nmacros.  \n JavaScript  files accounted for the second largest type of file, at 30.6 percent \nof the total. JavaScript files also accounted for the overwhelming majority of \nmalicious files contained within .zip files. Overall, about 70 percent of .js files \nattached to email messages were determined to be malicious, whether in a \ncontainer file or not.  \n Executable files accounted for the third largest share of malicious files, at \n18.6 percent of the total. This type includes the familiar .exe exten sion used \nby most executable programs in Windows, along with a number of other \nextensions, such as .scr, .com, .pif, and .cpl. Executable files can provide an \nattacker with an easy way to compromise a computer without relying on \nexploiting a vulnerability,  but most enterprise email servers and programs \nare configured to block them by default.  \n Microsoft Excel  and URL files each accounted for a small percentage of the \ntotal.  \nWord\n38.5%\nJavaScript\n30.6%EXE\n18.6%Excel\n5.1%URL\n2.1% Other\n5.2% \n100 MALICIOUS AND UNWANT ED SOFTWARE   \n  Other file types accounted for 13.8 percent of the total. Som e of the more \ncommon file extensions here were .eml, used by Microsoft Outlook  to save \nemail messages to disk; .wsf, used by the Windows Script Host ; and .jar, a \npackage format used for Java  files.  \n PDF files, which have historically been a popular method for sending \nmalware to targeted victims, accounted for only 0.9 percent of malicious file \ndetections, as attackers have moved from embedding malware directly in \nPDF files to sending clean PDFs that contain links to malicious  URLs. (See \npage 111 for information about malicious websites.)  \nAs Figure 67 demonstrates, the file types used for advanced threats changes \nsignificantly from month to month, as targeted attack groups shift between \ndifferent victims and tactics.  \nFigure 67. Malicious files blocked by Office 365 Advanced Threat Protection in 1H16, by month  \n \nExcludes unknown file types. Totals for JavaScript  and Other in May and June are incomplete due to a data collection error.  \n Detections of malicious Word  files were highest in January and declined \neach month through May before rebounding in June.  \n Malicious JavaScript  files accounted for more than half of the total in April, \nthen retreated t o much lower levels in the following months.  \n Malicious executables and Excel  files were most common in May and June, \nrespectively.  \n0%10%20%30%40%50%60%70%80%90%100%\nJanuary February March April May JunePercent of all malicious files\nWord JavaScript EXE Excel URL Other \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    101 \n Potentially unwanted applications in the enterprise  \nMicrosoft has published the criteria used to classify programs as unwanted \nsoftwar e at \nwww.microsoft.com/security/portal/mmpc/shared/objectivecriteria.aspx . \nCharacteristics of unwanted software can include depriving users of adequate \nchoice or co ntrol over what the software does to the computer, preventing \nusers from removing the software, or displaying advertisements without clearly \nidentifying their source. Microsoft security products classify unwanted software \nas threats, and block or remove th em when they are encountered.  \nSome programs don’t meet the criteria to be considered unwanted software but \nstill exhibit behaviors that may be considered undesirable, particularly in \nenterprise environments. Microsoft classifies these programs as potentially \nunwanted applications  (PUA). For example, a program that displays additional \nadvertisements in the browser might not be classified as unwanted software if it \nclearly identifies itself as the source of the ads, but may be considered \npotentially unwanted. Users often end up installing these programs because \nthey were installing an application that they wanted, and the inst aller offered to \ninstall additional software —usually with the offer acceptance checked by default \nand often without the user realizing they are agreeing to install the additional \nsoftware. These programs can also cause problems for network \nadministrators —they can affect computer performance, increase the workload \nfor the IT help desk, put computers and data at risk of being compromised \nthrough exploits, and make it more difficult to identify malware infections \namong the noise. To provide organizations with additional options for dealing \nwith programs classified as PUA, Microsoft offers  enterprise users of System \nCenter Endpoint Protection  (SCEP ) the ability to b lock them from being installed \non their networks.  \nPUA statistics  \nFigure 68 shows the PUA families blocked most often by SCEP  in 2Q16.   \n102 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 68. PUA families blocked in 2Q16  \n \n PUA:Win32/InstallCore  and PUA:Win32/CandyOpen  are detections for \ninstaller programs that were built with software bundler  utilities (called \nInstallCore and OpenCandy , respectively) that  offer monetization \nopportunities to software developers, such as pay -per-install services for \nprograms that offer to download other programs alongside the requested \napplication. The OpenCandy  installer was frequently encountered bundled \nwith μTorrent , a popular file -sharing program, and paint.net , an image and \nphoto editing program. InstallCore was often bundled with audio and video \nfile conversion programs.  \n PUA:Win32/AskToolbar  and PUA:Win32/MyWebSearch  are toolbar \nprograms that are frequently offered for download with other programs \nthrough pay -per-install arrangements.  \n PUA:Win32/RelevantKnowledge  is a tool used by a marketing research \ncompany to gather analytics about Internet usage from people who install \nthe software. Like many of the other programs discussed in this section, it is \noften bundled with other software.  \nWin32/InstallCore\n22.0%Win32/CandyOpen\n8.2%\nWin32/AskToolbar\n6.3%\nWin32/MyWebSearch\n5.7%\nWin32/RelevantKnowle\ndge\n4.2%\nWin32/Conduit\n4.0%\nWin32/Isrocore\n3.8%\nWin32/Spigot\n3.8%Win32/DownloadAdmin\n2.9%\nWin32/ExpressDownloa\nder\n2.4%Win32/iBryteInstaller\n2.2%Win32/DownloadSpons\nor\n2.1%All others\n32.4% \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    103 \n PUA programs detected in 1H16 were split nearly evenly between digitally signed \nand unsigned programs. Figure 69 lists the top signed and unsigned PUA \nprograms detected.  \nFigure 69. The most commonly detected signed and unsigned PUA families in 1H16  \nRank  Signe d application  % of \nSigned  Unsigned application  % of \nUnsigned  \n1 PUA:Win32/InstallCore  23.0%  PUA:Win32/InstallCore  34.0%  \n2 PUA:Win32/CandyOpen  7.5%  PUA:Win32/Isrocore  6.2%  \n3 PUA:Win32/MyWebSearch  6.4%  PUA:Win32/CandyOpen  5.8%  \n4 PUA:Win32/RelevantKnowledge  5.1%  PUA:Win32/ExpressDownloader  4.6%  \n5 PUA:Win32/AskToolbar  5.1%  PUA:Win32/DownloadAdmin  4.4%  \n6 PUA:Win32/Conduit  4.6%  PUA:Win32/iBryteInstaller  4.1%  \n7 PUA:Win32/Spigot  3.6%  PUA:Win32/DownloadSponsor  3.6%  \n8 PUA:Win32/DownloadAdmin  2.8%  PUA:Win32/Softonic  2.4%  \n9 PUA:Win32/Isrocore  2.7%  PUA:Win32/Mobogenie  2.2%  \n10 PUA:Win32/ExpressDownloader  2.4%  PUA:Win32/RelevantKnowledge  1.8%  \n \nBlocking PUA with System Center Endpoint Protection  \nSystem administrators can configure the PUA protection feature through System \nCenter Configuration Manager  (SCCM ) or Microsoft Intune . For more \ninformation about creating a configuration item to enable PUA protecti on in \nSystem Center Configuration Manager, see How to Configure Endpoint \nProtection in Configuration Manager  and Detect and block Potentially \nUnwanted Application in Windows 10  on Microsoft TechNet \n(technet.microsoft.com). For more  information about configuring policy settings \nin Microsoft Intune, see Intune  policy settings  for Windows 10 devices  in \nMicrosoft Intune , also on Microsoft TechNet.  \nFigure 70. PUA is blocked by System Center Endpoint Protection (left) and Windows Defender  in Windows 10  (right)  \n  \nWhen enabled, PUA is blocked and automatically quarantined; users who \nrequest more information online are informed that the program was blocked \n \n104 MALICIOUS AND UNWANT ED SOFTWARE   \n from running on the network because it has a poor reputation. PUA that is \nalready installed on the computer will not be removed.  \nSecurity software use  \nRecent releases of the MSRT  collect and report details about the state of real -\ntime antimalware software on a computer, if the computer’s administrator has \nchosen to opt in to provide data to Microsoft. This telemetry data makes it \npossible to analyze security software usage pattern s around the world and \ncorrelate them with infection rates. Figure 71 shows the percentage of \ncomputers worldwide that the MSRT  found to be running up -to-date real -time \nsecurity software each quarter in 2H15 and 1H16.  \nFigure 71. Average monthly percentage of computers reporting security software enabled, 3Q15 –2Q16  \n \n More than 80 percent of c omputers reported having real -time security \nsoftware enabled during each of the past four quarters, increasing to 88 \npercent by 2Q16. Much of the increase corresponds to increased adoption \nof Windows 10 , which comes with Windows Defender  installed and \nautomatically enabled if no other security software is present, replacing \ninstallations of older versions of Windows that did not have this feature.  \n0%10%20%30%40%50%60%70%80%90%100%\n3Q15 4Q15 1Q16 2Q16Percent of computers running the MSRT reporting as protected \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    105 \n Security software use worldwide  \nJust as infection and encounter rat es differ from one country or region to \nanother, so do security software usage rates, as shown in Figure 72. \nFigure 72. Avera ge security software protection state for the locations with the most computers executing the MSRT  in 1H16  \n \n All of the locations in Figure 72 reported at least 80 percent of computers \nprotected by real -time security software in 1H16, ranging from 83.8 percent \nin Russia  to 91.5 percent in Germany . \n In addition, all of these locations except Russia  exceeded the worldwide \naverage protection rate in 2H16.  \nThe rate of security software usage in a country or region often correlates with \nits infection rate. Figure 73 shows the percentage of computers in different \ncountries and regions that reported being protected in 2Q16.  \n0%10%20%30%40%50%60%70%80%90%100%Percent of computers running the MSRT reporting as protected \n106 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 73. Average monthly percent of computer s reporting security software enabled in 2Q16, by country/region  \n \n The locations with the highest percentage of computers reporting as \nprotected by real -time security software include Finland , with an average of \n93.9 percent each month in 2 Q16; Denmark , at 92.3 percent; and Norway , at \n92.2 percent.  \n Locations with the fewest computers reporting as fully protected include \nLibya , at 68.0 percent; Kyrgyzstan , at 77.3 percent; and Algeria , at 78.5 \npercent.  \nCountries and regions with high percentages of computers reporting as fully \nunprotected also tend to have high infection rates, as Figure 74 shows.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    107 \n Figure 74. Infection rates for the locations with the highest percentage of computers reporting as fully unprotected in 1H16  \nCountry/region  1H16 average unprotected %  CCM 1Q16  CCM 2Q 16 \nLibya  30.7%  83.5  79.2 \nAlgeria  21.8%  52.2  52.5  \nNigeria  21.8%  34.7 29.4  \nIraq 20.8%  62.9  60.2  \nTanzania  20.5%  33.6  34.8  \nCameroon  19.9%  42.4  38.8  \nZimbabwe  19.9%  34.6  29.9  \nIndonesia  19.3%  49.2  37.0 \nAzerbaijan  19.0%  30.6  24.4  \nMongolia  18.4%  68.8  59.9  \nWorldwide  13.5%  8.4 8.8 \n \n The locations in the table all had overall infection rates ranging between 2.8 \nand 10.0 times as high as the worldwide average each quarter.  \n Libya , which had the highest percentage of unprotected computers in both \nquarters of 1H16, also had the highest infection rate in both quarters, as \nshown in Figure 48 on page 78. \nSecurity software use by platform  \nProtection rates can also vary by operating system, as shown in Figure 75.  \n108 MALICIOUS AND UNWANT ED SOFTWARE   \n Figure 75. Average monthly security software protection state for supported client versions of Windows in 1H16, by quarter  \n \n* Includes Windows 8 .1 \n In general, computers running newer versions of Windows tended to re port \nbeing unprotected less often than computers running older versions.  \n The high rate of protection with Windows 10  is primarily because of a \nchange in the way Windows Defender  operates. To provide Windows 10 \nusers with protection from malware out of the box, Windows Defender is \nautomatically activated upon installation of Windows 10 if no other real -time \nsecurity product is installed, as opposed to a few days after installation  in \nWindows 8  and Windows 8.1 . \nThe reasons computers go unprotected can vary significantly by platform, as \nFigure 76 illustrates.  \n0%5%10%15%20%25%30%\nWindows Vista Windows 7 Windows 8* Windows 10 TH1 Windows 10 TH2Percent of computers reporting as unprotected \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    109 \n Figure 76. Computers running supported client versions of Windows reporting statuses other than Protected in 1H16  \n \n* Windows Vista  and Windows 7  do not report expired subscriptions.  \n On Windows Vista  and Windows 7 , unprotected computers predominantly \nreport having no antimalware software installed at all. On subsequent \nWindows versions, Windows Defender  is enabled by default if no other \nantimalware software is present, so the number of computers reporting no \nantimalware software is very low.  \n On Windows 8  and Windows 8.1 , expired versions of commerc ial \nantimalware products that are no longer receiving signature updates \naccount for the largest percentage of unprotected computers.  \n On Windows 10 , out -of-date signatures were the most common reason \ncomputers lacked protection. Expired s ubscriptions accounted for a very low \npercentage of unprotected computers running Windows 10, possibly \nreflecting both increased use of Windows Defender  and new computers \nwith pre -installed trial subscriptions of commercial antimal ware products \nthat had yet to expire during the period. Computers on which real -time \nmonitoring had been temporarily turned off, or “snoozed,” accounted for \nthe second highest share.  \nGuidance: Defending against malware  \nEffectively protecting users from malware requires an active effort on the part of \norganizations and individuals. For in -depth guidance, see  Help prevent malware \n0%10%20%30%40%50%60%70%80%90%100%\nWindows Vista* Windows 7* Windows 8 Windows 8.1 Windows 10Percent of computers reporting as other than Protected\nNo AV installed Off Out of date Expired Snoozed \n110 MALICIOUS AND UNWANT ED SOFTWARE   \n infection on your PC  at the Microsoft Malware Protection Center website at \nwww.microsoft.com/mmpc.  \nFor help understanding the threa ts that pose the greatest risk to your \nenvironment and how to defend against them, see “ Fixing the #1 Problem in \nComputer Security: A Data -Driven Defense ,” available fro m Microsoft TechNet.  \n  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    111 \n Malicious websites  \nAttackers often use websites to conduct phishing attacks or \ndistribute malware . To help protect users from malicious \nwebpages, Microsoft and other browser vendors have \ndeveloped filters that keep track of sites that host malware and \nphishing attacks and display prominent warnings when users \ntry to navigate to them .  \nMalicious websit es often  appear to be completely legitimate , and provide no \noutward indicators of their malicious nature even to experienced computer \nusers . In many cases, these sites are legitimate websites that have been \ncompromised by malware , SQL  injection, or other techniques in effort s by \nattackers to take advantage of the trust users have invested in such sites . In \nother cases, attackers run their own sites and use social engineering to draw in \ntraffic.  \nThe information in this section is compiled from a variety of sources, including \ntelemetry data produced by SmartScreen Filter  in Internet Explorer  versions 8 \nthrough 11 and Microsoft Edge , from a database of known active phishing and \nmalware  hosting sites reported by users of Internet Explorer and other Microsoft \nproducts and services, and from malware data provided by Microsoft \nantimalware technologies. (See “ Appendix B: Data sources ” on page  137 for \nmore information about the products  and services that provided data for this  \nrepo rt.)  \n112 MALICIOUS WEBSITES   \n Figure 77. SmartScreen Filter in  Microsoft Edge  and Internet Explorer  blocks reported phishing and malware  \ndistribution sites to protect users  \n \nPhishing sites  \nMicrosoft gathers information about phishing sites and impressions from \nphishing impressions that are  generated by users who choose to enable \nSmartScreen Filter.25 A phishing impression is a single instance of a user \nattempting to visit a known phishing site with SmartScreen Filter enabled and \nbeing warned, as illustrated in Figure 78. \n                                                           \n25 See “ Appendix B: Data sources ” on page 137 for privacy statements and other  information about the \nproducts and services used t o provide data for this report.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    113 \n Figure 78. How Microso ft tracks phishing impressions  \n \nFigure 79 illustrates the volume of phishing impressions tracked by SmartScreen \nFilter each month in 1H16, compared to the volume of distinct phishing URLs \nvisited.  \nFigure 79. Phishing sites and impressions reported by SmartScreen Filter  each month in 1H16 , relative to the monthly average for \neach  \n \n0%20%40%60%80%100%120%\nJanuary February March April May JunePercent of monthly averageSites\nImpressionsAverage \n114 MALICIOUS WEBSITES   \n  The numbers of active phishing sites and impressions rarely correlate \nstrongly with each other. Phishers sometimes engage in campaigns that \ntemporarily drive more traffic to each phishing page without necessarily \nincreasing the total number of active phish ing pages they maintain at the \nsame time. Nevertheless, both sites and impressions remained remarkably \nstable throughout 1H16, with neither one varying more than about 5 percent \nfrom the period average.  \nTarget institutions  \nSome types of sites tend to cons istently draw many more impressions per site \nthan others . Figure 80 shows the breakdown of phishing impressions by \ncategory as reported by SmartScreen Filter.  \nFigure 80. Phishing sites and impre ssions reported by SmartScreen Filte r for each type of phishing site in 1H16  \n \n Phishing sites that targeted online services received the largest share of \nimpressions during the period, and accounted for the largest number of \nactive phishing URLs.  \n Financial institutions have always been popular phishing targets because of \ntheir potential for providing direct illicit access to victims’ bank accounts. \nSites that targeted financial institutions accounted for the second largest \nshare of both attacks and impressions.  \n0%5%10%15%20%25%30%35%40%45%50%\nOnline Services Financial Sites E-Commerce Social Networking GamingPercent of total impressions/sitesSites\nImpressions \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    115 \n  The other three categories each accounted for a small percentage of both \nsites and impressions.  \nGlobal dis tribution of phishing sites and clients  \nPhishing impression information from SmartScreen Filter includes anonymized \ninformation about the IP addresses of the clients making the reports, as well as \nthe IP addresses of the phishing sites themselves. Performi ng geographic \nlookups on these addresses makes it possible to analyze patterns among both \nthe computers that host phishing sites and the users that they target . \nFigure 81. Phishing sites per 1,000 Internet hosts for  locations around the world in 1H16  \n \n SmartScreen Filter detected 9.1 phishing sites per 1,000 Internet hosts \nworldwide in 1H16.  \n Locations hosting higher than average concentrations of phishing sites \ninclude Ukraine  (18.8 per 1,000 Internet  hosts in 1H16), South Africa  (15.4), \nand Australia  (14.5). Locations with low concentrations of phishing sites \ninclude Taiwan  (1.5), Korea  (2.0), and China  (2.8).  \n \n116 MALICIO US WEBSITES   \n Figure 82. Phishing  impressions  by client location  per 1,000 ,000  pageviews in in 1H16  \n \n SmartScreen Filter reported 17.8 phishing attempts per 1,000,000 pageviews \nin 1H16.  \n Locations with unusually high rates of phishing impressions included Nigeria  \n(74.2 phishing impressions per 1,000 pageviews in 1H16), South Africa  (62.6), \nand Spain  (57.7).  \n Locations with unusually low rates of phishing impressions include Korea  (1.1 \nimpressions per 1,000,000 pageviews in 1H16), China  (1.6), and Russia  (2.2).  \nMalware hosting sites  \nSmartScreen Filter helps provide protection against sites that are known to host \nmalware , in addition to phishing sites. SmartScreen Filter uses file and URL \nreputation data and Microsoft antimalware technologies to determine whether \nsites distribute unsafe content. As with phishing sites, Microsoft collects \nanonymized data regarding how many people visit each malware hosting site \nand uses the information to improve SmartScreen Filter and to better combat \nmalware distribution.  \nFigure 83. SmartScreen Filter in  Microsoft Edge  and Internet Explorer  displays a warning when a user attempts to download an \nunsafe file  \n \nFigure 84 compares the volume of active malware  hosting sites in the Microsoft \ndatabase each month with the volume of malware impressions tracked.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    117 \n Figure 84. Malware hosting sites and impressions tracked each month  in 1H16 , relative to the monthly average for each  \n \n Monthly malware  impressions more than tripled from January to June due \nto several factors, including aggres sive campaigns by attackers and \nimproved detection and classification by SmartScreen Filter. In 2015, the \nMMPC updated its malware evaluation criteria to include ads that are \ndeceptive and misleading , which are now classified as malware by \nSmartScreen Filt er and blocked . Over the past year, the volume  of ads that \nmeet these criteria  has increased , including an emerging subset designed to \ntake advantage of users seeking technical support . \nGlobal distribution of malware  hosting sites and clients  \nFigure 85 and Figure 86 show the geographic distribution of malware  hosts and \ncomputers reporting  impressions in 1H16.  \n0%20%40%60%80%100%120%140%160%180%\nJanuary February March April May JunePercent of monthly averageSitesImpressions\nAverage \n118 MALICIOUS WEBSITES   \n Figure 85. Malware distribution sites per 1,000 Internet hosts for lo cations around the world in 1H1 6 \n \n SmartScreen Filter detected 36.8 malware  hosting sites per 1,000 Internet \nhosts worldwide in 1H16.  \n China , which had a lower than average concentration of phishing sites (2.8 \nphishing sites per 1,000 Internet hosts in 1H16), also had a high \nconcentration of malware  hosting sites (59.6 malware hosting sites per 1,000 \nhosts in 1H16). Other locations with large concentrations of malware hosting \nsites included Vietnam  (60.8), Ukraine  (53.8), and Thailand  (49.4). Locations \nwith low concentrations of malware hosting sites included Finland  (14.8), \nAustria  (16.2), and Sweden  (16.4).  \nFigure 86. Malware impressions by client location per 1,000 ,000  pageviews in in 1H16  \n \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    119 \n  Malware impressions were much more common than phishing impressions \nin 1H16. SmartScreen Filter reported 769.7 malware  impressions per \n1,000,000 page views during the period, compared to 17.8 phishing attempts \nper 1,000,000 pageviews.  \n Locations that were heavily affected by malware  impressions included \nIreland  (3,228.9 malware impressions per 1,000,000 pageviews in 1H16),  \nSaudi Arabia  (3,110.5), and the United Arab Emirates  (2,046.2).  \n Locations with unusually low malware  impression rates included Korea  \n(112.0), Japan  (206.9), and Slovenia  (311.3).  \nDrive -by download sites  \nA drive -by download  site is a website that hosts one or more exploits that target \nvulnerabilities  in web browsers and browser add -ons. Users with vulnerable \ncomputers can be infected with malware  simply by visi ting such a website, even \nwithout attempting to download anything.  \nDrive -by download pages are usually hosted on legitimate websites to which an \nattacker has posted exploit code. Attackers gain access to legitimate sites \nthrough intrusion or by posting mal icious code to a poorly secured web form, \nlike a comment field on a blog. Compromised sites can be hosted anywhere in \nthe world and concern nearly any subject imaginable, making it difficult for even \nan experienced user to identify a compromised site from a list of search results.  \nFigure 87. One example of a drive -by download attack  \n \n \n120 MALICIOUS WEBSITES   \n Search engines such as Bing have taken a number of measures to help protect \nusers from drive -by downloads. As Bing indexes webpages, they are assessed \nfor malicious elements or malicious behavior. Because the owners of \ncompromised sites are usually victims themselves, the sites are not removed \nfrom the Bing index. Instead, clicking the link in the list of search results displays \na promi nent warning, saying that the page may contain malicious software, as \nshown in Figure 88. \nFigure 88. A drive -by download warning from Bing  \n \nFigure 89 shows the concentration of drive -by download pages in countries and \nregions throughout the world at the end of 1Q16 and 2Q16, respectively.  \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    121 \n Figure 89. Drive -by download pages in dexed by Bing at the end of 1Q16 (top) and 2Q16  (bottom), per 1,000 URLs in each \ncountry/region  \n \n \n Each map shows the concentration of drive -by download URLs tracked by \nBing in each country or region on a reference date at the end of the \nassociated quarter, expressed as the number of drive -by download URLs \nper every 1,000 URLs hosted in the country/region.  \n Significant locations with high concentrations of drive -by download URLs in \nboth quarters include Taiwan , with 7.4 drive -by URLs for every 1,000 URLs \ntracked by Bing at the end of 2Q16; Mongolia , with 3.1; and Iran , with 2.6.  \n \n122 MALICIOUS WEBSITES   \n Guidance: Protecting users from unsafe websites  \nOne of the best ways o rganizations can protect their users from malicious and \ncompromised websites  is by mandating the use of web browsers with \nappropriate protection features built in and by promoting safe browsing \npractices. For in -depth guidance, see “Top security solutions” at \nwww.microsoft.com/en -us/safety/pc -security/solutions.aspx . \n  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    123 \n Malware at Microsoft: \nDealing with threats in the \nMicrosoft environment  \nMicrosoft IT  \nMicrosoft IT provides information technology services internally for Microsoft \nemployees and resources. Microsoft IT manages more than 600,000 devices for \nmore than 150,000 users across more than 100 countries and region s worldwide . \nSafeguarding a computing infrastructure of this size requires  implementation of \nstrong security policies, technology to help keep malware off the network and \naway from mission -critical resources, and dealing with malware outbreaks swiftly \nand comprehensively when they occur.  \nThis section of the report compares the potential impact of malware to the levels \nof antimalware compliance from more than 600,000  workstation computers and \ndevices managed by Microsoft IT between January and June 2016. Thi s data is \ncompiled from multiple sources, including Windows Defender , System Center \nEndpoint Protection  (SCEP ), Windows Event Forwarding  (WEF) , DirectAccess , \nforensics, and manual submission of suspicious files.  Comparing the nature and \nvolume of the malware detected on these computers to the  level of protection \nthey receive can illustrate s ignificant trends and provide insights as to the \neffectiveness of antimalware software and security best practices.  \nAntimalware usage  \nReal -time antim alware software is required on all user devices that connect to \nthe Microsoft corporate network. Windows De fender  and System Center \nEndpoint Protection  2012 (SCEP ) are the antimalware solution s that Microsoft IT  \ndeploys to its users. To be considered com pliant with antimalware policies and \nstandards, user computers must be running the latest version of the Defender  or \nSCEP  client, antimalware signatures must be no more than six days old, and \nreal-time protection must be enabled.   \n124 MALWARE AT MICROSOFT : DEALING WITH THREA TS IN THE MICROSOFT ENVIRONMENT   \n Figure 90 shows the level of antimalware compliance in the Microsoft user \nworkstation environment for each month in 1H16 . \nFigure 90. Percent age of computers at Microsoft running real -time antimalware software  each month in 1H16  \n \nThe average monthly compli ance rate at Microsoft exceeded 97.8 percent each \nmonth during the first half of the year, reaching a high of 98.8 percent in June. In \nany network of this size, it is almost inevitable that a small number of computers \nwill be in a noncompliant state at any  given time. In most cases, these are \ncomputers that are being rebuilt or are otherwise in a state of change when \nonline, rather than computers that have had their antimalware software \nintentionally disabled.  \nMicrosoft IT believes that a compliance rate i n excess of 97.8 percent among \napproximately half a million computers is an acceptable level of compliance. In \nmost cases, attempting to boost a large organization’s compliance rate the rest \nof the way to 100 percent will likely be a costly endeavor, and t he end result —\n100 percent compliance —will be unsustainable over time.  \nMalware  detections  \nFigure 91 shows the categories of malicious and unwanted software that were \nmost frequently detected at Microsoft in 1H16.  \n0%10%20%30%40%50%60%70%80%90%100%\nJanuary February March April May JunePercent of computers running real -time antimalware software \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    125 \n Figure 91. Top categories of mali cious and unwanted software detected by Windows Defender  and System Center Endpoint \nProtection  at Microsoft in 1H16  \n \nIn this section, malware detections are defined as files and processes flagged by \nSCEP , regardless of the success or failure of automated containment or \nremediation. Malware detections are a measure of attempted malware activity, \nand do not necessarily indicate that a computer has been successfully infec ted. \n(Note that the methodology for assessing encounters used elsewhere in this \nreport counts unique computers with detections, an approach that differs from \nthe methodology used in this section, in which individual detections are \ncounted. For example, if a computer encountered one trojan  family in February  \nand another one in June , it would only be counted once for the purposes of \nfigures such as Figure 51 on page 82. In the preceding Figure 91, it would be \ncounted twice, once for each detection.)  \nPotentially unwanted applications  (PUA) accounted for the largest number of \ndetections, with twice as many detections as the next most prevalent category. \nThe large number of PUA detections is the result of Microsoft using the new PUA -\nblocking features in System Center Endpoint Protection  to keep such programs \nout of enterprise networks. (See “ Potentially unwanted applications in the \nenterprise ” on page 101 for more information about this feature .) \nFigure 92 shows the top 10 file types amo ng threat detections at Microsoft in \n1H16.  \n0100,000200,000300,000400,000500,000600,000700,000800,000900,000\nPUA Trojans Exploits Browser\nModifiersDownloaders &\nDroppersWorms Viruses Software\nBundlersOther MalwareThreat detections \n126 MALWARE AT MICROSOFT : DEALING WITH THREA TS IN THE MICROSOFT ENVIRONMENT   \n Figure 92. Top ten file types used by thre ats detected at Microsoft in 1H16  \n \nExecutable program files with the .exe extension were the most commonly \ndetected type  of malicious file at Microsoft in 1H16. Malicious files with the .temp \nextension, typically used for temporary files , were the next most common type \nof threats, followed by .dll.  \nTransmission vectors  \nExamining the processes targeted by malware can help il lustrate the methods \nthat attackers use to propagate it. Figure 93 lists the top five transmission \nvectors used by the malware encountered at Microsof t in 1H16 . \nFigure 93. The top five transmission vectors used by malware encountered at Microsoft in 1H16  \nRank  Process Description  \n1 File transfers in operating system  \n2 Cloud backup/ storage  \n3 Web browsing  \n4 Non -operating -system  tasks  \n5 Developing tools  \n \nThe transmission vector most commonly used by infection attempts detected on \nMicrosoft computers in 1H16 involved file transfers made through File Explorer, \n0100,000200,000300,000400,000500,000600,000700,000800,000900,000\n.exe .temp .dll .lnk .tmp .html .inf .txt .com .tblThreat detections \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    127 \n followed by cloud backup and stora ge services and web browsing . Non -\noperating -system tasks were fourth, followed by developing tools.  \nMalware  infections  \nBecause almost all of the computers at Microsoft run real -time security software \nat all times, most infection attempts are detected and blocked before they are \nable to infect the target computer. When Defender or SCEP  do disinfect a \ncomputer, it is usually because the software’s signature database has been \nupdated to enable it to detect a threat th at it did not recognize when the \ncomputer first encountered the threat. This lack of recognition may be because \nthe threat is a new malware family, a new variant of a known family, a known \nvariant that has been encrypted or otherwise repackaged to avoid de tection, or \nbecause of some other reason. The MMPC constantly analyzes malware \nsamples submitted to it, develops appropriate detection signatures, and deploys \nthem to customers who use SCEP , Microsoft Security Esse ntials , and Windows \nDefender . \nFigure 94 shows the most commonly detected categories of malicious and \nunwanted software that SCEP  and Defender removed from computers at \nMicrosoft in 1H16.  \nFigure 94. Infections and removals at Microsoft in 1H16, by category  \n \n01020304050607080\nDownloaders &\nDroppersWorms Trojans Password Stealers &\nMonitoring ToolsOther MalwareThreat infections and removals \n128 MALWARE AT MI CROSOFT: DEALING WIT H THREATS IN THE MIC ROSOFT ENVIRONMENT   \n As this chart shows, detection and infection statistics were significantly different \nin 1H16. For example, exploits , which accounted for more than 300,000  \ndetections at Microsoft in 1H16, was not discovered infecting a single computer \ninternally during the period. Most of the other categories also show clear \ndifferences between Figure 91 and Figure 94, although the ordering in the latter \nchart is significantly influenced by the low volumes involved.  \nFigure 95 shows the top 10 file types used by malware to infect  computers at \nMicrosoft in 1H16 . \nFigure 95. Infections and removals at Microsoft in 1H16, by file type  \n \nFigure 95 is important because it provides information about threats that  \nDefender and SCEP  did not detect when they were first encountered —and \ntherefore provides a clue about the areas in which malware authors have been \nfocusing their efforts in recent months. Almost half of the malicious files \nremoved from computers at Microsoft by Defender an d SCEP  in 1H16 had the \nextension .doc, used for Microsoft Word  binary files. The .js extension used by \nJavaScript  script files was next, followed by malicious .exe files. N ine extensions \naccounted for the remaining files, with seven extensions accounting for a single \nfile each.  \n05101520253035404550\n.doc .js .exe .dll .html .cin .docm .docx .dxn .html .jpg .scrThreat infections and removals \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    129 \n What IT departments can do to protect their users  \n Evaluate commercially available management tools, develop a plan, and \nimple ment a third -party upda te mechanism to disseminate non -Microsoft \nupdates.  \n Ensure that all software deployed on computers in the environment is \nupdated regularly. If the software provider offers an automatic update utility \nsimilar to Microsoft Update , ens ure that it is enabled by default. See \n“Windows Update: FAQ ” at support .microsoft.com for instructions on \nenabling automatic updates of Microsoft software.  \n Ensure that SmartScreen Filter  is enabled in Microsoft Edge  and Internet \nExplorer . See “ SmartScreen Filter: FAQ ” at support .microsoft.com for more \ninformation.  \n Use Group Policy  to enforce configurations for Windows Update , Windows \nFirewall , and SmartScreen Filter . See Knowledge Base article KB328010  at \nsupport.microsoft.com, and “ Windows Firewall with Advanced Security \nDeployme nt Guide ” and “ Manage Privacy: SmartScreen Filter and Resulting \nInternet Communication ” at technet.microsoft.com for instructions.  \n Set the default configuration for antimalware to enable re al-time protection \nacross all drives, including removable devices.  \n Enable Windows Defender  Cloud Protection  in Windows 10  to automatically \nsend information about suspicious files and behaviors to the Windows \nDefender Cloud, which can help identify and block threats during the first \ncritical hours of an attack. For information about using Group Policy  to \nenable cloud -based protection  throughout your organization, see \nConfigure Windows Defender in Windows 10  at Microsoft TechNet.   \n130 MALWARE AT MICROSOFT : DEALING WITH THREA TS IN THE MICROSOFT ENVIRONMENT   \n Figure 96. Enabling cloud -based protection for Windows Defender  in Windows 10  \n \n Identify business dependencies on Java  and develop a plan to minimize its \nuse where it is not needed.  \n Use AppLocker to block the installation and use of unwanted software such \nas Java  or peer -to-peer (P2P) applications. See “ AppLocker ” at \ntechnet.microsoft.com for more information.  \n Implement the Enhanced Mitigation Experience Toolkit  (EMET ), if possible, \nto minimize exploitation of vulnerabilities  in all software in your \nenvironment. See technet.microsoft.com/security/jj653751  for more \ninformation.  \n Implement strong password policies, and require employees to change their \npasswords periodically.  \n Strengthen authentication by using smart cards . See “ Smart Cards ” at \ntechnet.microsoft.com for more information.  \n Use Network Access Protection  (NAP ) and DirectAccess  (DA) to enforce \ncompliance policies for firewall, antimalware, and patch management on \nremote computers that connect to a corporate network. See “ Network \n \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    131 \n Access Prote ction ” at msdn.microsoft.com and “ Windows 7  DirectAccess \nExplained ” at technet.microsoft.com for more information.  \n Enable the following Windows Power Shell  v5 security features via Windows \nManagement Framework 5.0 : \n Script block logging  \n System -wide transcripts  \n Constrained PowerShell  \n Antima lware integration (AMSI) in Windows 10  \n For more information about how Microsoft IT works to ensure a trusted \ncomputing environment, see the following articles at the Microsoft IT \nShowcase (microsoft.com/itshowcase):  \n Microsoft IT uses Windows Defender  to boost malware protection  \n Using Windows Defender  telemetry to help mitigate malware attacks  \n  \nAppendixes  \nAppendix A: Threat naming conventions  ..........  135 \nAppendix B: Data sources ................................ ........  137 \nAppendix C: Worldwide encounter and infection \nrates  ................................ ................................ ................  140 \nGlossary  ................................ ................................ .........  145 \nThreat families referenced in this report  ............  155 \nIndex  ................................ ................................ ..............  162 \n \n   \n134 MALWARE AT MICROSOFT : DEALING WITH THREA TS IN THE MICROSOFT ENVIRONMENT   \n   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    135 \n Appendix A: Threat naming \nconventions  \nMicrosoft names the malware and unwanted software that it detects according \nto the Computer Antivirus Research Or ganization (CARO) Malware naming \nscheme.  \nThis scheme uses the following format:  \nFigure 97. The Microsoft malware naming convention  \n \nWhen Microsoft analysts research a particular threat, they will determine what \neach of the components of the name will be.  \nType  \nThe type describes what the threat does on a computer. Worms, trojans, and \nviruses are some of the most common types of threats Microsoft detects.  \nPlatform  \nThe platform refers to the operating system (such as Windows, M ac OS X, and \nAndroid) that the threat is designed to work on. Platforms can also include \nprogramming languages and file formats.  \nFamily  \nA group of threats with the same name is known as a family. Sometimes \ndifferent security software companies use differe nt names.  \n \n136 APPENDIX A: THREAT N AMING CONVENTIONS   \n Variant letters  \nVariant letters are used sequentially for each different version or member of a \nfamily. For example, the detection for the variant “.AF” would have been created \nafter the detection for the variant “.AE.”  \nAdditional information  \nAdditional information is sometimes used to describe a specific file or \ncomponent that is used by another threat in relation to the identified threat. In \nthe preceding example, the !lnk indicates that the threat is a shortcut file used by \nthe Backdoor:Win32 /Caphaw.D variant, as shortcut files usually use the \nextension .lnk.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    137 \n Appendix B: Data sources  \nData included in the Microsoft Security Intelligence Report is gathered from a \nwide range of Microsoft products and services whose users have opted in to \nprovide usage data. The scale and scope of this telemetry data allows the report \nto deliver the most comprehensive and detailed perspective on the threat \nlandscap e that is available in the software industry:  \n Azure Security Center  is a service that helps organizations prevent, detect, \nand respond to threats by providing increased visibility into the security of \ncloud workloads and using advanced analytics and threat intelligence to \ndetect attacks.  \n Bing , the search and decision engine from Microsoft, contains technology \nthat p erforms billions of webpage scans per year to seek out malicious \ncontent. After such content is detected, Bing  displays warnings to users \nabout it to help prevent infection.  \n Exchange Online  is the Microsoft -hosted email service for business. \nExchange Online antimalware and antispam services scan billions of \nmessages every year to identify and block spam  and malware .   \n The Malicious Software Removal Tool  (MSRT ) is a free tool that Microsoft \ndesigned to help iden tify and remove specific prevalent malware  families \nfrom customer computers. The MSRT  is primarily released as an important \nupdate through Windows Update , Microsoft Update , and Automatic \nUpdates. A version of the tool is also available from the Microsoft Download \nCenter. The MSRT  was downloaded and executed more than 600 million \ntimes each month on average in 1H16. The MSRT  is not a replacement for an \nup-to-date real -time antivirus solution.  \n The Microsoft Safety Scanner  is a free downloadable security tool that \nprovides on -demand scanning and helps remove malware  and other \nmalicious software. The Microsoft Safety Scanner is not a replacement for an \nup-to-date antivirus solution, because it does not offer real-time protection \nand cannot prevent a computer from becoming infected.  \n Microsoft Security Essentials  is a free, easy -to-download real -time \nprotection product that provides basic, effective antivirus and antispyware \nprotection for Windows Vista  and Windows 7 .   \n138 APPENDIX B: DATA SOU RCES   \n  Microsoft System Center Endpoint Protection  (formerly Forefront Client \nSecurity and Forefront Endpoint Protection) is a unified product that \nprovides protection from malware  and unwanted software for e nterprise \ndesktops, laptops, and server operating systems. It uses the Microsoft \nMalware Protection Engine  and the Microsoft antivirus signature database \nto provide real -time, scheduled, and on -demand protection.  \n Office 365  is the Microsoft Office  subscription service for business and home \nusers. Select business plans include access to Office 365 Advanced Threat \nProtection . \n SmartScreen Filter , a feature in  Microsoft Edge  and Internet Explorer , offers \nusers protection against phishing sites and sites that host malware . Microsoft \nmaintains a database o f phishing and malware sites reported by users of \nMicrosoft Edge, Internet Explorer, and other Microsoft products and \nservices. When a user attempts to visit a site in the database with the filter \nenabled, the browser displays a warning and blocks navigati on to the page.  \n Windows Defender  in Windows 8 , Windows 8.1 , and Windows 10  provides \nreal-time scanning and removal of malware  and unwanted software.  \n Windows Defender Advanced Threat Protection  is a new service built into \nWindo ws 10 Anniversary Update  that enables e nterprise customers to \ndetect, investigate, and remediate advanced persistent threats and data \nbreaches on their networks . \n Windows Defender Offline  is a downloadable tool that can be used to create \na bootable CD, DVD, or USB flash drive to scan a computer for malware  and \nother threats. It does not offer real -time protection and is not a substitute \nfor an up -to-date antimalware solution.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    139 \n Figure 98. US privacy statements for the Microsoft products and services used in this report  \nProduct or serv ice Privacy statement URL  \nAzure Security Center  www.microsoft.com/en -us/privacystatement/OnlineServices/Default.aspx   \nBing  privacy.microsoft.com/en -us/privacystatement/   \nExchange Online , Office 365  www.microsoft.com/online/legal/v2/?docid=43  \nInternet Explorer  11 privacy.microsoft.com/en -us/internet -explorer -ie11-preview -privacy-statement  \nMalicious Software Removal Tool   www.microsoft.com/en -us/safety/pc -security/msrt -privacy.aspx   \nMicrosoft Edge  privacy.microsoft.com/en -us/privacystatement/  \nMicrosoft Safety Scanner   www.microsoft.com/security/scanner/en -us/privacy.aspx  \nMicrosoft Security Essentials   windows.microsoft.com/en -us/windows/security -essentials -privacy  \nSystem Center Endpoint Protection   https:// www.microsoft.com/privacystatement/en -us/SystemCenter2012R2/  \nDefault.aspx#tilepspSystemCenter2012R2EndpointProtectionModule   \nWindows Defender  in Windows 10  privacy.microsoft.com/en -us/privacystatement/   \nWindows Defender Offline  privacy.microsoft.com/en -us/windows -defender -offline -privacy  \n \n  \n140 APPENDIX C: WORLDWID E ENCOUNTER AND INFE CTION RATES   \n Appendix C: Worldwide \nencounter and infection rates  \n“Malicious and unwanted software ” on page 71 explains how threat patterns \ndiffer significantly in different parts of the world. Figure 99 shows the  infection \nand encounter rates for 1Q16  and 2Q16  for locations around the world.26 See \npage 52 for information about how infection and encounter rates are calculated.  \nFigure 99. Encounter and infection rates f or locations around the world, 1Q16 –2Q16 , by quarter (100,000 \ncomputers reporting minimum)  \nCountry/region  CCM 1Q16  CCM 2Q16  ER 1Q16  ER 2Q16  \nWorldwide  8.4 8.8 18.3%  21.2%  \nAlbania  32.3  24.0  35.6%  35.3%  \nAlgeria  45.5  44.6  41.2%  39.1%  \nAngola  43.1 42.4  35.1%  36.6%  \nArgentina  15.8 12.7 27.1%  23.0%  \nArmenia  13.7 10.2 38.4%  36.1%  \nAustralia  7.7 5.4 14.5%  13.0%  \nAustria  5.7 4.0 13.2%  12.2%  \nAzerbaijan  29.4  23.3  34.7%  33.8%  \nBahamas , The  — 12.0 — — \nBahrain  39.4  30.3  32.3%  0.0%  \nBangladesh  29.2  24.9  42.4%  41.1%  \nBarbados  — 10.2 — — \nBelarus  6.9 5.7 34.5%  32.8%  \nBelgium  8.3 6.0 14.9%  13.5%  \nBolivia  27.9 25.5  26.7%  26.6%  \nBosnia and Herzegovina  26.7 17.6 29.3%  26.3%  \nBrazil  14.0 14.3 29.9%  29.4%  \n                                                           \n26 Encounter rate and CCM are shown for locations with at least 100,000 computers running Microsoft real -\ntime security products and the Malicious Software Removal Tool , respectively, du ring a quarter. Only \ncomputers whose users have opted in to provide data to Microsoft are considered when calculating encounter \nand infection rates.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    141 \n Country/region  CCM 1Q16  CCM 2Q16  ER 1Q16  ER 2Q16  \nBulgaria  12.6 9.8 25.6%  24.2%  \nCambodia  26.3  23.7 39.1%  39.1%  \nCameroon  35.7 34.0  — — \nCanada  7.2 4.9 14.7%  13.5%  \nChile  16.6 13.0 25.7%  22.7%  \nChina  4.6 5.3 19.1%  21.1%  \nColombia  16.1 13.6 25.1%  23.6%  \nCosta Rica  15.2 10.9 19.2%  17.0%  \nCôte d’Ivoire  25.3  24.8  35.7%  33.8%  \nCroatia  16.4 8.6 25.1%  20.8%  \nCyprus  16.8 12.0 23.0%  18.1%  \nCzech Republic  7.4 5.5 17.7%  15.2%  \nDenmark  5.1 3.1 12.1%  10.0%  \nDominican Republic  26.9  22.1 31.0%  27.2%  \nEcuador  22.0  16.8 26.3%  23.2%  \nEgypt  36.8  34.5  40.9%  37.3%  \nEl Salvador  22.5  17.1 23.2%  20.9%  \nEstonia  10.2 4.6 19.8%  17.9%  \nFinland  4.7 2.1 9.2%  7.9%  \nFrance  6.6 5.6 17.0%  15.3%  \nGeorgia  18.7 13.7 31.0%  29.9%  \nGermany  4.3 3.2 13.0%  13.0%  \nGhana  32.0  29.9  40.3%  33.8%  \nGreece  14.6 8.3 22.4%  18.7%  \nGuadeloupe  10.7 9.7 — — \nGuatemala  23.8  19.3 22.4%  21.4%  \nHonduras  29.5  22.1 26.0%  23.5%  \nHong Kong SAR  12.6 7.4 17.7%  17.0%  \nHungary  8.9 5.7 23.3%  19.2%  \nIceland  6.9 3.8 14.6%  12.6%  \nIndia  35.6  26.9  35.4%  32.6%  \nIndonesia  45.1 34.4  47.5%  45.2%   \n142 APPENDIX C: WORLDWID E ENCOUNTER AND INFE CTION RATES   \n Country/region  CCM 1Q16  CCM 2Q16  ER 1Q16  ER 2Q16  \nIraq 62.5  59.8  38.1%  36.9%  \nIreland  10.3 6.3 14.0%  11.6%  \nIsrael  14.3 10.0 25.4%  24.9%  \nItaly  9.1 7.2 22.2%  18.8%  \nJamaica  25.8  16.9 27.2%  24.2%  \nJapan  2.5 2.2 6.9%  6.6%  \nJordan  46.3  39.2  37.8%  35.8%  \nKazakhstan  12.5 10.3 36.3%  34.9%  \nKenya  26.9  23.1 32.4%  29.9%  \nKorea  6.3 6.6 15.7%  15.8%  \nKuwait  34.5  25.4  27.1%  26.2%  \nLatvia  9.7 5.2 22.6%  20.5%  \nLebanon  40.8  33.2  31.2%  29.4%  \nLibya  82.8  78.3 — — \nLithuania  13.3 7.1 23.8%  19.9%  \nLuxembourg  7.7 5.1 15.1%  13.9%  \nMacao SAR  15.1 9.8 — — \nMacedonia , FYRO  26.3  16.7 30.2%  27.5%  \nMalaysia  28.7 20.4  29.6%  27.6%  \nMalta  15.0 8.0 18.7%  16.2%  \nMartinique  9.3 8.3 — — \nMauritius  26.8  18.1 29.1%  0.0%  \nMexico  20.6  17.2 24.4%  23.8%  \nMoldova  12.1 8.6 31.9%  30.1%  \nMongolia  59.5  55.9  47.0%  49.3%  \nMorocco  39.5  36.0  36.9%  34.9%  \nMozambique  — 32.5  — — \nNamibia  — 18.8 — — \nNepal  42.4  39.5  42.1%  41.1%  \nNetherlands  6.6 3.6 15.2%  13.0%  \nNew Zealand  7.7 5.4 13.1%  11.8%  \nNicaragua  21.9 15.3 23.4%  0.0%   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    143 \n Country/region  CCM 1Q16  CCM 2Q16  ER 1Q16  ER 2Q16  \nNigeria  34.1 28.4  30.3%  28.7%  \nNorway  5.4 3.1 10.7%  10.0%  \nOman  55.5  45.6  36.9%  35.1%  \nPakistan  42.6  37.3 48.8%  45.4%  \nPalestinian Authority  48.0  47.9 46.7%  42.4%  \nPanama  18.1 14.5 21.1%  20.8%  \nParaguay  19.9 16.0 24.4%  22.6%  \nPeru  24.9  21.9 24.6%  25.9%  \nPhilippines  42.7 31.5 39.6%  35.6%  \nPoland  9.1 6.9 23.1%  19.7%  \nPortugal  10.1 7.0 22.9%  20.5%  \nPuerto Rico  15.9 10.1 22.2%  19.6%  \nQatar  31.9 21.4 29.3%  27.8%  \nRéunion  11.8 9.8 19.4%  18.5%  \nRomania  16.2 11.8 27.6%  24.4%  \nRussia  5.8 4.7 27.2%  24.9%  \nSaudi Arabia  38.3  28.8  31.6%  28.6%  \nSenegal  26.5  24.7 38.3%  37.2%  \nSerbia  23.0  13.5 28.3%  25.6%  \nSingapore  12.6 8.1 20.2%  19.4%  \nSlovakia  11.2 7.5 18.6%  15.7%  \nSlovenia  9.8 5.3 18.7%  16.5%  \nSouth Africa  18.0 14.8 24.0%  23.0%  \nSpain  12.5 8.9 22.6%  19.3%  \nSri Lanka  26.9  21.2 31.0%  28.8%  \nSweden  6.3 3.5 12.2%  10.3%  \nSwitzerland  5.5 4.3 11.7%  12.9%  \nTaiwan  9.9 7.5 19.8%  22.3%  \nTanzania  32.5  33.1 41.5%  38.0%  \nThailand  30.0  25.3  36.4%  34.9%  \nTrinidad and Tobago  20.2  12.0 21.7%  18.5%  \nTunisia  39.4  34.0  37.4%  36.4%   \n144 APPENDIX C: WORLDWID E ENCOUNTER AND INFE CTION RATES   \n Country/region  CCM 1Q16  CCM 2Q16  ER 1Q16  ER 2Q16  \nTurkey  24.9  22.9  34.8%  31.4%  \nUkraine  6.3 5.2 34.2%  31.7%  \nUnited Arab Emirates  36.5  23.7 30.4%  27.4%  \nUnited Kingdom  6.7 4.4 13.7%  11.5%  \nUnited States  4.9 4.3 11.9%  12.0%  \nUruguay  16.3 12.7 23.0%  20.3%  \nVenezuela  25.2  21.6 30.4%  28.0%  \nVietnam  25.7 23.3  45.9%  45.7%  \nZambia  — 27.1 — — \nZimbabwe  32.1 27.6 — — \nWorldwide  8.4 8.8 18.3%  21.2%  \n  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    145 \n Glossary  \nFor additional information about these and other terms, visit the MMPC glossary \nat www.microsoft.com/en -us/security/portal/mmpc/shared/glossary.aspx . \naccount credentials  \nInformation presented to a service provider to verify that the holder of the \ncredentials is authorized to access an account. Account credentials typically take \nthe form of user names paired with passwords, but other forms of identification \nare possible.  \nActiveX  control  \nA software component of Microsoft Windows that can be used to create and \ndistribute small applications through Internet Explorer . ActiveX  controls can be \ndeveloped and used by software to perform functions that would otherwise not \nbe available using typical Int ernet Explorer capabilities. Because ActiveX controls \ncan be used to perform a wide variety of functions, including downloading and \nrunning programs, vulnerabilities  discovered in them may be exploited by \nmalware . In addition, cybercriminals may also develop their own ActiveX \ncontrols, which can do damage to a computer if a user visits a webpage that \ncontains the malicious ActiveX control.  \nAddress Space Layout Randomization (ASLR ) \nA security feature in recent versions of Windows that randomizes the memory \nlocations used by system files and other programs, which makes it harder for an \nattacker to exploit the system by targeting specific memory locations.  \nadware  \nA program that displays advertisements. Although some adware  can be \nbeneficial by subsidizing a program or service, other adware programs may \ndisplay advertisements without adequate consent.  \nASLR  \nSee Address Space Layout Randomization (ASLR ). \nbackdoor  trojan   \nA type of trojan  that provides attackers with remote unauthorized access to and \ncontrol of infected computers. Bots are a subcategory of backdoor  trojans. Also \nsee botnet.    \n146 GLOSSARY   \n Bitcoin  \nA form of digital currency. Bitcoins  can be used to buy things online or exchange \nthem for real money.  \nbotnet  \nA set of computers controlled by a command -and-control (C&C) computer to \nexecute commands as directed. The C&C computer can issue commands \ndirectly (often through Internet Relay Chat [IR C]) or by using a decentralized \nmechanism, such as peer -to-peer (P2P) networking. Computers in a botnet are \noften called bots, nodes, or zombies.  \nbuffer overflow  \nAn error in an application in which the data written into a buffer exceeds the \ncurrent capac ity of that buffer, thus overwriting adjacent memory. Because \nmemory is overwritten, unreliable program behavior may result and, in certain \ncases, allow arbitrary code to run.  \nC&C  \nSee command and control  (C&C) .  \nCCM  \nShort for computers cleaned per mille  (thousand).  The number of computers \ncleaned for every 1,000 executions of the Microsoft Malicious Software Removal \nTool  (MSRT ). For example, if the MSRT  has 50,000 executions in a particular \nlocation in the first quarter of the year and removes infections from 200 \ncomputers, the CCM for that location in the first quarter of the year is 4.0 (200 ÷ \n50,000 × 1,000). Also see encounter rate.  \nclean  \nTo remove malware  or potentially unwanted software from an infected \ncomputer. A single cleaning can involve multiple disinfections.  \ncloud -based detection  \nA detection signature that detects files that h ave been automatically identified as \nmalicious through the cloud -based protection feature of Windows Defender .  \ncommand and control  (C&C)  \nA server that acts as a command center for one or more compromised \ncomputers. Botnet operator s use C&C servers to issue commands to computers \nin the botnet.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    147 \n credentials  \nSee account credentials.  \ncross -site scripting   \nAbbreviated XSS. An attack technique in which an attacker inserts malicious \nHTML and JavaScript  into a vulnerable Web page, often in an effort to distribute \nmalware  or to steal sensitive information from the Web site or its visitors. \nDespite the name, cross -site scripting  does not necessarily involve multiple \nwebsites. Persistent cross -site scripting involves inserting malicious code into a \ndatabase used by a web application, potentially causing the code to be \ndisplayed for large numbers of visitors.  \nData Execution Preven tion (DEP ) \nA security technique designed to prevent buffer overflow attacks. DEP  enables \nthe system to mark areas of memory as non -executable, which prevents code in \nthose memo ry locations from running.  \nDDoS  \nSee distributed denial of service (DDoS ). \nDEP  \nSee Data Execution Prevention (DEP ). \ndetection signature  \nA set of characteristics that can identify a malware  family or variant. Signatures \nare used by antimalware products to determine whether a file is malicious or \nnot. Also see definition.   \ndetonation chambe r \nA sandbox environment in which potentially dangerous files can be \nautomatically launched and monitored for possible malicious activity.  \ndisclosure  \nRevelation of the existence of a vulnerability to a third party.  \ndisinfect  \nTo remove a malware  or potentially unwanted software component from a \ncomputer or to restore functionality to an infected program. Compare with \nclean.  \ndistributed denial of service (DDoS ) \nA form of denial of service (DoS) that uses multiple computers to attack the \ntarget. Considerable resources may be required to exhaust a target computer  \n148 GLOSSARY   \n and cause it to fail to respond. Often multiple computers are used to perform \nthese types of malicious attack and increase the attack’s chances of success. This \ncan occur, for example, when a number of compromised computers, such as \nthose that comprise a botnet, are commandeered and ordered to access a \ntarget network or server over and over again within a s mall period of time.  \nDNS  \nSee Domain Name System.  \nDomain Name System  \nThe infrastructure used for name resolution on the Internet. It comprises a \nhierarchical collection of name servers which translate alphanumeric domain \nnames to numeric IP addresses, and v ice versa.  \ndownloader  \nSee downloader /dropper .  \ndownloader /dropper   \nA form of trojan  that installs other malicious files to a computer that it has \ninfected, either by downloading them from a remote computer or by obtaining \nthem directly from a copy contained in its own code.  \ndropper  \nSee downloader /dropper . \nencounter  \nAn instance of security software detecting a threat and blocking, quarantining, \nor removing it from the computer.  \nencounter rate  \nThe percentage of computers running Microsoft real -time security software that \nreport detecting malware  or potentially unwanted software, or report detecting \na specific threat or family, during a period. Also see infection rate.  \nexploit  \nMalicious code that takes advantage of software vulnerabilities  to infect a \ncomputer or perform o ther harmful actions.  \nexploit kit  \nA collection of exploits bundled together and sold as commercial software. A \ntypical kit contains a collection of web pages that contain exploits for \nvulnerabilities  in popular  web browsers and add -ons, along with tools for \nmanaging and updating the kit.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    149 \n firewall  \nA program or device that monitors and regulates traffic between two points, \nsuch as a single computer and the network server, or one server to another.  \ngeneric   \nA type of signature that is capable of detecting a variety of malware  samples \nfrom a specific family, or of a specific type.  \nhash  \nText that has been encoded using a one -way cryptographic function that \nprevents it from  being decrypted. Also refers to a checksum produced by a hash \nfunction to identify or authenticate data.  \nheuristics  \nA tool or technique that can help identify common patterns. This can be useful \nfor making generic  detections for  a malware  family.  \nIFrame  \nShort for inline frame.  An IFrame is an HTML document that is embedded in \nanother HTML document. Because the IFrame loads another webpage, it can be \nused by criminals to place malicious content, such as a script t hat downloads \nand installs spyware, into non -malicious HTML pages that are hosted by trusted \nwebsites.  \nin the wild  \nSaid of malware  that is currently detected on active computers connected to the \nInternet, as compared to those confined to internal test networks, malware \nresearch laboratories, or malware sample lists.  \ninfection  \nThe presence of malware  on a computer, or the act of delivering or installing \nmalware on a computer. Also see encounter.  \ninfection rate  \nSee CCM.  \njailbreaking  \nSee rooting . \nMalicious Software Removal Tool  \nA free tool that Microsoft designed to help identify and remove specific \nprevalent malware  families from customer computers. An updated version of \nthe tool is released each month through Windows Update  and other updating  \n150 GLOSSARY   \n services. The MSRT  is not a replacement for an up -to-date real -time antivirus \nsolution.  \nmalware   \nShort for malicious software.  The general name for programs that perform \nunwanted actions on a computer, such as stealing personal information. Some \nmalware  can steal banking details, lock a computer until the user pays a ransom, \nor use the computer to send spam . Viruses , worms and trojans are all types of \nmalware.  \nmalware  impression  \nA single instance of a user attempting to visit a page known to host malware  and \nbeing blocked by SmartScreen Filter in Microsoft Edge  or Internet Explorer . Also \nsee phishing impression.  \nman -in-the-middle  attack  \nA form of  eavesdropping in which a malicious hacker gets in the middle of \nnetwork communications. The malicious hacker can then manipulate messages \nor gather information without the people doing the communication knowing.  \nmonitoring tool  \nSoftware that monitors act ivity, usually by capturing keystrokes or screen \nimages. It may also include network sniffing software. Also see password stealer \n(PWS).   \nMSRT  \nSee Malicious Software Removal Tool . \nP2P \nSee peer -to-peer (P2P).  \npassword stealer (PWS)  \nMalware that is specifically used to transmit personal information, such as user \nnames and passwords. A PWS often works in conjunction with a keylogger. Also \nsee monitoring tool.   \npayload  \nThe actions  conducted by a piece of malware  for which it was created. Payloads \ncan include, but are not limited to, downloading files, changing system settings, \ndisplaying messages, and logging keystrokes.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    151 \n peer -to-peer (P2P)  \nA system of network commu nication in which individual nodes are able to \ncommunicate with each other without the use of a central server.  \nphishing  \nA method of credential theft that tricks Internet users into revealing personal or \nfinancial information online. Phishers use phony we bsites or deceptive email \nmessages that mimic trusted businesses and brands to steal personally \nidentifiable information (PII), such as user names, passwords, credit card \nnumbers, and identification numbers.  \nphishing impression  \nA single instance of a use r attempting to visit a known phishing page and being \nblocked by SmartScreen Filter in Microsoft Edge  or Internet Explorer . Also see \nmalware  impression.  \npotentially unwanted application (PUA)  \nA program that doesn't meet the criteria to be considered unwanted software, \nbut still exhibits behaviors that may be considered undesirable, particularly in \nenterprise environments.  \nPUA  \nSee potentially unwanted application (PUA) . \nransomware  \nA type of malware  that prevents use of a computer or access to the data that it \ncontains until the user pays a certain amount to a remote attacker (the \n“ransom”). Computers that have ransomware installed usually display a screen \ncontaining informatio n on how to pay the “ransom.” A user cannot usually \naccess anything on the computer beyond the screen.  \nrogue security software   \nSoftware that appears to be beneficial from a security perspective but that \nprovides limited or no security capabilities, generates a significant number of \nerroneous or misleading alerts, or attempts to socially engineer the user into \nparticipating in a fraudulent transaction.  \nrooting  \nObtaining administrative user rights on a mobile device through the use of \nexploits. Device owners sometimes use such exploits intentionally to gain access \nto additional functionality, but these exploits can also be used by attackers to \ninfect devices with malware  that bypasses many typic al security systems. The  \n152 GLOSSARY   \n term “rooting ” is typically used in the context of Android  devices; the \ncomparable process on iOS devices is more commonly referred to as \njailbreaking.  \nrootkit   \nA program whose main purpose is to perform certain functions that cannot be \neasily detected or undone by a system administrator, such as hiding itself or \nother malware .  \nsandbox  \nA specially constructed portion of a computing environment in which potentially \ndangerous programs or processes may run without causing harm to resources \noutside the sandbox.  \nSEHOP  \nSee Structured Exception Handler Overwrite Protection (SEHOP ). \nsignature  \nSee detection signature.  \nsocial engineering  \nA technique that defeats security precautions by exploiting human \nvulnerabilities . Social engineering scams can be both online (such as rece iving \nemail messages that ask the recipient to click the attachment, which is actually \nmalware ) and offline (such as receiving a phone call from someone posing as a \nrepresentative from one’s credit card company). Regardless of the method \nselected, the purpose of a social engineering attack remains the same —to get \nthe targeted user to perform an action of the attacker's choice.  \nsoftware bundler  \nA program that installs unwanted software on a computer at the same time  as \nthe software the user is trying to install, without adequate consent.  \nspam   \nBulk unsolicited email. Malware authors may use spam  to distribute malware , \neither by attaching the malware to email messages or by sending a message \ncontaining a link to the malware. Malware may also harvest email addresses for \nspamming from compromised machines or may use compromised machines to \nsend spam.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    153 \n spear phishing  \nPhishing that targets a specific person, organization, or group, containing \nadditional information associated with that person, organization, or group to \nlure the target further into a false sense of security to divulge more sen sitive \ninformation.  \nspyware  \nA program that collects information, such as the websites a user visits, without \nadequate consent. Installation may be without prominent notice or without the \nuser’s knowledge.  \nSQL injection  \nA technique in which an  attacker enters a specially crafted Structured Query \nLanguage (SQL ) statement into an ordinary web form. If form input is not \nfiltered and validated before being submitted to a database, the malicious SQL \nstatement may be executed, which could  cause significant damage or data loss.  \nStructured Exception Handler Overwrite Protection (SEHOP ) \nA security technique designed to prevent exploits from overwriting exception \nhandlers to gai n code execution. SEHOP  verifies that a thread’s exception \nhandler list is intact before allowing any of the registered exception handlers to \nbe called.  \ntargeted attack  \nA malware  attack against a specific group of companies or individuals. This type \nof attack usually aims to get access to the computer or network, before trying to \nsteal information or disrupt the infected machines.  \ntool  \nIn the context of malware , a software program that may have legitimate \npurposes but may also be used by malware authors or attackers.  \ntrojan   \nA generally self -contained program that does not self -replicate but takes \nmalicious action on the computer.  \nunwanted sof tware  \nA program with potentially unwanted functionality that may affect the user’s \nprivacy, security, or computing experience.   \n154 GLOSSARY   \n virus   \nMalware that replicates, typically by infecting other files in the computer, to \nallow the execution of t he malware  code and its propagation when those files \nare activated.  \nvulnerability  \nA weakness, error, or poor coding technique in a program that may allow an \nattacker to exploit it for a malicious purpose.  \nwatering hole attack  \nA type of t argeted attack that involves planting malware  at websites visited by \npeople in specific industries or with specific interests.  \nwild  \nSee in the wild.   \nworm   \nMalware that spreads by spontaneously sending copies of itself through email \nor by using other communication mechanisms, such as instant messaging (IM) \nor peer -to-peer (P2P) applications.  \nXSS \nSee cross -site scripting . \nzero -day exploit  \nAn exploi t that targets a zero -day vulnerability.  \nzero -day vulnerability  \nA vulnerability in a software product for which the vendor has not yet published \na security update.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    155 \n Threat families referenced in \nthis report  \nThe definitions for the threat families referenced in this report are adapted from \nthe Microsoft Malware Protection Center encyclopedia \n(www.microsoft.com/s ecurity/portal ), which contains detailed information about \na large number of malicious software and unwanted software families. See the \nencyclopedia for more in -depth information and guidance for the families listed \nhere and throughout the report . \nWin32/Adposhel . Adware  that can show extra ads inside and outside the web \nbrowser.  \nWin32/Anogre . A detection for the Sweet Orange exploit kit , which exploits \nvulnerabilities  in some versions of Windows, Adobe Flash Player , and Java  to \ninstall malware.  \nINF/Autorun . A family of worms that spreads by copying itself to the mapped \ndrives of an infected computer. The mapped drives may include network or \nremovable drives.  \nJS/Axpergle . A detection for the Angler  exploit kit , which exploits vulnerabilities  \nin some versions of Internet Explorer , Silverlight , Adobe Flash Player , and Java  to \ninstall malware.  \nWin32/Banload . A family of trojans that download other malware. Banload \nusually downloads Win32/Banker, which steals banking credentials and other \nsensitive data and sends it back to a remote attacker.  \nWin32/BeeVry . A trojan  that modifies a number of s ettings to prevent the \ncomputer from accessing security -related websites, and lower the computer's \nsecurity.  \nWin32/Bervisec . A software bundler  that is typically distributed on German -\nlanguage  websites as an installer for legitimate applications. Some versions also \ninstall the browser modifier  Win32/Sasquor .  \n156 THREAT FAMILIES REFE RENCED IN THIS REPOR T  \n JS/Bondat . A family of threats that collects information about the computer, \ninfects removable drives, and tries to stop the user from accessing files. It \nspreads by infecting removable drives, such as USB thumb drives and flash \ndrives.  \nJS/Brolo. A ransomware family that locks the web browser and displays a \nmessage, often pretendin g to be from a law enforcement agency, demanding \nmoney to unlock the browser.  \nWin32/Cerber . A ransomware -as-a-service family that encrypts files on the \ncomputer and demands payment in Bitcoins  for the decryption key.  \nWin32/Co pali. A family of worms that can download other malware, including \nPWS:Win32/Zbot. They spread through infected network and removable drives.  \nWin32/CplLnk . A generic  detection for specially -crafted m alicious shortcut files \nthat attempt to exploit the vulnerability addressed by Microsoft Security Bulletin  \nMS10 -046.  \nWin32/Crowti . A ransomware family that encrypts files on the computer and \ndemands that the user pay a fee to decrypt them, using Bitcoins . \nWin32/Diplugem . A browser modifier  that installs browser add -ons without \nobtaining the user’s consent. The add -ons show extra advertisements as t he \nuser browses the web, and can inject additional ads into web search results \npages.  \nSWF/Dlcypt . An Adobe Flash Player  file that may be used by attackers to decrypt \nand execute encrypted JavaScript  files.  \nWin32/DLHelper . A software bundler  that is often distributed as a mountable \n.iso disk file. It installs unwanted software alongside the desired applications, \nincluding Win32/Pokavampo.  \nO97M/Donoff . A threat that uses an infected Microsoft Office  file to download \nother malware onto the computer. It can arrive as a spam  email attachment, \nusually as a Word  file (.doc).  \nWin32/Dyname r. A generic  detection for a variety of threats.  \nWin32/EoRezo . Adware  that displays targeted advertising to affected users \nwhile browsing the Internet, based on downloaded pre -configured information.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    157 \n JS/FakeBsod. A malicious JavaScript  script that attempts to extort money from \nthe user by locking the web browser, displaying a fake error message, and \ninstructing the user to call a phone number to have it unlocked.  \nJS/FakeCall . Rogue security software in the form of a webpage that claims the \ncomputer is infected with malware. It asks the use r to phone a number to \nreceive technical support to help remove the malware.  \nWin32/Falrile. A cloud -based detection  for files that have been automatically \nidentified as malicious by the cloud -based protection feature of Windo ws \nDefender . \nWin32/Fourthrem .  A program that installs unwanted software without adequate \nconsent on the computer at the same time as the software the user is trying to \ninstall.  \nWin32/Gamarue . A worm  that is commonly distributed via exploit kits  and social \nengineering. Variants have been observed stealing information from the local \ncomputer and communicating with command -and-control (C&C) servers \nmanaged by attac kers.  \nAndroidOS/GingerMaster.  A malicious program that affects mobile devices \nrunning the Android  operating system. It may be bundled with clean \napplications, and is capable of allowing a remote attacker to gain access to the \nmobile device.  \nWin32/Hadsruda . A cloud -based detection  for files that have been automatically \nidentified as malicious by the cloud -based protection feature of Windows \nDefender . \nWin32/Hao123 . A threat that changes browser settings and makes it difficult to \nchange them back. It is often installed by bundlers that offer free software.  \nHTML/IframeRef . A generic  detection for specially formed  IFrame tags that point \nto remote websites that contain malicious content.  \nWin32/Ippedo . A worm  that can send sensitive information to a malicious \nhacker. It spreads through removable drives, such as USB flash drives.  \nDOS/JackT heRipper . A virus  that can stop some files from working correctly in \nWindows XP  and earlier operating systems. It spreads by infecting the master \nboot record (MBR) on connected hard disks and floppy disks.   \n158 THREAT FAMILIES REFE RENCED IN THIS REPOR T  \n VBS/Jenxcus . A worm  that gives an attacker control of the computer. It is spread \nby infected removable drives, like USB flash drives. It can also be downloaded \nwithin a torrent file.  \nHTML/Kaixin. A detection for the KaiXin exploit kit , which exploits vulnerabilities  \nin some versions of Adobe Flash Player , Java , and other components in an \nattempt to spread malware.  \nWin32/Lightmoon .  A mass -mailing worm  that sends itself to email addresses \nfound on the infected computer. It also attempts to propagate via P2P \napplications. Some variants can disable system tools, log keystrokes, and take \nother malicious actions.  \nWin32/Locky . Ransomware  that encrypts files on the computer, and directs the \nuser to a Tor  webpage to pay for the decryption key. It often arrives via spam  as \nan infected Microsoft Word  .doc file.  \nUnix/Lotoor . A detection for specially crafted Android  programs that attempt to \nexploit vulnerabilities in the Android operating system to gain root privilege.  \nWin32/Lodbak . A trojan  that is usually installed on removable drives by \nWin32/Gamarue , and which attempts to install Gamarue when the infected \nremovable drive is connected to a computer.  \nWin32/Macoute . A worm  that can spread itself to removable USB drives, and \nmay communicate with a remote host.  \nWin32/Madang . A virus  that infects .exe and .scr files, and connects to specific \nweb sites to possibly download other malware.  \nHTML/Meadgive . A detection for the RIG  exploit kit , also known as Redkit, \nInfinity, and Goon. It attempts to exploit vulnerabilities  in programs such as Java  \nand Silverlight  to install other malware.  \nWin32/Mizenota . A software bundler  that installs unwanted software alongside \nthe software the user is trying to install. It has  been observed to install \nWin32/SupTab , Win32/Sasqor, Win32/Smudplu, and others.  \nMSIL/Mofin . A worm  that can steal files from your PC and send them to a \nmalicious hacker. It spreads via infected removable drives, such as USB flash \ndrives.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    159 \n JS/Nemucod . A family of .zip attachments that try to install other malware when \nopened.  \nWin32/Neobar . A browser modifier  that can change web browser settings \nwithout adequate consent. It is often installed by software bundlers , and has \nused the names Best YouTube  Downloader, Torrent Search, BonusBerry, and \nseveral others.  \nSWF/Netis . An exploit that targets a vulnerability in Adobe Flash Player  (CVE -\n2015 -5119) to download and run files, including malware like \nExploit:Python/Hitbrovi.A!dha.  \nJS/NeutrinoEK . A detection for the Neutrino  exploit kit , which exploits \nvulnerabilities  in some versions of Adobe Flash Player , Internet Explorer , \nSilve rlight , and Java  to install malware.  \nWin32/Nuqel . A worm  that spreads via mapped drives and certain instant \nmessaging applications. It may modify system settings, connect to certain \nwebsites, download arbitrary files, or take other malicious actions.  \nWin32/Obfuscator . A generic  detection for programs that have had their \npurpose disguised to hinder analysis or detection by antivirus scanners. Such \nprograms commonly employ a combination of methods, including encryption, \ncompression, anti -debugging and anti -emulation te chniques.  \nWin32/Ogimant . A threat that claims to help download items from the Internet, \nbut actually downloads and runs files that are specified by a remote attacker.  \nWin32/OutBrowse . A software bundler  that installs additional unwanted \nprograms alongside software that the user wishes to install. It can remove or \nhide the installer’s close button, leaving no way to decline the additional \napplications.  \nWin32/Pdfjsc . A family of specially crafted PDF  files that exploit Adobe Acrobat  \nand Adobe Reader  vulnerabilities . Such files contain malicious JavaScript  that \nexecutes when the file i s opened.  \nWin32/Peals . A generic  detection for various threats that display trojan  \ncharacteristics.   \n160 THREAT FAMILIES REFE RENCED IN THIS REPOR T  \n Win32/Prepscram . A software bundler  that installs unwanted software alongside \nthe desired applications. It has been observed installing browser modifiers  such \nas Win32/Sasquor , Win32/Soctuseer, and Win32/Flowsurf.  \nWin32/Ramnit. A family of multi -com ponent malware that infects executable \nfiles, Microsoft Office  files, and HTML files. Win32/Ramnit spreads to removable \ndrives and steals sensitive information such as saved FTP credentials and \nbrowser cookies. It may also open a b ackdoor  to await instructions from a \nremote attacker.  \nWin32/Riccietex . A browser modifier  that is distributed as an installer for various \napplications. When used, it alters shortcuts (.lnk files ) that open popular \nbrowsers and configures them to open a specific website by default.  \nWin32/Rundas . A cloud -based detection  for files that have been automatically \nidentified as malicious by the cloud -based pr otection feature of Windows \nDefender . \nWin32/Sality . A family of polymorphic file infectors that target executable files \nwith the extensions .scr or .exe. They may execute a damaging payload that \ndeletes files with certain extensions and terminates security -related processes \nand services.  \nWin32/Sasquor . A browser modifier  that modifies search and home page \nsettings, and installs services and scheduled tasks to prevent the use r from \nchanging them back. It can also download additional malware, including \nWin32/SupTab  and Win32/Xadupi . \nDOS/Sigru . A virus  that can stop some files from working correctly in Windows \nXP and earlier operating systems. It spreads by infecting the master boot record \n(MBR) on connected hard disks and floppy disks.  \nWin32/Skeeyah . A generic  detection for various threats that display trojan  \ncharacteristics.  \nWin32/Spursint . A cloud -based detection  for files that have been automatically \nidentified as malicious by the cloud -based protection feature of Windows \nDefender . \nWin32/Stallmonitz . A software bundler  that installs unwanted software, typically \nWin32/InstallMonitizer, along with the program desired by the user.   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    161 \n Win32/Stuxnet . A multi -component family that spreads via removable volumes \nby exploiting the vulnerability addressed by Microsoft Security Bulletin  MS10 -\n046.  \nWin32/SupTab . A browser modifier  that installs itself and changes the browser’s \ndefault search provider, without obtaining the user’s consent for either action.  \nWin32/Sventore . A trojan  that can install other malware or unwanted software \non the computer. It so metimes attempts to avoid running in virtual \nenvironments, or if certain antimalware products are installed.  \nWin32/Tescrypt . Ransomware  that encrypts files and extorts payment in Bitcoins  \nfrom the user for the decryption key. It is sometimes dropped by exploit kits  \nsuch as Axpergle  (Angler ) and Neclu (Nuclear).  \nWin32/Tillail . A software bundler  that installs unwanted software alongside the \nsoftware the user is trying to install. It has been observed to install the browser \nmodifier  Win32/SupTab . \nWin32/Virut . A family of file -infecting viruses  that target and infect .exe and .scr \nfiles accessed on infected systems. Win32/Virut also opens a backdoor  by \nconnecting to an IRC server.  \nWin32/Xadupi . A trojan  that poses as a useful application, usually called \nWinZipper or QKSee, but can silently download and install other malware. It is \noften installed silently by the browser modifiers  Win32/Sasquor  and \nWin32/SupTab . \nWin32/Xiazai . A program that installs unwanted software on the computer at \nthe same time as the software the user is trying to install, without adequate \nconsent.   \n162 INDEX   \n Index  \nActiveX, 57, 58, 65 –66, 145  \nAddress Space Layout Randomization \n(ASLR), 39, 145  \nAdobe Acrobat, 62, 63, 159  \nAdobe Flash Player, 22, 23, 29, 52, 53, 54, \n56, 57, 62 –64, 64, 66, 67 –68, 87, 91, 155, \n156, 158, 159  \nAdobe Reader, 62, 63, 159  \nAdobe Security Bulletins, 54, 62 , 63, 67  \nAdposhel, 76, 81, 85, 155  \nadware, 76, 81, 83, 84, 85, 128, 145, 155, 156  \nAlbania , 140  \nAlgeria, 106, 107, 140  \nAmericas (continents), 79  \nAndroid, 44, 60, 61, 152, 157, 158  \nAngler. See Axpergle  \nAngola , 140  \nAnogre, 53, 56, 95, 155  \nArgentina , 140  \nArmenia, 87, 140  \nAsia, 69, 70, 86  \nAskToolbar, 102, 103  \nASLR. See Address Space Layout \nRandomization (ASLR)  \nAustralia, 115, 140  \nAustria, 118, 140  \nAutorun (malware), 85, 91, 155  \nAxpergle, 53, 56, 71, 74, 79, 85, 86, 87, 91, \n95, 155, 161  \nAzerbaijan , 107, 140  \nAzure Security Center, 3 –20, 137  \nbackdoors, 6, 24, 25, 26, 82, 84, 87, 145, 160, \n161 \nBahamas, The , 140  \nBahrain , 140  \nBangladesh , 140  \nBanload, 75, 84, 155  \nBarbados , 140  \nBeeVry, 75, 155  behavioral analysis, 14 –15 \nBelarus, 87, 140  \nBelgium , 140  \nBervisec, 76, 155 \nBing, 119 –21, 137, 139  \nBitcoin, 92, 95, 146, 156, 161  \nBolivia , 140  \nBondat, 76, 156  \nBosnia and Herzegovina, 96, 140  \nBrazil , 74, 75, 84, 140  \nBrolo, 95  \nbrowser modifiers, 74, 75, 83, 84, 88, 89, 92, \n125, 155, 156, 159, 160, 161  \nBulgaria, 94, 95, 141  \nCambodia , 141 \nCameroon , 107, 141  \nCanada, 71, 86, 141  \nCandyOpen, 102, 103  \nCCM. See computers cleaned per mille  \nCerber, 95, 96, 156  \nChile , 141 \nChina, 68, 74, 80, 84, 85, 115, 116, 118, 141  \nChinese language, 74  \ncloud storage, 4, 5, 126  \ncloud -based detections,  73, 75, 82, 87, 146, \n157, 160  \nColombia , 141 \nCommon Vulnerabilities and Exposures. See \nCVE identifier  \nCommon Vulnerability Scoring System \n(CVSS), 44, 45, 46  \ncomputers cleaned per mille, 72 \nConduit, 103  \nConficker, 14  \nControl Flow Guard, 29, 63, 70  \nConustr, 79 \nCopali, 80, 156  \nCosta Rica , 141 \nCôte d’Ivoire , 141  \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    163 \n CplLnk, 51, 53, 54, 60, 156  \nCredential Guard, 29  \nCroatia, 95, 141  \ncross -site scripting, 64, 147, 154  \nCrowti, 95, 97, 156  \nCryptoDefense. See Crowti  \nCryptoWall. See Crowti  \nCVE identifier, 35, 43, 51  \nCVE-2008 -2551, 64  \nCVE-2010 -0188, 62  \nCVE-2010 -0840, 57  \nCVE-2010 -1297, 63  \nCVE-2010 -2568. See CplLnk  \nCVE-2010 -3336, 62  \nCVE-2010 -3653, 63  \nCVE-2011-0097, 62  \nCVE-2011-0611, 63  \nCVE-2011-1823, 60, 61  \nCVE-2012 -0056, 60  \nCVE-2012 -0158, 62  \nCVE-2012 -0507, 57  \nCVE-2012 -1723, 56, 57, 58, 59  \nCVE-2012 -1889, 64  \nCVE-2013 -0074, 56  \nCVE-2013 -0422, 57, 59  \nCVE-2013 -1493, 56  \nCVE-2013 -2423, 56  \nCVE-2013 -2460, 56  \nCVE-2013 -2551, 56  \nCVE-2013 -3896, 56  \nCVE-2014 -1761, 62  \nCVE-2014 -6332, 61  \nCVE-2015 -0072, 64  \nCVE-2015 -0310, 56  \nCVE-2015 -0311, 56 \nCVE-2015 -0313, 56  \nCVE-2015 -5119, 54, 63, 159  \nCVE-2015 -8651, 56, 57  \nCVE-2016 -0034, 66, 67, 69  \nCVE-2016 -0165, 67  \nCVE-2016 -0167, 67, 69  \nCVE-2016 -0189, 67, 70  \nCVE-2016 -1010, 67  \nCVE-2016 -1019, 57, 67, 68  CVE-2016 -4117, 22, 23, 24, 25, 29, 57, 67, 68  \nCVE-2016 -4171, 67, 68  \nCVSS. See Common Vulnerability Scoring \nSystem (CVSS)  \nCyprus , 141 \nCzech Republic , 141 \nData Execution Prevention (DEP), 39, 147  \nDDoS. See distributed denial of service  \nDelphi, 22  \nDenmark, 81, 106, 141  \nDEP. See Data Execution Prevention (DEP)  \nDiplugem, 83, 88, 92, 156  \nDirectAccess, 123, 130  \ndistributed denial of service, 5, 6, 147  \nDlcypt, 53, 54, 156  \nDLHelper, 75, 84, 156  \nDominican Republic , 141 \nDonoff, 95, 156  \nDownloadAdmin, 103  \ndownloaders, 75, 97, 148  \nDownloaders & Droppers (category), 82, 84,  \n125, 127  \nDownloadSponsor, 103  \ndrive -by downloads, 119 –21 \ndroppers, 26, 27, 28, 75, 148  \nDynamer, 82, 84, 85, 86, 91, 156  \nEcuador , 141 \nEgypt , 141 \nEl Salvador , 141 \nemail, 97 –100 \nEMET. See Enhanced Mitigation Experience \nToolkit  \nencounter rate, 71 \nEnhanced Mit igation Experience Toolkit, 130  \nEoRezo, 85, 156  \nEstonia , 141 \nEurope, 21 –34, 62, 79, 86, 87  \nExchange Online, 97, 98, 97 –100, 137, 139  \nexploit kits, 52, 53, 54 –57, 58, 59, 63, 65, 66, \n67, 68, 69, 70, 74, 79, 86, 87, 91, 95, 96, \n148, 155, 157, 158, 159, 161  \nexploits, 35 –39, 51, 64, 66, 51 –70, 82, 84, 85, \n91, 125  \nAdobe Flash Player, 62–64, 67–68  \n164 INDEX   \n browser, 64 –65 \ndocument, 61 –62 \nfamilies, 53 –54 \nInternet Explorer, 69  \nJava, 57–59 \nMicrosoft Windows, 67  \noperating system, 59 –61 \nSilverlight, 67, 69  \nused in targeted atta cks, 66 –70 \nzero -day. See zero -day vulnerabilities \nand exploits  \nExpressDownloader, 103  \nFakeBsod, 95  \nFakeCall, 74, 91, 157  \nFinFisher, 24, 25, 27, 29  \nFinland, 81, 106, 118, 141  \nFireEye, 68, 69  \nFourthrem, 75, 157  \nFrance , 74, 75, 84, 85, 86, 141  \nGamarue, 75, 82, 84, 85, 86, 87, 91, 157, 158  \ngeneric detections, v, 54, 55, 59, 75, 82, 84, \n86, 149, 156, 157, 159, 160  \nGeorgia (country) , 141 \nGerman language, 76, 155  \nGermany , 74, 76, 84, 85, 105, 141  \nGhana , 141 \nGingerBreak. See CVE-2011 -1823  \nGingerMaster, 61  \nGitHub,  3 \nGoogle, 44, 48, 60, 61  \nGoogle Chrome, 48  \nGoogle Play Store, 44  \nGreece , 141 \nGroup Policy, 129  \nGuadeloupe , 141 \nGuatemala , 141 \nHacking Team, 69  \nHadsruda, 82, 157  \nHao123, 75, 157  \nHeapAli, 64  \nHonduras , 141 \nHong Kong SAR , 141 \nHungary , 141 \nHVCI. See Hypervisor Code Integrity  Hypervisor Code Integrity, 29  \niBryteInstaller, 103  \nIceland, 81, 141  \nIExtensionValidation, 52, 57, 63, 64, 65 –66, \n71 \nIframeRef, 53, 54, 157  \nIndia , 74, 75, 84, 86, 141  \nIndonesia, 78, 79, 80, 86, 107, 141  \nInstallCore, 102, 103  \nInternet Explorer, 48, 52, 56, 57, 58, 61, 63, \n64, 65 –66, 67, 68, 69, 70, 71, 91, 111, 112, \n116, 129, 138, 139, 145, 150, 151, 155, 159  \nIppedo, 80, 157  \nIran, 121  \nIraq, 78, 107, 142  \nIreland, 119, 142  \nIsrael , 142  \nIsrocore, 103  \nItaly, 94, 95, 142  \nJackTheRippe r, 75, 85, 157  \njailbreaking. See rooting  \nJamaica , 142  \nJapan, ii, 81, 119, 142  \nJava Runtime Environment, 52, 53, 56, 57, \n58, 59, 57 –59, 62, 64, 100, 130, 155, 158, \n159 \nJavaScript, 53, 54, 55, 62, 67, 99, 100, 128, \n147, 156, 157, 159  \nJenxcus, 85, 87, 158  \nJordan, 142  \nJRE. See Java Runtime Environment  \nKaixin. See Anogre  \nKaspersky, 68, 69  \nKazakhstan , 142  \nKenya , 142  \nKorea, 68, 70, 95, 115, 116, 119, 142  \nKuwait , 142  \nKyrgyzstan, 106  \nLatvia , 142  \nLebanon , 142  \nLibya, 78, 106, 107, 142  \nLightmoon, 79, 158  \nLinux, 47, 59  \nLithuania , 142   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    165 \n Lockheed Martin, 7  \nLocky, 95, 96, 158  \nLodbak, 82, 84, 85, 86, 87, 91, 158  \nLotoor, 60  \nLuxembourg, 95, 142  \nMac OS X, 59  \nMacao SAR , 142  \nMacedonia, FYRO, 96, 142  \nMacoute, 79, 158  \nMadang, 79, 158  \nMagnitude. See Pangimop  \nMalaysia , 142  \nmalicious so ftware. See malware  \nMalicious Software Removal Tool, 72, 78, \n87, 89, 104, 105, 137, 139, 140, 146, 149, \n150 \nMalta , 142  \nmalware, v, vii, 3 –20, 21, 22, 23, 26, 27, 28, \n30–32, 32, 43, 51, 52, 53, 54, 59, 61, 63, \n71–110, 111, 112, 116, 117, 118, 119, 123 –31, \n135–36, 137, 138, 145, 146, 147, 148, 149, \n150, 151, 152, 153, 154, 155 –61 \nby country or region, 73 –81, 140 –44 \nby platform, 90 –92 \ncategories, 81 –85 \nby location, 83 –85 \nfamilies, 85 –92 \nby platform, 90 –92 \nnaming, 135 –36 \nransomware, 92 –97 \nmalware hosting, 116 –19 \nby location, 117 –19 \nman -in-the-middle attacks, 5, 44, 150  \nMartinique , 142  \nMauritius , 142  \nMeadgive, 53, 56, 95, 96, 158  \nMexico , 74, 76, 84, 142  \nMicrosoft Digital Crime Unit, 13  \nMicrosoft Digital Crimes Unit, 87  \nMicrosoft Edge, 39, 58, 65, 68, 69, 111, 112, \n116, 129, 138, 139, 150, 151  \nMicrosoft Excel, 99, 100  \nMicrosoft Intune, 103  \nMicrosoft IT, 123 –31 Microsoft Malware Protection Engine, v, 138  \nMicrosoft Office, 24, 29, 30, 62, 138, 156, 160  \nMicrosoft Outlook, 100  \nMicrosoft Safety Scanner, 97, 137, 139  \nMicrosoft Security Bulletins, 51, 54, 60, 61, \n62, 64, 65, 66, 67, 69, 70, 156, 161  \nMicrosoft Security Essentials, 127, 137, 139  \nMicrosoft Update, 91, 129, 137  \nMicrosoft Word, 62, 69, 99, 100, 128, 156, \n158 \nmimikatz, 10, 12, 13  \nMizenota, 83, 88, 89, 92, 158  \nMobogenie, 103  \nMofin, 75, 158  \nMoldova , 142  \nMongolia, 78, 79, 107, 121, 142  \nMorocco, 78, 142  \nMozambique , 142  \nMozilla Firefox, 48  \nMS-DOS, 85  \nMSRT. See Malicious Software Removal Tool  \nMyanmar, 78, 79  \nMyntor, 23  \nMyWebSearch, 102, 103  \nNamibia , 142  \nNAP. See Network Access Protection  \nNational Vulnerability Database, 43, 47, 48  \nNemucod, 95, 159  \nNeobar, 75, 159  \nNEODYMIUM, 21 –34, 68  \nNepal , 142  \nNetherlands , 142  \nNetis, 53, 54, 63, 76, 159  \nNetwork Access Protection, 130  \nNeutrinoEK, 53, 56, 57, 95, 159  \nNew Zealand , 142  \nNicaragua , 142  \nNigeria , 107, 116, 143  \nNorth America, 86  \nNorway, 81, 106, 143  \nNuqel, 80, 159  \nNVD. See National Vulnerability Database  \nObfuscator, 57, 59, 85, 159   \n166 INDEX   \n Obfuscators & Injectors (category), 82, 84, \n85, 91  \nOffice 365, 19, 29, 97 –100, 138, 139  \nOffice 365 Advanced Threat Protection, 97 –\n100, 138  \nOgimant, 75, 159  \nOman , 143  \nOpenCandy. See CandyOpen  \nOracle, 58, 59  \nOther Malware (category), 82, 84, 91, 125, \n127 \nOutBrowse, 88, 89, 90, 159  \npaint.net, 102  \nPakistan, 78, 80, 143  \nPalestinian Authority, 78, 143  \nPanama , 143  \nPangimop, 96  \nParaguay , 143  \nPassword Stealers & Monitoring Tools \n(category), 82, 84  \nPDF, 62, 63, 100, 159  \nPdfjsc, 53, 62, 159  \nPeals, 75, 82, 84, 85, 86, 91, 159  \nPeru , 143  \nPhilippines , 143  \nphishing, 112 –16 \nby location, 115 –16 \nspear phishing, 23, 24,  153 \ntarget institutions, 114 –15 \nPLATINUM, 21  \nPoland , 143  \nPortugal , 143  \npotentially unwanted applications, 101 –4, \n125 \nPowerShell, 131  \nPrepscram, 79, 160  \nPROMETHIUM, 21 –34, 68  \nProofpoint, 68  \nPUA. See potentially unwanted applications  \nPuerto Rico , 143  \nQatar,  96, 143  \nransomware, 82, 92 –97 \nRansomware, 5, 84, 85, 158, 161  \nRDP. See Remote Desktop Protocol  RelevantKnowledge, 102, 103  \nRemote Desktop Protocol, 4, 6  \nRéunion , 143  \nRiccietex, 75, 160  \nRIG. See Meadgive  \nrogue security software, 74, 151  \nRomania , 143  \nrootin g, 61, 149, 151, 152  \nrootkits, 27, 152  \nRundas, 73, 91, 160  \nRussia, 56, 74, 75, 84, 86, 96, 105, 116, 143  \nRussian language, 96  \nSafari, 48  \nSality, 75, 160  \nSanDisk, 22  \nSasquor, 89, 92, 155, 160, 161  \nSaudi Arabia, 119, 143  \nScarCruft, 68  \nSCCM. See System Center Configuration \nManager  \nSCEP. See System Center Endpoint \nProtection  \nsecurity software, real -time, 104 –9 \nby location, 105 –7 \nby platform, 107 –9 \nSEHOP. See Structured Exception Handler \nOverwrite Protection (SEHOP)  \nSenegal , 143  \nSerbia , 143  \nSharePoint, 4  \nShellCode, 53, 63  \nSigru, 79, 160  \nSilverlight, 56, 66, 67, 69, 155, 158, 159  \nSingapore , 143  \nSkeeyah, 75, 82, 85, 86, 91, 160  \nSlovakia , 143  \nSlovenia, 119, 143  \nsmart cards, 130  \nSmartScreen Filter, 112 –19, 129  \nSoftonic, 103  \nsoftware bundlers, 74,  75, 76, 79, 83, 84, 88, \n89, 92, 102, 125, 152, 155, 156, 158, 159, \n160, 161  \nSouth Africa, 94, 95, 115, 116, 143   \nMICROSOFT SECURIT Y INTELLIGENCE REPOR T, VOLUME 21 , JANUARY –JUNE 2016    167 \n Spain, 116, 143  \nspam, 63, 95, 96, 97, 137, 150, 152, 156, 158  \nSpigot, 103  \nSpursint, 73, 75, 82, 85, 86, 87, 91, 160  \nSQL, 11, 111, 153  \nSri Lanka , 143  \nStallmonitz, 92, 160  \nSTRONTIUM, 21, 68  \nStructured Exception Handler Overwrite \nProtection (SEHOP), 39, 152, 153  \nStuxnet, 54, 161  \nSupTab, 74, 83, 84, 88, 89, 92, 158, 160, 161  \nSventore, 75, 161  \nSweden, 81, 118, 143  \nSweet Orange. See Anogre  \nSwitzerland , 143 \nSystem Center Configuration Manager, 103  \nSystem Center Endpoint Protection, 101, \n103–4, 123, 125, 127, 128, 138, 139  \nTaiwan, 94, 115, 121, 143  \nTanzania , 107, 143  \ntargeted attacks, 21 –34, 66 –70, 97 –100 \nTescrypt, 85, 95, 161  \nThailand, 118, 143  \nTillail, 74, 83, 88, 161  \nTor, 95, 158  \nTrinidad and Tobago , 143  \ntrojans, 75, 82, 84, 85, 87, 91, 125, 127, 145, \n148, 153, 155, 158, 159, 160, 161  \nTrueCrypt, 22  \nTruvasys, 22, 23, 26, 33, 34  \nTunisia , 143  \nTurkey , 25, 21 –34, 74, 75, 84, 144  \nTurkish language, 23  \nUkraine,  87, 115, 118, 144  \nUnited Arab Emirates, 119, 144  \nUnited Kingdom , 74, 76, 84, 85, 144  \nUnited States , 74, 84, 85, 86, 144  \nunwanted software. See malware  \nUruguay , 144  \nVenezuela , 144  \nVietnam, 78, 79, 118, 144  \nviruses, 75, 79, 80, 82, 84, 85, 125, 150, 154, \n157, 158, 160  Virut, 80, 161  \nVMWare, 59  \nvulnerabilities, v, 8, 9, 21, 29, 35 –39, 43 –50, \n51–70, 83, 91, 119, 130, 145, 148, 152, 155, \n158, 159  \nAdobe Flash Player, 67 –68 \napplication, 47 –49 \nbrowser, 47 –49 \ncomplexity, 46 –47 \nelevation of privilege (EOP), 35, 36, 37, \n38, 67, 69  \nin Microsoft products, 35 –39, 49  \nindustry -wide, 43 –44 \nInternet Explorer, 69  \noperating system, 47 –49 \nremote code execution (RCE), 35, 36, 37, \n38, 62, 67, 69  \nseverity, 44 –46 \nSilverlight, 69  \nzero -day. See zero -day vulnerabilities \nand exploits  \nWindows 10, 22, 29, 30, 32, 39, 58, 63, 65, \n73, 91, 97, 103, 104, 108, 109, 129, 130, 131, \n138, 139  \nAnniversary Update, 73, 97, 138  \nWindows 7, 22, 69, 70, 91, 109, 131, 137  \nWindows 8, 22, 51, 54, 70, 91, 92, 108, 109, \n138 \nWindows 8.1, 70, 91, 92, 108, 109,  138 \nWindows Defender, ii, 21, 22, 24, 25, 30 –32, \n32, 51, 73, 82, 87, 103, 104, 108, 109, 123, \n125, 127, 129, 130, 131, 138, 139, 146, 157, \n160 \ncloud -based protection, 73 \nWindows Defender Advanced Threat \nProtection, 22, 24, 30 –32, 138  \nWindows Defender Offl ine, 97, 138, 139  \nWindows Event Forwarding, 123  \nWindows Firewall, 129  \nWindows Script Host, 100  \nWindows Update, 91, 129, 137, 149  \nWindows Vista, 22, 91, 92, 109, 137  \nWindows XP, 80, 85, 157, 160  \nWingbird, 24, 25, 26, 27, 28, 29, 32, 33   \n168 INDEX   \n WinRAR, 22  \nWinUtils, 22 \nworms, 75, 76, 79, 80, 82, 84, 85, 86, 87, 91, \n125, 127, 154, 157, 158, 159  \nXadupi, 89, 91, 160, 161  \nXiazai, 74, 161  \nXSS. See cross -site scripting  YouTube, 87, 159  \nZambia , 144  \nzero -day vulnerabilities and exploits, 21 –34, \n37, 38, 59, 63, 67, 68, 69, 70,  154 \nZimbabwe , 107, 144  \nμTorrent, 102  \n \n \n  \n \n  \n \nOne Microsoft Way  \nRedmond, WA 98052 -6399  \nmicrosoft.com/security  \n"
}