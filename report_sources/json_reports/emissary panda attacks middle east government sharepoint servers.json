{
    "title": "emissary panda attacks middle east government sharepoint servers",
    "text": "Tools Playbooks Speaking Events About Us\nEmissary Panda Attacks Middle East Government\nSharePoint Servers\n41,431 people reacted 2 13 min. read\nThis post is also available in: 日本語  (Japanese )\nExecutive Summary\nIn April 2019, Unit 42 observed the Emissary Panda (AKA APT27, TG‐3390, Bronze Union, Lucky Mouse) threat\ngroup installing webshells on SharePoint servers to compromise Government Organizations of two different\ncountries in the Middle East. We believe the adversary exploited a recently patched  vulnerability in Microsoft\nSharePoint tracked by CVE‐2019‐0604 , which is a remote code execution vulnerability used to compromise the\nserver and eventually install a webshell. The actors uploaded a variety of tools that they used to perform\nadditional activities on the compromised network, such as dumping credentials, as well as locating and pivoting to\nadditional systems on the network. Of particular note is their use of tools to identify systems vulnerable to CVE‐\n2017‐0144 , which is the same vulnerability exploited by EternalBlue that is best known for its use in the\nWannaCry attacks of 2017.\nThis activity appears related to campaigns exploiting CVE‐2019‐0604 mentioned in recent security alerts from\nSaudi Arabian National Cyber Security Center  and the Canadian Center for Cyber Security . In addition to the\naforementioned post‐exploitation tools, the actors used these webshells to upload legitimate executables that\nthey would use DLL sideloading to run a malicious DLL that has code overlaps with known Emissary Panda\nattacks . We also found the China Chopper webshell on the SharePoint servers, which has also been used by the\nEmissary Panda threat group.\nIn this blog, we provide details of the tools and tactics we observed on these compromised SharePoint servers,\nexplain how we believe these connect to the Emissary Panda threat group, correlate our findings with those of\nthe Saudi Arabian National Cyber Security Center and the Canadian Center for Cyber Security, and provide\nindicators of compromise (IoCs) from our research. You can find the Adversary Playbook for the activity detailed\nin this blog here .\nAttack Overview\nThis webshell activity took place across three SharePoint servers hosted by two different government\norganizations between April 1, 2019 and April 16, 2019, where actors uploaded a total of 24 unique executables\nacross the three SharePoint servers. Figure 1  shows a timeline of when the files were uploaded to the three\nwebshells. The timeline shows three main clusters of activity across the three webshells, with activity occurring\non two separate webshells (green and orange) within a very small window of time on April 2, 2019 and the\nactivity involving the third webshell two weeks later on April 16, 2019. The actors uploaded several of the same\ntools to across these three webshells, which provides a relationship between the incidents and indicates that a\nsingle threat group is likely involved.\nFigure 1. Timeline of file uploads across three related webshells\nThe tools uploaded to the webshells range from legitimate applications such as cURL to post‐exploitation tools\nsuch as Mimikatz. The threat actors also uploaded tools to scan for and exploit potential vulnerabilities in the\nnetwork, such as the well‐known SMB vulnerability patched in MS17‐010  commonly exploited by EternalBlue to\nmove laterally to other systems on the network. We also observed the actors uploading custom backdoors such\nas HyperBro which is commonly associated with Emissary Panda . Based on the functionality of the various tools\nuploaded to the webshells, we believe the threat actors breach the SharePoint servers to use as a beachhead,\nthen attempt to move laterally across the network via stolen credentials and exploiting vulnerabilities.\nWebshells Installed\nAs previously mentioned, we found webshells installed on three SharePoint servers hosted at two different\norganizations, two of which had the same file name of errr.aspx  and the other a filename of  error2.aspx .\nThe webshells were hosted at the following paths on the compromised servers:\n/_layouts/15/error2.aspx\n/_layouts/15/errr.aspx\nWe were able to gather one of the webshells with which we saw the actor interacting, specifically the\nerror2.aspx  file listed above. The error2.aspx  file (SHA256:\n006569f0a7e501e58fe15a4323eedc08f9865239131b28dc5f95f750b4767b38 ) is a variant of the\nAntak webshell , which is part of a tool created for red teaming called Nishang . The specific variant of Antak in\nerror2.aspx  is version v0.5.0, which is an older version of the webshell that was updated in August 2015 to\nv0.7.6 to include some basic authentication functionality and the ability to perform SQL queries. It’s possible the\nactors obtained Antak v0.5.0 via the Nishang GitHub repository  or from SecWiki’s GitHub  that also has the v0.5.0\nversion of Antak. Figure 2 shows the Antak webshell loaded on one of the Sharepoint servers.\nFigure 2. Antak webshell ‘error2.aspx’ used to upload post‐exploitation tools\nWhile we observed the threat actor uploading additional tools to the Antak webshell above, the Sharepoint\nserver also had several other webshells installed. The additional webshells, specifically stylecs.aspx ,\nstylecss.aspx, and test.aspx are listed in Table 1 , and appear related to the China Chopper webshell.\nWe cannot be sure all of these webshells were installed by the same actors, as multiple actors could have\nexploited the SharePoint server. For instance, the China Chopper‐related webshells are one‐line of JScript code\nthat could be easily copied and used by multiple groups, and the Antak webshell is easily obtained from publicly\naccessible repositories. However, the installation of China Chopper and the uploading of Emissary Panda related\ncustom payloads to the Antak webshell suggests they are likely related, as this threat group has used  China\nChopper to compromise servers in the past .\nFilename SHA256\nstylecs.aspx 2feae7574a2cc4dea2bff4eceb92e3a77cf682c0a1e78ee70be931a251794b86\nstylecss.aspx d1ab0dff44508bac9005e95299704a887b0ffc42734a34b30ebf6d3916053dbe\ntest.aspx 6b3f835acbd954af168184f57c9d8e6798898e9ee650bd543ea6f2e9d5cf6378\nTable 1. Additional webshells hosted on Sharepoint server\nThe stylecs.aspx  webshell provides fairly significant functionality, as its developer wrote this webshell in\nJScript that ultimately runs any supplied JScript code provided to it within the HTTP request. Figure 3  shows this\nwebshell’s code that will run supplied JScript provided in base64 encoded format within the URL within a\nparameter e358efa489f58062f10dd7316b65649e . The parameter\ne358efa489f58062f10dd7316b65649e  is interesting as it is the MD5 hash for the letter ‘t’, which is a known\nparameter for China Chopper as mentioned in the next section.\nFigure 3. China Chopper code found in stylecs.aspx  webshell on SharePoint server\nThe stylecss.aspx  webshell is very similar to the stylecs.aspx , as it runs JScript provided within the\ne358efa489f58062f10dd7316b65649e  parameter of the URL; however, the stylecss.aspx  webshell\ndoes not accept base64 encoded JScript, but expects the JScript in cleartext that the actor would provide as URL\nsafe text. Figure 4 shows the code within stylecss.aspx , which when compared to  Figure 3  above shows the\nlack of the base64 decoding function ‘FromBase64String’.\nFigure 4. China Chopper code found in stylecss.aspx  webshell on SharePoint server\nThe last webshell extracted from the Sharepoint server had a filename of test.aspx , which is very similar to\nthe stylecs.aspx webshell as it runs base64 encoded JScript provided in the URL of the request. However,\nthe test.aspx  webshell uses a parameter related to the compromised organization to obtain the base64\nencoded JScript that it will run and display within the browser. The  test.aspx  shell also includes code that\nsets the HTTP response status to a 404 Not Found , which will display an error page but will still run the provided\nJScript. Figure 5  shows the code within the test.aspx  file.\nFigure 5. China Chopper code found in test.aspx  webshell on SharePoint server\nLinks to Security Advisories\nIn April 2019, several national security organizations released alerts on CVE‐2019‐0604 exploitation, including the\nSaudi Arabian National Cyber Security Center  and the Canadian Center for Cyber Security . Both of these alerts\ndiscussed campaigns in which actors used the CVE‐2019‐0604 to exploit SharePoint servers to install the China\nChopper webshell. While we cannot confirm all of the claims made in these advisories, we noticed overlaps in\nthe webshell code hosted on the compromised SharePoint servers we observed and the webshells mentioned in\nthese advisories.\nThe Saudi Arabian National Cyber Security Center’s alert provided details regarding the activities carried out by\nthe adversary. This alert also displayed the code associated with the China Chopper webshell observed in the\nattacks, which included Request.Item[“t”] to obtain JScript code from the ‘t’ parameter of the URL. As\nmentioned in the previous section, stylecs.aspx  and stylecss.aspx  both used a parameter of\ne358efa489f58062f10dd7316b65649e , which is the MD5 hash of ‘t’. This may suggest the actor modified\nthe script slightly between the attack we observed, and the attack mentioned in the NCSC advisory, all while\nretaining the same functionality. Also, the NCSC advisory mentioned that the actors used a file name\nstylecss.aspx  for their webshell, which is the same filename we saw associated with China Chopper.\nThe alert from the Canadian Center for Cyber Security included the SHA256 hashes of the files associated with\nthe campaign, one of which was\n05108ac3c3d708977f2d679bfa6d2eaf63b371e66428018a68efce4b6a45b4b4  for a file named\npay.aspx . The pay.aspx  file is part of the China Chopper webshell and is very similar to the\nstylecss.aspx  webshell we discussed above, with the only major difference is the URL parameter of\n‘vuiHWNVJAEF’ within the URL that pay.aspx  webshell uses to obtain and run JScript. Figure 6  below shows a\ncomparison between the stylecss.aspx  and pay.aspx files.\nFigure 6. Comparison between stylecss.aspx  webshell and pay.aspx  webshell discussed in Canadian Center for Cyber Security advisory\nTools Uploaded\nDuring our research into this attack campaign, Unit 42 gathered several tools that the actor uploaded to the\nthree webshells at the two government organizations. The chart in Figure 7  shows the same tools being uploaded\nto the webshells, which provided an initial linkage between the activities. One of the overlapping tools uploaded\nto the webshells is the legitimate cURL application, which could be used by multiple groups. The other\noverlapping files are tools used by the adversary to locate other systems on the network ( etool.exe ), check to\nsee if they are vulnerable to CVE‐2017‐0144 (EternalBlue) patched in MS07‐010 ( checker1.exe ) and pivot to\nthem using remote execution functionality offered by a tool similar to PsExec offered by Impacket\n(psexec.exe ). These tools are not custom made by the adversary but still provide a medium confidence linkage\nbetween the activities. We also observed the actors uploading the HyperBro backdoor to one of the webshells,\nas well as legitimate executables that would sideload malicious DLLs that have overlapping code associated with\nknown Emissary Panda activity.\nFigure 7. Relationships between tools uploaded to the three webshells hosted on SharePoint servers\nThe actors uploaded 10 portable executables to the error2.aspx  webshell, as seen in Table 2. The list of tools\nuploaded to this webshell includes legitimate applications, such as cURL and a component of Sublime Text used to\nsideload a malicious DLL, which we will discuss in an upcoming section. The list also includes several hack tools,\nsuch as Mimikatz for credential dumping and several compiled python scripts used to locate and compromise\nother systems on the local network. Lastly, we saw the actor uploading a custom backdoor called HyperBro,\nwhich has been associated with Emissary Panda operations in the past. We will provide an analysis of the\nHyperBro tool in an upcoming section.\nFilename SHA256 Description\nm2.exeb279a41359367408c627ffa8d80051ed0f04c76fbf6aed79b3b2\n963203e08adePacked Mimikatz tool.\npsexec.exe7eea6e15bb13a3b65cca9405829123761bf7d12c6dc3b81ce49\n9d8f6a0b25fb7Compiled Impacket psexec\ns.exe04f48ed27a83a57a971e73072ac5c769709306f2714022770fb\n364fd575fd462HyperBro backdoor\ncurl.exeabc16344cdfc78f532870f4dcfbb75794c9a7074e79647738256\n4d7ba2122c7dLegitimate cURL\ncurl.exebbb9cd70fdc581812822679e6a875dcf5b7d32fd529a1d56494\n8a5a3f6f9e3abLegitimate cURL\nchecker1.ex\ne090cefebef655be7f879f2f14bd849ac20c4051d0c13e55410a4\n9789738fad98Compiled EternalBlue checker script\netool.exe38fa396770e0ecf60fe1ce089422283e2dc8599489bd18d5eb03\n3255dd8e370cC# Tool, likely from\nhttps://github.com/mubix/netview\nplugin_host\n.exe738abaa80e8b6ed21e16302cb91f6566f9322aebf7a22464f11e\ne9f4501da711Legitimate Sublime Text plugin host\nPYTHON33\n.dll2dde8881cd9b43633d69dfa60f23713d7375913845ac3fe9b4d\n8a618660c4528Sideloaded DLL loaded by Sublime Text\ncurl.exebbb9cd70fdc581812822679e6a875dcf5b7d32fd529a1d56494\n8a5a3f6f9e3abLegitimate cURL.\nTable 2. Unique tools uploaded to the error2.aspx  webshell installed on a SharePoint server\nWe saw 17 tools uploaded to the errr.aspx  webshell hosted on the SharePoint server of one of the\ngovernment organizations, which is in the middle of the chart in Figure 7. Table 3  shows all of the tools we\nobserved the actor uploading to the webshell, which includes a list of tools used to dump credentials, locate, and\nexploit remote systems, as well as pivoting to other systems on the network.\nFilename SHA256 Description\nsmb1.exe88027a44dc82a97e21f04121eea2e86b4ddf1bd7bbaa4ad009b\n97b50307570bdSMB backdoor based on smbrelay3\nmcmd.exe738128b4f42c8d2335d68383d72734130c0c4184725c068514\n98a4cf0374a841Compiled zzz_exploit.py\nmcafee.exe3bca0bb708c5dad1c683c6ead857a5ebfa15928a59211432459\na3efa6a1afc59Compiled zzz_exploit.py\ndump.exe29897f2ae25017455f904595872f2430b5f7fedd00ff1a46f1ea\n77e50940128epwdump\nchecker1.exed0df8e1dcf30785a964ecdda9bd86374d35960e1817b25a6b09\n63da38e0b1333Compiled MS17‐010 checker\nmemory.exea18326f929229da53d4cc340bde830f75e810122c58b523460c\n8d6ba62ede0e5Packed Mimikatz\nchecker.exe090cefebef655be7f879f2f14bd849ac20c4051d0c13e55410a4\n9789738fad98Compiled MS17‐010 checker\npsexec.exe7eea6e15bb13a3b65cca9405829123761bf7d12c6dc3b81ce49\n9d8f6a0b25fb7Compiled Impacket psexec .\netool.exe38fa396770e0ecf60fe1ce089422283e2dc8599489bd18d5eb0\n33255dd8e370cC# Tool, likely from\nhttps://github.com/mubix/netview\nsmb.exe4a26ec5fd16ee13d869d6b0b6177e570444f6a007759ea94f1a\na18fa831290a8SMB backdoor based on smbrelay3\nagent_Win3\n2.exeb2b2e900aa2e96ff44610032063012aa0435a47a5b416c384bd\n6e4e58a048ac9Termite\nsmb_exec.ex\ne475c7e88a6d73e619ec585a7c9e6e57d2efc8298b688ebc10a3\nc703322f1a4a7httprelay\ncurl.exebbb9cd70fdc581812822679e6a875dcf5b7d32fd529a1d56494\n8a5a3f6f9e3abLegitimate cURL\nincognito.ex\ne9f5f3a9ce156213445d08d1a9ea99356d2136924dc28a8ceca6\nd528f9dbd718bIncognito   \nnbtscan.exec9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa\n7fb9ba17e4e9enbtscan\nfgdump.exea6cad2d0f8dc05246846d2a9618fc93b7d97681331d5826f835\n3e7c3a3206e86pwdump\nsmbexec.exee781ce2d795c5dd6b0a5b849a414f5bd05bb99785f2ebf36edb\n70399205817eeCompiled Impacket smbexec\nTable 3. Unique tools uploaded to the errr.aspx  webshell installed on a SharePoint server\nTwo of the tools, specifically the compiled zzz_exploit.py  and checker.py  suggest the actor would check\nand exploit remote systems if they were not patched for MS17‐010, which patched the CVE‐2017‐0144\n(EternalBlue) vulnerability. Also, the use of the Mimikatz and pwdump tools suggests the adversary attempts to\ndump credentials on compromised systems. We were able to gather the command line arguments the actor used\nto run the SMB backdoor smb1.exe . The following arguments shows the actor using the SMB backdoor to\nattempt to run a batch script m.bat  on a remote host using a domain username and the account’s password hash:\nc:\\programdata\\smb1.exe <redacted 10.0.0.0/8 IP> <redacted domain>\\<redacted\nusername> :<redacted password hash> winsk c:\\programdata\\m.bat\nWe saw far fewer portable executable files uploaded to the second errr.aspx  webshell, specifically the 3 files\nseen in Table 4 . The files uploaded to this webshell included the same compiled python script that would scan\nremote systems that were vulnerable to CVE‐2017‐0144 (EternalBlue) that we saw uploaded to the other\nerrr.aspx  webshell. Also, we observed the actor uploading a legitimate Microsoft application that would\nsideload a malicious DLL, of which was very similar to the DLL sideloaded by the Sublime Text plugin host that\nwas uploaded to the error2.aspx  webshell.\nFilename SHA256 Description\nchecker1.ex\ned0df8e1dcf30785a964ecdda9bd86374d3596\n0e1817b25a6b0963da38e0b1333Compiled MS17‐010 checker\nCreateMedi\na.exe2bb22c7b97e4c4d07e17a259cbc48d72f7e39\n35aa873e3dd78d01c5bbf426088Legitimate CreateMedia.exe application from Microsoft’s\nSystem Center 2012 Configuration Manager\nCreateTsMe\ndiaAdm.dll06510504f30feb1adc7e423d5a24e67e5b97ac\nbfafe40f253a054be8b1c4e8d7Sideloaded DLL loaded by CreateMedia.exe\nTable 4. Unique tools uploaded to the errr.aspx  webshell installed on a SharePoint server\nEmissary Panda Specific Tools\nMany of the tools uploaded to these webshells are hacking tools that are publicly accessible and could be used by\nmultiple threat actors. However, several of the tools uploaded to the webshells appear to be custom made and\nlikely related to the Emissary Panda threat group.\nHyperBro\nThe s.exe  (SHA256: 04f48ed27a83a57a971e73072ac5c769709306f2714022770fb364fd575fd462 )\nuploaded to the error2.aspx  webshell is a self‐extracting 7‐zip archive that is an example of the HyperBro\nbackdoor. According to Kaspersky  and SecureWorks  research, HyperBro is a custom backdoor developed and\nused by Emissary Panda in their attack campaigns. This sample of HyperBro is similar to the sample discussed in\nKaspersky’s research, specifically using a legitimate pcAnywhere application to sideload a DLL to decrypt,\ndecompress and run a payload embedded within a file named ‘thumb.db’. Table 5  shows the three files associated\nwith this HyperBro sample, which have the same file names as the self‐extracting 7zip archives mentioned in\nKaspersky’s blog (SHA256 hashes:\n34a542356ac8a3f6e367c6827b728e18e905c71574b3813f163e043f70aa3bfa  and\n2144aa68c7b2a6e3511e482d6759895210cf60c67f14b9485a0236af925d8233 ).\n \nFilename SHA256 Description\nthinprobe.ex\ne76d2e897ca235beab44ee7eaab9ede7bc7868bbaeb7d6\ncb10b4323c07eb216afSymantec pcAnywhere thinprobe application\nthinhostpro\nbedll.dlld40414b1173d59597ed1122361fe60303d3526f15320\naede355c6ad9e7e239afSideloaded DLL loaded by thinprobe.exe\nthumb.db270ea24f2cef655bd89439ab76c1d49c80caaa8899ffa6\nf0ef36dc1beb894530Contains encrypted and compressed DLL payload\nrun by sideloaded DLL\nTable 5. Files associated with the HyperBro tool uploaded to webshell on SharePoint server\nThe functional payload is a DLL compiled on 2019‐03‐11 02:23:54, which has two functionalities depending if the\nbinary has a command line argument -daemon  or -worker  passed to it. The daemon  functionality handles the\nC2 communications portion of the Trojan, which is configured to communicate with 185.12.45[.]134 over\nHTTPS using the following URL:\nhxxps://185.12.45[.]134:443/ajax\nThe worker  functionality acts on the data received from the C2 server, which is passed from the daemon  to the\nworker  via a named pipe called “ \\\\.\\pipe\\testpipe “. The worker subjects the received data to a command\nhandler whose available commands are listed in Table 6 .  \nCommand Sub‐command Description\n0x12 File manager\n0x10 Enumerate logical storage volumes\n0x11 Delete a specified file\n0x12 Upload a file\n0x13 Download a file\n0x17 List contents of a folder\n0x19 Run an application (CreateProcessW) or script/file (ShellExecuteW)\n0x13 Execute command on shell\n0x16 Takes screenshot\n0x19 Runs shellcode it injects into a newly created process ‘msiexec.exe’\n0x1a Kill specific process\n0x1e Service manager\n0x17 List all services and their configurations\n0x19 Start a specified service\n0x1a Stop a specified service\nTable 6. The commands available within the HyperBro tool’s command handler\nUnknown Sideloaded Payloads\nTable 2 and 4  above include two legitimate executables used for DLL sideloading, specifically the\nplugin_host.exe  application for Sublime Text and the CreateMedia.exe  application from Microsoft’s\nSystem Center 2012 Configuration Manager. The plugin_host.exe  application imports several functions from\na library named python33 , which is how the legitimate application sideloads the malicious DLL named\nPYTHON33.dll . This is the first instance we have observed Sublime Text’s plugin host application used for\nsideloading. Like the plugin host application, the CreateMedia.exe  application imports several functions from a\nlibrary named CreateTsMediaAdm  that is leveraged to load the malicious DLL named\nCreateTsMediaAdm.dll .\nThe PYTHON33.dll  and the CreateTsMediaAdm.dll  libraries are very similar with BinDiff providing a 97%\nsimilarity with 99% confidence between the two DLLs. The code diff in Figure 8  shows the decryption routine in\nPYTHON33.dll (right) and CreateTsMediaAdm.dll (left), both of which use an eight byte XOR key to\ndecrypt a piece of shikata_ga_nai obfuscated  shellcode. The shellcode is responsible for patching the entry\npoint of the legitimate application to call another function in the shellcode that is responsible for loading a file\nwith the library name with an .hlp extension ( PYTHON33.hlp  or CreateTsMediaAdm.hlp ).\nFigure 8. Code comparison between the sideloaded CreateTsMediaAdm.dll  and PYTHON33.dll files uploaded to two webshells\nUnfortunately, we do not have access to the PYTHON33.hlp  or CreateTsMediaAdm.hlp  files, so we do not\nknow the final payload loaded by either of these DLLs. However, using NCC Group ’s research published in May\n2018, we were able to discover code overlaps between these DLLs and a sideloaded DLL that ran the SysUpdate\ntool that the NCC group has associated with an Emissary Panda campaign. Figure 9  shows a code comparison\nbetween the PYTHON33.dll  (right) and inicore_v2.3.30.dll  (left) (SHA256:\n4d65d371a789aabe1beadcc10b38da1f998cd3ec87d4cc1cfbf0af014b783822 ), which was sideloaded\nto run the SysUpdate tool in a previous Emissary Panda campaign. The code overlaps below include the same\ntechnique to find the entry point of the loading executable and decrypting the first piece of shellcode used to\npatch the entry point.\nFigure 9. Code comparison between the sideloaded PYTHON33.dll uploaded to webshell and the inicore_v2.3.30.dll file sideloaded in previous Emissary\nPanda  attacks\nConclusion\nThe Emissary Panda threat group loaded the China Chopper webshell onto SharePoint servers at two\nGovernment organizations in the Middle East, which we believe with high confidence involved exploiting a\nremote code execution vulnerability in SharePoint tracked in CVE‐2019‐0604. According to Microsoft’s advisory ,\nthis vulnerability was patched on March 12, 2019 and we first saw the webshell activity on April 1, 2019. This\nsuggests that the threat group was able to quickly leverage a known vulnerability to exploit Internet facing\nservers to gain access to targeted networks.\nOnce the adversary established a foothold on the targeted network, they used China Chopper and other\nwebshells to upload additional tools to the SharePoint server to dump credentials, perform network\nreconnaissance and pivot to other systems. We believe the actors pivoted to other systems on the network using\nstolen credentials and by exploiting the CVE‐2017‐0144 (EternalBlue) vulnerability patched in MS17‐010. We also\nobserved the actors uploading legitimate tools that would sideload DLLs, specifically the Sublime Text plugin host\nand the Microsoft’s Create Media application, both of which we had never seen used for DLL sideloading before.\nPalo Alto Networks customers are protected by:\nThe CVE‐2019‐0604 vulnerability is covered by our IPS signature Microsoft Sharepoint Remote Code\nExecution Vulnerability (55411)\nAll illegitimate tools uploaded to the webshells are marked with malicious verdicts by WildFire and Traps.\nAutoFocus customers can track the custom Emissary Panda payload seen uploaded to the webshell using the\nHyperBro  tag, but can also track the hack tools using the following tags (note the hack tools are used by multiple\nactors and not just Emissary Panda):\nSmbExec\nPsExec\nPsExec_Python\nBChecker\nZZZ_Exploit\nTermite\nIncognito\nPwDump\nPalo Alto Networks has shared our findings, including file samples and indicators of compromise, in this report with our fellow Cyber Threat Alliance members.\nCTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. For more information\non the Cyber Threat Alliance, visit  www.cyberthreatalliance.org .\nIOCs\nWebshells SHA256\n006569f0a7e501e58fe15a4323eedc08f9865239131b28dc5f95f750b4767b38\n2feae7574a2cc4dea2bff4eceb92e3a77cf682c0a1e78ee70be931a251794b86\nd1ab0dff44508bac9005e95299704a887b0ffc42734a34b30ebf6d3916053dbe\n6b3f835acbd954af168184f57c9d8e6798898e9ee650bd543ea6f2e9d5cf6378\nMalicious HackTools and Payloads SHA256\n88027a44dc82a97e21f04121eea2e86b4ddf1bd7bbaa4ad009b97b50307570bd\n738128b4f42c8d2335d68383d72734130c0c4184725c06851498a4cf0374a841\n3bca0bb708c5dad1c683c6ead857a5ebfa15928a59211432459a3efa6a1afc59\n29897f2ae25017455f904595872f2430b5f7fedd00ff1a46f1ea77e50940128e\nd0df8e1dcf30785a964ecdda9bd86374d35960e1817b25a6b0963da38e0b1333\na18326f929229da53d4cc340bde830f75e810122c58b523460c8d6ba62ede0e5\n090cefebef655be7f879f2f14bd849ac20c4051d0c13e55410a49789738fad98\n7eea6e15bb13a3b65cca9405829123761bf7d12c6dc3b81ce499d8f6a0b25fb7\n38fa396770e0ecf60fe1ce089422283e2dc8599489bd18d5eb033255dd8e370c\n4a26ec5fd16ee13d869d6b0b6177e570444f6a007759ea94f1aa18fa831290a8\nb2b2e900aa2e96ff44610032063012aa0435a47a5b416c384bd6e4e58a048ac9\n475c7e88a6d73e619ec585a7c9e6e57d2efc8298b688ebc10a3c703322f1a4a7\n9f5f3a9ce156213445d08d1a9ea99356d2136924dc28a8ceca6d528f9dbd718b\nc9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e\na6cad2d0f8dc05246846d2a9618fc93b7d97681331d5826f8353e7c3a3206e86\ne781ce2d795c5dd6b0a5b849a414f5bd05bb99785f2ebf36edb70399205817ee\nd0df8e1dcf30785a964ecdda9bd86374d35960e1817b25a6b0963da38e0b1333\n06510504f30feb1adc7e423d5a24e67e5b97acbfafe40f253a054be8b1c4e8d7\nb279a41359367408c627ffa8d80051ed0f04c76fbf6aed79b3b2963203e08ade\n7eea6e15bb13a3b65cca9405829123761bf7d12c6dc3b81ce499d8f6a0b25fb7\n04f48ed27a83a57a971e73072ac5c769709306f2714022770fb364fd575fd462\n090cefebef655be7f879f2f14bd849ac20c4051d0c13e55410a49789738fad98\n38fa396770e0ecf60fe1ce089422283e2dc8599489bd18d5eb033255dd8e370c\n2dde8881cd9b43633d69dfa60f23713d7375913845ac3fe9b4d8a618660c4528\nHyperBro C2\nhxxps://185.12.45[.]134:443/ajax\n185.12.45[.]134\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from usBy Robert Falcone  and Tom Lancaster\nMay 28, 2019 at 6:00 AM\nCategory: Unit 42\nTags: APT27 , Bronze Union , China Chopper , CVE‐2019‐0604 , DLL Sideloading , Emissary Panda , ETERNALBLUE , HyperBro , Lucky\nMouse , MS17‐010 , TG‐3390 , webshell\nEmail address Subscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability\nSearch Unit 42\nSHARE \n "
}