{
    "title": "windows zero-day exploit used in targeted attacks by fruityarmor apt _ securelist",
    "text": "Share post on:A few days ago, Microsoft published the “critical” MS16-120 security bulletin  with fixes for vulnerabilities in Microsoft\nWindows, Microsoft Office, Skype for Business, Silverlight and Microsoft Lync.\nOne of the vulnerabilities – CVE-2016-3393 – was reported to Microsoft by Kaspersky Lab in September 2016.\nHere’s a bit of background on how this zero-day was discovered. A few of months ago, we deployed a new set of\ntechnologies in our products to identify and block zero-day attacks. These technologies proved their effectiveness earlier\nthis year, when we discovered two Adobe Flash zero-day exploits  – CVE-2016-1010 and CVE-2016-4171. Two Windows\nEoP exploits have also been found with the help of this technology. One is CVE-2016-0165. The other is CVE-2016-3393.\nLike most zero-day exploits found in the wild today, CVE-2016-3393 is used by an APT group we call FruityArmor .\nFruityArmor is perhaps a bit unusual due to the fact that it leverages an attack platform that is built entirely around\nPowerShell. The group’s primary malware implant is written in PowerShell and all commands from the operators are also\nsent in the form of PowerShell scripts.\nIn this report we describe the vulnerability that was used by this group to elevate privileges on a victim’s machine. Please\nkeep in mind that we will not be publishing all the details about this vulnerability because of the risk that other threat actors\nmay use them in their attacks.\nAttack chain description\nTo achieve remote code execution on a victim’s machine, FruityArmor normally relies on a browser exploit. Since many\nmodern browsers are built around sandboxes, a single exploit is generally not sufficient to allow full access to a targeted\nmachine. Most of the recent attacks we’ve seen that rely on a browser exploit are combined with an EoP exploit, which\nallows for a reliable sandbox escape.\nIn the case of FruityArmor, the initial browser exploitation is always followed by an EoP exploit. This comes in the form of a\nmodule, which runs directly in memory. The main goal of this module is to unpack a specially crafted TTF font containing\nthe CVE-2016-3393 exploit. After unpacking, the module directly loads the code exploit from memory with the help of\nAddFontMemResourceEx. After successfully leveraging CVE-2016-3393, a second stage payload is executed with higher\nprivileges to execute PowerShell with a meterpreter-style script that connects to the C&C.\nEOP zero-day details\nThe vulnerability is located in the cjComputeGLYPHSET_MSFT_GENERAL  function from the Win32k.sys system module.\nThis function parses the cmap table and fills internal structures. The CMAP structure looks like this:\nThe most interesting parts of this structure are two arrays – endCount and startCount. The exploit contains the next cmap\ntable with segments:\nTo compute how much memory to allocate to internal structures, the function executes this code:\nAfter computing this number, the function allocates memory for structures in the following way:\nThe problem is that if we compute the entire table, we will achieve an integer overflow and the cnt variable will contain an\nincorrect value.\nIn kernel, we see the following picture:\nThe code allocates memory only for 0x18 InternalStruct but then there is a loop for all the segments range (this value was\nextracted from the file directly):\nUsing the cmap table, the v44 variable (index) could be controlled and, as a result, we get memory corruption. To achieve it,\nthe attacker can do the following:\n1. Make an integer overflow in win32k!cjComputeGLYPHSET_MSFT_GENERAL\n2. Make a specific segment ranges in font file to access interesting memory.\nWhat about Windows 10? As most of you know, the font processing in Windows 10 is performed in a special user mode\nprocess with restricted privileges. This is a very good solution but the code has the same bug in the TTF processing.\nAs a result, if you load/open this font exploit in Windows 10, you will see the crash of fontdrvhost.exe:\nKaspersky Lab detects this exploit as:\nHEUR:Exploit.Win32.Generic\nPDM:Exploit.Win32.Generic\nWe would like to thank Microsoft for their swift response in closing this security hole.\n* More information about the FruityArmor APT group is available to customers of Kaspersky Intelligence Services. Contact:\nintelreports@kaspersky.com\nAPT MICROSOFT  ZERO-DAY VULNERABILITIES\nRelated Posts\nLEAVE A REPLY\nYour email address will not be published.  Required fields are marked *\nEnter your comment here\nName *\nEmail *\nSave my name, email, and website in this browser for the next time I comment.\n \nSUBMIT\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\n RESEARCH\nWindows zero-day exploit used in\ntargeted attacks by FruityArmor APT\nBy Anton Ivanov  on October 20, 2016. 8:56 am\n \nNotify me when new comments are added.\nIN THE SAME CATEGORY\nAssessing the impact of protection from\nweb miners\nAgent 1433: remote attack on Microsoft\nSQL Server\nHow to steal a million (of your data)\nOn the IoT road: perks, beneﬁts and\nsecurity of moving smartly\nHow we hacked our colleague’s smart\nhome\n© 2020 AO Kaspersky Lab.  All Rights Reserved. \nRegistered trademarks and service marks are the property of their respective owners.\nContact us  | Privacy Policy  | License AgreementEmail\n I agree to provide my email address to “AO Kaspersky Lab” to\nreceive information about new posts on the site. I understand\nthat I can withdraw this consent at any time via e-mail by\nclicking the “unsubscribe” link that I find at the bottom of any e-\nmail sent to me for the purposes mentioned above.\nSUBSCRIBE\nOilRig’s Poison Frog – old\nsamples, same trick\nKaspersky Security Bulletin\n2019. Statistics\nWindows 0-day exploit CVE-\n2019-1458 used in\nOperation WizardOpium\nTHREATS\n CATEGORIES\n TAGS\n STATISTICS ENCYCLOPEDIA DESCRIPTIONS KSB 2019\n English\nSolutions\n Industries\n Products\n Services\n Resource Center\n Contact Us GDPR GET IN TOUCH\n "
}