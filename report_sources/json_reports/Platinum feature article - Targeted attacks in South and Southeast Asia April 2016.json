{
    "title": "Platinum feature article - Targeted attacks in South and Southeast Asia April 2016",
    "text": "PLATINUM\nTargeted attacks in South and\nSoutheast Asia\nWindows Defender Advanced Threat Hunting Team  \nThis document is for informationa l purposes o nly. MICROSOFT MAKES NO \nWARRANTIE S, EXPRES S, IMPLIED, OR STATUT ORY, AS TO TH E INFORMATION \nIN THIS DOCUMENT. \nThis document is provided “as -is.” Informatio n and views expressed in this \ndocument, including U RL and other Internet website references, may change \nwithout notice. You bear the risk of using it.  \nCopyright © 2016 Microsoft Corporation. All rights reserved. \nThe names of actua l companies and products mentioned here in may be the \ntrademarks of the ir respective owners. Table of contents \nPLATINUM: Targeted attacks in South and Southeast Asia ........................................... 4  \nAdversary profile  ............................................................................................................................ 4  \nMethods of attack  ..........................................................................................................................  6 \nTechnical details .............................................................................................................................  11 \nDipsind  ................................................................................................................................................................................ 11\nJPIN  ..................................................................................................................................................................................... 15\nadbupd ...............................................................................................................................................................................  17\nKeyloggers  ......................................................................................................................................................................... 18\nHot patcher  ........................................................................................................................................................................  19\nMiscellaneous  ...................................................................................................................................................................  20\nExploit (CVE- 2015 -2545) ............................................................................................................  20 \nIdentity  ...........................................................................................................................................  22 \nGuidance .......................................................................................................................................  23 \nDetection indicators  ....................................................................................................................  24 PLATINUM: Targeted attacks in South \nand Southeast Asia \nMicrosoft proactively monitors the threat landscape for emerging threats. Part of this job involves \nkeeping tabs on targeted a ctivity  groups, which are often the first ones to introduce new explo its and \ntechniques that are later used widely by other attackers.  In the previous volume, “ STRONTIUM: A \nprofile of a persistent and motivated adversary ,” on page 3 of Microsoft Security Intelligence Report, \nVolume 19 (January –June 2015) , chronicled the activities of one such group, which had attracted \ninterest because of its aggressive, persistent tac tics and techniques as well as its repeated use of new \nzero -day exploits to attack its targets .  \nThis section describes the history, behavior, and tactics of a newly discovered targeted activity group, \nwhich Microsoft has code- named PLATINUM. Microsoft is sharing some of the informati on it has \ngathered on this group in the hope that it will raise awareness of the group’s activities and help \norganizations take immediate advantage of available mitigations that can significantly reduce the risks \nthey face from this and similar groups . \nAdversary profile \nPLATINUM has been targeting its victims since at least as early as 2009, and may have been active for \nseveral years prior. Its activities are distinctly different not only from those typically seen in untargeted \nattacks, but from many targeted attacks as well. A large share of targeted attacks can be characterized as opportunistic: the activity group changes its target profiles and attack geographies based on \ngeopolitical seasons, and may attack institutions all o ver the world. Like many such groups, PLATINUM \nseeks to steal sensitive intellectual property related to government interests, but its range of preferred \ntargets is consistently limited to specific governmental organizations, defense institutes, intelligen ce \nagencies, diplomatic institutions, and telecommunication providers in South and Southeast Asia. The group’s persistent use of spear phishing  tactics ( phishing attempts aimed at specific individuals ) and \naccess to previously undiscovered zero -day exploit s have made it a highly resilient threat.  \nAfter researching PLATINUM, Microsoft has identified the following key characteristics of the group and its activities:  \n• PLATINUM has conducted several cyber espionage campaigns since  at least 2009.  \n• PLATINUM focuses  on a small number of campaigns per year, which  reduces the risk of detection \nand helps  the group  stay unnoticed and focused for a longer period of time.  • PLATINUM has focused on targets associated with governments and related organizations in South \nand S outheast Asia . \n• PLATINUM has used multiple unpatched vulnerabilities in zero -\nday exploits against its victims.  \n• Spear phishing is the group’s main method of infecting \ntargeted users’ computers.  \n• PLATINUM makes a concerted effort to hide their infection \ntracks,  by self -deleting malicious components, or by using server \nside logic in ‘one shot mode’ where remotely hosted malicious components are only allowed to \nload once  \n• PLATINUM often spear phishes its targets at their non -official or private email accounts, to u se as a \nstepping stone into the intended organization’s network.  \n• PLATINUM uses custom -developed malicious tools and has the resources to update these \napplications often to avoid being detected . \n• PLATINUM configures its backdoor malware to restrict its activ ities to victims’ working hours, in an \nattempt to disguise p ost-infection network activity within normal user traffic . \n• PLATINUM does not conduct its  espionage activity to  engage in direct financial gain, but instead \nuses stolen information for indirect eco nomic advantages.  \n• In some cases, the combination of these mechanisms —use of undisclosed zero -day exploits, \ncustom malware that is not used elsewhere, PLATINUM’s skill in covering its tracks, and others —has \nenabled the group to compromise targets for several years without being detected.  \nTargeted activity groups are skilled at covering their tracks and evading detection, and it can be very difficult to definitively associate an activity group with a specific nation -state or group of individuals.  \nAttackers co uld be patriotic groups, opportunistic cyber units, state -sponsored hackers, or intelligence \nagents. Although PLATINUM could belong to any one of the aforementioned categories,  the group \nshows traits of being well funded, organized, and focused on informat ion that would be of most use to \ngovernment bodies.  PLATINUM has \nbeen targeting its \nvictims since at \nleast as early as \n2009.  Methods of attack  \nFigure 1 . Known victims attacked by PLATINUM since 2009, by country/region (left) and type of  institution (right)  \n     \nPLATINUM prim arily targets its intended victims using spear phishing . There is also some data \nindicating the group’s usage of drive -by attacks against vulnerable browser- plugins . Although the \ngroup’s methods for performing reconnaissance to determine who to pursue  remains unknown, the \nnumber of victims targeted at each affected institution is consistently very small. In some cases, the \nvictims were targeted at their non -official email addresses, demonstrating that the scope of \nPLATINUM’s research capabilities is fairly extensive. For the initial infection, PLATINUM typically sends \nmalicious documents that contain exploits for vulnerabilities in various software programs , with links or \nremotely loaded components (images or scripts or templates) that are delivered to targets only once. The group has made concerted efforts towards designing their initial spear- phishes in a manner where \nthe final payload is only delivered to the intended victim. The group  is known to have used a number of \nzero -day exploits, for which no secur ity update is available at the time of transmission, in these \nattempts.  (All have subsequently been addressed by security updates from the affected vendors.)  \nFigure 2 . A typical lure document sent by PLATINUM to a prospective victim  \n Malaysia\n51.4%\nIndonesia\n21.4%\nChina\n11.4% Singapore\n4.3%India\n4.3%Thailand\n2.9%Other\n4.3%\nOther \ngovernment\n31.4%Other\n25.7%ISP\n24.3%\nGov’t -\nDefense\n7.1%\nGov’t -\nDiplomatic\n7.1%\nGov’t -\nIntelligence\n2.9%Academic\n1.4%\nLure documents are typically given topical names that may be of interest to the recipient.  Such lures \noften address controversial subjects or offer provocative opinions, in an effort to incite the reader into \nopening them. Figure 3 shows a sample of such titles.  \nFigure 3 . Example document titles used by PLATINUM to deliver exploits  \nSHA1  Filename  \ne9f900b5d01320ccd4990fd322a459d709d43e4b  Gambar gambar Rumah Gay Didiet Pr abowo di Sentul Bogor.doc  \n9a4e82ba371cd2fedea0b889c879daee7a01e1b1  The real reason Prabowo wants to be President.doc  \n92a3ece981bb5e0a3ee4277f08236c1d38b54053 Malaysia a victim of American irregular warfare ops.doc  \n0bc08dca86bd95f43ccc78ef4b27d81f28b4b769  Tu Vi Nam Tan Mao 2011.doc  \nf4af574124e9020ef3d0a7be9f1e42c2261e97e6 Indians having fun.doc  \n \nThese documents were sent to intended victims in Vietnam, Indonesia, India, and Malaysia, and the \nfilenames contain references to cities, politicians, and curre nt events in those locations.  The oldest \nconfirmed PLATINUM exploit was named “The corruption of Mahathir,” a document that was \ntransmitted in 2009  referencing the  former prime minister of Malaysia, Mahathir Mohamad.  \nFigure 4 . The oldest confirmed lure document sent by PLATINUM, in 2009  \n \nPLATINUM’s recent activities remain focused on tactics such as these. In February 2016, PLATINUM was observed using a legitimate  website dedicated to news about the Indian government,  as an infection \nvector.  This site, which is not associated with the Indian government itself, also provides a free email \nservice for its users, giving them email addresses with the site’s own domain name. PLATINUM sent spear phishing messages to users of the service, which included some Indian government officials.  After  \ninfect ing an unsuspecting user this way, the attackers had complete control of the user’s computer and \nused it as a stepping stone into the official network to which the user belonged.  \nFigure 5 . PLATINUM used a private webmail service to infect a government network  \n \nPLATINUM’s approach toward exploiting vulnerabilities varies between campaigns. In one case from \n2013, the target was sent a malici ous document through a spear phishing email message.1 The \ndocument, when opened, used an embedded ActiveX control  to download a JavaScript file from a \nremote site that used a previously unknown vulnerability in some versions of Windows (later designated CVE-2013- 7331 ) to read information about the browser’s installed components.\n2 \n                                                         \n1 Microsoft thanks Google for identifying and reporting this attack.  \n2 Microsoft issued Security Bulletin MS14 -052 in September 2014 to addre ss the issue. CVE -2013-7331 has never affected Windows 10.  \nFigure 6 . Malicious Word 2003 files used by PLATINUM  to deliver CVE -2013-7331  \nFilename  SHA1  URL for PNG Exploit  \nGerakan Anti SBY II.doc  1bdc1a0bc995c1beb363b11b71c14324be8577c9 mister.nofrillspace.com/users/web8_dice/4226/space.gif  \nTu_Vi_Nam_Tan_  \nMao_2011.doc  2a33542038a85db4911d7b846573f6b251e16b2d  inten t.nofrillspace.com/users/web11_focus/3807/space.gif  \nWikileaks Indonesia.doc  d6a795e839f51c1a5aeabf5c10664936ebbef8ea  mister.nofrillspace.com/users/web8_dice/3791/space.gif  \nTop 11 Aerial \nSurveillance Devices.doc  f362feedc046899a78c4480c32dda4ea82a3e8c0  intent.nofrillspace.com/users/web11_focus/4307/space.gif  \nSEMBOYAN_1.doc  f751cdfaef99c6184f45a563f3d81ff1ada25565 www.police28122011.0fees.net/pages/013/space.gif  \n \nFigure 7 . Malicious JavaScript used by PLATINUM to p erform fingerprinting on a victim’s browser  \n \nWhile fingerprinting the versions of the browser plugins, the script loads a remotely hosted malicious \nPNG file that exploited another previously unknown vulnerability (designated CVE -2013- 1331), which \naffected Microsoft Office 2003 SP3.3 Exploiting the vulnerability resulted in memory corruption, which \nallowed the attacker to execute  remote code on the computer.  \nFigure 8 . An exploit mechanism used by PLATINUM  \n \nAlso a combination of lure documents with the aforementioned embedded ActiveX control was seen \nalong with a Dipsind executable named as ‘ pp4x322.dll ’ during a different attack. The unique name of \nthis executable indicated a possible DLL side -loading vulnerability also being used by PLATINUM \nagainst Powerpoint 2007.  \nIn another case from August 2015, Microsoft investigated a malicious document (named Resume.docx) that had been uploaded to  the VirusTotal  malware analysis service .\n4 The person who  submitted the file \n                                                         \n3 Microsoft issued Security Bulletin MS13 -051  in June 2013 to address the issue.  \n4 Microsoft thanks FireEye for identifying a nd reporting this attack.  \ndid so through an IP address based  in India, suggesting that the person or their organization had been  \ntargeted by the spear phish document.  \nFigure 9 . A malicious Word document  used by PLATINUM to target a victim  \n \nWhen the document was opened in Word, it exploited a previously unknown vulnerability in the \nMicrosoft Office PostScript interpreter (designated CVE- 2015- 2545) that enabled it to execute the \nattacker’s code and drop an attacker- generated malicious DLL onto the computer.5 The DLL exp loited \nanother previously unknown vulnerability (designated CVE -2015- 2546) in the Windows kernel, which \nenabled it to elevate privileges for the Word executable and subsequently install a backdoor through \nthe application.6 Researching this attack and the malware used therein led Microsoft to discover other \ninstances of PLATINUM attacking users in India around August 2015.  \nFigure 10 . Another exploit mechanism used by PLATINUM  \n \n                                                         \n5 Microsoft issued Security Bulletin MS15 -099 in September 2015 to address the issue.  Windows 10 is not affected by the exploit used in this \ncase due to built- in mitigations.  \n6 Microsoft issued Security Bulletin MS15 -097  in September 2015 to address the issue.  \nIn total, PLATINUM made use of four zero -day exploits during these two attack campaigns (two remote \ncode execution bugs, one privilege escalation, and one information disclosure), showing an ability to  \nspend a non- trivial amount of resources to either acquire professionally written zero -day exploits from \nunknown markets, or research and utilize the zero -day exploits themselves. In both \nthese campaigns the activity group  included remote triggers to deactivate \nexploitation, with an attempt to conceal the vulnerability, and prevent analysis of the \nattack. The resources required to research and deploy multiple zero -day exploits \nwithin the same attack campaign  are considerable.  Such activity requires a \nsignificant amount of investment in research and development, along with the discipline to  ensure that the exploits are not used until the appropriate time, and \nthat no one involved with the project leaks them to other parties.  \nTechnical d etails  \nAfter gaining access to a victim’s computer, PLATINUM installs its own custom -built malware to \ncommunicate with the compromised system, issue commands, and move laterally through the \nnetwork. The wide collection of backdoors and tools, and the differences between them, suggest the \ninvolvement of multiple teams or vendors in the development process. This section describes some of \nthe tools used by the group.  \nDipsind  \nPLATINUM uses a number of different custom- developed backdoors to communicate with infected \ncomputers. The lack of any significant evidence of shared code between any of these backdoor families \nis another clue as to the scope of the resources on which the activity group is able to draw, and the \nprecautions the group is willing and able to take in order to avoid losing its ability to conduct its \nespionage operations.  \nThe group’s most frequently used backdoors belong to a malware family that Microsoft has designated \nDipsind , although some variants are detected under different names . Multiple Dipsind variants have \nbeen identified, all of which are believed to be used exclusively by PLATINUM.  \nThe first variant, Win32/Dipsind.A!dha , is a lightweight application providing backdoor access to \nremote attackers. It can be customized for every victim to ensure that it remains undetected in targeted \nnetworks. It supports a small set of instructions that allow the attacker to perform basic functions , such \nas uploading or downloading fil es and spawning remote shells.  PLATINUM used \nfour zero -day ex -\nploits during these \ntwo campaigns.  Figure 11 . Sample configuration file for Win32/Dipsind .A \n \nEach Dipsind file contains an embedded encrypted configuration file that acts as a control for the \nbackdoor. This configuration file also includes the initial command and control (C&C) location the \nDipsind backdoor uses  in addition to the pollcommandsite  variable which references a URL where \nadditional backup C&Cs can be polled.  Configurable parameters include instructions on where Dipsind \nshould install a copy of cmd.exe for spawn ing a remote shell , depending on the user ’s privileges, the \nhours during which the backdoor should function,  and exfiltrate information. This capability  allows the \nbackdoor to confine its activities to normal working hours, making its communications harder  to \ndistinguish from normal network traffic.   \nDipsind has been observed using a combination of IP addresses and domains for its C&C infrastructure. \nThe domains are a mix of registered domains and free subdomains obtained through dynamic DNS \nproviders. Collected data showed that a vast majority of victim networks allowed unfiltered access to \nthe dynamic DNS hosts. The hosts and domains are hosted on compromised infrastructure based in \nseveral different countries, some within academic institutions. In some c ases, the backdoors are \nconfigured to connect to IP addresses instead of domain names. These factors make it challenging to \nlocate the activity group’s infrastructure.  \nFigure 12 show s a sampling of C&C infrastructure used by PLATI NUM between 2009 and 2015.  \nFigure 12 . Some of the domains and addresses used by PLATINUM  \nRegistered domains  Dynamic DNS Hardcoded IPs  \n• box62.a-inet.net  \n• eclipse.a -inet.net  \n• joomlastats.a-inet.net  \n• updates.joomlastats.co.cc  \n• server.joomlastats.co.cc  • scienceweek.scieron.com  \n• mobileworld.darktech.org  \n• geocities.efnet.at  \n• bpl.blogsite.org  \n• wiki.servebbs.net  • 200.61.248.8 \n• 209.45.65.163 \n• 190.96.47.9  \n• 192.192.114.1  \n• 61.31.203.98  \n \nAfter  Dipsind.A  is installed on the victim’s  comput er, it connects to its C&C server for authentication . All \nnetwork traffic is over HTTP, base64 encoded, with the underlying data encrypted using AES256 in ECB \nmode. Authentication is a five -step process,  as shown in the following figure : \nFigure 13 . Win32/Dipsind .A initial communication protocol (as decrypted)  \n \nAnalysis of several samples of this variant show exactly the same AES key \n(AOPSH03SK09POKSID7FF674PSLI91965) in use since 2009. The initial HTTP POST ma de by this \nbackdoor appears as “ud7LDjtsTHe2tWeC8DYo8A** ”, which translates to a simple whitespace. This \nsequence makes a simple network indicator usable by defenders.  \nA second Dipsind variant registers as a Winlogon Event Notify DLL. This backdoor contain s a minimized  \nfeature list fr om the original Dipsind variant, and  supports a  more limited number of commands . \nIt sets the following registry keys in the HKEY_LOCAL_MACHINE hive for persistence and functionality:  \n• SOFTWARE \\Microsoft\\Windows NT \\CurrentVersion \\Winlogon \\Notify \\Cscdll32 \\Asynchronous \n• SOFTWARE \\Microsoft\\Windows NT \\CurrentVersion \\Winlogon \\Notify \\Cscdll32 \\DllName \n• SOFTWARE \\Microsoft\\Windows NT \\CurrentVersion \\Winlogon \\Notify \\Cscdll32 \\Impersonate  \n• SOFTWARE \\Microsoft\\Windows NT \\CurrentVersion \\Winlogon \\Not ify\\Cscdll32 \\Startup  \n• SOFTWARE \\Microsoft\\Windows NT \\CurrentVersion \\Winlogon \\Notify \\Cscdll32 \\shutdown  \n• SOFTWARE \\Microsoft\\Windows \\CurrentVersion \\Run \\cscdll32  \nThere are at least two additional minor versions of this variant, each of which show improvements in \ncommand implementation.  \nOne interesting feature of this variant is the way it implements a mechanism similar to port  knocking  to \nallow remote attackers to connect to a compromised computer without leaving any connection open \nfor too long. The sequence of e vents is as follows : \n1. The backdoor is installed via an exploit.  \n2. The backdoor sets a registry key to open a specific UDP port through the local firewall, if any, and \nlistens to the port for incoming traffic.  \n3. At a remote location, the attacker executes a tool  (called PK2 here, although the actual name of the \ntool is unknown) using the following parameters:  \nPk2.exe <IP> <UDP Port> <TCP Port> <Password>  \nwhere the IP address is that of the computer with the backdoor, the UDP port is the one specified \nby the backd oor, and the password is a string encrypted by the tool before being sent.  \n4. The backdoor receives the UDP packets, and then checks to see if the password is valid.  \n5. If the password is indeed valid, the backdoor will wait for exactly 20 seconds and only then open \nthe PK2 specified TCP port for a window of 3 seconds.  Figure 14 . How the Dipsind knocker component communicates with an attacker  \n \nPK2 is also designed to connect to such open TCP ports and act as a console client for issuing \ncommands to the backdoor. When running PK2 as a console client, the attacker needs to re -enter the \npassword to authenticate a second time against the backdoor, and issue commands such as #sz to \nupload a file and #rz to download a file. During this research, one such collection of tools was obtained \nthat had the password set to “t@ng0p@ss”. All communication used by this backdoor and PK2 is \nencrypted. If a connection from PK2 is not received within the 3 -second window, the TCP port is shut \nand P K2 would need to reinitialize the port -knocking process.  \nJPIN  \nIn addition to Dipsind and its variants, PLATINUM uses a few other families of custom- built backdoors \nwithin its attack toolset. These families of backdoors are significantly different in their capabilities and \nhave completely different code bases. While one family relies on a small number of supported \ncommands and simple shells, the other delves into more convoluted methods of injections, checks,  and \nsupported feature sets.   \nMicrosoft researchers refer to one such  set of  backdoor  variants collectively  as “JPIN, ” which is the \nname of a service it uses when installed. JPIN is a comprehensive tool for executing and extracting \ninformation from the compromised computer. There is strong evidence to sug gest that the developers \nof the JPIN and Dipsind code bases were in some way related.  \nJPIN has its own installer and uninstaller component, which deletes itself when it encounters a version \nof Windows earlier than Windows XP, or finds any of these security -related processes running:  \nFigure 15 . Security -related processes avoided by the JPIN installer  \nProcess Security product  \n360tray.exe  360 Safeguard  \nbdagent.exe  BitDefender  \nproguard.exe  Process Guard  \nblackd.exe  BlackICE  \nblackice.exe  BlackICE  \nsavservice.exe  Sophos Anti -Virus  \navp.exe Kaspersky Anti -Virus  \nrstray.exe  Rising Anti -virus  \ncmccore.exe  CMC Antivirus  \ncmctrayicon.exe  CMC Antivirus  \nzhudongfangyu.exe  360 Safeguard  \n \nAfter installing the backdoor, the i nstaller deletes itself from the compromised computer.  \nPLATINUM uses at least three distinct JPIN  variants. One variant typically  runs with a mutex name d \n“hMSVmm” and installs itself in the folders %appdata%\\Comm \\Jpin and \n%userprofile%\\AppData \\Resource\\Jpi n. After it is installed and started, the JPIN service can perform \nthe following tasks, among others:  \n• Obtain information about the computer, such as operating system version, user name, privileges, \ndisk space, and so on.  \n• List running services, processes, j ob IDs, and task IDs.  \n• Enumerate drives and their types.  \n• Enumerate registry keys.  \n• Load a custom keylogger.  \n• Download files.  \n• Download and upgrade itself.  \n• Acquire network information such as DNS, IP, proxies, and so on.  \n• Exfiltrate information over HTTP GET and  POST requests, with the data stored either within the \nHTTP body or within the URL parameters.  \n• Lower security settings by tampering with registry keys.  \n• Inject content into the lsass.exe process , in order to load the keylogger module into lsass and call its  \nexported function . • Communicate via FTP.  \n• Send email via SMTP.  \n• Change permissions on files using the cacls.exe command -line utility.  \nJPIN can also target mobile suite applications and extract data from them. The backdoor contains code \nthat looks for installed instances of Symbian, Blackberry, and Windows Phone management \napplications. If any are found, the backdoor logs sync dates, IMEI data, phone manufacturer and model \ninformation, software version date, memory, location, and capacity, among other things.  \nThe second JPIN  variant is very similar to the first one . It downloads \nthe backdoor payload from remote locations via the BITS service, \nusing the COM object for BITS. This variant also has its own installer \nand uninstaller component, which deletes itself when it encounters a \nversion of Windows earlier  than Windows XP, or finds any of the  \nprocesses listed in Figure 15 running.  \nThe third known variant does not check for the processes listed in Figure 15. It uses an installer \ncomponent that includes the backdoor as payload disguised as a bitmap within its resource section . \nThe payload is in an encrypted  and compressed  form, disguised to avoid any suspicion from security \nsolutio ns. This variant has been seen installing itself into the following file system paths:  \n• %appdata% \\Java\\support  \n• %appdata% \\support  \n• %userprofile%\\AppData \\Local \\Java\\Support  \n• %userprofile%\\AppData \\Local \\Support  \nadbupd  \nAnother  backdoor used by PLATINUM is very si milar to the Dipsind family. It is informally referred to \ninternally at Microsoft as “ adbupd ”, which is the name of the service under which it is installed. Salient \nfeatures of this backdoor include the following:  \n• It tries to install itself under several d ifferent names within the Program Files directory  \n• It has the ability to support plug -ins to modularize functionality  \n• It contains a copy of the OpenSSL library to support encryption when sending or receiving data  \n• It contains functionality to run a copy of c md.exe  \n• The configuration file is very similar to the original Dipsind family  \n• This backdoor class uses multiple methods of achieving persistence, one of which is using WMI /MOF compiled scripts, such as the one shown in Figure 16. JPIN can target \nmobile suite appli -\ncations and extract \ndata from them.  Figure 16 . WMI script used by the Adpupd backdoor to achieve persistence  \n#pragma namespace(\"\\ \\\\\\.\\\\ROOT\\\\cimv2\") \ninstance of __Win32Provider as $P  \n{ \n    Name = \"adbupdConsumer\";  \n    ClsId = \"{74ba9ce4 -fbf1-4097-32b8-34f446f037d8}\";  \n    HostingModel = \"LocalSystemHost\";  \n}; \ninstance of __EventConsumerProviderRegistration  \n{ \n    Provider = $P;  \n    ConsumerClassNames = {\"adbupdConsumer\"};  \n}; \nclass adbupdConsumer : __EventConsumer  \n{ \n    [key] string Mode;  \n}; \ninstance of adbupdConsumer as $CONSMR  \n{ \n    Mode = \"persistent\";  \n}; \ninstance of __EventFilter as $FLT  \n{ \n    Name = \"adbupdFilter\";  \n    Query = \"SELECT * FROM __InstanceCreationEvent WHERE TargetInstance ISA \n\\\"Win32_NTLogEvent\\ \"\"; \n    QueryLanguage = \"WQL\";  \n}; \ninstance of __FilterToConsumerBinding as $B  \n{ \n    Consumer = $CONSMR; \n    Filter = $FLT;  \n}; \nKeyloggers  \nThe PLATINUM group has written a few different versions of keyloggers that perform their functions in \ndifferent ways, most likely to take advantage of different we aknesses in victims’ computing \nenvironments. The  keyloggers can be broadly classified into two  groups:  those that log keystrokes \nthrough raw device input, and user mode keyloggers that use Windows hook interfaces to gather information. In partic ular, this second group also has the capability of dumping users’ credentials using \nthe same technique employed by Mimikatz . Both groups can set  permissions on specific files to \nEveryone , and work in tandem with the PLATINUM backdoors.  Hot patcher  \nOne of PLATINUM’s most recent and interesting tools is meant to inject code into processes using a \nvariety of injection techniques. In addition to using several publicly known injection methods to per form \nthis task, it also takes advantage of an obscure operating system feature known as hot patching.  \nHot patching is an operating system -supported feature for installing updates without having to reboot \nor restart a process. At a high level, hot patching can transparently apply patches to executables and DLLs in actively running processes, which does not happen with traditional methods of code injection \nsuch as CreateRemoteThread or WriteProcessMemory. Instead, the kernel is instructed to perform the \ninjec tion by invoking NtSetSystemInformation (with an appropriate SystemInformationClass) to apply \nthe patch. The information about the patch is delivered via a specially crafted DLL that is loaded into \nthe target process.  \nThe hot patching feature originally sh ipped with Windows Server 2003 and was used to ship 10 patches \nto Windows Server 2003. It was removed in Windows 8 and has not been included in subsequent \nreleases of Windows. PLATINUM appears to believe that enough of their targeted users continue to run \nthe earlier versions of Windows to make the technique a useful tool, at least until early 2017 (see page \n20). \nThe technique PLATINUM uses to inject code via hot patching was first documented by security \nresearchers in 20 13.\n7 Administrator permissions are required for hot patching, and the technique used \nby PLATINUM does not attempt to evade this requirement through exploitation. Rather, the component’s use of the hot patching feature appears to be a way to avoid being det ected, as many \nantivirus solutions monitor non- system processes for the regular injection methods such as \nCreateRemoteThread. If the tool fails to inject code using hot patching, it reverts to attempting the other more common code injection techniques into  common Windows processes, primarily targeting \nwinlogon.exe, lsass.exe and svchost.exe:  \n• CreateRemoteThread  \n• NtQueueApcThread  \n• RtlCreateUserThread  \n• NtCreateThreadEx  \nThe hot patching  component performs  the following steps:  \n1. It patches the loader with a proper h ot patch to treat injected DLLs  with execute page permissions. \nThis step is required for DLLs  loaded from memory (in an attempt to further conceal the malicious \ncode ).  \n                                                         \n7 Alex Ionescu, “Hotpatching the Hotpatcher: Stealth File-less DLL Injection,” Sy Scan 2013, \nhttps://www.yumpu.com/en/document/view/14255220/alexsyscan13/23 . 2. The backdoor is injected into svchost using the hot  patch API. Patching the loader is d one by \ncreating a section named \\knowndlls\\ mstbl.dll. This DLL  does not reside on disk, but is rather \ntreated as a cached DLL by the session manager. It then proceeds to write a PE file within that \nsection.  \n3. The PE file will have one section (.hotp1) with the hot patch header structure. This structure contains \nall the information necessary to perform the patching of function ntdll!LdrpMapViewOfSection , \nwhich will cause  the loader to  treat created sections as PAGE_EXECUTE_READWRITE instead of \nPAGE_READWRITE.  The patch is successfully applied by invoking NtSetSystemInformation.  \n4. After the memory permission issue is solved, the injector proceeds to inject the malicious DLL into \nsvchost. Again, it creates a (now executable) section named knowndlls \\fgrps.dll and i nvokes \nNtSetSystemInformation, which causes the final payload to be loaded and executed within the \ntarget process (svchost).   \n5. The malicious hot patching component appears to have an expiration date of January 15, 2017. \nAfter that date, the DLL will no lon ger perform the injection, but rather execute another PLATINUM \nimplant ( C:\\Program Files \\Windows Journal \\Templates \\Cpl\\jnwmon .exe –ua), which may be \nrelated to an uninstall routine. (The component has not been observed in use since March 9, 2016, which may  indicate that PLATINUM has chosen to stop using it earlier than the configured \nexpiration date.)  \nMiscellaneous \nFinally, the PLATINUM group also uses small single -purpose applications that duplicate some of the \nfunctionality of the backdoors. A couple of examples are:  \n• A stand -alone persistence tool that takes other files as input and ensures persistence across \nreboots.  \n• A stand -alone loader that runs another executable. It has some exported functions whose names \ncan be used in DLL files installed as LSA pass word filters, but such functions are basically empty and \nthere is no known evidence that this tool was ever used in this way. On the whole, this DLL looks like \na test, suggesting that the attackers may have researched and possibly implemented variants of their malware that can be installed as LSA password filters.  \nExploit (CVE -2015-2545)  \nCVE-2015- 2545  is a use-after- free vulnerability in the embedded PostScript  filter  of Microso ft Office.\n8 \nThe exploit was crafted in PostScript and is able to bypass Address Space Layout Randomization (ASLR) \nand Data Execution Prevention (DEP).  \n                                                         \n8 Microsoft issued Security Bulletin MS15 -099 in September 2015 to address the issue.  This vulnerability allowed the attacker to forge a CAssoc structure, shown in F igure 17, and so also \nindirectly the PSObjs in the structure. The PostScript interpreter deciphers the value field (Val) based on \nthe type field (m_type), which are under complete control of the attacker. Having developed this \ntechnique, the attacker will  craft and use a combination of file, string, and integer objects to gain a \nreliable arbitrary code execution.    \nFigure 17 . Memory layout of CSssoc structure and its embedded PSObjs  \n \nRoot cause: The attacker def ined in PostScript a dictionary with three elements, which leads to an \nallocation of three CAssoc structures in PSTMap.  \nWithin a Forall loop, the last two elements are undefined and a string is initialized. The PostScript \nstatement results in a deallocati on of the last two CAssoc structures and the string gets allocated in the \npreviously freed memory address. The PostScript -put operand is used to fill the string with data to \nmimic a CAssoc structure. By setting the hash table index to 0x3ff, the loop will exit because the hash \ntable at that time has a max -size of 0x400. Upon exiting the loop, a reference will be returned to the \nsecondary element, which is the forged structure.  \nFigure 18 . Reusage of deallocated Memor y by a forged CAssoc Structure  \n \nAcquire full memory RW access:  The described method is used to craft a PSString object in which the \nlength of the string is set to a maximum value. As a result, the exploit can use PostScript methods to \nsearch for ROP gadge ts to dynamically assemble a ROP shellcode.  \nFigure 19 . Getinterval method of PSString is used to find ROP gadgets  \n \nThe purpose of this approach is to call VirtualProtect to set the pages of the second -stage shell code as \nexecutable. As a result, DEP and ASLR are bypassed.  \nArbitrary code execution:  To redirect code execution to the ROP chain, the exploit crafts a PSFile Object \nin which the vtable is controlled by the attacker. By calling the bytesavailable method wi thin the \nPostScript code, arbitrary code execution is achieved.  \nIdentity  \nAlthough the exact identity of PLATINUM remains unknown, the technical indicators observed so far \ncan help create a profile of the attacker.  \n• Usage of multiple backdoors . The different  backdoors written by or for the group indicate a \nconsiderable investment over time. Research indicates that PLATINUM has used multiple \nbackdoors concurrently at times, which could represent either multiple teams within the activity group performing differ ent campaigns, or different versions of the tools being used against varying \nvictim networks.  \n• Zero day exploits . PLATINUM has used several zero -day exploits against their victims. Regardless of \nwhether they researched the exploits themselves or purchased them from independent \nresearchers, the monetary investment required to collect and deploy zero -day exploits at this level \nis considerable.  \n• Victim geography . More often than not, research into targeted attacks shows \nactivity groups becoming opportunistic an d attacking topical targets; that is, \ntargets considered valuable based on the geopolitical events of the year. \nPLATINUM has consistently targeted victims within a small set of countries in \nSouth and Southeast Asia. In addition, the victims are consistentl y associated \nwith a small set of entities that are directly or indirectly connected to \ngovernments.  \n• Tools . Some of the tools used by PLATINUM, such as the port -knocking \nbackdoor, show signs of organized thinking. PLATINUM has developed or \ncommissioned a nu mber of custom tools to provide the group with access to victim resources. This \nbehavior exhibits PLATINUM’s ability to adapt to victim networks, which is further evidence of the group’s considerable resources for development and maintenance.  \nThe monetary in -\nvestment required \nto collect and \ndeploy zero -day \nexploits at this level \nis considerable.  Any of these traits by themselves could be the work of a single resourceful attacker or a small \ngroup of like -minded individuals, but the presence of all of them is a clear indication of a well -\nresourced, focused, and disciplined group of attackers vying for informatio n from government-\nrelated entities.  \nGuidance  \nPLATINUM is an extremely difficult adversary for targeted organizations to defend against. It possesses \na wide range of technical exploitation capabilities, significant resources for researching or purchasing \ncomplicated zero -day exploits, the ability to sustain persistence across victim networks for years, and \nthe manpower to develop and maintain a large number of tools to use within unique victim networks. \nTheir ability to research their victims prior to targeting them, along with the capability to architect \nexploits that only work once or for a short period of time, makes it very difficult to investigate or track \ntheir activities. That said, there are steps that organizations can take to reduce the likelihood o f \nPLATINUM conducting successful attacks against their employees and networks.  \n• Take advantage of native mitigations built into Windows 10. Newer versions of Windows include \ncritical mitigations that render some of PLATINUM’s exploits ineffective when deplo yed. For \nexample, the summer 2015 attack that used the unusual ‘resume’ would not have been successful \non Windows 10 as- is because of the presence of the Supervisor Mode Execution Prevention (SMEP) \nmitigation, even without the latest security updates installed. Even if CVE- 2015 -2546 affected \nWindows 10, the exploitation would have required much more technical prowess to succeed; \nultimately, SMEP makes it more difficult for attackers. The hooking and in -memory patching \ntechniques used by the malicious ‘hot p atcher’ component are also not effective against newer \nversions of Windows.  \n• Apply all security updates as soon as they become available. Microsoft deeply researches each \nsecurity issue, proactively addresses the flaw, and mitigates the attack surface aroun d the affected \ncomponent(s). For example, one zero -day vulnerability exploit ( CVE-2015- 2545) used by \nPLATINUM was addressed immediately in September 2015. Subsequently, in November, Microsoft also released a proactive security update for the same component that ended up mitigating other \nexploits surfacing in -the-wild after the first attack. Customers who applied the security updates in \nNovember  without delay would have been protected against the second wave of exploits. Such \nmeasures of hardening the underlying application happen often. MS09 -017 is yet another example,   \nin which installation of newly available security updates significantly reduced the attack surface.  \n• Consider disabling features, such as EPS or macros, in powerful products l ike Microsoft Office by \nusing Group Policy. Not all organizations find the need to enable all features. For example, in the \nPLATINUM attack campaign that used CVE -2015- 2545, a network in which O ffice EPS was disabled \nwould not have been affected.  \n• Enterprise networks should segregate high business impact (HBI) data -holding segments from \nInternet- connected networks. Sharing of removable media between these air -gapped networks should be strictly en forced. In the case of PLATINUM, such a network architecture would prevent \ntargeted users from accessing third -party email services and thereby granting attackers access to \nsensitive segments of the organizational network.  \n• Conduct enterprise software secu rity awareness training, and build awareness of malware \nprevention. PLATINUM may have used zero -day flaws to compromise victim computers, but doing \nso required action by the user, who either clicked a link in an email or opened an attachment to \nallow the attacker to take control of their computer. Security training can raise \nawareness and reduce the risk associated with this attack vector.  \n• Institute a strong network firewall and proxy. Many tools used by attackers are \nnot compatible with network proxies. In  the case of PLATINUM’s version of port -\nknocking, the opening of a UDP port would have been rendered moot if a \nnetwork firewall was blocking access for inbound packets to the host’s open \nport.  \n• Enterprise networks should consider blocking certain types of w ebsites that don’t serve the interest \nof the business. PLATINUM makes extensive use of C&Cs that use dynamic DNS hosts. Although \nsuch free services can be very useful at a personal level, blocking access to such hosts at a local \nDNS server can minimize pos t-compromise activity.  \n• Prepare your network to be forensically ready, so that you can achieve containment and recovery if \na compromise occurs. A forensically ready network that records authentications, password \nchanges, and other significant network events  can help identify affected systems quickly.  \n• Make sure that your organization’s Internet- facing assets are always running up -to-date \napplications and security updates, and that they are regularly audited for suspicious files and activity. A number of researched PLATINUM victims had their public -facing infrastructure \ncompromised through unknown flaws.  \nDetection indicators  \nFigure 20 consists of detection rules for a number of PLATINUM malware samples to be used with \nYARA ( https://plusvic.github.io/yara/), an open source pattern matching tool for malware detection.  \nFigure 20.  Detection indicators for PLATINUM malware  \nrule Trojan_Win32_PlaSrv : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Hotpatching Injector\"  \n    original_sample_sha1 = \"ff7f949da665ba8ce9fb01da357b51415634eaad\"  \n    unpacked_sample_sha1 = \"dff2fee984ba9f5a8f5d97582c83fca4fa1fe131\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" Apply all security \nupdates as soon as \nthey become \navailable.    strings:  \n    $Section_name = \".hotp1\"  \n    $offset_x59 = { C7 80 64 01 00 00 00 00 01 00 }  \n   \n  condition: \n    $Section_name and $offset_x59  \n} \n \nrule Trojan_Win32_Platual : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Installer component\"  \n    original_sample_sha1 = \"e0ac2ae221328313a7eee33e9be0924c46e2beb9\"  \n    unpacked_sample_sha1 = \"ccaf36c2d02c3c5ca24eeeb7b1eae7742a23a86a\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $class_name = \"AVCObfuscation\" \n    $scrambled_dir = { A8 8B B8 E3 B1 D7 FE 85 51 32 3E C0 F1 B7 73 99 }  \n   \n  condition: \n    $class_name and $scrambled_dir \n} \n \nrule Trojan_Win32_Plaplex : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Variant of the JPin backdoor\"  \n    original_sample_sha1 = \"ca3bda30a3cdc15afb78e54fa1bbb9300d268d66\"  \n    unpacked_sample_sha1 = \"2fe3c80e98bbb0cf5a0c4da286cd48ec78130a24\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $class_name1 = \"AVCObfuscation\"  \n    $class_name2 = \"AVCSetiriControl\"  \n   \n  condition: \n    $class_name1 and $class_name2  \n} \n \nrule Trojan_Win32_Dipsind_B : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"      description = \"Dipsind Family\" \n    sample_sha1 = \"09e0dfbb5543c708c0dd6a89fd22bbb96dc4ca1c\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $frg1 = {8D 90 04 01 00 00 33 C0 F2 AE F7 D1 2B F9 8B C1 8B F7 8B FA C1 E9 02 F3 \nA5 8B C8 83 E1 03 F3 A4 8B 4D EC 8B 15 ?? ?? ?? ?? 89 91 ?? 07 00 00 }  \n    $frg2 = {68 A1 86 01 00 C1 E9 02 F3 AB 8B CA 83 E1 03 F3 AA}  \n    $frg3 = {C0 E8 07 D0 E1 0A C1 8A C8 32 D0 C0 E9 07 D0 E0 0A C8 32 CA 80 F1 63}  \n     \n  condition: \n    $frg1 and $frg2 and $frg3  \n} \nrule Trojan_Win32_PlaKeylog_B : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Keylogger component\"  \n    original_sample_sha1 = \"0096a3e0c97b85ca75164f48230ae530c94a2b77\"  \n    unpacked_sample_sha1 = \"6a1412daaa9bdc553689537df0a004d44f8a45fd\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $hook = {C6 06 FF 46 C6 06 25} \n    $dasm_engine = {80 C9 10 88 0E 8A CA 80 E1 07 43 88 56 03 80 F9 05}  \n     \n  condition: \n    $hook and $dasm_engine  \n} \nrule Trojan_Win32_Adupib : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Adupib SSL Backdoor\"  \n    original_sample_sha1 = \"d3ad0933e1b114b14c2b3a2c59d7f8a95ea0bcbd\"  \n    unpacked_sample_sha1 = \"a80051d5ae124fd9e5cc03e699dd91c2b373978b\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = \"POLL_RATE\" \n    $str2 = \"OP_TIME(end hour)\"  \n    $str3 = \"%d:TCP:*:Enabled\"  \n    $str4 = \"%s[PwFF_cfg%d]\"  \n    $str5 = \"Fake_GetDlgItemTextW: ***value***=\"  \n   condition: \n    $str1 and $str2 and $str3 and $str4 and $str5   \n} \nrule Trojan_Win32_PlaLsaLog : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Loader / possible incomplete LSA Password Filter\"  \n    original_sample_sha1 = \"fa087986697e4117c394c9a58cb9f316b2d9f7d8\"  \n    unpacked_sample_sha1 = \"29cb81dbe491143b2f8b67beaeae6557d8944ab4\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {8A 1C 01 32 DA 88 1C 01 8B 74 24 0C 41 3B CE 7C EF 5B 5F C6 04 01 00 5E \n81 C4 04 01 00 00 C3}  \n    $str2 = \"PasswordChangeNotify\" \n     \n  condition: \n    $str1 and $str2  \n} \nrule Trojan_Win32_Plagon : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Dipsind vari ant\" \n    original_sample_sha1 = \"48b89f61d58b57dba6a0ca857bce97bab636af65\"  \n    unpacked_sample_sha1 = \"6dccf88d89ad7b8611b1bc2e9fb8baea41bdb65a\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n     \n  strings:  \n    $str1 = \"VPLRXZHTU\" \n    $str2 = {64 6F 67 32 6A 7E 6C} \n    $str3 = \"Dqpqftk(Wou\\ \"Isztk)\"  \n    $str4 = \"StartThreadAtWinLogon\"  \n     \n     \n  condition: \n    $str1 and $str2 and $str3 and $str4  \n} \nrule Trojan_Win32_Plakelog : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Raw -input based keylogger\" \n    original_sample_sha1 = \"3907a9e41df805f912f821a47031164b6636bd04\"      unpacked_sample_sha1 = \"960feeb15a0939ec0b53dcb6815adbf7ac1e7bb2\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified  = \"2016- 04-12\" \n  strings:  \n    $str1 = \"<0x02>\" wide  \n    $str2 = \"[CTR -BRK]\" wide  \n    $str3 = \"[/WIN]\" wide  \n    $str4 = {8A 16 8A 18 32 DA 46 88 18 8B 15 08 E6 42 00 40 41 3B CA 72 EB 5E 5B}  \n  condition: \n    $str1 and $str2 and $str3 and $str4  \n} \nrule Trojan_Win32_Plainst : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Installer component\"  \n    original_sample_sha1 = \"99c08d31af211a0e17f92dd312ec7ca2b9469ecb\"  \n    unpacked_sample_sha1 = \"dcb6cf7cf7c8fdfc89656a042f81136bda354ba6\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {66 8B 14 4D 18 50 01 10 8B 45 08 66 33 14 70 46 66 89 54 77 FE 66 83 7C \n77 FE 00 75 B7 8B 4D FC 89 41 08 8D 04 36 89 41 0C 89 79 04}  \n    $str2 = {4b D3  91 49 A1 80 91 42 83 B6 33 28 36 6B 90 97}  \n  condition: \n $str1 and $str2  \n} \nrule Trojan_Win32_Plagicom : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Installer component\"  \n    original_sample_sha1 = \"99dcb148b053f4cef6df5fa1ec5d33971a58bd1e\"  \n    unpacked_sample_sha1 = \"c1c950bc6a2ad67488e675da4dfc8916831239a7\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {C6 44 24 ?? 68 C6 44 24 ?? 4D C6 44 24 ?? 53 C6 44 24 ?? 56 C6 44 24 ?? \n00} \n    $str2 = \"OUEMM/EMM\" \n    $str3 = {85 C9 7E 08 FE 0C 10 40 3B C1 7C F8 C3}    condition: \n    $str1 and $str2 and $str3  \n} \nrule Trojan_Win32_Plaklog : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Hook-based keylogger\"  \n    original_sample_sha1 = \"831a5a29d47ab85ee3216d4e75f18d93641a9819\"  \n    unpacked_sample_sha1 = \"e18750207ddbd939975466a0e01bd84e75327dda\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = \"++[%s^^unknown^^%s]++\"  \n    $str2 = \"vtfs43/emm\"  \n    $str3 = {33 C9 39 4C 24 08 7E 10 8B 44 24 04 03 C1 80 00 08 41 3B 4C 24 08 7C F0 \nC3} \n  condition: \n    $str1 and $str2 and $str3  \n}   \nrule Trojan_Win32_Plapiio : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"JPin backdoor\"  \n    original_sample_sha1 = \"3119de80088c52bd8097394092847cd984606c88\"  \n    unpacked_sample_sha1 = \"3acb8fe2a5eb3478b4553907a571b6614eb5455c\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = \"ServiceMain\"  \n    $str2 = \"Startup\"  \n    $str3 = {C6 45 ?? 68 C6 45 ?? 4D C6 45 ?? 53 C6 45 ?? 56 C6 45 ?? 6D C6 45 ?? 6D}  \n  condition: \n    $str1 and $str2 and $str3  \n} \nrule Trojan_Win32_Plabit : Platinum  \n{ \n  meta: \n author = \"Microsoft\"\n description = \"Installer component\" \n sample_sha1 = \n\"6d1169775a552230302131f9385135d385efd166\"  \nactivity_group = \"Platinum\" \n version = \"1.0\"     last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {4b D3 91 49 A1 80 91 42 83 B6 33 28 36 6B 90 97}  \n    $str2 = \"GetInstanceW\"  \n    $str3 = {8B D0 83 E2 1F 8A 14 0A 30 14 30 40 3B 44 24 04 72 EE} \n  condition: \n    $str1 and $str2 and $str3  \n} \nrule Trojan_Win32_Placisc2 : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Dipsind variant\"  \n    original_sample_sha1 = \"bf944eb70a382bd77ee5b47548ea9a4969de0527\"  \n    unpacked_sample_sha1 = \"d807648ddecc4572c7b04405f496d25700e0be6e\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {76 16 8B D0 83 E2 07 8A 4C 14 24 8A 14 18 32 D1 88 14 18 40 3B C7 72 EA \n} \n    $str2 = \"VPLRXZHTU\" \n    $str3 = \"%d) Command:%s\"  \n    $str4 = {0D 0A 2D 2D 2D 2D 2D 09 2D 2D 2D 2D 2D 2D 0D 0A}  \n  condition: \n    $str1 and $str2 and $str3 and $str4  \n} \nrule Trojan_Win32_Placisc3 : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Dipsind variant\"  \n    original_sample_sha1 = \"1b542dd0dacfcd4200879221709f5fa9683cdcda\"  \n    unpacked_sample_sha1 = \"bbd4992ee3f3a3267732151636359cf94fb4575d\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {BA 6E 00 00 00 66 89 95 ?? ?? FF FF B8 73 00 00 00 66 89 85 ?? ?? FF FF \nB9 64 00 00 00 66 89 8D ?? ?? FF FF BA 65 00 00 00 66 89 95 ?? ?? FF FF B8 6C 00 00 \n00} \n    $str2 = \"VPLRXZHTU\"  \n    $str3 = {8B 44 24 ?? 8A 04 01 41 32 C2 3B CF 7C F2 88 03}  \n  condition: \n    $str1 and $str2 and $str3  } \nrule Trojan_Win32_Placisc4 : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Installer for Dipsind variant\"  \n    original_sample_sha1 = \"3d17828632e8ff1560f6094703ece5433bc69586\"  \n    unpacked_sample_sha1 = \"2abb8e1e9cac24be474e4955c63108ff86d1a034\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = {8D 71 01 8B C6 99 BB 0A 00 00 00 F7 FB 0F BE D2 0F BE 04 39 2B C2 88 04 \n39 84 C0 74 0A}  \n    $str2 = {6A 04 68 00 20 00 00 68 00 00 40 00 6A 00 FF D5}  \n    $str3 = {C6 44 24 ?? 64 C6 44 24 ?? 6F C6 44 24 ?? 67 C6 44 24 ?? 32 C6 44 24 ?? \n6A} \n     \n  condition: \n    $str1 and $str2 an d $str3 \n} \nrule Trojan_Win32_Plakpers : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Injector / loader component\"  \n    original_sample_sha1 = \"fa083d744d278c6f4865f095cfd2feabee558056\"  \n    unpacked_sample_sha1 = \"3a678b5c9c46b5b87bfcb18306e d50fadfc6372e\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = \"MyFileMappingObject\"  \n    $str2 = \"[%.3u]  %s  %s  %s [%s:\" wide  \n    $str3 = \"%s \\\\{%s}\\\\%s\" wide  \n     \n  condition: \n    $str1 and $str2 and $str3  \n} \nrule Trojan_Win32_Plainst2 : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Zc tool\"  \n    original_sample_sha1 = \"3f2ce812c38ff5ac3d813394291a5867e2cddcf2\"  \n    unpacked_sample_sha1 = \"88ff852b1b8077ad5a19cc438afb2402462fbd1a\"  \n    activity_group = \"Platinum\"  \n    version = \"1.0\"      last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = \"Connected [%s:%d]...\" \n    $str2 = \"reuse possible: %c\"  \n    $str3 = \"] => %d%% \\x0a\" \n     \n     \n  condition: \n    $str1 and $str2 and $str3  \n} \nrule Trojan_Win32_Plakpeer : Platinum  \n{ \n  meta: \n    author = \"Microsoft\"  \n    description = \"Zc tool v2\"  \n    original_sample_sha1 = \"2155c20483528377b5e3fde004bb604198463d29\"  \n    unpacked_sample_sha1 = \"dc991ef598825daabd9e70bac92c79154363bab2\"  \n    activity_group = \" Platinum\"  \n    version = \"1.0\"  \n    last_modified = \"2016- 04-12\" \n  strings:  \n    $str1 = \"@@E0020(%d)\" wide  \n    $str2 = /exit.{0,3}@exit.{0,3}new.{0,3}query.{0,3}rcz.{0,3}scz/ wide  \n    $str3 = \" ---###---\" wide  \n    $str4 = \" ---@@@---\" wide  \n   \n   \n  condition: \n    $str1 and $str2 and $str3 and $str4  \n}  \n "
}