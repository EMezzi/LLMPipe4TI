{
    "title": "darkhydrus delivers new trojan that can use google drive for c2 communications",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nDarkHydrus delivers new Trojan that can use\nGoogle Drive for C2 communications\n29,425\npeople reacted\n4\n14 min. read\nThis post is also available in: 日本語  (Japanese )\nIn the summer of 2018, Unit 42 released  reporting  regarding activity in the Middle East surrounding a cluster of\nactivity using similar tactics, tools, and procedures (TTPs) in which we named the adversary group DarkHydrus.\nThis group was observed using tactics such as registering typosquatting domains for security or technology\nvendors, abusing open‐source penetration testing tools, and leveraging novel file types as anti‐analysis\ntechniques.\nSince that initial reporting, we had not observed new activity from DarkHydrus until recently, when 360TIC\npublished a tweet and subsequent research  discussing delivery documents that appeared to be attributed to\nDarkHydrus. In the process of analyzing the delivery documents, we were able to collect additional associated\nsamples, uncover additional functionality of the payloads including the use of Google Drive API, and confirm the\nstrong likelihood of attribution to DarkHydrus. We have notified Google of our findings.\nDelivery Document\nWe collected a total of three DarkHydrus delivery documents installing a new variant of the RogueRobin trojan.\nThese three documents were extremely similar to each other and are all macro enabled Excel documents with\n.xlsm  file extensions. None of the known documents contain a lure image or message to instruct the recipient\nto click the Enable Content  button necessary to run the macro, as seen in Figure 1. While we cannot confirm\nthe delivery mechanism, it is likely that the instructions to click the Enable Content  button were provided\nduring delivery, such as in the body of a spear‐phishing email.\n    Figure 1 DarkHydrus’ delivery document does not have a lure image or message\nWithout the delivery mechanism we cannot confirm the exact time these delivery documents were used in an\nattack; however, the observed timestamps within these three delivery documents gives us an idea when the\nDarkHydrus actors created them. While the creation times were timestomped to a default time of 2006-09-16\n00:00:00Z  commonly observed in malicious documents, the Last Modified times were still available and suggest\nthat DarkHydrus created these documents in December 2018 and January 2019. Table 1 shows the breakdown\nof timestamps and their associated sample hashes.\nSHA256 Last Modified\ne068c6536bf353abe249ad0464c58fb85d7de25223442dd220d641\n16dbf1e022\n 2018‐12‐\n15T05:14:32Z\n \n \n4e40f80114e5bd44a762f6066a3e56ccdc0d01ab2a18397ea12e0b\nc5508215b8    2018‐12‐\n23T05:45:43Z\n513813af1590bc9edeb91845b454d42bbce6a5e2d43a9b0afa7692\ne4e500b4c8\n 2019‐01‐\n08T06:51:21Z\n \n \nTable 1 Timestamps of delivery documents\nThe macro executes immediately after pressing the Enable Content  button thanks to the  Workbook_Open\nsub‐function, which will call the actor created New_Macro  function. The New_Macro function starts by\nconcatenating several strings to create a PowerShell script that it will write to the file\n%TEMP%\\WINDOWSTEMP.ps1 . The function builds the contents of a second file by concatenating several strings\ntogether, but this second file is a .sct  file that the function will write to a file %TEMP%\\12-B-366.txt . While\n.sct  files are used by a multitude of applications, in this instance it is being used as a Windows Script\nComponent file. The function then uses the built‐in Shell function to run the following command, which\neffectively executes the .sct  file stored in 12-B-366.txt :\nThe use of the legitimate regsvr32.exe  application to run a .sct  file is an AppLocker bypass technique\noriginally discovered by Casey Smith ( @subtee ), which eventually resulted in a Metasploit module . The\nWINDOWSTEMP.ps1  script is a dropper that decodes an embedded executable using base64 and decompresses\nit with the System.IO.Compression.GzipStream  object. The script saves the decoded and decompressed\nexecutable to %APPDATA%\\Microsoft\\Windows\\Templates\\WindowsTemplate.exe  and creates an\nLNK shortcut at %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OneDrive.lnk  to\npersistently run WindowsTemplate.exe  each time Windows starts up. The WindowsTemplate.exe\nexecutable is a new variant of RogueRobin written in C#.\nRogueRobin .NET Payload\nIn our original blog on DarkHydrus, we analyzed a PowerShell‐based payload we named RogueRobin. While\nperforming the analysis on the delivery documents using the .sct  file AppLocker bypass, we noticed the C#\npayload was functionally similar to the original RogueRobin payload. The similarities between the PowerShell and\nC# variants of RogueRobin suggests that the DarkHydrus group ported their code to a compiled variant.\nThe C# variant of RogueRobin attempts to detect if it is executing in a sandbox environment using the same\ncommands as in the PowerShell variant of RogueRobin. The series of commands, as seen in Table 2, include\nchecks for virtualized environments, low memory, and processor counts, in addition to checks for common\nanalysis tools running on the system. The Trojan also checks to see if a debugger is attached to its processes and\nwill exit if it detects the presence of a debugger.\nPowerShell command Description\n‘gwmi -query “select * from\nwin32_BIOS where\nSMBIOSBIOSVERSION LIKE\n‘%VBOX%'”Query attempts to detect VirtualBox environment\nfrom the win32_BIOS WMI class\ngwmi -query “select * from\nwin32_BIOS where\nSMBIOSBIOSVERSION LIKE\n‘%bochs%'”Query attempts to detect Bochs environment from\nthe win32_BIOS WMI class\ngwmi -query “select * from\nwin32_BIOS where\nSMBIOSBIOSVERSION LIKE\n‘%qemu%'”Query attempts to detect QEMU environment from\nthe win32_BIOS WMI class\ngwmi -query “select * from\nwin32_BIOS where\nSMBIOSBIOSVERSION LIKE\n‘%VirtualBox%'”Query attempts to detect VirtualBox environment\nfrom the win32_BIOS WMI class\ngwmi -query “select * from\nwin32_BIOS where\nSMBIOSBIOSVERSION LIKE ‘%VM%'”Query attempts to detect VMWare environment\nfrom the win32_BIOS WMI class\ngwmi -query “Select * from\nwin32_BIOS where Manufacturer\nLIKE ‘%XEN%'”Query attempts to detect Xen environment from\nthe win32_BIOS WMI class\ngwmi win32_computersystemUses this query to check the system information for\nthe string “VMware”.\ngwmi -query “Select\nTotalPhysicalMemory from\nWin32_ComputerSystem”Uses this query to check to see if the total physical\nmemory is less than 2,900,000,000 bytes.\ngwmi -Class win32_Processor |\nselect NumberOfCoresUses this query to check to see if the total number\nof CPU cores is less than 1.\nGet-Process | select CompanyChecks to see if any running processes have\n“Wireshark” or “Sysinternals” as the company\nname.\nTable 2 Sandbox evasion checks in the C# variant of RogueRobin\nLike the original version, the C# variant of RogueRobin uses DNS tunneling to communicate with its C2 server\nusing a variety of different DNS query types. Just like in the sandbox checks, the Trojan checks for an attached\ndebugger each time it issues a DNS query; if it does detect a debugger it will issue a DNS query to resolve\n676f6f646c75636b.gogle[.]co . The domain is legitimate and owned by Google. The subdomain\n676f6f646c75636b  is a hex encoded string which decodes to goodluck . This DNS query likely exists as a\nnote to researchers or possibly as an anti‐analysis measure, as it will only trigger if the researcher has already\npatched the initial debugger check to move onto the C2 function. Figure 2 shows the code responsible for\ndetecting the attached debugger and issuing the corresponding DNS request.\nFigure 2 Code that issues DNS query to gogle.co if a debugger is detected\nAll DNS requests issued by RogueRobin use the built in nslookup.exe  application to communicate to the C2\nserver and the Trojan will use a variety of regular expressions to extract data from the DNS response. Firstly, the\nTrojan will use the following regular expression to determine if the C2 server wishes to cancel the C2\ncommunications:\nAdditionally, the RogueRobin Trojan uses the regular expressions in Table 3 to confirm that the DNS response\ncontains the appropriate data for it to extract information from.\nRegular Expressions\n([^r-v\\\\s])[r-v]([\\\\w\\\\d+\\\\/=]+)-\\\\w+.(<domainList[0]>|\n<domainList[1]>|<domainList[n]>)\nAddress:\\\\s+(([a-fA-F0-9]{0,4}:{1,4}[\\\\w|:]+){1,8})\nAddress:\\\\s+(([a-fA-F0-9]{0,4}:{1,2}){1,8})\n([^r-v\\\\s]+)[r-v]([\\\\w\\\\d+\\\\/=]+).(<domainList[0]>|\n<domainList[1]>|<domainList[n]>)\n(\\\\w+).(<domainList[0]>|<domainList[1]>|<domainList[n]>)\nAddress:\\\\s+(\\\\d+.\\\\d+.\\\\d+.\\\\d+)\nTable 3 Regular expressions used by RogueRobin\nThe C# variant, like its PowerShell relative, will issue DNS queries to determine which query types can\nsuccessfully communicate with its C2 servers. Figure 3 shows the RogueRobin payload issuing DNS requests to\nresolve custom crafted subdomains of its C2 domains using TXT, SOA, MX, CNAME, SRV, A and AAAA query\ntypes.\nFigure 3 RogueRobin testing various DNS query types\nThe domains in the test queries, such as aqhpc.akdns[.]live  have subdomains that are generated by\nsubstituting the digits in the Trojan’s process ID with characters seen in Table 4 (for example qhp for the PID\n908) and surrounding these characters with the static characters a and c. The C2 server can respond to any of\nthe query types to provide a unique identifier value that the Trojan will store in a variable and use in future DNS\nrequests.\n \nCharacter Digit\nh 0\ni 1\nj 2\nk 3\nl 4\nm 5\nn 6\no 7\np 8\nq 9\nTable 4 Character substitution used in RogueRobin\nThe Trojan will use future DNS requests to retrieve jobs from the C2 server, which the Trojan will handle as\ncommands. To obtain a job, the Trojan builds a subdomain that has the following structure and issues a DNS\nquery to the C2 server:\nc<unique identifier><job identifier padded with ‘0’ to make three digits>\n<sequence number>c\nThe generated subdomain is then subjected to a number‐to‐character substitution function that is the inverse of\nthe Table 4, which effectively converts all the digits in the subdomain into characters. The Trojan checks the\nresponse to this query using the regular expressions in Table 3. If it received a non‐cancelling response, the\nTrojan will extract data from the DNS responses and treat it as commands. Table 5 shows the commands that the\nC# variant of RogueRobin can handle, which is extremely similar to the previously analyzed PowerShell variant.\nRegex  Description\n^kill Kills a thread running in Trojan based on a provided thread name\n^\\$fileDown\nloadUploads a file to the C2 server via the DNS tunnel\n^\\$importMo\nduleRuns a provided PowerShell command and adds it to a list called\n‘modules’\n^\\$x_modeTurns on the alternative mode of ‘x_mode’ on to use the alternative\nC2 channel. If preceded by “OFF”, it turns ‘x_mode’ off, otherwise\nthe command is newline delimited with settings to use this\nalternative C2 functionality.\n^\\$ClearMod\nulesClears the previously run ‘modules’ list\n^\\$fileUplo\nadThis command should be followed by a string that will be used as a\npath to save a new file to the system. This command will then\nreach out to the C2 server to obtain the data to save to this file\npath.\n^testmodeRuns the test function to determine which DNS query types can\nsuccessfully communicate with the C2\n^showconfigCreates a pipe delimited (“|”) string that contains the sample’s\nsettings, including the list of C2 domains and available DNS query\ntypes.\n^changeConf\nigAllows the C2 to set values within the Trojan’s configuration via\npipe delimited (“|”) string. The string is formatted as “<domain list>|\n<minimum query size>|<maximum query size>|<hasGarbage>|\n<sleepPerRequest>|<maximum requests>|<query types>|\n<hibridMode>|<current query mode>”\n^slp Sets the sleep and jitter values\n^exit Exits the Trojan\nTable 5 Commands available within the C# variant of RogueRobin\nUsing Google Drive for C2\nA command that was not available in the original PowerShell variant of RogueRobin but is available with the new\nC# variant is the x _mode . This command is particularly interesting as it enables an alternative command and\ncontrol channel that uses the Google Drive API. The x_mode  command is disabled by default, but when enabled\nvia a command received from the DNS tunneling channel, it allows RogueRobin to receive a unique identifier and\nto get jobs by using Google Drive API requests.\nIn x_mode , RogueRobin uploads a file to the Google Drive account and continually checks the file’s modification\ntime to see if the actor has made any changes to it. The actor will first modify the file to include a unique\nidentifier that the Trojan will use for future communications. The Trojan will treat all subsequent changes to the\nfile made by the actor as jobs and will treat them as commands, which it will handle with the same command\nhandler seen in Table 5.\nTo use Google Drive, the x_mode  command received from the C2 server via DNS tunneling will be followed by a\nnewline‐delimited list of settings needed to interact with the Google Drive account. Figure 4 shows the code in\nRogueRobin that handles the x_mode  command, specifically splitting the command data on newlines and using\nthe resulting array to set variables used as x_mode  settings.\nFigure 4 x_mode command and new line delimited settings\nAs seen in Figure 4, the settings are stored in variables seen in Table 6, which are used to authenticate to the\nactor‐controlled Google account before uploading and downloading files from Google Drive.\nVariable\nNameDescription\ngduGoogle Drive URL for downloading files to the Google Drive\naccount\ngduuGoogle Drive URL for uploading files to the Google Drive\naccount\ngdueGoogle Drive URL for updating a file on the Google Drive\naccount\ngdo2t Google Drive URL used to get the OAUTH access_token\nclient_id The client_id for the OAUTH application\ncs The client_secret for OAUTH\nr_t The refresh_token for OAUTH\nTable 6 Variables used to store settings needed to use Google Drive as a C2\nTo obtain an OAUTH access token to authenticate to the actor provided Google account, the Trojan sends an\nHTTP POST request to a URL stored in the gdo2t  variable with g rant_type , client_id , client_secret ,\nand refresh_token  fields added to the HTTP header and in the POST data. As seen in Figure 5, the values for\nthese fields are set to variables initially set upon issuing of the x_mode  command.\nFigure 5 HTTP POST request to obtain an OAUTH access token\nFigure 5 shows that the Trojan then uses the following regular expression to obtain the access token from the\nHTTP response:\n\\”access_token\\”:(.*)\nOnce authenticated with a valid access token, the Trojan will attempt to upload a file to the Google Drive\naccount. To upload a file, the Trojan first creates an HTTP POST request to the URL stored in gduu  to send the\nfollowing JSON data to the Google Drive account:\n{ “name” : “<process ID of Trojan>.txt” }\nGoogle Drive will respond to this request with an HTTP response whose header contains a Location field. This\nfield contains a URL that the Trojan will use to upload the contents of the <process ID of Trojan>.txt file, which\nwill be structured as <process ID of Trojan>.<C2 domain> where the process ID is encoded with the same\ncharacter substitution function as seen previously in Table 4. The Trojan will then use the following regular\nexpression to check the HTTP response to the content upload request for the file identifier value:\n\\”id\\”:(.*)\nThe Trojan will use this file identifier value to monitor for changes made to the file by the actor by checking for\nchanges to the modification time of the <process ID of Trojan>.txt  file. The Trojan checks the modified\ntime of the file by creating an HTTP request to a URL structured as follows:\n<Google Drive URL in ‘gdu’> + <file identifier> + “?\nsupportTeamDrives=true&fields=modifiedTime”\nThe Trojan then uses the following regular expression to obtain the modified time of the file from the HTTP\nresponse, which is saved to the variable named modification_time :\n\\”modifiedTime\\”:(.*)\nThe Trojan then uploads a second file to the Google Drive, the purpose of which is to allow the Trojan to\ncontinually write to this file as it waits for the actor to modify the first file uploaded. The Trojan will write\n<process ID of Trojan>  to a second file stored on the Google Drive instance named <process ID of\nTrojan>-U.txt . In each iteration of the communications loop, the Trojan will check to see if the modification\ntime of the first file changed, and if it is not updated the Trojan will update the second file by writing the string\nb<unique identifier>c<5 random lowercase characters>.<C2 domain>  to the file by creating\nan HTTP POST request to a URL structured as follows:\n<Google Drive URL in ‘gdue’> + <second file identifier> + “?\nsupportsTeamDrive=true&uploadType=resumable&fields=kind,id,name,mimeType,parents”\nIn one RogueRobin sample (SHA256: f1b2bc0831… ), the author did not use the Google Drive URL provided by\nthe actor when issuing the x_mode  command, and instead included a  hardcoded Google Drive URL, as seen in\nFigure 6. This is the only instance we observed where a hardcoded Google Drive URL was included in\nRogueRobin, which may suggest that the author may have overlooked this during testing.\nFigure 6 Hardcoded Google Drive URL used in RogueRobin sample\nWhen the modification_time  for the first file changes, the Trojan downloads the contents from the first file\nuploaded to the Google Drive. The Trojan downloads the contents of this file by crafting an HTTP request to a\nURL structured as follows:\n<Google Drive URL in ‘gdu’> + <first file identifier> + “?alt=media”\nWith the contents of the file downloaded, the Trojan sets the modification_time  variable to the current\nmodification time so the Trojan knows when the actor makes further changes to the file. The Trojan processes\nthe downloaded data the same way it would for a unique identifier as if the data was obtained via the DNS\ntunneling protocol using the TXT query mode, specifically by searching the data using the following regular\nexpression:\n\\”(\\\\w+).(<domainList[0]>|<domainList[1]>|<domainList[n]>).\\”\nWith the unique identifier value obtained from the file on Google Drive, the Trojan will attempt to obtain jobs\nusing the Google Drive communications channel. To get a job from the Google Drive account, the Trojan starts by\ncreating a string that has the following structure with each element within the subdomain subjected to the\nnumber to character substitution from Table 4:\nc<unique identifier><job identifier padded with ‘0’ to make three digits>\n<sequence number>c.<C2 domain>\nThe Trojan will then obtain an OAUTH access token to the Google Drive in the same manner as before when\nobtaining the unique identifier. The Trojan uses the access token to write the string above to the first file\nuploaded to Google drive whose filename is <process ID of Trojan>.txt. After writing to this file, the Trojan will\nenter a loop to continually to check for changes to the modification time of this file, effectively waiting for the\nactor to make modifications to the file. When the actor modifies the file and changes the modification_time, the\nTrojan downloads the contents from the file by creating an HTTP request to a URL structured as follows:\n<Google Drive URL in ‘gdu’> + <file identifier in ‘f_id’> + “?alt=media”\nThe Trojan processes the downloaded data within the file the same way it would to obtain a job from data\nreceived from the DNS tunneling channel using the TXT query mode, specifically by searching the data using the\nfollowing regular expression:\n([^r-v\\\\s]+)[r-v]([\\\\w\\\\d+\\\\/=]+).(<domainList[0]>|<domainList[1]>|\n<domainList[n]>)\nThe Trojan function splits the matching data, specifically the subdomain on a separator that is a character\nbetween r and v and uses the data before the separator to get the sequence number and a Boolean value ( 0 or\n1) if more data is expected. It will use the data after the separator as the string that it will subject to the\ncommand handler seen in Table 5.\nInfrastructure\nThe initial list of C2 domains released by 360TIC  associated with 513813af15…  appeared thematically very\nsimilar to previous DarkHydrus activity, using domain names visually similar to well‐known technology vendors or\nservice providers. This list was further expanded upon by ClearSky Security ( here , here  and here ) in a series of\ntweets that provided additional similar domain names also likely linked to DarkHydrus. To better understand how\nthese domains are related to DarkHydrus, we began visually mapping the relationships between the list of\ndomains, which can be seen in Figure 7. The diagram shows the DarkHydrus group using a consistent naming\nschema and structure in their infrastructure. They register a multitude of domains and set up nameservers to use\nas their primary DNS for their C2 domains.\nFigure 7 Relational diagram of DarkHydrus infrastructure\nFor this campaign, we are able to cluster the adversary infrastructure via the specific nameservers that were\ndeployed for C2s. The brackets in Figure 7 shows the distinct clustering of infrastructure into three groups. We\nwere able to retrieve live payloads associated with two of the clusters. A third cluster was also shared by\nClearSky Security, but we were unable to associate a live payload to them. Although the third cluster does not\nappear to have any direct relationships to the other two clusters, it is still highly probable that this cluster is\nrelated to the two other clusters via the structuring of domains with custom nameservers. In addition, the domain\nnames themselves were extremely similar, with some examples being exactly the same but on a different top\nlevel domain.\nThe two sets of nameservers we were able to associate with the retrieved payloads were\ntbs1/tbs2.microsoftonline.services  and tvs1/tvs2.trafficmanager.live . The distribution of\nC2 domains and their nameservers can be seen in Table 7.\nSample(s)f1b2bc0831445903c0d51b390b1987597009cc0fade009e07d792e8d455f6db0\n5cc62ad6baf572dbae925f701526310778f032bb4a54b205bada78b1eb8c479c\nDNS tbs1/tbs2.microsoftonline.services\nDomains 0ffice365[.]agency\n0ffice365[.]life\n0ffice365[.]services\n0nedrive[.]agency\ncorewindows[.]agency\nmicrosoftonline[.]agency\nonedrive[.]agency\nsharepoint[.]agency\nskydrive[.]agency\nskydrive[.]services\nSample eb33a96726a34dd60b053d3d1048137dffb1bba68a1ad6f56d33f5d6efb12b97\nDNS tvs1/tvs2.trafficmanager.live\nDomains akamaiedge[.]live\n akamaized[.]live\n akdns[.]live\n edgekey[.]live\nTable 7: Sample and Domain Associations\nThe third cluster of domains had six different nameservers associated with them, but unlike the other two\nclusters, were all directly tied to each other. Each of the domains appeared to have rotated through the six\nnameservers but oddly, one of the nameservers that several of the domains had rotated through did not appear\nto be currently registered. Examining historical IP resolutions revealed a common IP between the active\nnameservers, 107.175.75[.]123 . This IP is of particular interest as historical domain resolutions of this IP\nrevealed that it had resolved to the domain hotmai1l[.]com  in the past as well, which was a domain we had\npreviously identified as having a high likelihood of association with DarkHydrus infrastructure. This IP also belongs\nto the same service provider and class B network range as another IP we had associated with DarkHydrus,\n107.175.150[.]113  which specifically resolved to a domain name containing a victim organization’s name.\nConclusion\nThe DarkHydrus group continues their operations and adds new techniques to their playbook. Recent\nDarkHydrus delivery documents revealed the group abusing open‐source penetration testing techniques such as\nthe AppLocker bypass. The payloads installed by these delivery documents show that the DarkHydrus actors\nported their previous PowerShell‐based RogueRobin code to an executable variant, which is behavior that has\nbeen commonly observed with other adversary groups operating in the Middle East, such as OilRig. Lastly, the\nnew variant of RogueRobin is capable of using the Google Drive cloud service for its C2 channel, suggesting that\nDarkHydrus may be shifting to abusing legitimate cloud services for their infrastructure.\nPalo Alto Networks customers are already be protected via:\nAll samples in this report have a malicious verdict in WildFire\nDomains have been classified as malicious\nAutoFocus tags are available for additional context: DarkHydrus  and RogueRobin\nIndicators of Compromise\nDelivery Document SHA256\n513813af1590bc9edeb91845b454d42bbce6a5e2d43a9b0afa7692e4e500b4c8\ne068c6536bf353abe249ad0464c58fb85d7de25223442dd220d64116dbf1e022\n4e40f80114e5bd44a762f6066a3e56ccdc0d01ab2a18397ea12e0bc5508215b8\nRogueRobin SHA256\neb33a96726a34dd60b053d3d1048137dffb1bba68a1ad6f56d33f5d6efb12b97\nf1b2bc0831445903c0d51b390b1987597009cc0fade009e07d792e8d455f6db0\n5cc62ad6baf572dbae925f701526310778f032bb4a54b205bada78b1eb8c479c\nRogueRobin C2s\nakdns[.]live\nakamaiedge[.]live\nedgekey[.]live\nakamaized[.]live\n0ffice365[.]agency\n0nedrive[.]agency\ncorewindows[.]agency\nmicrosoftonline[.]agency\nonedrive[.]agency\nsharepoint[.]agency\nskydrive[.]agency\n0ffice365[.]life\n0ffice365[.]services\nskydrive[.]services\nskydrive[.]agency\nNameservers\ntvs1.trafficmanager[.]live\ntvs2.trafficmanager[.]live\ntbs1.microsoftonline[.]services\ntbs2.microsoftonline[.]services\nbrit.ns.cloudfronts[.]services\ndns.cloudfronts[.]services\nns2.akadns[.]services\nbritns.akadns[.]services\nbritns.akadns[.]live\nns2.akadns[.]live\nRelated Domains\niecvlist-microsoft[.]live\ndata-microsoft[.]services\nasimov-win-microsoft[.]services\nonecs-live[.]services\nakamaiedge[.]services\nphicdn[.]world\nazureedge[.]today\nnsatc[.]agency\nAkamai[.]agency\nt-msedge[.]world\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Robert Falcone  and Bryan Lee\nJanuary 18, 2019 at 10:40 AM\nCategory: Unit 42\nTags: Cloud , DarkHydrus , dns tunneling , Google Drive , Middle East , RogueRobin\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1regsvr32 .exe /s /n /u /i:%TEMP%\\12-B-366.txt scrobj.dll\n1216.58.192.174 |2a00:1450:4001:81a::200e|2200::|download .microsoft .com|ntservicepack .microsoft .com|windowsupdate .microsoft .com\n|update.microsoft .com\nSearch Unit 42\nSHARE \n "
}