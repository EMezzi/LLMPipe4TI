{
    "title": "ShadowPad_technical_description_PDF",
    "text": " \n \n \n \n \n \n \n \n \nShadowPad : popular server \nmanagement soft ware hit in \nsupply chain attack  \nPart 2: Technical Details  \n \n \n \n \n \n \n \n \n \n \n \n \n Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n1 ShadowPad is a modular cyber -attack platform that attackers deploy in victim networks to \ngain flexib le remote control capabilities. The platform is designed to run in two stages. The \nfirst stage is a shellcode that was embedded in a legitimate nssock2.dll used by Xshell, \nXmanager and other software packa ges produced by Net Sarang. This stage is responsible \nfor connecting to “validation” command and control (C&C)  servers and getting configuration \ninformation including the location of the real C &C server, which may be unique per victim. \nThe s econd stage acts  as an orchestrator for five main modules responsible for C &C \ncommunication, working with the DNS protocol, loading and injecting additional plugins into  \nthe memory of other processes.  \nAll actual payloads are received from the real C &C as plugins and can p erform different \ntypes of data exfiltration.  \nNSSOCK2.DLL - the compromised library  \n \nSHA256     462a02a8094e833fd456baf0a6d4e18bb7dab1a9f74d5f163a8334921a4ffde8  \nMD5        97363d50a279492fda14cbab53429e75  \nCompiled   2017.07.13 01:23:01 (GMT), 11.0  \nType       I386 Windows GUI DLL  \nSize       180432 \nInternal name nssock2.dll  \n \n \n \nThe m ain loader is built into the original \"nssock2.dll\", which is digitally signed. The malicious \ncode is triggered from one of the object autoinitialization s that are automat ically called by the \nC runtime code. It decrypts a binary blob with a function similar to “rand” and directly starts \nits execution.  \n \nThe blob is a self -loading executable converted into shellcode. It starts with a loader that \nprocesses a proprietary PE -like formatted blob, loads the code and data section by section, \nresolves imported API functions, relocates the code and then calls the entrypoint as DllMain.  \n \nEach self -loading shellcode contains a timestamp field that appears to be equal to UNIX \ntimestamps.  \nShellcode in NSSOCK2.DLL  \n \nSize      77824 \nType      shellcode, binary reconstructed from a proprietary format  \nKaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n2 Timestamp  2017.05.26 07:00:23 (GMT)  \n \nThe binary object is produced from a compiled Windows DLL file. The entrypoint of the blob \nstarts with a standard Microsoft Visual Studio DllMain code stub. All strings are encrypted \nwith a custom randomisation function and each string starts with a 2 -byte decryption key. It \nmaintains a configuration block in the Windows registry using one of the following lo cations:  \n \nHKCU \\SOFTWARE \\%d  \nor  \nHKLM \\SOFTWARE \\%d,  \n \nwhere %d is a signed integer produced from the system drive's serial number xor-ed with \n0xD592FC92. The block is stored in a value named \" Data \" and is 552 bytes long. It contains \na unique user id (generated GUID), 8 byte decryption key for the second stage, first \nexecution time, execution counter. It generates a hostname for accessing its C&C server \nusing a DGA (domain generation algorithm) base d on the current month and year in the .com  \ntop level domain. The request to the C&C is sent through the DNS extracted from the \nnetwork adapter settings or to hardcoded DNS servers IPs : 8.8.8.8, 8.8.4.4, 4.2.2.1, 4.2.2.2.  \n \nAs of August 2017, the following  domain name was used: nylalobghyhirgh.com  \nAt the time of analysis the domain was registered with the following WHOIS information:  \n \nDomain Name: NYLALOBGHYHIRGH.COM                                                                                                                        \nRegistry Domain ID: 2146218329_DOMAIN_COM -VRSN                                                                                                          \nRegistrar WHOIS Server: whois.namesilo.com                                                                                                              \nRegistrar URL: http://www.namesilo.com                                                                                                                  \nUpdated Date: 2017 -07-24T06:41:22Z                                                                                                                      \nCreation Date: 2017 -07-24T06:41:22Z                                                                                                                     \nRegistry Expiry Date: 2018 -07-24T06:41:22Z                                                                                                              \nRegistrar: NameSilo, LLC                                                                                                                                \nRegistrar IANA ID: 1479                                                                                                                                 \nRegistrar Abuse Contact Email: abuse @namesilo.com                                                                                                       \nRegistrar Abuse Contact Phone: +1.4805240066                                                                                                            \nDomain Status: clientTransferProhibited \nhttps://icann.org/epp#clientTransferProhibited                                                                  \nName Server: NS1.QHOSTER.NET                                                                                                                            \nName Server: NS2.QHOSTER.NET                                                                                                                            \nName Server: NS3.QHOSTER.NET                                                                                                                            \nName Server: NS4.QHOSTER.NET                                                                                                                            \nDNSSEC: unsigned                                                                                                                                       \n   \n \nDNS requests are sent every 8 hours. The request buffer presented to the C&C server \ncontains the following data:  \n \nValue               Description  \n------------------------------------  \n00 00            encryption key  Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n3 52 4F 4F 44          'DOOR', magic value  \n6 bytes          GUID              \n2 bytes          iteration counter  \n1 byte           year's least significant byte + 0x30  \n1 byte           month \n1 byte           day \n*                hostname  \n*                domain name  \n*                user name  \n \nThe request buffer is encrypted with custom XOR -based encryption algorithm. Then, the \nencrypted buf fer is converted to a readable string of latin characters by adding each half of \nthe byte to ‘a’ and ‘j’ characters correspondingly.  \nThe first character is encoded by adding the 'a' character to the number of non -dot \ncharacters in the DGA domain name. This  string is split in a series of subdomains of 50 -63 \nbytes long split by dots and then prepended to the DGA -generated hostname name.  \n \nThe resulting request packet querying a *.....*.%DGA -domain% .com is sent to all the DNS \nservers available and Google DNS se rvers.  \n \nThe DNS packet wrapping the request buffer starts with the following fields:  \n \nValue              Description  \n------------------------------------  \n2 bytes          Random request ID  \n01 00            Opcode (recursive request)  \n00 01            Number of queries: 1  \n00 00            Number of answers: 0  \n00 00            Number of name server records: 0  \n00 00            Number of authoritative response records: 0  \n*                Encoded data represented as a hostname  \n00 10            Query type: TXT  \n00 01            Query class: IN  \n \n \nThe module waits for a response from any DNS server until timed out or some data is \nreceived. The DNS packet is checked to conform to the following format:  \n \nValue               Description  \n-------------------------------- ---- \n?? ??            ID \nxx x0            No error  \nxx xx            Number of queries  \nxx xx            Number of answers  \nxx xx            Number of name server records  \n00 00            Number of authoritative response records  Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n4 --query-- \n*                Encoded data in the query record, first char + 'a' \nis number of stray bytes at the end, all the rest encoded as two \nlatin characters starting from 'a', 'j'  \n00 10            Query type: TXT  \n00 01            Query class: IN  \n--response -- \nC0 0C            Name: backwards link to the query record  \n00 10            Query type: TXT  \n00 01            Query class: IN  \n00 01 xx xx      TTL \nxx xx            Record length  \n*                Encoded response from the C2 server. Data format is \nthe same as for the query part.  \n \nThe response string is decrypted using the first two bytes of the response packet as a key. \nThe data format follows:  \n \nxx xx            encryption key  \n-- after decryption -- \n52 4F 4F 44       'DOOR', magic value  \n2 bytes          iteration counter  \n1 byte           status : 1 - ready to decrypt the payload, 2 - stop \noperation  \n4 bytes          part of decryption key  \n4 bytes          part of decryption key  \n4 bytes          length of additional data  \n*                additional data  \n \nThe module copies in formation received from the C &C server to its configuration storage and \nupdates the corresponding registry key.  \nOnce a proper decryption key is read from the registry or from the DNS response it is used to \ndecipher the second encrypted shellcode (“stage 2” ). It is then called directly passing the \n'additional data' string received from the C &C as an argument to the shellcode.  \n Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n5  \nSecond stage shellcode in “NSSOCK2.DLL”  \n \nSize      54288 \nType      shellcode, binary reconstructed from a proprietary format  \nTimestamp  2017.05.26 07:00:13 (GMT)  \n \nThe shellcode was produced from a Windows DLL file. The entrypoint of the blob starts with \nstandard MSVC DllMain code. The format of the blob is the same as in the \"Shellcode in \nNSSOCK2.DLL\".  \nThe DllMain function differ s from the standard C/C++ implementation. Besides standard \n“fdwReason” parameter values it also processes custom ones: 100, 101, 102, 103, 104.  \n \n\"Reason\" codes 102 -104 are used to implement a custom plugin API.  \n \nCode 100 : plugin initialization  \nCode 101 : plugin deinitialization  \nCode 102 : return the plugin's numeric identifier 100 in the lpReserved parameter  \nCode 103 : allocate a string for the plugin's name i.e. \"Root\" and return the value in the \nlpReserved parameter  \nCode 104 :  return a pointer to plugin's function table in a DWORD pointed by the \n“lpReserved” parameter  \n \nDuring DLL initialization the module allocates memory for internal structures and sets up its \nfunction table. Then, it uses the pointer to its own image as a plu gin and initializes the plugin \ninfrastructure.  \nThe plugin is started by calling sequentially its entrypoint (DllMain) with “Reason” parameters \n100, 102, 104 and copying the data returned in a structure describing the plugin. Once the \nplugin return s no erro r during initialization it is added to the plugin list.  \n \nDepending on the mode of operation, it can then proceed with the plugin orchestrator , either \nin a separate thread or inline - that is specified by the parameter provided by the C&C . \nKaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n6  \nModule / plugin orchestration  \n \nThe image contains five encrypted blobs structured in the same way as the second stage \nblob. They are decrypted with a XOR -based algorithm, decompressed with QuickLZ and \nloaded in memory. Then they are initialized and added to the list of pl ugins in the same way \nas the \"Root\" plugin.  \nEach plugin has a name and a numeric identifier (ID):  \n \nID   Name  \n-------------  \n100  Root (the second stage shellcode itself)  \n101  Plugins  \n102  Config  \n103  Install  \n104  Online  \n203  DNS  \n \nThen the module searches fo r the plugin with ID 103 (“Install”) and calls its second function. \nThe process is terminated if the plugin is not available. The module remains in memory as \nthe \"Root\" plugin and provides various facilities for the other plugins via the exported function \ntable.  \n \nModules  \n“Install” module  \n \nSize      7877 \nType      shellcode, binary reconstructed from a proprietary format  \nTimestamp  2017.05.26 06:59:46 (GMT)  \n \nStarts by adjusting process privileges, then invokes the “Config” plugin's function \n\"LoadConfig\"  \nIf there are no additional parameter from the C &C it continues to the main thread, otherwise  \nit injects into a newly created process and continues from there.  \n \nCreates mutex \" Global \\%16-48 random latin characters% \" \n \nThe module continues by invoking the mod ules “Plugins” and “Online”.  \n \n“Plugins” module  \n \nSize      7119 \nType      shellcode, binary reconstructed from a proprietary format  \nTimestamp  2017.05.26 06:59:07 (GMT)  \n Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n7 This plugin provides API for other modules and does not initiate any actions without ex ternal \nintervention.  \nStarts a registry monitoring thread waiting for changes in its registry key and loads any new \nplugins available in the registry Virtual File System (VFS).  \nThe registry location is :  \n \nHKLM \\HKCU \\SOFTWARE \\Microsoft \\%5-12 random character s% \n \nEvery value found in the key is decrypted and checked if it is a valid plugin and then loaded \nand initialized using the API from the \"Root” module.  \n \nAlso, the plugin provides an API for reading, writing and deleting arbitrary registry values. \nThis also  allows for the writing of  new plugin images to the registry VFS by command from \nthe C&C server.  \n \n“Config” module  \n \nSize      6574 \nType      shellcode, binary reconstructed from a proprietary format  \nTimestamp  2017.05.26 06:59:16 (GMT)  \n \nThis module maintains a configuration block of data of a fixed size of 2136 bytes. The block \nconsists of a fixed size header and a string pool populated sequentially and referenced from \nthe fixed header. When invoked for the first time during the current s ession it initializes with a \ndefault configuration. The default C&C server URL may be overwritten with the one provided \nfrom the the packet used to activate the second stage shellcode, if present.  \n \nThe configuration string pool starts from offset 0x58 and  holds several string parameters. \nEach string is encrypted with a random 2 -byte key using a proprietary algorithm based on \nXOR and an in -house rand() function. The encryption algorithm is the same for all string \nconstants used in all of the components of t he malware.  \n \nOffset  Size   Value  \n--------------------------  \n000     2   Offset of the string constant \"HD\"  \n002     2   Offset of the string constant \"HD\"  \n010     2   Offset of the executable path used for injection  \n018     2   Offset of the C&C server URL  \n040     4   IP address \"8.8.8.8\"  \n044     4   IP address \"8.8.4.4\"  \n048     4   IP address \"4.2.2.1\"  \n04C     4   IP address \"4.2.2.2\"  \n050     4   Constant 0x708 - sleep interval, equal to 1800 \nseconds or 30 minutes  \n058     *   String pool:  \n Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n8 \"HD\"  String con stant \n\"HD\"  String constant  \n*     C&C server URL, default value: \" dns://www.notped.com \", or the \none provided by the server to the \"Shellcode in NSSOCK2.DLL\" code.  \n\"%windir% \\system32 \\svchost.exe\"  Path to the executable used as a \nhost for injection  \n \nThe con figuration block is prepended with a service header, compressed and encrypted \nusing a function provided by the \"Root\" plugin and then written to a file . The  resulting size of \nthe file is 2156 bytes.  \n \nService header format:  \nOffset  Size  Value  \n----------------------------------  \n000  4  00 00 00 00  \n004  4  12 34 56 78  \n008  4  00 00 00 00  \n00C  4  00 00 08 58 // Size of the configuration block in bytes  \n010  4  * // Unused  \n \nThe exact location of the configuration file depends on the system volume's serial number \nand is generated according to the following format:  \n \n%ALLUSERSPROFILE% \\%random 3 -8 latin characters% \\%random 3 -8 latin \ncharacters% \\%random 3 -8 latin characters% \\%random 3 -8 latin characters%  \n \nThe file is always overwritten every time the plug in is initialized.  \n \n“Online” module  \n \nSize      15803 \nType      shellcode, binary reconstructed from a proprietary format  \nTimestamp  2017.05.26 06:59:21 (GMT)  \n \nHandles overall communication with the C&C server and dispatches the commands to other \nplugins.  \n \nMaintains a registry key : HKLM \\HKCU \\SOFTWARE \\%random 3 -8 latin characters%  \ncontaining a 24 -byte record of system time and number of tries.  \n \nProcesses the list of C &C URLs f rom the configuration block (up to 16 URLs). Depending on \nthe protocol specified in the URL it selects one of the plugins for handling communication \nwith the C&C server.  \n \nProtocol  Plugin ID  \n-------------------  Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n9 TCP    200 \nHTTP   201 \nHTTPS  204 \nUDP    202 \nDNS    203 \nSSL    205 \nURL    built in, DGA -based HTTP client  \n \nIt maintains a connection using one of the plugins, starting the connection with an initial \npacket and getting and executing commands and sending result packets back. The data \nreceived back is either a shutdown message or a packet of data containing a plugin ID and \naddit ional data for the command.  \n \nIn case of the \"URL\" protocol, it uses a built -in HTTP client to resolve the actual C&C server \nURL from an intermediary C&C server. It uses its own DGA based on the day of the month , \nrange (1 -10, 11 -20, >20) to generate the nam e of the intermediary C&C server.  \nThe actual name of the server is based on a mask specified in the configuration data, i.e. \nprefix %DGA -generated part% suffix, and the location of the suffix is marked with a '@' char.  \n \nDepending on the URL scheme specified in the mask it selects FTP, HTTP or HTTPS \nprotocol to send the request to the intermediary server and either sends a \"GET\" request or \nfetches a file from FTP.  \nOnce it has received a response the module looks for a string framed with '$' characters. The \nstring is then decoded into a binary buffer by subtracting 'a' characters and concatenating \neach pair into one byte. Then the buffer is decrypted using an algorithm that is used for string \nencryption in the rest of the code. The resulting decrypted buffer is expected to be the actual \nURL of the C &C to use then.  \n \nThe module may also provide basic information about the system when requested by the \nC&C server:  \n- current date and time  \n- memory status  \n- CPU frequency  \n- amount of free disk space  \n- video mode  \n- system locale  \n- PID of the malicious process  \n- OS version  \n- domain name  \n- user name  \n \n“DNS” module  \n \nSize      10982 \nType      shellcode, binary reconstructed from a proprietary format  \nTimestamp  2017.05.26 06:58:11 (GMT)  Kaspersky Lab  \nShadowPad, p art 2: Technical Details  \nAugust  2017  \n \n10  \nHandles all C&C communication based on the DNS protocol.  \n \nSends and receives DNS TXT records messages in the same way as the \"Shellcode in \nNSSOCK2\". However, the encoded payload is decrypted using a different in -house algorithm \nand the format of the response buffer is different:  \n \nOffset  Size  Value  \n------------- ------ \n000  2  Encryption key  \n-- after decryption -- \n002  2  Packet type(0,1,3)  \n004  2  packet id1 (of the server's response)  \n006  2  packet id2 (of the packet server is responding to, ACK)  \n \nInitial packet, type 0:  \n \nOffset  Size  Value  \n-------------------  \n000  2  Encryption key  \n002  2  00 00 \n004  2  packet id 1  \n006  2  packet id 2  \n008  16 GUID \n \nPacket type 1 - data:  \n \nOffset  Size  Value  \n-------------------  \n000  2  Encryption key  \n002  2  00 01 \n004  2  packet id 1  \n006  2  packet id 2  \n008  *  payload \n \nPacket type 3 - shutdown message:  \n \nOffset  Size  Value  \n-------------------  \n000  2  Encryption key  \n002  2  00 03 \n004  2  packet id 1  \n006  2  packet id 2  \n \n \n "
}