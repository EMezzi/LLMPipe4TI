{
    "title": "timeline of sandworm attacks - trendlabs security intelligence blog",
    "text": "Trend Micro About TrendLabs Security Intelligence Blog\nHome    »   Exploits    »   Timeline of Sandworm Attacks\nSecurity Predictions for 2020\nCybersecurity in 2020 will be viewed\nthrough many lenses — from differing\nattacker motivations and cybercriminal\narsenal to technological developments\nand global threat intelligence — only so\ndefenders can keep up with the broad\nrange of threats.\nRead our security predictions for 2020.\nBusiness Process Compromise\nAttackers are starting to invest in long-\nterm operations that target specific\nprocesses enterprises rely on. They\nscout for vulnerable practices,\nsusceptible systems and operational\nloopholes that they can leverage or\nabuse. To learn more, read our Security 101:\nBusiness Process Compromise.\nRecent Posts\nOpenSMTPD Vulnerability (CVE-2020-8794) Can\nLead to Root Privilege Escalation and Remote\nCode Execution\nOperation Overtrap Targets Japanese Online\nBanking Users Via Bottle Exploit Kit and Brand-\nNew Cinobi Banking Trojan\nMarch Patch Tuesday: LNK, Microsoft Word\nVulnerabilities Get Fixes, SMBv3 Patch Follows\nBusting Ghostcat: An Analysis of the Apache\nTomcat Vulnerability (CVE-2020-1938 and CNVD-\n2020-10487)\nDissecting Geost: Exposing the Anatomy of the\nAndroid Trojan Targeting Russian Banks\nPopular Posts\nLokiBot Impersonates Popular Game Launcher\nand Drops Compiled C# Code File\nMisconfigured Container Abused to Deliver\nCryptocurrency-mining Malware\nDissecting Geost: Exposing the Anatomy of the\nAndroid Trojan Targeting Russian Banks\nOutlaw Updates Kit to Kill Older Miner Versions,\nTargets More Systems\nFebruary Patch Tuesday: Fixes for Critical LNK,\nRDP, Trident Vulnerabilities\nStay Updated\nEmail Subscription\nYour email here\nSubscribe\nPrivacy Statement Legal Policies Copyright © 2020 Trend Micro Incorporated. All rights reserved.HOME AND HOME OFFICE  | FOR BUSINESS  | SECURITY INTELLIGENCE  | ABOUT TREND MICRO\nAsia Pacific Region (APAC): Australia  / New Zealand , 中国, 日本, 대한민국 , 台灣 Latin America Region (LAR): Brasil , México  North America Region (NABU): United States , Canada  \nEurope, Middle East, & Africa Region (EMEA): France , Deutschland / Österreich / Schweiz , Italia, Россия , España , United Kingdom / IrelandTimeline of Sandworm Attacks\nPosted on: November 10, 2014  at 1:12 pm Posted in: Exploits\nAuthor:  William Gamazo Sanchez (Vulnerability Research)\nTags: sandworm timelineThe Sandworm  vulnerability, also known as CVE-2014-4114, is an interesting vulnerability for two\nreasons. For one, it is related to the timing of the vulnerability life cycle.  In this blog post, we will\ntackle vulnerability analysis, and user awareness on what actions to take when they are under\nattack.  Note that all dates and times discussed here are based on publicly available information\nand in the internal metadata of the sample files. Here’s a timeline:\nClick image to enlarge\n*1: New CVE-2014-4114 Attacks Seen One Week After Fix\n*2: https://technet.microsoft.com/library/security/3010060\n*3: https://support.microsoft.com/kb/3010060\n*4: https://ics-cert.us-cert.gov/alerts/ICS-ALERT-14-281-01A\nCVE-2014-4114 is also related to the OLE design by itself. We can classify it as a Command\nInjection in the OLE infrastructure. This area is sufficiently complex and its hard to evaluate the\nscope of the attack surface; this caused the release of an incomplete fix and the release of CVE-\n2014-6352. This is because an attacker can control two external variables to invoke different\npaths inside the affected component package.dll . The variables are: OLE Verbs and Embedded\nFile Type.\nVulnerability time cycle\nLooking at the timelines is always helpful to understand and correlate major events. Sandworm\nbecame known to the public when iSIGHT released a blog entry  on October 14 discussing the\nvulnerability and how it was being used in targeted attacks. It was fixed on the same day as part of\nthe scheduled Patch Tuesday  release, in MS14-060 . A week later, on October 21, it was disclosed\nthat under certain circumstances the patch could be bypassed, resulting in Microsoft Security\nAdvisory 3010060  and published workarounds.\nWhat was in the patches? We found that they contained a new version of the file packager.dll . The\nfollowing image shows the Windows properties of the file:\nFigure 1. Package.dll updated version (6.3.9600.17341) Windows file properties\nThis file was created on September 13 – which is reasonable, since iSIGHT first spotted this attack\non September 3. Other security vendors  indicate they reported this flaw to Microsoft on September\n2.\nThe email campaign of Sandworm (or BlackEnergy) that targeted this vulnerability took place from\nAugust 13 onwards, as reported in various articles. These emails used a PPSX attachment with\ntwo embedded files. These embedded files contain an internal property informing the modification\nand created time.  The following image shows this property:\nFigure 2. OLE Compound tree structure.  Here we can see the ModifyTime is highlighted.\nA known file (SHA256 hash:\n70b8d220469c8071029795d32ea91829f683e3fbbaa8b978a31a0974daee8aaf) used in this\ncampaign is detected by Trend Micro as TROJ_MDLOAD.PGTY . The embedded files oleObject1\nand OleObject2  have the modified date/time of 8/7/2014 1:15:59 PM.  Following the timeline until\nhere, this would seem like a valid and logical date.  On October 16, 2014, Trend Micro reported\nthat the same type of attack is being used to exploit SCADA systems.  The said attack employed\nthe same technique – Command Injection in the OLE infrastructure – and used the same file\norigin. In this case two OLE files were used: devlist.cim and config.bak . Both files were created on\n10/4/2013.\nThere are several samples in VirusTotal related to this campaign. Some of these samples are\ndirectly related to the attacks, while others are simple modification to the attacks done by analysts.\nExtracting the attack IPs from all the samples we can get the following list:\n\\\\10[.]0[.]0[.]34\\public\\slide1.gif\n\\\\10[.]0[.]0[.]34\\public\\slide1.inf\n\\\\10[.]0[.]0[.]27\\share\\xxx.inf\n\\\\10[.]0[.]0[.]27\\share\\xxx.gif\n\\\\10[.]80[.]65[.]87\\impct\\losslides.gif\n\\\\216[.]66[.]74[.]22\\/root/smb4k/teamths\\ths.inf\n\\\\216[.]66[.]74[.]22\\/root/smb4k/teamths\\ths.gif\n\\\\210[.]209[.]86[.]152\\p\\z\\slides.inf\n\\\\210[.]209[.]86[.]152\\p\\z\\slides.gif\n\\\\185[.]29[.]8[.]212\\share\\sliiides.inf\n\\\\185[.]29[.]8[.]212\\share\\sliiides.exe\n\\\\121[.]166[.]55[.]120\\file\\lint.inf\n\\\\121[.]166[.]55[.]120\\file\\head.gif\n\\\\121[.]166[.]55[.]12\\file\\head.gif\n\\\\192[.]168[.]10[.]10\\shared\\msf\\XrHI.inf\n\\\\192[.]168[.]10[.]10\\shared\\msf\\XrHI.inf\n\\\\192[.]168[.]10[.]10\\shared\\msf\\TBSZ.gif\n\\\\192[.]168[.]1[.]122\\Support\\xxx.gif\n\\\\192[.]168[.]1[.]11\\share\\xxx.inf\n\\\\192[.]168[.]1[.]11\\share\\xxx.gif\n\\\\192[.]168[.]187[.]147\\xpl\\calc.gif\n\\\\192[.]168[.]15[.]4\\rdb\\blah.gif\n\\\\192[.]168[.]58[.]95\\rdb\\test.gif\n\\\\192[.]168[.]58[.]95\\rdb\\test.inf\n\\\\192[.]157[.]198[.]1\\public\\word.gif\n\\\\118[.]99[.]13[.]236\\docs\\partyhis.gif\n\\\\37[.]59[.]5[.]18\\11\\test.gif\n\\\\109[.]163[.]233[.]151\\public\\aaaa.gif\n\\\\109[.]163[.]233[.]151\\public\\aaaa.inf\n\\\\94[.]185[.]85[.]122\\public\\slide1.inf (This is from the sample mentioned before)\n\\\\94[.]185[.]85[.]122\\public\\slide1.gif (This is from the sample mentioned before)\n\\\\94[.]185[.]85[.]122\\public\\default.txt (This is the sample attacking SCADA Systems)\nFirst patch and second attack\nIn this blog post   we analyzed how the attacker can control the OLE Verb to execute the file once\nthe PPSX is run. However, another interesting part of the attack is how the attacker control the file\ntype to bypass the Mark on the Web (MOTW) and avoid the alert message in Windows showing\nthe file as untrusted.  The user can control the file type using the CLSID in the OLE compound\ndocument.  The said property is under /Root Entry of the embedded object. The following image\nshows one example. In this case, the embedded type is 0x22602.\nFigure 3. OLE RootEntry property CLSID. The first value is the embedded type(0x22602).\nWhen package.dll  is processing embedded files, the actual operation or extraction of the file\ndepends on the file type. There are several type of files. The following image shows a big picture\non how this works.\nFigure 4. Call paths inside package.dll.\nThe attack for CVE-2014-4114 used 0x22602  as file type. This allows the attacker to bypass the\nMOTW protection . The OLE infrastructure will call CPackage::Load  for each embedded file\nincluded in the PPSX file. This method calls ReadClassStg  to get the embedded file type, which is\n0x22602  in both cases. This type is MPlayer. Next, CPackage::Load  will call LoadMMSStorage .\nThe method LoadMMSStorage  calls OLE2MPlayerReadFromStream  or\nOLE1SoundReadFromStream  depending on the OLE file type returned by ReadClassStg,  which is\nMPlayer in this case.\nThe problem is that methods call to CopyFileW  or CopyStreamToFile  both will result in creating the\ntemporary file without MOTW. This is because the first patch from Microsoft changed the\n“XXReadFromStream” methods to call MarkFileUnsave . After the first patch the protection looks\nlike the following screenshot:\nFigure 5. Protection using MOTW after patch.\nNote that the automatic execution using specific OLE Verb was not patched. The patch only added\nMOTW protection for these methods.\nFor the attack related to CVE-2014-6352, the protection MOTW is not bypassed, as seen in the\nimage before, but the execution will take place showing the following message to the user:\nFigure 6. . Pop-up message alerting the user when the file is protected with MOTW.\nThe MOTW protection will create one NTFS stream to the created file that Windows will use to\ncheck to launch the warning message. The created NTFS stream is seen in the following image:\nFigure 7. NTFS stream of a file with MOTW activated.\nConclusion\nThe attack technique for Command Injection in the OLE Infrastructure has been around since at\nleast October 2013. If the attack happens in a system where the patch MS14-060 has been\napplied, the user will see the warning message shown in Figure 6.\nTrend Micro secures users from this threat via detecting the exploit and malware payload via the\nSmart Protection Network.  Trend Micro Deep Security and Office Scan with the Intrusion Defense\nFirewall (IDF) plugin protect user systems from threats that may leverage this vulnerability via the\nfollowing DPI rules:\n1006290 – Microsoft Windows OLE Remote Code Execution Vulnerability (CVE-2014-4114)\n1006291  Microsoft Windows OLE Remote Code Execution Vulnerability (CVE-2014-4114) – 1\nUsers are strongly advised to patch their systems once Microsoft releases their security update for\nthis. In addition, it is recommended for users and employees not to open PowerPoint files from\nunknown sources as this may possibly lead to a series of malware infection.\nWith additional insights from Pawan Kinger\nLearn how to protect Enterprises, Small Businesses, and Home Users from ransomware:\nENTERPRISE SMALL BUSINESS HOME\n\n» » »\nHome Categories\nSearch:\n "
}