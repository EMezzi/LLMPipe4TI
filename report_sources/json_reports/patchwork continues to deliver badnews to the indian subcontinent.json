{
    "title": "patchwork continues to deliver badnews to the indian subcontinent",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nPatchwork Continues to Deliver BADNEWS to\nthe Indian Subcontinent\n26,570\npeople reacted\n1\n8 min. read\nThis post is also available in: 日本語  (Japanese )\nSummary\nIn the past few months, Unit 42 has observed the Patchwork  group, alternatively known as Dropping Elephant\nand Monsoon , conducting campaigns against targets located in the Indian subcontinent. Patchwork threat actors\nutilized a pair of EPS exploits rolled into legitimate, albeit malicious, documents in order to propagate their\nupdated BADNEWS  payload. The use of weaponized legitimate documents is a longstanding operational standard\nof this group.\nThe malicious documents seen in recent activity refer to a number of topics, including recent military promotions\nwithin the Pakistan Army, information related to the Pakistan Atomic Energy Commission, as well as Pakistan’s\nMinistry of the Interior.\nThe BADNEWS malware payload, which these malicious documents ultimately deliver, has been updated since\nthe last public  report in December 2017. BADNEWS acts as a backdoor for the attackers, providing them with\nfull control over the victim machine. It has historically leveraged legitimate third‐party websites to host the\nmalware’s command and control (C2) information, acting as “dead drops”. After the C2 information has been\ncollected, BADNEWS leverages HTTP for communication with the remote servers.\nWe’ve observed modifications to how the malware obtains its (C2) server information, as well as modifications to\nthe C2 communication. These changes to BADNEWS, as well as the use of recent EPS‐based exploits,\ndemonstrate that the group are actively updating their toolsets in efforts to stay ahead of the security community.\nIn this posting, we detail our findings and document these changes.\n \nDelivery\nThe malicious documents that Unit 42 examined contained legitimate decoy lures as well as malicious embedded\nEPS files targeting the CVE‐2015‐2545  and CVE‐2017‐0261  vulnerabilities. These vulnerabilities are well covered\nin previous public works, which can be found from PWC  and FireEye . Older documents used by Patchwork\nfocused on the CVE‐2017‐0261 vulnerability, however in late January 2018 when, paradoxically, newer\ndocuments abandoned this vulnerability to attack the older CVE‐2015‐2545 vulnerability.\nThe lures are primarily documents of interest to Pakistani nuclear organizations and the Pakistani military as can\nbe seen in the images below:\nFigure 1 Lure extracted from a67220bcf289af6a99a9760c05d197d09502c2119f62762f78523aa7cbc96ef1\nFigure 2 Lure extracted from 07d5509988b1aa6f8d5203bc4b75e6d7be6acf5055831cc961a51d3e921f96bd\nFigure 3 Lure extracted from b8abf94017b159f8c1f0746dca24b4eeaf7e27d2ffa83ca053a87deb7560a571\nFigure 4 Lure extracted from d486ed118a425d902044fb7a84267e92b49169c24051ee9de41327ee5e6ac7c2 and\nfd8394b2ff9cd00380dc2b5a870e15183f1dc3bd82ca6ee58f055b44074c7fd4\n \nThe payload from each of the malicious documents is an updated version of the BADNEWS malware family.\nWhen the shellcode embedded within the malicious EPS is executed, the following three files are dropped:\n%PROGRAMDATA%\\Microsoft\\DeviceSync\\VMwareCplLauncher.exe\n%PROGRAMDATA%\\Microsoft\\DeviceSync\\vmtools.dll\n%PROGRAMDATA%\\Microsoft\\DeviceSync\\MSBuild.exe\nIn the list of dropped files, VMwareCplLauncher.exe is a legitimate, signed VMware executable that serves to\nultimately deliver the BADNEWS payload. The vmtools.dll file is a modified DLL that both ensures persistence\nand loads MSBuild.exe, which is the BADNEWS malware renamed to spoof a legitimate Microsoft Visual Studio\ntool.\nAfter the files are dropped, the VMwareCplLauncher.exe executable is run, which in turn loads the vmtools.dll\nDLL file. This DLL file creates a scheduled task named BaiduUpdateTask1, which attempts to run the malicious,\nspoofed MSBuild.exe every subsequent minute.\nThe technique of having a signed, legitimate, executable load a malicious library is commonly referred to as side‐\nloading , and has been witnessed in a number of campaigns and malware families in the past.\nThe flow of execution from the time the victim opens the malicious Microsoft Word document, to the execution\nof BADNEWS, may be seen below:\nFigure 5 Side‐loading technique employed to deliver BADNEWS\n \nThe following image demonstrates the scheduled task created by the modified vmtools.dll to ensure BADNEWS\nruns and remains running on the victim machine.\nFigure 6 Scheduled task created to load BADNEWS\n \nBADNEWS\nMuch of BADNEWS has remained consistent from when it was originally discussed by Forcepoint  in August\n2016. Additionally, recent analysis by Trend Micro  notes some minor changes during 2017. To briefly recap, the\nBADNEWS malware family acts as a backdoor, with communication occurring over HTTP. A number of\ncommands are provided to the attackers, including the ability to download and execute additional information,\nupload documents of interest, and take screenshots of the desktop.\nThe malware collects C2 information when it is originally executed via “ Dead Drop Resolvers ”. Dead drop\nresolvers have been used by multiple threat actor groups using various malware families and those behind\nPatchwork are well versed with this tactic. This tactic uses public web services to host content that contains\nencoded commands that are decoded by the malware.\nFor the remainder of the analysis in this research blog, we are discussing the following file:\nSHA256 290ac98de80154705794e96d0c6d657c948b7dff7abf25ea817585e4c923adb2\nMD5 79ad2084b057847ce2ec2e48fda64073\nCompile Date 2017‐12‐22 11:54:03 UTC\nOne of the first modifications we witnessed in this new variant of BADNEWS is a new mutex that is created to\nensure a single instance of BADNEWS is running at a given moment. This malware family used the new mutex\n‘com_mycompany_apps_appname_new’.\nThis variant of BADNEWS uses different filenames compared to previous versions. The following filenames are\nused by BADNEWS throughout its execution. All of these files reside in the victim’s %TEMP% directory:\nFilename Description\n9PT568.dat Contains victim unique identifier\nTPX498.dat Keystroke logs\nedg499.dat List of interesting files\nTPX499.dat Temporarily holds screenshot when given command by C2\nup Temporarily contains downloaded file to be executed when given command by C2\n \nOther changes we noticed in this variant include how the malware obfuscates C2 information stored via dead\ndrop resolvers. Previous variants of BADNEWS looked for data between ‘{{‘ and ‘}}’, and used a simple cipher to\ndecode this data. This new variant now looks for data between ‘[[‘ and ‘]]’ in a number of hardcoded URLs. This\ncan be seen in the following images taken from hxxp:// feeds.rapidfeeds[.]com/88604/, which is one of the dead\ndrop resolvers we encountered in this sample:\nFigure 7 Dead drop resolver used by BADNEWS\n \nIn order to decrypt this data, the authors have included additional steps from previous versions. To decode this\ninformation, BADNEWS takes the following steps:\n1. Base64‐decode the string\n2. Perform the decoding cipher used in previous versions\n3. Base64‐decode the result\n4. Decrypt the result using the Blowfish algorithm and a static key\nA script, which is included in the Appendix, will decrypt data from these dead drop resolvers. In the example\nshown above, we are presented with a result of 185.203.118[.]115 after all four steps are taken.\nBADNEWS performs many of the expected functions associated with previous versions including keylogging and\nidentifying files of interest. Unlike a previously reported variant, this version of BADNEWS no longer looks at USB\ndrives for interesting files. Instead, it looks at fixed drives only. It continues to seek out files with the following\nextensions:\n.xls\n.xlsx\n.doc\n.docx\n.ppt\n.pptx\n.pdf\nIn order to prepare for C2 communication, BADNEWS will aggregate various victim information, which is\nappended to two strings. These strings have the following format:\nAn example of the first string may be seen below:\nIt should be noted that the variables used for this string are different from previous versions. For example, in the\nprevious variant of BADNEWS, the victim’s unique identifier was stored under a variable named ‘uid’, the\nusername was stored in a variable named ‘u’, etc. Additionally, the hardcoded version string of ‘1.0’ is different\nfrom previous samples.\nC2 communication is also updated from prior versions, with the following commands now supported by\nBADNEWS:\nCommand Description\n0 Kill BADNEWS.\n4 Upload edg499.dat, which includes the list of interesting files. Spawn a new instance of BADNEWS after.\n5 Upload the file specified by the C2.\n8 Upload the TPX498.dat file, which contains the list of collected keystrokes.\n13 Copy file to adbFle.tmp, and upload it to the C2.\n23 Take screenshot, temporarily store it as TPX499.dat, and upload it to the C2.\n33 Download specified file to %TEMP%\\up and execute it in a new process\n \nDuring C2 communications, BADNEWS will communicate to the C2 previously identified via HTTP. The following\nhardcoded URI is used for normal communication with the C2 (note the additional forward slashes):\n//e3e7e71a0b28b5e96cc492e636722f73//4sVKAOvu3D//ABDYot0NxyG.php\nIn the event data is uploaded to the attacker, the following hardcoded URI is used (note the use of backslashes):\n\\e3e7e71a0b28b5e96cc492e636722f73\\4sVKAOvu3D\\UYEfgEpXAOE.php\n \nWhen initial pings are sent to the remote server, BADNEWS includes one of the two previously created strings\ncontaining the victim’s information. An example request in a sandboxed environment may be seen below:\nFigure 8 Example request made by BADNEWS\n \nTo decrypt the data provided in the POST request, a number of steps are required. First, the attackers include a\nseries of extra ‘=’ and ‘&’ characters within the data stream. Once these are removed, the data is decoded with\nbase64. Finally, the result is decrypted using AES‐128 and the following static key (hex‐encoded):\nDD1876848203D9E10ABCEEC07282FF37\n \nConclusion\nThe Patchwork group continues to plague victims located within the Indian subcontinent. Through the use of\nrelatively new exploits, as well as a constantly evolving malware toolset, they aim to compromise prominent\norganizations and individuals to further their goals. Recent activity has shown a number of lures related to the\nPakistan Army, the Pakistan Atomic Energy Commission, as well as the Ministry of the Interior.\nOne of the malware families tied to this group, BADNEWS, continues to be updated both in how it uses dead\ndrop resolvers, as well as how it communicates with a remote C2 server.\nPalo Alto Networks customers are protected against this threat in a number of ways:\nTraps blocks the exploit documents witnessed during this campaign\nWildFire accurately identifies the samples mentioned in this blog as malicious\nThe Patchwork  and BADNEWS  tags in AutoFocus may be used for continued monitoring and tracking of this\nthreat.\nAdditionally, the providers being used for dead drops have been notified.\n \nIndicators of Compromise\nMalicious Word Document SHA256 Hashes\na67220bcf289af6a99a9760c05d197d09502c2119f62762f78523aa7cbc96ef1\n07d5509988b1aa6f8d5203bc4b75e6d7be6acf5055831cc961a51d3e921f96bd\nfd8394b2ff9cd00380dc2b5a870e15183f1dc3bd82ca6ee58f055b44074c7fd4\nb8abf94017b159f8c1f0746dca24b4eeaf7e27d2ffa83ca053a87deb7560a571\nd486ed118a425d902044fb7a84267e92b49169c24051ee9de41327ee5e6ac7c2\n \nBADNEWS SHA256 Hashes\nab4f86a3144642346a3a40e500ace71badc06a962758522ca13801b40e9e7f4a\n290ac98de80154705794e96d0c6d657c948b7dff7abf25ea817585e4c923adb2\n \nC2 Servers\n185.203.118[.]115\n94.156.35[.]204\n \nDead Drop Resolvers\nhxxp://feed43[.]com/8166706728852850.xml\nhxxp://feed43[.]com/3210021137734622.xml\nhxxp://www.webrss[.]com/createfeed.php?feedid=49966\nhxxp://feeds.rapidfeeds[.]com/88604/\n \nScript to Decrypt Dead Drop Resolvers\n \nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Brandon Levene , Josh Grunzweig  and Brittany Barbehenn\nMarch 7, 2018 at 5:00 AM\nCategory: Unit 42\nTags: BADNEWS , Dropping Elephant , India , Monsoon , Pakistan , patchwork\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1uuid=[Victim ID]#un=[Username]#cn=[Hostname]#on=[OS Version]#lan=[IP Address]#nop=#ver=1.0\n1uuid=[Victim ID]#un=[Username]#\n1uuid=e29ac6c0 -7037-11de-816d-806e6f6e696351c5 #un=Josh Grunzweig#cn=WIN-LJLV2NKIOKP#on=mav6miv1#lan=192.168.217.141#nop=#ver=1.0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39import requests\nimport base64\nimport binascii\nimport re\nfrom Crypto.Cipher import Blowfish\nfrom struct import pack\nrol = lambda val, r_bits, max_bits : (val << r_bits%max_bits ) & (2**max_bits -1) | ((val & (2**max_bits -1)) >> (max_bits -(r_bits\nror = lambda val, r_bits, max_bits : ((val & (2**max_bits -1)) >> r_bits%max_bits ) | (val << (max_bits -(r_bits%max_bits )) & (2*\ndef unhexData (d):\n  if len(d) % 2:\n    d = d.zfill(len(d)+1)\n  return ord(binascii .unhexlify (d))\ndef decodeDecrypt (data):\n  decdata = ''\n  for x in range(len(data)):\n    x = x*2\n    if x < len(data):\n      c = unhexData (data[x])\n      add_num = unhexData (data[x+1])\n      c = c << 4\n      c = (c + add_num) & 0xff\n      c ^= 0x23\n      c = rol(c, 3, 8)\n      decdata += chr(c)\n  data2 = base64.b64decode (decdata)\n  key = binascii .unhexlify (\"F0E1D2C3B4A5968778695A4B3C2D1E0F0011223344556677\" )\n  cipher = Blowfish .new(key, Blowfish .MODE_ECB )\n  dec = cipher.decrypt(data2)\n  return dec\nurls = [\n  \"http://feeds.rapidfeeds.com/88604\"\n]\nfor d in urls:\n  r = requests .get(d)\n  body = r.text\n  r = re.search(\"\\[+\\s*([a-zA-Z0-9\\=]+)\\]+\" , body)\n  if r:\n    data = base64.b64decode (r.group(0))\n    print(\"[{}] Decrypted C2: {}\" .format(d, decodeDecrypt (data).split(\"\\x00\")[0]))\nSearch Unit 42\nSHARE \n "
}