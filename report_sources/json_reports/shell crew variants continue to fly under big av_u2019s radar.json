{
    "title": "shell crew variants continue to fly under big av_u2019s radar",
    "text": "Shell Crew Variants Continue\nto Fly Under Big AV’s Radar\nThreatVector  > Research & Intelligence\nShare It:\n by The Cylance Threat Research Team  | February 09, 2017\nBackground\nCylance SPEAR™ has identified a newer family of samples deployed by Shell Crew that has\nflown under AV’s radar for more than a year and a half. Simple programmatic techniques\ncontinue to be effective in evading signature-based detection.\nShell Crew, first named by RSA in this paper , has been incredibly proficient over time and\nbreached numerous high-value targets. The backdoor provided an alternative foothold in\nseveral observed instances for the group and employed a few tricks like using the Intel SSE\nextended instruction set to avoid emulation and obscure analysis.\nMost of the variants Cylance identified were 64-bit; however, a couple of earlier 32-bit\nvariants were created in May 2015.\nMalware Family\nCylance dubbed this family of malware StreamEx , based upon a common exported function\nused across all samples ‘stream’, combined with the dropper functionality to append ‘ex’ to the\nDLL file name.\nThe StreamEx family has the ability to access and modify the user’s file system, modify the\nregistry, create system services, enumerate process and system information, enumerate\nnetwork resources and drive types, scan for security tools such as firewall products and\nantivirus products, change browser security settings, and remotely execute commands. The\nmalware documented in this post was predominantly 64-bit, however, there are 32-bit\nversions of the malware in the wild.\nA few of the samples were picked up by AV heuristics within the last few months, but newer\nsamples are still coming back with zero detection rates.\nPersistence and Initial Execution Setup\nThe droppers for the backdoor use a semi-random name chosen from the existing service\nentries under the ‘netsvcs’ registry key on the machine. Once a suitable service name is\nidentified, the dropper appends ‘ex.dll’ to the file path associated with the service DLL. The\nregistry key, which contains available services that belong to the netsvcs group, is defined at:\n‘HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\nNT\\CurrentVersion\\Svchost\\netsvcs’\nPseudo code to create the service:\nFigure 1: Pseudo Code Used to Create the Service\nThis initial DLL with ‘ex’ appended to the end of the file name is then saved into the system\ndirectory. The malware is copied from the resource section of the dropper and set in the\nregistry to auto-start as the newly created service. The malware will temporarily be saved into\nthe ‘temporary path’ location on the computer (found using the ‘GetTempPathA’ API call) and\nthen moved into the final location under the system directory.\n“The GetTempPath  function checks for the existence of environment variables in the following\norder and uses the first path found:\n1. The path specified by the TMP environment variable.\n2. The path specified by the TEMP environment variable.\n3. The path specified by the USERPROFILE environment variable.\n4. The Windows directory.\nRef: https://msdn.microsoft.com/en-\nus/library/windows/desktop/aa364992%28v=vs.85%29.aspx\nThe dropper will find and locate the backdoor as either ‘IDR_PEACH_DLL’ or ‘PEACH_DLL’\nwithin the resource section of the dropper.\nDropper – Find resource pseudo code:\nFigure 2: Save RSC to Temp Path\nThe malware relies upon execution as a ServiceDLL to persist on a victim system and thus will\nutilize the ServiceMain export by default. During execution of ServiceMain, a new DLL is copied\ninto the system directory with a randomized name, starting with the ascii characters ‘bt’\nfollowed by 6 numeric digits and the extension ‘.dll’ and may display a falsified 'File Modified'\ndate.\nNext, rundll32 will be used to call the exported function ‘stream’ from the newly copied ‘bt’\nDLL. The name of the associated service will be added after ‘stream’ in the command line\nargument that calls the DLL. This control flow starts the primary operation of the DLL.\nString Obfuscation Techniques\nSome commands in the code are obfuscated by a simple technique that utilizes statically\nprogrammed fragments of strings when starting the ‘bt’ DLL. The code appends the strings in\nthe proper order and then utilizes them in accordance with the part of execution that is being\nset up. This technique is fairly common and unsophisticated, but it may possibly help prevent\nrudimentary analysis by making it harder to read the strings seen in the binary.\nAn example of this is shown where the code is setting up the command line syntax to start\nrundll32 with the ‘bt’ file name utilizing the stream export:\nFigure 3: Code Snippet Showing String Obfuscation\nUltimately, the code results prints this string (or something similar to it) for use by the\nmalware:\nC:\\Windows\\system32\\rundll32.exe\n“C:\\Windows\\system32\\bt123456.dll”,stream ServiceName.\nMalware Configuration and Operation\nThe malware used a simple one-byte xor against the byte 0x91 to encode its configuration\ndata. Once the configuration information is decoded in the normal execution flow, the malware\nwill attempt to contact the command and control (C&C) server(s) using an HTTP GET request.\nThe following python snippet can be used to find and decode the configuration block from\nStreamEx samples:\ndef ex_decode(buf):\n               offset = buf.find(\"&^%$#\")\n               configblock = buf[offset+5:offset+5+0x3D8]\n               out = ''\n               for byte in configblock:\n                              out += chr(ord(byte)^0x91)\n               return out\nFigure 4: Python Code Snippet to Find and Decode StreamEx Configuration Block\nInterestingly, some of the samples appeared to utilize a log file to record the malware’s\nnetwork operations. After the connection is made with the C&C server, the malware can send\nand receive data and accept input from the attackers, allowing them to take full advantage of\nthe backdoor’s functionality. The log file that the malware writes to disk is located here:\n“%TEMP%\\TT_2015.log”. The data in the log is displayed in the following format (this is where\nthe misspelled string ‘start send requset’ is seen on disk):\n[processID threadID] [year-month-day hour:minute:second]\nstart send requset\ntag:request\nThe log data can be seen in the screenshot of the log file below:\nFigure 5: Log Data\nPseudo code for the log file data:\nFigure 6: Pseudo Code for the Log File Data\nAnother simple spelling mistake was also present across all of the identified droppers: ‘error.\nOpenSCManager faild’. Once the malware successfully makes a connection to one of the\nstatically programmed domains, the attackers had the ability to instruct the malware to\nconduct various system operations to further their control over the victim’s environment.\nDistribution and Associated Malware\nCylance identified several legitimate compromised Korean websites that were used to\ndistribute StreamEx samples over the course of 2016. One of the most recent samples SPEAR\nfound was served from the website ‘www(dot)aceactor.co(dot)kr’ and contained a configuration\nblock dated October 16, 2016. A number of unique PlugX  samples as well as another custom\nRAT were also served from the same website; they commonly used simple easy-to-remember\nnames such as ‘a.exe’ or ‘32.exe’.\nAt the end of 2016, the group also took care to use private registration when reregistering\ndomains that were originally purchased from a bulk reseller.\nMitigation\nIf you use our endpoint protection product CylancePROTECT®,  you were already protected from\nthis attack. If you don't have CylancePROTECT, contact us  to learn how our AI-driven solution\ncan predict and prevent unknown and emerging threats.\nFigure 7: CylancePROTECT Console, Showing the Detection of Shell Crew Samples\nFile Hashes (SHA256):\nStreamEx 64-Bit Backdoors:\n04f69ebca26ee0ab2fc896f803102fdbb0700726074048755c55c891a9243423\n37a2ede8de56fe85b4baf4220046dd2923d66ea7d906a5c009751f9f630aec0b\n434df165b56c70ff5479ebd3f8d65c1585076c16a19e20bdee750c9f0119e836\n50712f13f0ed2cabc264ec62581857468b2670e3a4226d76369c9367648b9ff0\n5747de930d6f2dd456765aada5f31b4c2149388625399ae8d0c025cc8509880b\n82a7f8c488cf287908f8f80b458bf19410f16ee0df0d8f2eb9f923efc3e0a2fa\na20d81fcbdcfe6183eaaba489219c44942da3e5fc86ce383568b63b22e6981dc\nd26f914eb9f58f9efeba3ae5362cf605a371f881183da201a8528f9c9b65b5ad\ne5590c6eca821160d02c75025bf9ee30de418269471ae21bff422933fbb46720 \nStreamEx 32-bit Backdoors:\n369dc64903c52f052ebe547511977f5d677614855da31c416fe13d8eb8ed1015\n8269c8183fb5e50acf08dea65d8a3d99f406f7febd61dc361622f21b58570396\nbfe4da21398a2ac19b04174a7754acc1c2d1725dac7e0651544ff46df9f9005d\nfd0c9c28781de60ed70f32b9e138ab7d95201a5f08a4bc0230b24493597022d7\nStreamEx Droppers:\n0f1623511432bac0d8f2a87169952df0b341d90ea1e4218a851b8cdb2b691e2d\n60599a679efb167cc43746e5d58bb8f74b6fe57cb028950fde79bd9fd0e6b48b\n6c80e57f4957d17c80c0fc5e5809e72ac157a70339163579b7e2f3c0d631dd6b\n8171f3ca246c56d85bdac23ab09ffdaea09410165bf32ed72ef279d2ddaf745b\nDomains:\nwww (dot) aceactor (dot) co.kr -  Compromised website\nbackup.microsoftappstore(dot)com\ndataserver.cmonkey3(dot)com\ngoogle-helps(dot)com\nkpupdate.amz80(dot)com\nmail-help(dot)com\nmail-issue(dot)top\nmicrosoftupdating(dot)org\nmicrosoftwww(dot)com\nns1.ccccc(dot)work\nns1.superman0x58(dot)com\nns1.xssr(dot)org\nns2.ccccc.work\nns2.superman0x58(dot)com\nns2.xssr(dot)org\nqr1.3jd90dsj3df(dot)website\nr4.microsoftupdating(dot)org\nrouji.xssr(dot)org\nt2z0n9.microsoftappstore(dot)com\ntemp.mail-issue(dot)top\ntime-service(dot)org\nupdate.microsoftwww(dot)com\nupdatecz.mykorean(dot)net\nuriupdate.newsbs(dot)net\nwwgooglewww(dot)com\nwww.microsoftwww(dot)com\nwwwgooglewww(dot)com\nzy.xssr(dot)org\nSuspected:\nseo777.f3322(dot)net\nsexy.f3322(dot)org\nallmnz(dot)com\nincsteelkor(dot)com\nIP Addresses:\n103.214.143.44\n104.148.71.127\n106.185.52.7\n107.151.218.149\n107.161.80.22\n118.193.153.5\n119.57.196.30\n122.10.9.154\n158.69.34.129\n167.160.16.242\n173.231.49.141\n174.139.57.26\n174.139.57.27\n174.139.57.30\n211.58.38.100\n220.73.222.120\n220.73.222.86\n221.139.50.134\n31.210.102.210\n43.249.81.209\n43.249.81.210\n50.115.138.215\n88.208.228.56\n92.242.144.2\nPDB Filepath:\nD:\\pdb\\ht_d6.pdb\nYara Rule:\nrule StreamEx\n{\nstrings:\n$a =\n\"0r+8DQY97XGB5iZ4Vf3KsEt61HLoTOuIqJPp2AlncRCgSxUWyebhMdmzvFjNwka=\"\n$b = {34 ?? 88 04 11 48 63 C3 48 FF C1 48 3D D8 03 00 00}\n$bb = {81 86 ?? ?? 00 10 34 ?? 88 86 ?? ?? 00 10 46 81 FE D8\n03 00 00}\n$c = \"greendll\"\n$d = \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36\n(KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\" wide\n$f = {26 5E 25 24 23 91 91 91 91}\n$g = \"D:\\\\pdb\\\\ht_d6.pdb\" \ncondition:\n$a or $b or $bb or ($c and $d) or $f or $g\nResearch & IntelligenceShare It:\nThe Cylance Threat Research Team\nThe BlackBerry Cylance Threat Research team examines malware and\nsuspected malware to better identify its abilities, function and attack vectors.\nThreat Research is on the frontline of information security and often deeply examines\nmalicious software, which puts us in a unique position to discuss never-seen-before threats.\nAuthor's Bio\nGet the ThreatVector Newsletter\nEnter your email address Subscribe\n400 Spectrum Center Dr., Suite #900\nIrvine, CA 92618\n1-844-CYLANCE\n1-844-295-2623\n©2019 BlackBerry Limited.\nAll rights reserved\nBlog\nHome\nNews Bites\nVideos\nResources\nCylance News\nWebcasts\nPodcasts\nContributors\nCompany\nWho We Are\nResource Center\nCylance News\nPress Releases\nPrivacy Notice\nTerms of Service\nProducts\nCylancePROTECT\nCylanceOPTICS\nCylance ThreatZERO\nCylance Smart Antivirus\nServices\nConsulting Overview\nIndustry OverviewAbout The Author\n| Research & Intel Videos Webcasts Podcasts News Resources Cylance.com\n "
}