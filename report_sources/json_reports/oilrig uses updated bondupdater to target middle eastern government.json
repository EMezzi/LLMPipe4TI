{
    "title": "oilrig uses updated bondupdater to target middle eastern government",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nOilRig Uses Updated BONDUPDATER to Target\nMiddle Eastern Government\n23,860\npeople reacted\n1\n9 min. read\nThe OilRig group has been active since at least mid‐2016, and continues their attack campaigns throughout the\nMiddle East, targeting both governmental agencies and businesses on an almost routine basis. Often preferring\nhomegrown tools and malware, OilRig continually modifies their malware and tools to accomplish their objectives.\nIn August 2018, Unit 42 observed OilRig targeting a government organization using spear‐phishing emails to\ndeliver an updated version of a Trojan known as BONDUPDATER. BONDUPDATER is a PowerShell‐based Trojan\nfirst discovered by FireEye in mid‐November 2017 , when OilRig targeted a different Middle Eastern\ngovernmental organization.\nThe BONDUPDATER Trojan contains basic backdoor functionality, allowing threat actors to upload and download\nfiles, as well as the ability to execute commands. BONDUPDATER, like other OilRig tools, uses DNS tunneling to\ncommunicate with its C2 server. During the past month, Unit 42 observed several attacks against a Middle\nEastern government leveraging an updated version of the BONDUPDATER malware, which now includes the\nability to use TXT records within its DNS tunneling protocol for its C2 communications.\n \nA New Series of Attacks\nIn mid‐August, the Oilrig threat group sent what appeared to be a highly targeted phishing email to a high‐ranking\noffice in a Middle Eastern nation. The email had no subject and what initially drew our attention to this attack was\nthe content of the spear phishing email.\nFigure 1. Spear phishing email sent by the Oilrig threat group\nAttached to the email was a malicious document named “N56.15.doc” (SHA256:\n7cbad6b3f505a199d6766a86b41ed23786bbb99dab9cae6c18936afdc2512f00) which contained a macro that\nattempted to install a new version of the BONDUPDATER Trojan.\nFigure 2. Microsoft Word document with embedded macros and PowerShell\nUpdated BONDUPDATER\nThe spear‐phishing email had an attached Microsoft Word document that contained a macro responsible for\ninstalling a new variant of BONDUPDATER. The macro begins this installation process by creating two files on\nthe system at the following location:\nC:\\ProgramData\\WindowsAppPool\\AppPool.vbs (SHA256:\nc0018a2e36c7ef8aa15b81001a19c4127ad7cd21ae410c1f854e5dadfa98b322)\nC:\\ProgramData\\WindowsAppPool\\AppPool.ps1 (SHA256:\nd5c1822a36f2e7107d0d4c005c26978d00bcb34a587bd9ccf11ae7761ec73fb7)\n \nThe macro finishes by running the dropped VBScript “AppPool.vbs” file by running “wscript\nC:\\ProgramData\\WindowsAppPool\\AppPool.vbs”. When first executed, the “AppPool.vbs” file will create the\nfollowing scheduled task to execute every minute, which provides BONDUPDATER persistence and the ability to\ncontinually run on the system as the Trojan does not have a main loop to carry out its functionality:\n \ncmd.exe /C schtasks /create /F /sc minute /mo 1 /tn “\\WindowsAppPool\\AppPool” /tr\n“wscript /b “C:\\ProgramData\\WindowsAppPool\\AppPool.vbs””\n \nAfter creating the scheduled task, the VBScript will execute the “AppPool.ps1” script dropped by the macro using\nthe following command line:\nPowerShell.exe -exec bypass -file C:\\ProgramData\\WindowsAppPool\\AppPool.ps1\nSubsequent executions of “AppPool.vbs” will check for the existence of a file named “quid”, which, if present, will\nalso use the above PowerShell script to run “AppPool.ps1”. The PowerShell script creates the “quid” file upon its\nfirst execution to avoid creating multiple scheduled tasks.\nThe “AppPool.ps1” file is a PowerShell script that is a variant of the BONDUPDATER payload. BONDUPDATER,\nlike other OilRig payloads, uses DNS tunneling to communicate with its C2 server. This variant of the\nBONDUPDATER Trojan has a new lock file, which involves creating a lock file at the following location which will\nwrite the current PowerShell process identifier (PID) to this file:\nC:\\ProgramData\\WindowsAppPool\\lock\nThe purpose of this lock file is to only have one instance of the Trojan running at one time. However, it also uses\nthis lock file to determine how long the PowerShell process has been executing, as it checks the creation time of\nthe file lock against the current time to determine if the PowerShell process has been running for more than ten\nminutes. If it has, the script will stop the process based on the PID in the lock file and delete the lock file. Future\nexecutions of the PowerShell script will fully execute as the lock file will no longer exist on the system. This\nsuggests the threat actors may have experienced issues with this Trojan running for extended periods in the past,\nlikely related to the communication loops that we will discuss later.\nThis BONDUPDATER variant also creates the following file that it will use to store a unique identifier for the\nsystem, which is generated by obtaining a random number between 10 and 99 and appending the first 8\ncharacters of a generated GUID:\nC:\\ProgramData\\WindowsAppPool\\quid\nThe BONDUPDATER Trojan then creates several folders that it will use to store files it receives from the C2\nserver and files that it generates or gathers to send to the C2 server. The folder names are:\n C:\\ProgramData\\WindowsAppPool\\files\nC:\\ProgramData\\WindowsAppPool\\<unique ID from quid file>\\receivebox\nC:\\ProgramData\\WindowsAppPool\\<unique ID from quid file>\\sendbox\nC:\\ProgramData\\WindowsAppPool\\<unique ID from quid file>\\done\nEven though the script creates the “files” folder, it does not appear that the Trojan uses these folders within the\ncode. The Trojan uses the “receivebox” folder to store files obtained from the C2 server, while the “sendbox”\nfolder is used to store files that the Trojan will upload to the server. The Trojan uses the filenames of the file\nreceived from the C2 server stored in the “receivebox” folder to determine how to handle the file, which is\nexplained below.\n \nThe BONDUPDATER sample retains its original command handling and C2 communication functionality. This\nprocess involves communicating with the C2 server to receive a file and using a character in the filename as the\ncommand. The Trojan’s command handler checks the trailing character of the filename to process the file\ncontents, which can be seen in Table 1.\n \nTrailing\nCharacter/Co\nmmandPurpose Description\n0 Execute commandReads the contents of the file and runs them as a command with “cmd.exe”. The\noutput of the command is saved to a file whose name starts with “proc” and is\nstored in the “sendbox” folder, which the Trojan will send to the C2 server.\n1 Download fileReads the contents of the file for a path to a file to download. Copies the\nspecified file to a file in the “sendbox” folder for the Trojan to send to the C2\nserver.\nAny other\ncharacterUpload fileUsed to store a file on the system. The file is moved to the “done” folder, which\nstores the file for future use. The Trojan writes “200<>[path to stored file]” to a\nfile in the “sendbox” folder to notify the C2 that the file was downloaded\nsuccessfully.\nTable 1 Commands available in BONDUPDATER and their purpose\nAfter handling the command, BONDUPDATER will send files it saved in the “sendbox” folder to the C2 server,\nafter which it terminates and relies on the scheduled task to run again in the future.\nAs discussed above, the BONDUPDATER Trojan uses a DNS tunneling protocol to receive files from the C2\nserver for processing. This particular BONDUPDATER sample includes two different variations of the DNS\ntunneling protocol, one using DNS A records, and one using DNS TXT records to transmit data from the C2 to\nthe Trojan. The use of TXT records for C2 communications appears to be a new feature to the BONDUPDATER\nTrojan.\nThe DNS tunneling protocol uses carefully crafted subdomains sent to the authoritative name server of the C2\ndomain, which in this specific sample was the domain “withyourface[.]com”. The Trojan generates subdomains\ndifferently when it sends data to the C2 compared to when it is looking to receive data from the C2, regardless of\nwhich DNS tunneling protocol is used for communications. The format of the generated domains for both\nsending and receiving starts with the previously generated GUID created to uniquely identify the system.\nHowever, the Trojan inserts a part number value and an action type character into this GUID string at random\noffsets. The part number value is a three‐digit string that corresponds to the chunk of data the Trojan is\nattempting to transmit. The action type is a single character that notifies the C2 the type of communication the\nTrojan is carrying out. The two static characters “C” and “T” in the subdomain surround two digits, which help the\nC2 server find the part number and action type mixed in within the GUID string at random offsets.\n \nSending data format\n<GUID with part number and action character><sequence number><between 1 and 7\nrandom characters>C<index of part number><index of action>T.<data chunk>.\n<filename>.<c2 domain>\nReceiving data format\n<GUID with part number and action character><sequence number><between 1 and 7\nrandom characters>C<index of part number><index of action>T.<c2 domain>\n \nDepending on whether the C2 communications use DNS A or TXT records, different action types are used when\ngenerating the subdomains to notify the C2 what format to use to respond. Table 2 shows action types used in\noutbound requests and the purpose of the request.\n \nAction Type A/TXT Communications Description\nM A/TXT Initial beacon\n0 A Provide filename\n1 A Provide data\nW TXT Provide filename\nD TXT Provide data\nP TXTTXT method failed, notify C2 to switch\nto A records\nTable 2 Action types used within the DNS tunneling protocol and their purpose\nFor example, the Trojan will begin communicating with its C2 server by sending an initial beacon with the action\ncharacter “M”. This initial beacon will follow the receiving format, as seen in the following example:\nFigure 3. Example domain for the C2 beacon with its format explained\nThe offset to the part number and action type in the GUID above may not seem correct at first, as the action\ntype does not appear to be at offset 8 in the string. However, this is correct, as the action type is inserted at\noffset 8 before the part number was inserted at offset 3. Therefore, we believe the C2 server just adds the two\noffsets together to find the actual location of the action type in the string.\n \nOriginal Data Transfer using DNS Tunneling\nThe original data transfer process within BONDUPDATER looked for specific A records within answers to DNS\nqueries, shown in Table 3. The Trojan processed the A records in the C2 response to obtain a filename, which\nspecifically looks for an IPv4 address within the A record with “24.125” in the first two octets. The Trojan\nappends the remaining two octets of this A record to the string “rcvd” and uses this as the filename to save\nfuture data to in the “receivebox” folder. This IP address also instructs the Trojan to treat following DNS A\nrecords as data. The following DNS A records are split on the “.” and each of the first three octets are treated as\ndata, whereas the fourth octet is used as a counter to obtain the correct chunk of data. Lastly, the Trojan looks\nfor the A record “1.2.3” as a signal to write the provided data to the specified file, which is then subjected to the\npreviously mentioned file‐based command handler.\n \nIP Address Description\n24.125.\\d.\\d Sets the filename “rcvd\\d\\d” in the “receivebox” to store data for processing\n\\d.\\d.\\d.\\d First three \\d are treated as data and the fourth is used to keep track of the sequence\n1.2.3.\\dInstructs the Trojan to write the data to the file and begin processing it for commands.\n \nTable 3 IP Addresses and their meanings within the original data transfer process in BONDUPDATER\nNew Data Transfer using DNS Tunneling\nThis BONDUPDATER sample has a new method to obtain files from the C2 server using a series of DNS TXT\nqueries. This method follows a similar process as the original method but uses DNS TXT results to obtain a\nfilename and the data to write to the file. Once data is written to the file system, this method uses the same\ncommand handler as the original method to process the contents of the file based on the trailing character of the\nfilename, as seen in Table 1.\nThe C2 can initiate the new command handling functionality by responding to the initial beacon with a DNS A\nrecord of “99.250.250.199”. The script will enter a loop attempting to communicate with its C2 every 50\nmilliseconds, looking for a series of responses with specific characters that the script will use as instructions to\ndetermine how to handle the result of the TXT record, which can be seen in Table 4. The Trojan will split each\nTXT record from the C2 response on the character “>”, with the data to the left of the “>” character used as the\ninstruction and the data to the right as the data.\n \nInstruction Description\nN Idle. Set action type of next query to “W”\nSReceive data from C2. Decode data portion as base64. Sets the action type of future queries to the C2 to\n“D”.\nS000sUse data to as a portion of the filename to save data to. The data is appended to the string “rcvd”, which will\nbe saved in the “receivebox” folder. Sets the action type of future queries to the C2 to “D”.\nEWrite bytes provided by the “S” command to the file resulting from the “S000s” command. The breaks the\nloop for the script to process the downloaded file.\nC Cancel communications by exiting the loop.\nTable 4 Instructions within the new data transfer process in BONDUPDATER and their meanings\nWhile we have not seen the C2 use this TXT record‐based communications, we believe the process would\ninvolve the C2 providing a TXT record with the “S000s” instruction to set the filename to which data is saved.\nThe C2 would then provide a series of “S” instructions to provide data, followed by the “E” instruction to write\nthat data to the file, which would then be subjected to the command handler.\n \nConclusion\nAs expected, OilRig is continuing their onslaught of attacks well into 2018 with continued targeting in the Middle\nEast. Sometimes developing new tools, OilRig also often uses what has worked in the past, including developing\nvariants of previously used tools and malware. This reduces development time and capitalizes on previous\nversions of the tool and its success.\nOilrig is a highly diverse and very resourceful threat actor, employing a litany of methods and tools to compromise\nvictims, but Palo Alto Networks customers are protected from this OilRig attack and BONDUPDATER by:\nAutoFocus customers can track this Trojan with the Bondupdater_Docs  tag\nAll known BONDUPDATER document samples are marked with malicious verdicts in WildFire\nAll known BONDUPDATER document C2 domains have DNS signatures and are classified as Command and\nControl\n \nIndicators\nBONDUPDATER C2\nwithyourface[.]com\n \nBONDUPDATER Dropper Docs\n7cbad6b3f505a199d6766a86b41ed23786bbb99dab9cae6c18936afdc2512f00\nc0018a2e36c7ef8aa15b81001a19c4127ad7cd21ae410c1f854e5dadfa98b322\nd5c1822a36f2e7107d0d4c005c26978d00bcb34a587bd9ccf11ae7761ec73fb7\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Kyle Wilhoit  and Robert Falcone\nSeptember 12, 2018 at 4:00 PM\nCategory: Unit 42\nTags: BONDUPDATER , OilRig\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability\nSearch Unit 42\nSHARE \n "
}