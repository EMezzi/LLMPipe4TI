{
    "title": "new threat actor group darkhydrus targets middle east government",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nNew Threat Actor Group DarkHydrus Targets\nMiddle East Government\n18,700\npeople reacted\n2\n9 min. read\nThis post is also available in: 日本語  (Japanese )\nIn July 2018, Unit 42 analyzed a targeted attack using a novel file type against at least one government agency in\nthe Middle East. It was carried out by a previously unpublished threat group we track as DarkHydrus. Based on\nour telemetry, we were able to uncover additional artifacts leading us to believe this adversary group has been in\noperation with their current playbook since early 2016. This attack diverged from previous attacks we observed\nfrom this group as it involved spear‐phishing emails sent to targeted organizations with password protected RAR\narchive attachments that contained malicious Excel Web Query files (.iqy).\n.iqy files are simple text files containing a URL which are opened by default by Excel. Once opened, Excel will\nretrieve whatever object is at the URL inside the file. These files have most recently been found in use by\ncriminals to deliver commodity RATs such as Flawed Ammyy. In DarkHydrus’s case, the preferred payload\nretrieved in their previous attacks were exclusively open‐source legitimate tools which they abuse for malicious\npurposes, such as Meterpreter and Cobalt Strike. However, in this instance, it appears that this group used a\ncustom PowerShell based payload that we call RogueRobin.\nAttack Analysis\nThe actors sent the spear‐phishing emails between July 15 and 16. Each of the emails had a password protected\nRAR archive attached named credential.rar. The body of the message, seen in Figure 1 was written in Arabic and\nasks the recipient to review the document within the archive. The message also includes the password 123456\nthat is required to open the RAR archive. The credential.rar  archive contained a malicious .iqy file named\ncredential.iqy.\nFigure 1 Message body in delivery email\nGoogle Translate renders the Arabic message as:\nHi\nPlease review and review the attached file\nGratefully\nPassword: 123456\nPayload Analysis\nThe credential.iqy  is an .iqy file (SHA256:\ncc1966eff7bed11c1faada0bb0ed0c8715404abd936cfa816cef61863a0c1dd6 ) that contains nothing\nmore than the following text string:\nhxxp://micrrosoft[.]net/releasenotes.txt\nMicrosoft Excel natively opens .iqy files and will use the URL in the file to obtain remote data to include in the\nspreadsheets. By default, Excel does not allow the download of data from the remote server, but will ask for the\nuser’s consent by presenting the dialog box in Figure 2:\nFigure 2 Excel security notice for .iqy files\nBy enabling this data connection, the user allows Excel to obtain content from the URL in the .iqy file. The\ncontents within the releasenotes.txt  file (SHA256:\nbf925f340920111b385078f3785f486fff1096fd0847b993892ff1ee3580fa9d )  contains the following\nformula that Excel will save to the “A0” cell in the worksheet:\nThe formula uses a command prompt to run a PowerShell script that attempts to download and execute a\nsecond PowerShell script hosted at the URL hxxp://micrrosoft[.]net/winupdate.ps1 . By default, Excel\nwill not launch the command prompt application, but will do so with the user’s consent via the following dialog\nbox in Figure 3:\nFigure 3 Confirmation of access of remote data\nThe winupdate.ps1  script (SHA256:\n36862f654c3356d2177b5d35a410c78ff9803d1d7d20da0b82e3d69d640e856e ) is the main payload of\nthis attack that we call RogueRobin. Its developer used the open source Invoke‐Obfuscation  tool to obfuscate this\nPowerShell script, specifically using the COMPRESS technique offered by Invoke‐Obfuscation. The\ndecompressed PowerShell payload has some similarities to the PowerShell Empire agent, such as the use of a\njitter value and commands referred to by job ID, but we do not have conclusive evidence that the author of this\ntool used Empire as a basis for their tool.\nBefore carrying out any of its functionality the payload checks to see if it is executing in a sandbox. The payload\nuses WMI queries and checks running processes for evidence that the script may be executing within an analysis\nenvironment. The specific sandbox checks include:\nUsing WMI to check BIOS version (SMBIOSBIOSVERSION) for VBOX, bochs, qemu, virtualbox and vm.\nUsing WMI to check the BIOS manufacturer for XEN.\nUsing WMI to check if the total physical memory is less than 2900000000.\nUsing WMI to check if the number of CPU cores is less than or equal to 1.\nEnumerates running processes for “Wireshark” and “Sysinternals”.\nIf the payload determines it is not running in a sandbox, it will attempt to install itself to the system to persistently\nexecute. To install the payload, the script will create a file %APPDATA%\\OneDrive.bat  and save the following\nstring to it:\npowershell.exe -WindowStyle Hidden -exec bypass  -File “%APPDATA%\\OneDrive.ps1”\nThe script then writes a modified copy of itself to %APPDATA%\\OneDrive.ps1 , with the code that performs\nthis installation omitted. To persistently execute when the system starts, the script will create the following\nshortcut in the Windows startup folder, which will run the OneDrive.ps1  script each time the user logs in:\n$env:SystemDrive\\Users\\$env:USERNAME\\AppData\\Roaming\\Microsoft\\Windows\\Start\nMenu\\Programs\\Startup\\OneDrive.lnk\nThe payload itself communicates with its configured command and control (C2) servers using a custom DNS\ntunneling protocol. The domains configured within this payload are:\nAnyconnect[.]stream\nBigip[.]stream\nFortiweb[.]download\nKaspersky[.]science\nmicrotik[.]stream\nowa365[.]bid\nsymanteclive[.]download\nwindowsdefender[.]win\nThe DNS tunneling protocol can use multiple different DNS query types to interact with the C2 server. The\npayload has a function it calls early on that tests to see which DNS query types are able to successfully reach the\nC2 server.  It iterates through a list of types and the first DNS type to receive a response from the C2 server will\nbe used for all communications between the payload and the C2 server, which are in the following order (editor’s\nnote: AC is not a  DNS record type but is a mode where the trojan will perform a request for an A record requiring ac as a\nsubdomain) :\nA\nAAAA\nAC – (see note above)\nCNAME\nMX\nTXT\nSRV\nSOA\nThe payload uses the built‐in Windows nslookup application with specific parameters and specially crafted\nsubdomains to communicate with the C2. To establish communications with the C2, the payload will first get a\nsystem specific identifier issued by the C2 server. The initial DNS query sent by the payload to obtain the system\nspecific identifier uses the following structure, which includes the current process identifier (PID) as the\nsubdomain of the C2 domain:\n<current process id>.<c2 domain>\nThe C2 server will provide the system specific identifier within the answer portion of the DNS response. Table 1\nexplains how the payload obtains the system identifier from the C2 server’s answer depending on the query\ntype:\nDNS Type Description\nAUses the regular expression ‘(\\d+)\\‐.$Global:domain’ to get the decimal value from\nthe answer\nAAAAThe payload will split the IPv6 answer on “:” take the [0] and [1] digits treat them as\na hexadecimal value to obtain an integer.\nAC,CNAME,MX,TXT,SRV,SOAUses the regular expression ‘Address:\\s+(\\d+.\\d+.\\d+.\\d+)’ and uses the decimal\nvalue in the first octet of that IPv4 address\nTable 1 Breakdown of query types\nOnce the system identifier is obtained, the payload gathers system specific information and sends it to the C2\nserver. The information gathered is added to a string in the following structure:\n<IP address>|<computer name>|<domain>|<username>|<isAdmin flag>|<hasGarbage flag\nfrom config>|<hasStartup flag from config>|<“hybrid” mode flag from config>|\n<sleep interval from config>|<jitter value from config>\nThe payload will base64 encode this string and use its DNS tunneling protocol to transmit the data to the C2. The\ntunneling protocol transmits data by sending a series of DNS queries with the data within the subdomain of the\nC2 domain. The structure of each of these outbound DNS requests is as follows:\n<system ID>-<job ID>-<offset in data><more data flag>-<random length of base64\nencoded data between 30 and 42 characters>.<c2 domain>\nThe payload will look for different responses to these outbound queries depending on the type of DNS request\nthat the payload uses to communicate with the C2. The following shows the specific IP addresses or strings used\nby the C2 to transmit a success or cancel message depending on the type of DNS query used for C2\ncommunications:\nDNS Type Successful Cancel\nA,AC 1.1.1.\\d+ 1.2.9.\\d+\nAAAA 2a00:: 2200::\nCNAME,MX,TXT,SRV,SOA ok cancel\nAfter providing system specific information, the payload will Interact with the C2 server to obtain commands,\nwhich the payload refers to as jobs. The C2 will provide a string that the payload will use to determine the\ncommand to execute based on its command handler. To obtain strings to treat as commands, the payload will\nissue a series of DNS queries to resolve domains with the following structure:\n<system id>-<job ID>-<offset data specific to job>.<c2 domain>\nThe C2 server will provide responses to these queries that contain answers in IPv4 or IPv6 addresses depending\non the type of DNS query the payload uses to communicate with its C2 server. The payload will use a specific\nregular expressions dependent on the type of DNS query was used to obtain the command string, which can be\nseen in Table 2:\nDNS TYPE Regex Pattern\nA Address:\\s+(\\d+.\\d+.\\d+.\\d+)\nAC \\d+-\\d+-(\\d+)-([\\w\\d+/=]+)-\\d-.ac.$Global:domain\nAAAA Address:\\s+(([a-fA-F0-9]{0,4}:{1,4}[\\w|:]+){1,8})\nCNAME,MX,TXT,SRV,SOA (\\d+)-([\\w\\d/=+]{0,})\\-.$Global:domain\nTable 2 Types of responses provided by C2\nThese regular expressions are used to build strings that the payload will then subject to its command handler. We\nanalyzed the payload to determine the commands available, which provide a variety of remote administration\ncapabilities. The command handle looks for the following command strings in Table 3:\nCommand Description\n$fileDownload Uploads the contents of a specified file to C2\n$importModule Adds a specified PowerShell module to the current script\n$screenshotExecutes the contents of the command, which should be the string ‘$screenshot’. We are not sure if\nthis works, but the command name would suggest it is meant to take a screenshot\n$command Runs a PowerShell command and sends the output to the C2\nslp:\\d+ Sets the sleep interval between C2 beacons\n$testmodeIssues DNS queries of A, AAAA, AC, CNAME, MX, TXT, SRV and SOA types to the C2 servers\nattempting to determine which DNS query types were successful. This command will automatically\nset the DNS type to use for actual C2\n$showconfig Uploads the current configuration of the payload to the C2\nslpx:\\d+ Sets the sleep interval between outbound DNS requests\n$fileUpload Downloads contents from the C2 server and writes them to a specified file\nTable 3 Commands available to payload\nCampaign Analysis\nThe following domains are configured within the payload to be used as C2s. Thematically, each domain appeared\nto be attempting to spoof the legitimate domain of an existing technology provider with an emphasis on security\nvendors.\nAnyconnect[.]stream\nBigip[.]stream\nFortiweb[.]download\nKaspersky[.]science\nmicrotik[.]stream\nowa365[.]bid\nsymanteclive[.]download\nwindowsdefender[.]win\nThe listed C2 servers all resolved to IPs belonging to a service provider in China at 1.2.9.0/24 , which is the IP\naddress used by the C2 server to send a cancel communications message to the end system. These IPs provided\ninsufficient data for additional investigations. However, each of the listed domains used ns102.kaspersky[.]host\nand ns103.kaspersky[.]host as their name servers. Examination of ns102/ns103.kaspersky[.]host\nrevealed that the second level domain kaspersky[.]host  was illegitimate and not owned by the legitimate\nKaspersky Labs. Passive DNS resolution of kaspersky[.]host revealed two IPs of interest,\n107.175.150[.]113 and 94.130.88[.]9.\n94.130.88[.]9  showed passive DNS resolutions of two additional domains, 0utlook[.]bid  and\nhotmai1[.]com . It is unknown what these domains may have been used for but based on the similarity of\ndomain spoofing and sharing an IP, they are likely part of the adversary infrastructure. 107.175.150[.]113\nshowed one other domain resolution, <redacted> .0utl00k[.]net . We were able to link this specific domain\nas a C2 for another weaponized document (SHA256:\nd393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318 ) containing a\nPowerShell script very similar to the one found in this attack. Examining the second level domain of\n0utl00k[.]net  revealed another IP of interest, 195.154.41[.]150 . This IP contained two other domain\nresolutions following the vendor spoofing theme: allexa[.]net  and cisc0[.]net . Expanding upon\ncisc0[.]net , we discovered several weaponized documents and payloads using this domain as a C2, from mid\nto late 2017.\nOpen source intelligence provided by ClearSky Security  indicates the domain cisc0[.]net is possibly related to the\nadversary group known as Copy Kittens. While there are significant tactical overlaps such as similarity of\ntechniques used as well as victimology, we were unable to uncover significant evidence of relational overlaps.\nFurther information regarding the Copy Kittens adversary can be found in a paper titled Operation Wilted Tulip .\nOur own dataset provides a solid grouping of the DarkHydrus group, with significant overlaps in C2 infrastructure\nas well as similarities in weaponized binaries. C2 domains were also left online and reused over an extended\namount of time, such as the domain micrrosoft[.]net which was used in this attack in addition to two other\npayloads in January 2017 and July 2017.\nStudying the other samples, we have attributed to DarkHydrus, we are able to ascertain that this adversary has\nmainly leveraged weaponized Microsoft Office documents using tools available freely or from open source\nrepositories such as Meterpreter, Mimikatz, PowerShellEmpire, Veil, and CobaltStrike. The documents generally\ndo not contain malicious code and instead are weaponized to retrieve remote files containing malicious code on\nexecution. Due to the modular nature of the delivery document, available data for analysis for these attacks are\ndependent upon the operational nature of the C2 server at the time of execution.\nConclusion\nThe DarkHydrus group carried out an attack campaign on at least one government agency in the Middle East\nusing malicious .iqy files. The .iqy files take advantage of Excel’s willingness to download and include the contents\nfrom a remote server in a spreadsheet. DarkHydrus leveraged this obscure file format to run a command to\nultimately install a PowerShell scripts to gain backdoor access to the system. The PowerShell backdoor delivered\nin this current attack may have been custom developed by the threat group, however, it is possible that\nDarkHydrus pieced together this tool by using code from legitimate open source tools.\nPalo Alto Networks customers are protected by:\nThe micrrosoft[.]net  domain has had a malicious classification since March 3, 2017.\nAll C2 domains associated with this payload have a command and control classification.\nTraps provides endpoint protection, as it can block Excel from creating a command prompt process.\nAutoFocus customers may learn more from the DarkHydrus  tag\nIOC\nRelated SHA256 Hashes\nPayloads\ncec36e8ed65ac6f250c05b4a17c09f58bb80c19b73169aaf40fa15c8d3a9a6a1\nac7f9c536153780ccbec949f23b86f3d16e3105a5f14bb667df752aa815b0dc4\na547a02eb4fcb8f446da9b50838503de0d46f9bb2fd197c9ff63021243ea6d88\nd428d79f58425d831c2ee0a73f04749715e8c4dd30ccd81d92fe17485e6dfcda\ndd2625388bb2d2b02b6c10d4ee78f68a918b25ddd712a0862bcf92fa64284ffa\nb2571e3b4afbce56da8faa726b726eb465f2e5e5ed74cf3b172b5dd80460ad81\nc8b3d4b6acce6b6655e17255ef7a214651b7fc4e43f9964df24556343393a1a3\nce84b3c7986e6a48ca3171e703e7083e769e9ced1bbdd7edf8f3eab7ce20fd00\n99541ab28fc3328e25723607df4b0d9ea0a1af31b58e2da07eff9f15c4e6565c\nDelivery documents\nd393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318\n8063c3f134f4413b793dfc05f035b6480aa1636996e8ac4b94646292a5f87fde\n9eac37a5c675cd1750cd50b01fc05085ce0092a19ba97026292a60b11b45bf49\ncf9b2b40ac621aaf3241ff570bd7a238f6402102c29e4fbba3c5ce0cb8bc25f9\n0a3d5b2a8ed60e0d96d5f0d9d6e00cd6ab882863afbb951f10c395a3d991fbc1\n0b1d5e17443f0896c959d22fa15dadcae5ab083a35b3ff6cb48c7f967649ec82\n870c8b29be2b596cc2e33045ec48c80251e668abd736cef9c5449df16cf2d3b8\nff0b59f23630f4a854448b82f1f0cd66bc4b1124a3f49f0aecaca28309673cb0\n01fd7992aa71f4dca3a3766c438fbabe9aea78ca5812ab75b5371b48bd2625e2\n6dcb3492a45a08127f9816a1b9e195de2bb7e0731c4e7168392d0e8068adae7a\n47b8ad55b66cdcd78d972d6df5338b2e32c91af0a666531baf1621d2786e7870\n776c056096f0e73898723c0807269bc299ae3bbd8e9542f0a1cbba0fd3470cb4\ncf7863e023475d695c6f72c471d314b8b1781c6e9087ff4d70118b30205da5f0\ne88045931b9d99511ce71cc94f2e3d1159581e5eb26d4e05146749e1620dc678\n26e641a9149ff86759c317b57229f59ac48c5968846813cafb3c4e87c774e245\nb5cfaac25d87a6e8ebabc918facce491788863f120371c9d00009d78b6a8c350\nad3fd1571277c7ce93dfbd58cee3b3bec84eeaf6bb29a279ecb6a656028f771c\nRelated Domains\nmaccaffe[.]com\ncisc0[.]net\n0utl00k[.]net\nmsdncss[.]com\n0ffice[.]com\n0ffiice[.]com\nmicrrosoft[.]net\nanyconnect[.]stream\nbigip[.]stream\nfortiweb[.]download\nkaspersky[.]science\nmicrotik[.]stream\nowa365[.]bid\nsymanteclive[.]download\nwindowsdefender[.]win\nallexa[.]net\nkaspersky[.]host\nhotmai1[.]com\n0utlook[.]bid\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Robert Falcone , Bryan Lee  and Tom Lancaster\nJuly 27, 2018 at 4:15 PM\nCategory: Unit 42\nTags: DarkHydrus , RogueRobin\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability\nSearch Unit 42\nSHARE \n "
}