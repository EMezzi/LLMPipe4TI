{
    "title": "rpt-poison-ivy",
    "text": "SECURITY  \nREIMAGINED\nSPECIAL REPORT\nPOISON IVY:  \nAssessing Damage and \nExtracting Intelligence1  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceCONTENTS\nExecutive Summary  ............................................................................................................................................................................................................................................................................................................. 2\nIntroduction  ............................................................................................................................................................................................................................................................................................................................................. 3\nT echnical Analysis  ...................................................................................................................................................................................................................................................................................................................... 4\nExtracting Intelligence ........................................................................................................................................................................................................................................................................................... 14\nPoison Ivy Sample Analysis  ....................................................................................................................................................................................................................................................................... 14\nConclusion  .............................................................................................................................................................................................................................................................................................................................................. 32\nAbout FireEye  ................................................................................................................................................................................................................................................................................................................................ 322  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceEven as security professionals shrug off the \nthreat, the presence of a RAT may in itself indicate \na targeted attack known as an advanced \npersistent threat (APT). Unlike malware focused \non opportunistic cybercrime (typically conducted \nby botnets of comprised machines), RATs require \na live person on the other side of the attack.\nThis report spotlights Poison Ivy (PIVY), a RAT \nthat remains popular and effective a full eight \nyears after its release, despite its age and \nfamiliarity in IT security circles. In conjunction \nwith the study, FireEye® is releasing Calamine, a \nset of free tools to help organizations detect and \nexamine Poison Ivy infections on their systems.\nPoison Ivy has been used in several high-profile \nmalware campaigns, most notoriously, the 2011 \ncompromise of RSA SecurID data. The same year, \nPoison Ivy powered a coordinated attack dubbed \nNitro against chemical makers, government \nagencies, defense firms and human-rights groups.  Several ongoing cyber attack campaigns use \nPoison Ivy, including these:\n• admin@338—Active since 2008, this \ncampaign mostly targets the financial \nservices industry, though we have also seen \nactivity in the telecom, government, and \ndefense sectors.\n• th3bug—First detected in 2009, this \ncampaign targets a number of industries, \nprimarily higher education and healthcare.\n• menuPass—Also launched in 2009, this \ncampaign appears to originate from China, \ntargeting U.S. and overseas defense \ncontractors.\nUnderstanding why Poison Ivy remains one of the \nmost widely used RATs is easy. Controlled through \na familiar Windows interface, it offers a bevy of \nhandy features: key logging, screen capturing, \nvideo capturing, file transfers, password theft, \nsystem administration, traffic relaying, and more.Executive Summary  \nRemote access tools (RATs) may be the hacker’s equivalent of training wheels, as they are \noften regarded in IT security circles. But dismissing this common breed of malware could \nbe a costly mistake. Despite their reputation as a software toy for novice “script kiddies, ” \nRATs remain a linchpin of many sophisticated cyber attacks.\nRequiring little technical savvy to use, RATs offer unfettered access to compromised \nmachines. They are deceptively simple—attackers can point and click their way through \nthe target’s network to steal data and intellectual property. But they are often delivered \nas key component of coordinated attacks that use previously unknown (zero-day) \nsoftware flaws and clever social engineering.3  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceAnd Poison Ivy is so widely used that security \nprofessionals have a harder time tracing attacks \nthat use the RAT to any particular attacker.\nWe hope to eliminate some of that anonymity with \nthe FireEye Calamine package. The package, \nwhich enables organizations to easily monitor \nPoison Ivy’s behavior and communications, \nincludes these components:\n• PIVY callback-decoding tool (ChopShop \nmodule)\n• IVY memory-decoding tool (Immunity \nDebugger PyCommand script)\nChopShop1 is a new framework developed by the \nMITRE Corporation for network-based protocol \ndecoders that enable security professionals to \nunderstand actual commands issued by human \noperators controlling endpoints. The FireEye \nPIVY module for ChopShop decrypts Poison Ivy \nnetwork traffic.\nPyCommands, meanwhile, are Python scripts that \nautomate tasks for Immunity Debugger, a popular \ntool for reverse-engineering malware binaries.2 \nThe FireEye PyCommand script dumps \nconfiguration information from a running PIVY \nprocess on an infected endpoint, which can \nprovide additional telemetry about the threat \nactor behind the attack.\nFireEye is sharing the Calamine tools with the \nsecurity community at large under the BSD \n2-Clause License3 for both commercial and \nnon-commercial use worldwide. The tools are \navailable for download at the following locations:\n• https://github.com/fireeye/pycommands\n• https://github.com/fireeye/chopshopBy tracking the PIVY server activity, security \nprofessionals can find these telltale indicators:\n• The domains and IPs used for Command and \nControl (CnC)\n• The attacker’s PIVY process mutex\n• The attacker’s PIVY password\n• The launcher code used in the malware \ndroppers\n• A timeline of malware activity\nThis report explains how Calamine can connect \nthese and other facets of the attack. This evidence \nis especially useful when it is correlated with \nmultiple attacks that display the same identifying \nfeatures.\nCombining these nuts-and-bolts details with \nbig-picture intelligence can help profile threat \nattackers and enhance IT defenses.\nCalamine may not stop determined attackers that \nuse Poison Ivy. But it can make their criminal \nendeavors that much more difficult.\nIntroduction\nPoison Ivy is a remote access tool that is freely \navailable for download from its official web site at \nwww.poisonivy-rat.com. First released in 2005, \nthe tool has gone unchanged since 2008 with v \nersion 2.3.2. Poison Ivy includes features common \nto most Windows-based RATs, including key \nlogging, screen capturing, video capturing, file \ntransfers, system administration, password theft, \nand traffic relaying.\nPoison Ivy’s wide availability and easy-to-use \nfeatures make it a popular choice for all kinds of \n1 ChopShop is available for download at https://github.com/MITRECND/chopshop.\n2  Immunity Debugger is available at http://debugger.immunityinc.com/.\n3 For more information about the BSD 2-Clause License, see the Open Source Initiative’s template at http://opensource.org/licenses/BSD-2-Clause.4  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting Intelligencecriminals. But it is probably most notable for its \nrole in many high profile, targeted APT attacks.\nThese APTs pursue specific targets, using RATs to \nmaintain a persistent presence within the target’s \nnetwork. They move laterally and escalate system \nprivileges to extract sensitive information—\nwhenever the attacker wants to do so.4,5 Because \nsome RATs used in targeted attacks are widely \navailable, determining whether an attack is part of \na broader APT campaign can be difficult. Equally \nchallenging is identifying malicious traffic to \ndetermine the attacker’s post-compromise \nactivities and assess overall damage—these RATs \noften encrypt their network communications after \nthe initial exploit.\nIn 2011, three years after the most recent release \nof PIVY, attackers used the RAT to compromise \nsecurity firm RSA and steal data about its \nSecureID authentication system. That data was \nsubsequently used in other attacks.6 The RSA \nattack was linked to Chinese threat actors and \ndescribed at the time as extremely sophisticated. \nExploiting a zero-day vulnerability, the attack \ndelivered PIVY as the payload.7,8 It was not an \nisolated incident. The campaign appears to have s \ntarted in 2010, with many other companies \ncompromised.9\nPIVY also played a key role in the 2011 campaign \nknown as Nitro that targeted chemical makers, \ngovernment agencies, defense contractors, and \nhuman rights groups.10,11 Still active a year later, \nthe Nitro attackers used a zero-day vulnerability in Java to deploy PIVY in 2012.12 Just recently, \nPIVY was the payload of a zero-day exploit in \nInternet Explorer used in what is known as a \n“strategic web compromise” attack against \nvisitors to a U.S. government website and a \nvariety of others.13\nRATs require live, direct, real-time human \ninteraction by the APT attacker. This \ncharacteristic is distinctly different from \ncrimeware (malware focused on cybercrime), \nwhere the criminal can issue commands to their \nbotnet of compromised endpoints whenever they \nplease and set them to work on a common goal \nsuch as a spam relay. In contrast, RATs are much \nmore personal and may indicate that you are \ndealing with a dedicated threat actor that is \ninterested in your organization specifically.\nT echnical Analysis\nBuild and implantation\nThe Poison Ivy builder kit allows attackers to \ncustomize and build their own PIVY server, which \nis delivered as mobile code to a target that has \nbeen compromised, typically using social \nengineering. Once the server executes on a \ntarget’s endpoint, it connects to a PIVY client \ninstalled on the attacker’s machine, giving the \nattacker control of the target system.\nThe PIVY server code can executed on the target \nendpoint in a number of ways, depending on how \nthe attacker configured it. In the most common \nconfiguration, the PIVY server divides its code \ninto two parts:\n4 Joe Stewart. “The Sin Digoo Affair. ” February 2012.\n5  Nart Villeneuve. “Trends in T argeted Attacks. ” October 2011.\n6 eWeek. “Northrop Grumman, L -3 Communications Hacked via Cloned RSA SecurID T okens. ” June 2011.\n7 RSA FraudAction Research Labs. “Anatomy of an Attack. ” April 2011.\n8 CNET. “Attack on RSA used zero-day Flash exploit in Excel. ” April 2011.\n9 Brian Krebs. “Who Else Was Hit by the RSA Attackers?” October 2011.\n10 Eric Chien and Gavin O’Gorman. “The Nitro Attacks: Stealing Secrets from the Chemical Industry. ” October 2011.\n11 GovCERTUK Computer Emergency Response T eam. “T argeted Email Attack Alert. ” October 2011.\n12 Symantec. “Java Zero-Day Used in T argeted Attack Campaign. ” August 2012.\n13 Yichong Lin. “IE Zero Day is Used in DoL Watering Hole Attack. ” May 2013.5  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting Intelligence• Initialization and maintenance code\n• Networking code\nThe initialization and maintenance code is injected \ninto the already-running explorer.exe process.\nDepending on how the attacker configures it, the \nnetworking code launches a hidden Web browser \nprocess (the system’s default browser) and injects \nitself into that process. The networking code then \nremotely downloads (from the attacker’s PIVY \nclient as shellcode) the rest of the code and data it \nneeds for its features and functionality. The new \ncode executes on the target’s endpoint within the\ncontext of the target process. All of PIVY’s global \nvariables, configuration details, and function \npointers are stored in a C-style struct (data structure), which is also injected into the target \nprocesses in both the PIVY networking code and \ninitialization and maintenance code.\nThis distinct characteristic has the side effect of \nhaving every CALL instruction and global \nvariable address being referenced as an offset to \na register when looking at the code’s \ndisassembly. The code injected into explorer.exe \nis peculiar in that, unlike most malware-injected \ncode, this code is injected function by function—\neach with its own memory region, filling in the \nproper function pointers in its struct. If the \n“persistence” PIVY option is enabled, a watchdog \nthread is also injected into explorer.exe, which \nautomatically restarts the PIVY server process if \nit is unexpectedly terminated by the target’s \noperating system. PIVY’s keylogging function, if \nenabled, is also injected into explorer.exe.\nCommand and Control protocol\nFigure 1:  PIVY server \nconfiguration details \nbeing reported to the \nPIVY client6  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceFigure 2:  Data and functions \nreferenced as offsets to the struct \npointed to by the ESI register\nFigure 3:  Injected \nfunctions in separate \nmemory regions in \nexplorer.exe\nFigure 4:  The \npersistence thread in \nexplorer.exe can easily \nbe killed from Process \nExplorer\n7  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligencePoison Ivy features a complex, custom network \nprotocol over TCP . Most of this communication is \nencrypted using the Camellia cipher with a 256-bit \nkey.14 The key is derived from a password \nprovided by the attacker when building the PIVY \nserver. The password, “admin” by default, can be \nprovided in plain text or as hex-ASCII. The \npassword is zero-padded to 32 bytes (256 bits). \nThe key is validated at the beginning of the TCP \nsession with a challenge-response algorithm. The \nPIVY server sends 256 bytes of randomly \ngenerated data to the PIVY client which, in turn, \nencrypts the data using the key and sends it back \nto the PIVY server for validation. Much of the data \nsent throughout PIVY’s communications is also \ncompressed before encryption using Microsoft’s \nLZNT1 compression algorithm,15 which PIVY \nutilizes through the Windows RtlCompressBuffer \nAPI. The protocol operates by sending encrypted \ndata in chunks that are prepended with the \nfollowing encrypted 32-byte header:\nstruct PI_chunk_header {  \n int command_id;  \n int stream_id;  \n int padded_chunk_size;  \n int chunk_size;  \n int decompressed_chunk_size;  \n long total_stream_size;  \n int padding;  \n};The PI_chunk_header structure is arranged as \nfollows:  \ncommand_id—This member identifies which \nfeature of PIVY the chunked data is related to.\nstream_id—This member identifies which stream \nthis flow corresponds to. PIVY’s protocol supports \nsending multiple streams of data simultaneously. \npadded_chunk_size—Because Camellia is a \n16-byte block cipher, padding is utilized in the \nheaders and in the data chunks.\nchunk_size—Chunks are assembled into a stream \nof data that could be anything, such as a \ntransferred file, shellcode to execute, a screen \ncapture bitmap file, or raw data.  \ndecompressed_chunk_size—If this size is different \nfrom the chunk_size, the chunk is compressed \nusing LZNT1.  \ntotal_stream_size—This member specifies the \ntotal size of the data being sent for the related \ncommand_id.  \npadding—This member specifies the zero padding \n(up to 32 bytes).8  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceFigure 5:  PIVY initial \ncommunication \nprotocol\nFigure 6:  PIVY data \nchunks with headers\n9  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceCalamine ChopShop module\nThe FireEye Poison Ivy decoder checks the \nbeginning of each TCP session for possible PIVY \nchallengeresponse sequences. If found, the \nmodule will try to validate the response using one \nor more passwords supplied as arguments. If no \npassword is supplied, it tries the default “admin” \npassword.\nYou can supply a single password in either \nplain-text form or hex-ASCII form. For multiple \npasswords, you can specify a text file containing \nline-delimited passwords. If the decoder identifies \nvalid initial PIVY flows based on a supplied \npassword, then the decoder decodes the rest of \nthe relevant flow or flows.\nT o use the FireEye ChopShop module, you must \ninstall CamCrypt, a python wrapper for an \nopen-source implementation of the Camellia \nencryption library.16 Most of the features of PIVY \nare covered to some extent in this module.\nNote: If the PIVY flows do not correspond to any \nsupplied password, then decoding fails. \nFortunately, you can easily locate the custom PIVY \npassword if you have a compromised endpoint \ninfected with PIVY or a copy of the PIVY server \ncode, as explained in the section “Locating the \nPIVY Password with the Calamine PyCommand \nScript. ”\nCalamine ChopShop usage notes\nCalamine ChopShop offers the following features \nand options:\n• Files transferred to or from the PIVY server \nare saved to disk when the -f option is used.• Webcam, audio, keylog, and single screen \ncaptures are saved to disk when the -c option \nis used.\n• The audio captures are saved as raw data that \ncan easily be converted to .wav files u sing a \ntool such as SoX.17 The decoder prints the \nsample rate, channel, and bit data.\n• File and registry search details and results \nare displayed.\n• The details of any network relays instantiated \nare displayed.\n• Active port listings are displayed.\nThis module partially supports decoding listings of \nWindows files, the registry, services, processes, \ndevices, and installed application listings. During \nPIVY flow decoding, the module’s default output \nindicates that listing requests have occurred and, \nwhen applicable, highlights which key or directory \nis being listed.\nDirectory listings are printed, but without file \ndetails. When the module is invoked with the -1 \noption, all returned list data is saved to a file in raw \nfor m, just as it is seen by the PIVY client: a mixtur \ne of strings and binary data describing those \nstrings. If you are interested in the details of what \nwas listed, running the strings tool on raw file \ndumps is useful.\nIf you encounter an unrecognized command or \nwant to extend the functionality of this decoder, \nthe -d option is useful. It prints hex dumps of all \nthe headers and assembled streams in both \ndirections, helping to analyze and build additional \nparsing functionality.\n16   CamCrypt is available at https://code.google.com/p/camcrypt/.\n17  SoX is available at http://sox.sourceforge.net/.10  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceLocating the PIVY password with the calamine \nPyCommand script\nMany attackers leave the default “admin” \npassword unchanged. In this case, you can start \nusing this decoder immediately. Often, however, \nthe attacker opts for better security by creating a \nunique password. But if you have access to the \nPIVY-infected endpoint or to the PIVY server \nexecutable, retrieving the password is easy. You \ncan retrieve the password a number of ways, \ndepending on your circumstance and preferences.\nIf you prefer working with memory dumps, digital \nforensics expert Andreas Schuster has released a \nwonderful Volatility plugin for PIVY.18 Volatility \ndumps most of PIVY’s useful configuration data, \nincluding the password, as shown at the Volatility \nproject page (http://code.google.com/p/volatility/\nsource/browse/trunk/contrib/plugins/malware/\npoisonivy.py?r=2833).\nIf you have a malware-analysis environment setup, \nthe Calamine PyCommand19 script for Immunity \nDebugger is quick and simple.18 The Volatility \nplugin is available at https://www.volatilesystems.\ncom/default/volatility.19 Corelan T eam. “Starting to \nwrite Immunity Debugger PyCommands : my \ncheatsheet. ” January 2010.\nFollow these steps to use the PyCommand (these \nsteps may vary in some situations):\n1. Attach Immunity Debugger to the process PIVY \ninjects into (or to the PIVY process itself if PIVY \ndoes not inject).2. Set breakpoints on the send and connect \nfunctions.\n3. Continue execution.\n4. Wait for the execution to break.\n5. Execute until return and step out of the \nfunction.\n6. Run the PyCommand.\n7. Check the logs for the configuration details.\nDamage assessment\nT o effectively assess the damage sustained in an \nattack, you must reconstruct the attacker’s \nactivities. Depending upon the attacker’s cleanup \nefforts, fully reconstructing their activities from \nhost forensics alone may not be possible. But if \nPIVY network activity is collected, the Calamine \nChopShop module can help uncover this \ninformation.\nIn the following example, we set up a test \nenvironment and executed commands typically \nrun by attackers after they compromise a system \nwith PIVY and prepare to move laterally. Then \n18  The Volatility plugin is available at https://www.volatilesystems.com/default/volatility.  \n19  Corelan T eam. “Starting to write Immunity Debugger PyCommands : my cheatsheet. ” January 2010.11  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting Intelligence\nDefender’s View  Attacker’s View\nStarting ChopShop  \nInitializing Modules ...  \n Initializing module ‘poisonivy_23x’  \nTransferred files will be saved..  \nScreen/Cam/Audio/Key captures will be saved..\nRunning Modules ...  \n[2013-07-03 06:46:29 PDT] Poison Ivy \nVersion:2.32  \n[2013-07-03 06:46:30 PDT]*** Host Information***  \nPI profile ID: mal  \nIP address: 192.168.0.12  \nHostname: BLUE  \nWindows User: admin  \nWindows Version: Windows XP  \nWindows Build: 2600  \nService Pack: Service Pack 3\n[2013-07-03 06:46:36 PDT] *** Shell Session ***\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\>\n[2013-07-03 06:46:42 PDT] *** Shell Session ***\nipconfig\n[2013-07-03 06:46:43 PDT] *** Shell Session ***\nWindows IP Configuration\nConnection-specific DNS Suffix . :\n IP Address. . . . . . . . . . . . : 192.168.0.15\n Subnet Mask . . . . . . . . . . . : 255.255.255.0\n Default Gateway . . . . . . . . . : 192.168.0.1\nC:\\>12  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceDefender’s View  Attacker’s View\n[2013-07-03 06:47:23 PDT] inbound file\nC:\\gsecdump.exe\n[2013-07-03 06:47:46 PDT] saved PI-\nextractedinbound-\nfile-1-gsecdump.exe..\n[2013-07-03 06:47:46 PDT] *** Shell Session ***\ngsecdump.exe -a > hash.txt\n0043B820\ninfo: you must run as LocalSystem to dump LSA\nsecrets\n[2013-07-03 06:47:46 PDT] *** Shell Session ***\nC:\\>\n[2013-07-03 06:47:54 PDT] *** Directory Listing\nSent ***\nAUTOEXEC.BAT\nboot.ini\nCONFIG.SYS\ngsecdump.exe\nhash.txt\nIO.SYS\nMSDOS.SYS\nNTDETECT.COM\nntldr\npagefile.sys\n[2013-07-03 06:48:02 PDT] outbound file\nC:\\hash.txt\n[2013-07-03 06:48:02 PDT] saved PI-extractedoutbound-\nfile-2-hash.txt..\n13  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceDefender’s View  Attacker’s View\n[2013-07-03 06:48:57 PDT] *** Screen Capture Sent\n***\nPI-extracted-file-3-screenshot.bmp saved..\n[2013-07-03 06:49:03 PDT] *** Remote Desktop\nSession ***\n[2013-07-03 06:49:03 PDT] *** Remote Desktop\nSession ***\nShutting Down Modules ...\nShutting Down poisonivy_23x\nModule Shutdown Complete ...\nChopShop Complete\nFigure 7:  Example PIVY commands an views \n(defender, left; attacker, right)\nusing our Calamine ChopShop module, we \nreconstructed what operations occurred.\nAfter the initial compromise, the “attackers” see \nthat they have a new target endpoint and do the \nfollowing:\n• Execute some basic commands such as \nipconfig to collect the network information of \nthe endpoint• Upload the password-dumping tool \ngsecdump (available at http://www.truesec.\nse/sakerhet/verktyg/saakerhet/gsecdump_\nv2.0b5)\n• Dump the password hashes on the endpoint \nto a file\n• Download a file containing the password \nhashes off the endpoint (to crack the target’s \npasswords offline)\n• T ake a screenshot of the target’s desktop14  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceExtracting Intelligence\nAPT activity is best described as a campaign—a \nseries of attacks over time. Each individual attack \nwithin a campaign can be divided into the \nfollowing phases:20,21,22\n• Reconnaissance\n• Exploitation\n• CnC\n• Lateral movement\n• Exfiltration (or other malicious actions on the \ntarget)\nEach of these phases provides opportunities to \nderive threat intelligence about the adversary. \nOver time, security professionals can acquire and \nanalyze evidence to determine whether the \nattacks constitute malware-based espionage.\nSuch an assessment requires understanding these \ncomponents of an attack:\n• Timing and targeting preferences\n• Exploits and malware\n• Network infrastructure\n• Scope of attackers’ activities within a \ncompromised network (including stolen data)\n• Characteristics of the target populationThis assessment demands more than just malware \nanalysis. It requires analyzing both the technical \nand contextual aspects of a breach and exploring \ncompeting hypotheses.23,24 These steps are \nimportant because investigators will always face \nvisibility gaps—limitations in knowing the \ngeographic and industry reach of attacks or details \nof malware activity in some phases of the attack.\nPoison Ivy Sample Analysis\nFor this analysis, we collected 194 Poison Ivy \nsamples used in targeted attacks between 2008 \nand 2013. We extracted 22 different passwords \nand 148 mutexes. We also mapped out the CnC \ninfrastructure, which comprised 147 domains and \n165 IP addresses.\nWe analyzed these samples to better understand \nthe tools, tactics, and procedures (TTPs) of the \nattackers, explore campaign connections among \nthem, and enable defenders to better secure their \nnetworks. In addition to clustering the samples \nbased on technical indicators, such as the \npasswords and CnC information extracted from \nthe samples, we also analyzed contextual \nindicators where possible, such as attackers’ \ntargeting preferences and lures used in social \nengineering.\n20 SANS Computer Forensics. “Security Intelligence: Defining APT Campaigns. ” June 2010.  \n21 SANS Computer Forensics. “Security Intelligence: Attacking the Cyber Kill Chain. ” October 2009.  \n22 Richard Bejtlich. “Incident Phases of Compromise. ” June 2009.  \n23 Richard Bejtlich. “Attribution Is Not Just Malware Analysis. ” January 2010.\n24 Jeffrey Carr. “Mandiant APT1 Report Has Critical Analytic Flaws. ” February 2013.15  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceEach PIVY server (the malware that the attacker \nsends to the target) can be configured to connect \nto multiple CnC servers using any TCP port. So \nseeing a PIVY sample that attempts to connect to \nmultiple CnC servers on different TCP ports is not \nunusual. But the most common ports used in \ntargeted attacks are those associated with Web \ntraffic—especially 443, the TCP port used for \nSSL -encrypted Web traffic.Port 443 is a significant choice for two reasons. \nFirst, perimeter defenses must allow outbound \ntraffic through this port so that users can access \nlegitimate SSL -encrypted websites. Second, \nbecause the traffic on port 443 is encrypted, \nPIVY’s encrypted traffic may bl end in with normal \nnetwork activity. (Many protocol-aware perimeter \ndefenses, however, can detect and flag PIVY \ntraffic).      \nTCP Port Used PIVY Sample Count\n443 157\n80 104\n8080 22\n8000 12\n1863 7\nPIVY Process Mutex PIVY Sample Count\n)!VoqA.I4 14\nK^DJA^#FE 4\nKEIVH^#$S 3\n%1Sjfhtd8 3\n2SF#@R@#! 3Table 1:  Common TCP ports \nused by PIVY variants in APT \nattacks\nTable 2:  Common process \nmutex seen in PIVY variants \nattributed to APT attacks16  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceThe attacker can set the PIVY process mutex \nname at build time.25 While some attacks use the \ndefault mutex of )!VoqA.I4, most create a custom \nmutex for each attack. Of the 147 mutexes in our \nsample set, 56 were designed for one-time use.\nIf attackers create a unique password at build time \nrather than using the PIVY default “admin” , that \ncustom password is the most unique indicator. \nWhile threat actors may change passwords used \nover time, we have found that they often use the \nsame one for significant periods. When combined \nwith CnC data, the passwords used by the actors \nprovide unique indicators that can be used to \ncluster related activity. \nClustering\nT o cluster the activity of specific APT campaigns \nacross our PIVY sample set, we first grouped the \nPIVY samples by common CnC infrastructure. \nUsing passive DNS, we clustered the domain \nnames used by the common IP address to which they resolved. Because attackers may park their \ndomains by pointing to IP addresses that they do \nnot necessarily control (and to account for other \npossible anomalies in passive DNS data), we \nlayered additional indicators extracted from the \nsamples, such as PIVY passwords, mutexes, \ncampaign “marks/codes, ”26 and launcher \ninformation.27 From our data set, we focused on \nthree separate APT campaigns and corresponding \nthreat actors identified by the PIVY password \nused in subsequent attacks:\n• admin@338\n• th3bug\n• menuPass\nEach of these campaigns is detailed in the \ncorresponding sections.\n25 A mutex is a Windows object used for inter-process synchronization. They are often used by malware to ensure only one instance of the malware is running  \n    on an infected system at a given time.\n26 A campaign mark/code is typically a string designated by a threat actor that is often included as part of the malware communication and/or embedded within \nthe malware binaries. It is used to identify targeted attack campaigns against a set number of targets (usually by industry), so the threat actor can keep \nattacks organized.\n27 Launchers are malware built specifically to load other malware (payload), often by decrypting the payload and injecting it into a host process on the target’s \nendpoint.PIVY  Password PIVY Sample Count\nadmin 38\nkeaidestone 35\nmenuPass 24\nsuzuki 14\nhappyyongzi 13Table 3:  Common PIVY passwords \nseen in PIVY variants attributed to \nAPT attacks17  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceT o triangulate the timing (when the sample was \nlikely used), we used the portable executable (PE) \ncompile time extracted from the PIVY samples and \nthe date each sample appeared first appeared in a \nmalwareanalysis services such as VirusT otal. Each \nof these APT campaigns has been active from \n2008 through 2013.\nCampaign 1: admin@338\nOur data set for the admin@338 threat actor \ncontains the following:• 21 Poison Ivy samples\n• 3 passwords\n• 43 CnC servers\nThe earliest admin@338 PIVY sample we have \ndates to December 27, 2009. But we believe that \nthis campaign was active as early as January 7, \n2008, using other PIVY passwords (key@123 and \ngwx@123). This ongoing campaign tends to target \nthe finance, economic, and trade policy but we see \nsignificant activity in the ISP/telco, government, \nand defense sectors as well.\nFigure 9:  Percent of admin@338 \nAPT group attacks by industry\n18  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceAttack vector\nThe preferred attack vector used by this campaign \nis spear-phishing emails. Using content that is \nrelevant to the target, these emails are designed \nto entice the target to open an attachment that \ncontains the malicious PIVY server code.\nThe content of the spear-phishing emails and the \ndecoy documents opened after exploitation tend \nto be in English—although the character set of the \nemail message body in Figure 10 is actually \nChinese (character set GB2312).28\nFigure 10:  Example spear-phishing \nemail launched by the admin@338 \nAPT group\n28 Wikipedia. “GB 2312. ” February 2013.19  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceWeaponization\nThis campaign has used weaponized Microsoft \nWord documents (CVE-2012-0158),29 Adobe \nAcrobat PDFs (CVE-2009-4324)30 and \nMicrosoft Help Files (.HLP) to drop PIVY on their \ntargets.\nThe decoy documents that are opened in \nexploitation typically contain content that is \ncontextually relevant to both the text of the \nspear-phishing email and to the interests of the \nintended target. The documents are legitimate—\nbut weaponized—documents in English.Clustering\nIn addition to the PIVY password admin@338, we \nclustered individual attacks by using passive DNS \ndata to look at the IP addresses the CnC servers \nhave resolved to over time. We found that \ncommon IP addresses among PIVY samples for \nadmin@338, key@123 and gwx@123.\n29 National Institute of Standards and T echnology. “Vulnerability Summary for CVE-2012-0158. ” April 2012.\n30 National Institute of Standards and T echnology. “Vulnerability Summary for CVE-2009-4324. ” December 2009.Figure 11:  GB2312 encoding in \nspear-phishing email launched by \nthe admin@338 APT group\nFigure 12: Contents of decoy \nattachments used by the \nadmin@338 APT group\n20  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceWe can link PIVY passwords key@123 with \nadmin@338 by observing the following \nconnections:\n• The key@123 sample, \n808e21d6efa2884811fbd0adf67fda78, \nconnects directly to 219.76.208.163.\n• Two CnC domain names from the \nadmin@338 sample \n8010cae3e8431bb11ed6dc9acabb93b7, \nwww.webserver.dynssl.com and www.\nwebserver.freetcp.com, resolved to that same \nIP address (219.76.208.163).\nWe can link PIVY passwords gwx@123 with \nadmin@338 by observing the following \nconnections:\n• The gwx@123 sample \n0323de551aa10ca6221368c4a73732e6 \nconnects to the CnC domain names microsofta.\nbyinter.net, microsoftb.byinter.net, microsoftc.\nbyinter. net, and microsofte.byinter.net. These \ndomain names resolved to 113.10.246.30 \n219.90.112.203, 202.65.220.64, 75.126.95.138, \n219.90.112.197, 202.65.222.45, and \n98.126.148.114.• The admin@338 sample \n8010cae3e8431bb11ed6dc9acabb93b7 \nconnects to the CnC domains www.\nwebserver.fartit.com, www.webserver.\nfreetcp.com, and www.webserver.dynssl.com.\n• www.webserver.fartit.com resolved to \n113.10.246.30, 219.90.112.203, \n202.65.220.64, and 75.126.95.138, which \noverlap with the gwx@123 IP addresses.\n• www.webserver.freetcp.com resolved to \n113.10.246.30, 219.90.112.203, \n202.65.220.64, 75.126.95.138, \n219.90.112.197, and 202.65.222.45, which \noverlap with the gwx@123 IP addresses.\n• www.webserver.dynssl.com resolved to \n113.10.246.30, 219.90.112.203, \n219.90.112.203, 75.126.95.138, \n219.90.112.197, and 202.65.222.45, which \noverlap with the gwx@123 IP addresses.\nThis data indicates a relationship among the \nthreat actors behind these attacks—in most cases, \nthey at least share a common CnC infrastructure.\nIn addition to historic DNS resolutions, PIVY \nprocess mutexes suggest a relationship between \nPIVY passwords gwx@123 and admin@338.\nAlthough the mutexes of gwx@123, wwwst@\nAdmin, and admin@338 samples were different, \nthe choice of characters in the mutex revealed a \nsimilar pattern.21  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceCampaign 2: th3bug\nOur data set for th3bug threat actor comprises \nthe following:\n• 14 Poison Ivy samples\n• 2 passwords\n• 9 CnC serversThe earliest th3bug PIVY sample we have is dated \nOctober 26, 2009. This ongoing campaign targets \na number of industries but appears to prefer \ntargets in higher education and the healthcare \nsectors.\nFigure 14:  Linkage \nof admin@338 PIVY \nsamples by password \nand mutex\nFigure 15: Percent of \nth3bug APT group \nattacks by industry\n22  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceAttack vector\nUnlike the other two campaigns described in this \nreport (admin@338 and menuPass), th3bug does \nnot appear to rely on spear phishing to distribute \nPIVY. Instead, attacks attributed to th3bug use a \nstrategic Web compromise to infect targets. This \napproach is more indiscriminate, which probably \naccounts for the more disparate range of targets.In the FireEye blog, we documented a recent \nth3bug strategic Web compromise.31\nIn the following example, the actor or actors \nbehind the th3bug campaign compromised \nmultiple websites that catered to the intended \ntargets. The attacker used injected JavaScript on \nthe compromised websites to redirect targets to \nan Internet Explorer exploit that dropped Stage 1 \nlauncher/downloader mobile code. This \ndownloader then retrieved and installed a PIVY \nRAT variant.\nFigure 16:  Example of \ninitial infection vector \nby th3bug APT group\n31 Thoufique Haq and Yasir Khalid. “Internet Explorer 8 Exploit Found in Watering Hole Campaign T argeting Chinese Dissidents. ” March 2013.23  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceWeaponization\nIn related campaigns, th3bug has used a number \nof different Java and Internet Explorer exploits, \nincluding (CVE-2013-0422),32 (CVE-2013-\n1347),33 and (CVE-2011-3544).34\nFigure 17:  Example of ROP exploit \ncode used by th3bug APT group\nFigure 18:  Cluster intel of the \nth3bug APT group\n32 National Institute of Standards and T echnology. “Vulnerability Summary for CVE-2013-0422. ” February 2013.\n33 National Institute of Standards and T echnology. “Vulnerability Summary for CVE-2013-0422. ” January 2013.\n34 National Institute of Standards and T echnology. “Vulnerability Summary for CVE-2011-3544. ” October 2011.24  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceThe default PIVY password of admin has been \nused by multiple, distinct threat actors—so clearly, \nwe cannot link all PIVY samples with the admin \npassword to th3bug. But evidence suggests that \nthe attackers originally used the default password \nbefore settling on th3bug. We can link at least one \nPIVY sample that uses the admin password to the \nth3bug campaign based on the following \nconnections:\n• The sample \n8002debc47e04d534b45f7bb7dfcab4d \nconnected to kr.iphone.qpoe.com with the \nPIVY password admin.\n• The domain kr.iphone.qpoe.com resolved to \n180.210.206.96 on January 12, 2012.\n• The domain nkr.iphone.qpoe.com also \nresolved to 180.210.206.96 on January 3, \n2012.\n• The domain nkr.iphone.qpoe.com also \nresolved to 101.78.151.179 on December \n23, 2011.• The domain e.ct.toh.info resolved to \n101.78.151.179 on June 12, 2012.\n• The sample \n55a3b2656ceac2ba6257b6e39f4a5b5a \nconnected to ct.toh.info domain with the \nPIVY password th3bug.\nWe found a smaller number of distinct PIVY \nsamples linked to th3bug than we did for the \nadmin@338 and menuPass campaigns. This \npaucity is likely a result of two factors.\nFirst, th3bug does not appear to stage a high \nvolume of attacks. Instead, it appears to run only a \nhandful of strategic Web compromise attacks \neach year. Second, th3bug stages its delivery of \nPIVY.\nSo to acquire the second-stage PIVY server \npayload, an attack must be observed in real time.\nFigure 19:  Partial \ncluster intel of the \nth3bug APT group \n(zoomed in)25  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceCampaign 3: menuPass\nOur data set for the menuPass threat actor \ncomprises the following:\n• 118 Poison Ivy samples\n• 8 passwords\n• 61 domains\n• 74 IP addressesThe earliest menuPass PIVY sample we have is \ndated December 14, 2009. This sample \n(b08694e14a9b966d8033b42b58ab727d) \nconnected to a control server at js001.3322.org \nwith a password xiaoxiaohuli (Chinese translation: \n“little little fox”). Based on what we have found, it \nappears that the threat actor behind menuPass \nprefers to target U.S. and foreign defense \ncontractors.\nFigure 20:  Percent of \nmenuPass APT group \nattacks by industry\n26  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceAttack vector\nThe menuPass campaign appears to favor spear \nphishing to deliver payloads to the intended \ntargets. The email shown in Figure 21 shows a \ntypical menuPass spear-phishing attempt.\nWhile the attackers behind menuPass have used \nother RATs in their campaign, it appears that they \nuse PIVY as their primary persistence mechanism.\nFigure 21: Example \nof spear-phishing \nemail launched by the \nmenuPass APT group\nFigure 22: Example \nof weaponized, \nnested EXEs, used by \nmenuPass APT groupWeaponization\nThe menuPass campaign has used weaponized \nMicrosoft Word documents (CVE-2010-3333)35 \nand ZIP files containing executable files to drop \nPIVY directly onto its targets. Figure 22 outlines \nseveral executables delivered in ZIP files attached \nto menuPass spear-phishing emails.\nFile Name Compile Time MD5\nStrategy_Meeting.exe 2012-06-11 04:41:31 8d6b6e023b4221bae8ed-\n37bb18407516\nBackground Consent Form.exe 2012-05-13 22:13:07 8d769c63427a8ce407d17946 \n702c7626\nDoha_Climate_Change_Conference-\nNovember_2012.exe2012-11-13 07:19:03 001b8f696b6576798517168cd \n0a0fb4427  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceClustering\nThe menuPass attackers favor using a launcher \nthat masquerades as a Microsoft Foundation \nClass Library application36 using the document/\nview architecture. This launcher includes a packed \ncopy of the PIVY server that is subsequently \nunpacked and executed in memory shortly after a \nuseless call to the FindFirstFile API. Out of the \n155 samples we collected f or menuPass, 81 of \nthem are MFC apps with a document class. Out of \nthese 81 MFC launchers, 64 use the CBricksDoc \nclass name. We also found these names:\n• CMy20130401Doc\n• CShellCodeDoc\n• CMy20130401Doc\n• CPiShellPutDo\n•  CCrocodileDoc\n• CMy20130401Doc\n• CStatePattern_GameDoc\n• CPiShellPutDoc\n• CPIVCDoc\n• CMy1124Doc\n• CLightGameDoc\n• CPiShellPutDocSome samples were packed into projects taken \nfrom the Web and repurposed to serve as \nlaunchers.\nThe most popular PIVY password used by the \nmenuPass campaign is keaidestone (used in 35 \nsamples) followed by menuPass (24 samples). The \nthreat actor also used these PIVY passwords in \nthe same campaign:\n• suzuki\n• happyyongzi\n• admin\n• smallfish\n• XGstone\n• xiaoxiaohuli\n• fishplay28  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceA number of IPs in the 60.10.1.0/24 Classless \nInter-Domain Routing (CIDR) block have hosted \ndomains used in the menuPass campaign. We can \nsee the connection between the keaidestone \npassword and the XGstone password by \nobserving the following connections in this same \n/24 CDIR block:\n• The IP 60.10.1.120 hosted the domain apple.\ncmdnetview.com.\n• The sample \nd8c00fed6625e5f8d0b8188a5caac115 \nconnected to apple.cmdnetview.com with the \npassword XGstone.\n• The IP 60.10.1.115 hosted the domain autuo.\nxicp.net.\n• The sample \nb1deff736b6d12b8d98b485e20d318ea \nconnected to autuo.xicp.net with the \npassword keaidestone.• The samples \nb1deff736b6d12b8d98b485e20d318ea \nand d8c00fed6625e5f8d0b8188a5caac115 \nalso shared the use of the CBricksDoc \nlauncher.\n• 08709f35581e0958d1ca4e50b7d86dba \nhas a compile time of July 20. 2012 and \nconnected to tw.2012yearleft.com with the \npassword keaidestone. This sample also used \nthe CBricksDoc launcher.\n• 2012yearleft.com was registered on \nFebruary 13, 2012 by zhengyanbin8@gmail.\ncom.\n• The domain cmdnetview.com was also \nregistered on February 13, 2012 by \nzhengyanbin8@gmail.com.\nFigure 21: Example \nof spear-phishing \nemail launched by the \nmenuPass APT group\nFigure 24: Partial \ncluster intel of the \nmenuPass APT \ngroup (zoomed in on \nmenuPass)\n29  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceWe can also see the connection between the \nkeaidestone password and the smallfish password \nby observing the connections in the 60.10.1.0/24 \nCDIR block:\n• The domain dedydns.ns01.us resolved to \n60.10.1.121.\n• The sample e84853c0484b02b7518dd6837\n87d04fc connected to dedydns.ns01.us with \nthe password smallfish and used the \nCBricksDoc launcher.\nWe can see the connection between the \nkeaidestone password and the happyyongzi \npassword by observing the connections in the \n60.10.1.0/24 CDIR block:\n• The domain maofajapa.3322.org resolved to \n60.10.1.121.\n• The sample \ncf8094c07c15aa394dddd4eca4aa8c8b \nconnected to maofajapa.3322.org with the \npassword happyyongzi.\nThe password suzuki can be linked to keaidestone \nby observing the following relationships:\n• The sample \n410eeaa18dbec01a27c5b41753b3c7ed \nconnected to send.have8000.com with the \npassword of suzuki.\n• The domain have8000.com was registered on \n2012-02-13 via the email zhengyanbin8@\ngmail.com.\n• The same email of zhengyanbin8@gmail.com \nalso registered cmdnetview.com on the same \ndate of 2012-02-13.• As stated above, the sample \nb2dc98caa647e64a2a8105c298218462 \nconnected to apple.cmdnetview.com with the \npassword XGstone.\nWe can link the password of menuPass to \nkeaidestone by observing the following \nconnections:\n• 08709f35581e0958d1ca4e50b7d86dba \nhas a compile time of July 20, 2012 and \nconnected to tw.2012yearleft.com with the \npassword keaidestone. This sample also used \nthe CBricksDoc launcher. \n• tw.2012yearleft.com resolved to 60.10.1.114 \non June 6, 2012 and to 60.1.1.114 on March \n11, 2013.\n• The domain fbi.zyns.com resolved to \n60.10.1.118 on August 21, 2012.\n• 68fec995a13762184a2616bda86757f8 \nhad a compile time of March 25, 2012 and \nconnected to fbi.zyns.com with the password \nmenuPass. This sample also used the \nCBricksDoc launcher.\n• • The sample \n39a59411e7b12236c0b4351168fb47ce \nhad a compile time of April 2, 2010 and \nconnected to weile3322b.3322.org with the \npassword keaidestone. This sample used a \nlauncher of CPiShellPutDoc.\n• The sample \nf5315fb4a654087d30c69c768d80f826 had \na compile time of May 21, 2010 and \nconnected to ngcc.8800.org with the \npassword menuPass. This sample also used a \nlauncher of CPiShellPutDoc.30  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceWe can see the connection between the \nhappyyongzi password and menuPass by \nobserving  the following connections:\n• The sample \ne6ca06e9b000933567a8604300094a85 \nconnected to the domain sh.chromeenter.\ncom with the password happyyongzi.\n• The domain sh.chromeenter.com previously \nresolved to the IP 60.2.148.167.\n• The domain jj.mysecondarydns.com also \nresolved to 60.2.148.167.\nSimilar to other threat actors, this threat actor has \nalso used PIVY samples using the default admin \npassword. Again, not all PIVY samples with the \npassword admin can be linked to menuPass. But \nwe can see the connection between the menuPass \nand at least a couple of instances of PIVY using the \nadmin password via the following connections:\n• • The sample \n56cff0d0e0ce486aa0b9e4bc0bf2a141 was \ncompiled on 2011-08-31 and connected to \nmf.ddns.info with the password menuPass.\n• The domain mf.ddns.info resolved to \n54.241.8.84 on November 22, 2012. This \nsame IP also hosted the domain av.ddns.us on \nthe same date.\n• The sample \n60963553335fa5877bd5f9be9d8b23a6 \nwas compiled on June 9, 2012 and connected \nto av.ddns.us with the password of admin.\n• A number of menuPass and admin samples \nalso shared the same CBricksDoc launcher \nincluding but not limited to \n6d989302166ba1709d66f90066c2fd59 \nand 4bc6cab128f623f34bb97194da21d7b6.• The sample \n4e84b1448cf96fabe88c623b222057c4 \nconnected to jj.mysecondarydns.com with \nthe password menuPass.\nThe password of fishplay can be linked to \nmenuPass by observing the following \nrelationships:\n• The sample \n494e65cf21ad559fccf3dacdd69acc94 \nconnected to mongoles.3322.org with the \npassword fishplay.\n• The mongoles.3322.org domain resolved to \n123.183.210.28.\n• The domain a.wubangtu.info also resolved to \n123.183.210.28.\n•  The sample \na5965b750997dbecec61358d41ac93c7 \nconnected to 3q.wubangtu.info with the \npassword menuPass.\n• The sample \n494e65cf21ad559fccf3dacdd69acc94 and \na5965b750997dbecec61358d41ac93c7 \nalso share the same CBricksDoc launcher.\nWe can link the password of xiaoxiaohuli to \nmenuPass through the shared CPiShellPutDoc \nlauncher:\n• f5315fb4a654087d30c69c768d80f826 had \na compile time of May 21, 2010 and \nconnected to ngcc.8800.org with the \npassword of menuPass.\n• e6ca06e9b000933567a8604300094a85 \nhad a compile time of June 29, 2010 and \nconnected to sh.chromeenter.com with the \npassword happyyongzi.31  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting Intelligence• Both f5315fb4a654087d30c69c768d80f826 \nand \ne6ca06e9b000933567a8604300094a85 \nuse the same CPiShellPutDoc launcher.\nFinally, we can link the password of happyyongzi to \nxiaoxiaohuli by observing the following \nrelationships:\n•  e6ca06e9b000933567a8604300094a85 \nhas a compile time of 2010-06-29 and \nconnects to sh.chromeenter.com with the \npassword happyyongzi.• e62584c9cd15c3fa2b6ed0f3a34688ab has a \ncompile time of 2009-12-28 and connects to \nthe domain js001.3322.org with the password \nxiaoxiaohuli.\n• Both \ne6ca06e9b000933567a8604300094a85 \nand e62584c9cd15c3fa2b6ed0f3a34688ab \nuse the same CPiShellPutDoc launcher.\n \n \n \nFigure 21: Example \nof spear-phishing \nemail launched by the \nmenuPass APT group\n32  www.fireeye.com\nPoison Ivy:  Assessing Damage and Extracting IntelligenceFireEye, Inc.  |  1440 McCarthy Blvd. Milpitas, CA 95035  |  408.321.6300  |  877.FIREEYE (347.3393)  |  info@fireeye.com   |  www.fireeye.com\n© 2014  FireEye, Inc. All rights reserved. FireEye is a registered trademark of FireEye, \nInc. All other brands, products, or service names are or may be trademarks or service \nmarks of their respective owners.  RPT.PIVY.EN-US.082014Conclusion\nWe cannot say with certainty why the actors \nresponsible for the admin@338, menuPass, and \nth3bug campaigns rely on Poison Ivy. But possible \nexplanations include PIVY’s easy-to-use features \nand the relative anonymity that an off-the-shelf \nRAT provides for attackers.\nCompared to other RATs, PIVY is very easy to \noperate. Its graphical user interface (GUI) makes \nbuilding new servers and controlling infected \ntargets simple. Attackers can point and click their \nway through a compromised network and \nexfiltrate data.\nCommodity RATs also complicate efforts by \nsecurity professionals to correlate a threat actor’s \nactivity over time—attackers can hide in the sea of \nmalicious activity that also uses Poison Ivy-based \nmalware.\nBy exposing the role of PIVY and other commodity \nRATs in APT campaigns we hope to complicate \nattackers’ ability to hide behind these off-the-shelf \ntools—and perhaps force them away from using \nthese RATs.\nIn this report, we have provided several \ntechniques that network defenders can use to not \nonly identify a PIVY infection, but also classify and \ncorrelate detected infections to previously \nobserved APT activity.\nIn the process of building their PIVY servers, \nattackers leave a number of potentially useful \nclues, such as:• The domains and IPs used for CnC\n• The chosen PIVY process mutex\n• The chosen PIVY password\n• Launcher code used in the droppers\n• Timeline of activity\n• T argets of attack\nT ogether, all of these data points can help \neffectively identify and correlate APT activity that \nuses the Poison Ivy RAT.\nAbout FireEye\nFireEye has invented a purpose-built, virtual \nmachine-based security platform that provides \nreal-time threat protection to enterprises and \ngovernments worldwide against the next \ngeneration of cyber attacks. These highly \nsophisticated cyber attacks easily circumvent \ntraditional signature-based defenses, such as \nnext-generation firewalls, IPS, anti-virus, and \ngateways. The FireEye platform provides \nreal-time, dynamic threat protection without the \nuse of signatures to protect an organization \nacross the primary threat vectors, including Web, \nemail, and files and across the different stages of \nan attack life cycle.\nThe core of the FireEye platform is a virtual \nexecution engine, complemented by dynamic \nthreat intelligence, to identify and block cyber \nattacks in real time. FireEye has over 1,000 \ncustomers across more than 40 countries, \nincluding over one-third of the Fortune 100."
}