{
    "title": "the blockbuster sequel",
    "text": "Tools Playbooks Speaking Events About Us\nThe Blockbuster Sequel\n21,321 people reacted 0 8 min. read\nUnit 42 has identified malware with recent compilation and distribution timestamps that has code, infrastructure,\nand themes overlapping with threats described previously in the Operation Blockbuster  report, written by\nresearchers at Novetta. This report details the activities from a group they named Lazarus, their tools, and the\ntechniques they use to infiltrate computer networks. The Lazarus group is tied to the 2014 attack on Sony\nPictures Entertainment  and the 2013 DarkSeoul attacks .\nThis recently identified activity is targeting Korean speaking individuals, while the threat actors behind the attack\nlikely speak both Korean and English. This blog will detail the recently discovered samples, their functionality, and\ntheir ties to the threat group behind Operation Blockbuster.\nInitial Discovery and Delivery\nThis investigation began when we identified two malicious Word document files in AutoFocus threat intelligence\ntool. While we cannot be certain how the documents were sent to the targets, phishing emails are highly likely.\nOne of the malicious files was submitted to VirusTotal on 6 March 2017 with the file name “ 한싹시스템 .doc”.\nOnce opened, both files display the same Korean language decoy document which appears to be the benign file\nlocated online at “www.kuipernet.co.kr/sub/kuipernet‐setup.docx”.\nFigure 1 Dropped decoy document\nThis file (Figure 1) appears to be a request form used by the organization. Decoy documents are used by\nattackers who want to trick victims into thinking a received file is legitimate. At the moment, the malware infects\nthe computer, it opens a non‐malicious file that contains content the target expected to receive (Figure 2.) This\nserves to fool the victim into thinking nothing suspicious has occurred.\nFigure 2 Spear Phishing Attack uses a decoy a file to trick the target\nWhen these malicious files are opened by a victim, malicious Visual Basic for Applications (VBA) macros within\nthem write an executable to disk and run it. If macros are disabled in Microsoft Word, the user must click the\n“Enable Content” button for malicious VBA script to execute. Both documents make use of logic and variable\nnames within their macros, which are very similar to each other. Specifically, they both contain strings of hex that\nwhen reassembled and XOR‐decoded reveal a PE file. The PE file is written to disk with a filename that is\nencoded in the macro using character substitution. Figure 3 shows part of the logic within the macros which is\nidentical in both files.\nFigure 3 Malicious document malicious macro source code\nThe Embedded Payload\nThe executable which is dropped by both malicious documents is packed with UPX . Once unpacked, the payload\n(032ccd6ae0a6e49ac93b7bd10c7d249f853fff3f5771a1fe3797f733f09db5a0) can be statically examined. The\ncompile timestamp of the sample is March 2 , 2017, just a few days before one of the documents carrying the\nimplant was submitted to VirusTotal.\nThe payload ensures a copy of itself is located on disk within the %TEMP% directory and creates the following\nregistry entry to maintain persistence if the system is shutdown\nIt then executes itself with the following command line:\nThe implant beacons to its command and control (C2) servers directly via the servers’ IPv4 addresses, which are\nhard coded in the binary, no domain name is used to locate the servers. The communications between the\nimplant and the server highly resemble the “fake TLS” protocol associated with malware tools used by the\nLazarus group and described in the Operation Blockbuster report. However, the possible values of the Server\nName Indication  (SNI) record within the CLIENT HELLO of the TLS handshake used by the implant differ from\nthose described in the report. The names embedded in the new sample and chosen for communications include:\ntwitter.com\nwww.amazon.com\nwww.apple.com\nwww.bing.com\nwww.facebook.com\nwww.microsoft.com\nwww.yahoo.com\nwww.join.me\nThe C2 servers contacted by the implant mimic the expected TLS server responses from the requested SNI field\ndomain name, including certificate fields such as the issuer and subject. However, the certificates’ validity, serial\nnumber, and fingerprint are different. Figure 4 shows a fake TLS session which includes the SNI record\n“www.join.me” destined for an IPv4 address which does not belong to Join.Me.\nFigure 4 The use of “www.join.me” as an SNI record of a TLS handshake to an IPv4 address which does not host that\ndomain name\nExpanding the Analysis\nBecause the attackers reused similar logic and variable names in their macros, we were able to locate additional\nmalicious document samples. Due to the heavy reuse of code in the macros we also speculate the documents\nare created using an automated process or script. Our analysis of the additional malicious documents showed\nsome common traits across the documents used by the attackers:\n1. Many, but not all, of the documents have the same author\n2. Malicious documents support the ability to drop a payload as well as an optional decoy document\n3. XOR keys used to encode embedded files within the macros seem to be configurable\n4. All of the dropped payloads were compressed with a packer (the packer used varied)\nMultiple testing documents which dropped and executed the Korean version of the Microsoft calc.exe\nexecutable, but contained no malicious code, were also identified. This mirrors a common practice in\ndemonstrating exploits of vulnerabilities. Interestingly enough, all of the test documents identified were submitted\nto VirusTotal with English file names from submitters located in the United States (although not during US\n“working hours”). Despite the documents having Korean code pages, when executed they open decoy\ndocuments with the English text: “testteststeawetwetwqetqwetqwetqw”. These facts lead us to believe at least\nsome of the developers or testers of the document weaponizing tool may be English speakers.\nWhile some of the documents identified carry benign payloads, most of the payloads were found to be malicious.\nA cluster of three malicious documents were identified that drop payloads which are related via C2 domains. The\npayloads can be seen highlighted in Figure 5.\nFigure 5 Related executables, their C2 domain names, their dropper documents, and the shared batch file\nThe two malicious payloads circled in Figure 5 write a batch script to disk that is used for deleting the sample and\nitself, which is a common practice. The batch script dropped by the two payloads share a file name, file path, and\nhash value with a script sample (77a32726af6205d27999b9a564dd7b020dc0a8f697a81a8f597b971140e28976).\nThis sample is described in a 2016 research report  by Blue Coat discussing connections between the DarkSeoul\ngroup and the Sony breach of 2014.\nThe script’s (Figure 6) hash value will vary depending on the name of the file it is to delete. It also includes an\nuncommon label inside it of “L21024”. The file the script deletes is the payload which writes the script to disk. In\nthe case of Figure 6, the payload was named “thing.exe”.\nFigure 6 The contents of the shared batch script\nTies to Previous Attacks\nIn addition to the commonalities already identified in the communication protocols and the shared cleanup batch\nscript use by implants, the payloads also share code similarities with samples detailed in Operation Blockbuster.\nThis is demonstrated by analyzing the following three samples, which behave in similar ways:\n032ccd6ae0a6e49ac93b7bd10c7d249f853fff3f5771a1fe3797f733f09db5a0\n79fe6576d0a26bd41f1f3a3a7bfeff6b5b7c867d624b004b21fadfdd49e6cb18\n520778a12e34808bd5cf7b3bdf7ce491781654b240d315a3a4d7eff50341fb18\nWe used these three samples to reach the conclusion that the samples investigated are tied to the Lazarus\ngroup.\nFirst, these three samples all use a unique method of executing a shell command on the system. An assembly\nfunction is passed four strings. Some of the strings contain placeholders. The function interpolates the strings and\ncreates a system command to be executed. The following four parameters are passed to the function:\n“PM”,\n“xe /”\n“md”\n“c%s.e%sc \\ “%s > %s 2>&1\\”\nThese are used not only in the implant we investigated, but also in the two samples above. Additionally, many\nsamples discussed in the Operation Blockbuster report also made use of this technique. Figure 7 shows the\nassembly from the unpacked implant\n(032ccd6ae0a6e49ac93b7bd10c7d249f853fff3f5771a1fe3797f733f09db5a0) delivered by our malicious\ndocument and shows the string interpolation function being used.\nFigure 7 The string interpolation function assembly with library names from\n032ccd6ae0a6e49ac93b7bd10c7d249f853fff3f5771a1fe3797f733f09db5a0\nFigure 8 shows the same string interpolation logic but within a different sample\n(79fe6576d0a26bd41f1f3a3a7bfeff6b5b7c867d624b004b21fadfdd49e6cb18.) The instructions are the same\nexcept where the system calls are replaced with DWORDs which brings us to a second similarity.\nFigure 8 The string interpolation function assembly without library names from\n79fe6576d0a26bd41f1f3a3a7bfeff6b5b7c867d624b004b21fadfdd49e6cb18\nThe second similarity ties this sample to a known Lazarus group sample\n(520778a12e34808bd5cf7b3bdf7ce491781654b240d315a3a4d7eff50341fb18.) Upon execution, both samples\nset aside memory to be used as function pointers. These pointers are assigned values by a dedicated function in\nthe binary. Other functions in the binary call the function pointers instead of the system libraries directly. The\nmotivation for the use of this indirection is unclear, however, it provides an identifying detection mechanism.\nThese two samples resolve system library functions in a similar yet slightly different manner. The sample known\nto belong to the Lazarus group uses this indirect library calling in addition to a function that further obfuscates the\nfunction’s names using a lookup table within a character substitution function. This character substitution aspect\nwas removed in the newer samples. The purpose for removing this functionality between the original Operation\nBlockbuster report samples and these newer ones is unclear. Figure 9 displays how this character substitution\nfunction was called within the Lazarus group sample.\nFigure 9 The character substitution function from\n520778a12e34808bd5cf7b3bdf7ce491781654b240d315a3a4d7eff50341fb18 being called\nSHA256 HashString\nInterpolati\non\nFunctionSystem\nLibrary\nObfuscat\nionFake TLS\nCommunicati\nonsLabel\n032ccd6ae0a6e49ac93b7bd10c7d249f853fff3f5771a1fe3797f733f0\n9db5a0Yes No YesInitially\nidentified\npayload\n79fe6576d0a26bd41f1f3a3a7bfeff6b5b7c867d624b004b21fadfdd4\n9e6cb18Yes Yes YesSample\nidentified\nto be\nrelated\nto initial\npayload\nand\nOperatio\nn\nBlockbus\nter\nsample\n520778a12e34808bd5cf7b3bdf7ce491781654b240d315a3a4d7eff5\n0341fb18Yes Yes YesKnown\nOperatio\nn\nBlockbus\nter\nsample\nFigure 10: A comparison of features between samples\nFinal Thought\nOverlaps in network protocols, library name obfuscation, process creation string interpolation, and dropped batch\nfile contents demonstrate a clear connection between the recent activity Unit 42 has identified and previously\nreported threat campaigns. Demonstrated by the malicious document contents, the targets of this new activity\nare likely Korean speakers, while the attackers are likely English and Korean speakers.\nIt is unlikely these threat actors will stop attacking their targets. Given the slight changes that have occurred\nwithin samples between reports, it is likely this group will continue to develop their tools and skillsets.\nCustomers using WildFire are protected from these threats and customers using AutoFocus can find samples\nfrom this campaign tagged as Blockbuster Sequel .\nIndicators of Compromise\nInitial Malicious Documents\ncec26d8629c5f223a120677a5c7fbd8d477f9a1b963f19d3f1195a7f94bc194b\nff58189452668d8c2829a0e9ba8a98a34482c4f2c5c363dc0671700ba58b7bee\n \nInitial Payload\n1322b5642e19586383e663613188b0cead91f30a0ab1004bf06f10d8b15daf65\n032ccd6ae0a6e49ac93b7bd10c7d249f853fff3f5771a1fe3797f733f09db5a0 (unpacked)\n \nTesting Malicious Documents\n90e74b5d762fa00fff851d2f3fad8dc3266bfca81d307eeb749cce66a7dcf3e1\n09fc4219169ce7aac5e408c7f5c7bfde10df6e48868d7b470dc7ce41ee360723\nd1e4d51024b0e25cfac56b1268e1de2f98f86225bbad913345806ff089508080\n040d20357cbb9e950a3dd0b0e5c3260b96b7d3a9dfe15ad3331c98835caa8c63\ndfc420190ef535cbabf63436e905954d6d3a9ddb65e57665ae8e99fa3e767316\nf21290968b51b11516e7a86e301148e3b4af7bc2a8b3afe36bc5021086d1fab2\n1491896d42eb975400958b2c575522d2d73ffa3eb8bdd3eb5af1c666a66aeb08\n31e8a920822ee2a273eb91ec59f5e93ac024d3d7ee794fa6e0e68137734e0443\n49ecead98ebc750cf0e1c48fccf5c4b07fadef653be034cdcdcd7ba654f713af\n5c10b34e99b0f0681f79eaba39e3fe60e1a03ec43faf14b28850be80830722cb\n600ddacdf16559135f6e581d41b30d0867aae313fbaf66eb4d18345b2136cdd7\n6ccb8a10e253cddd8d4c4b85d19bbb288b56b8174a3f1f2fe1f9151732e1a7da\n8b2c44c4b4dc3d7cf1b71bd6fcc37898dcd9573fcf3cb8159add6cb9cfc9651b\n9e71d0fdb9874049f310a6ab118ba2559fc1c491ed93c3fd6f250c780e61b6ff\n \nAdditional Related Samples\n02d74124957b6de4b087a7d12efa01c43558bf6bdaccef9926a022bcffcdcfea\n0c5cdbf6f043780dc5fff4b7a977a1874457cc125b4d1da70808bfa720022477\n18579d1cc9810ca0b5230e8671a16f9e65b9c9cdd268db6c3535940c30b12f9e\n19b23f169606bd390581afe1b27c2c8659d736cbfa4c3e58ed83a287049522f6\n1efffd64f2215e2b574b9f8892bbb3ab6e0f98cf0684e479f1a67f0f521ec0fe\n440dd79e8e5906f0a73b80bf0dc58f186cb289b4edb9e5bc4922d4e197bce10c\n446ce29f6df3ac2692773e0a9b2a973d0013e059543c858554ac8200ba1d09cf\n557c63737bf6752eba32bd688eb046c174e53140950e0d91ea609e7f42c80062\n5c10b34e99b0f0681f79eaba39e3fe60e1a03ec43faf14b28850be80830722cb\n644c01322628adf8574d69afe25c4eb2cdc0bfa400e689645c2ab80becbacc33\n6a34f4ce012e52f5f94c1a163111df8b1c5b96c8dc0836ba600c2da84059c6ad\n77a32726af6205d27999b9a564dd7b020dc0a8f697a81a8f597b971140e28976\n79fe6576d0a26bd41f1f3a3a7bfeff6b5b7c867d624b004b21fadfdd49e6cb18\n8085dae410e54bc0e9f962edc92fa8245a8a65d27b0d06292739458ce59c6ba1\n8b21e36aa81ace60c797ac8299c8a80f366cb0f3c703465a2b9a6dbf3e65861e\n9c6a23e6662659b3dee96234e51f711dd493aaba93ce132111c56164ad02cf5e\nd843f31a1fb62ee49939940bf5a998472a9f92b23336affa7bccfa836fe299f5\ndcea917093643bc536191ff70013cb27a0519c07952fbf626b4cc5f3feee2212\ndd8c3824c8ffdbf1e16da8cee43da01d43f91ee3cc90a38f50a6cc8d6a778b57\nefa2a0bbb69e60337b783db326b62c820b81325d39fb4761c9b575668411e12c\nf365a042fbf57ed2fe3fd75b588c46ae358c14441905df1446e67d348bd902bf\nf618245e69695f6e985168f5e307fd6dc7e848832bf01c529818cbcfa4089e4a\nfa45603334dae86cc72e356df9aa5e21151bb09ffabf86b8dbf5bf42bd2bbadf\nfc19a42c423aefb5fdb19b50db52f84e1cbd20af6530e7c7b39435c4c7248cc7\nff4581d0c73bd526efdd6384bc1fb44b856120bc6bbf0098a1fa0de3efff900d\n \nC2 Domains\ndaedong.or[.]kr\nkcnp.or[.]kr\nkosic.or[.]kr\nwstore[.]lt\nxkclub[.]hk\n \nC2 IPv4 Addresses\n103.224.82[.]154\n180.67.205[.]101\n182.70.113[.]138\n193.189.144[.]145\n199.26.11[.]17\n209.105.242[.]64\n211.233.13[.]11\n211.233.13[.]62\n211.236.42[.]52\n211.49.171[.]243\n218.103.37[.]22\n221.138.17[.]152\n221.161.82[.]208\n23.115.75[.]188\n61.100.180[.]9\n61.78.63[.]95\n80.153.49[.]82\nIgnite ’17 Security Conference: Vancouver, BC June 12–15, 2017\nIgnite ’17 Security Conference is a live, four‐day conference designed for today’s security professionals. Hear\nfrom innovators and experts, gain real‐world skills through hands‐on sessions and interactive workshops, and find\nout how breach prevention is changing the security industry. Visit the Ignite website  for more information on\ntracks, workshops and marquee sessions.\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from usBy Anthony Kasza  and Micah Yates\nApril 7, 2017 at 5:00 AM\nCategory: Unit 42\nTags: AutoFocus , Blockbuster , Korea , Lazarus Group , malware , spearphishing\nnd\nEmail address Subscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability1\n2HKLM\\SOFTWARE \\Wow6432Node \\Microsoft \\Windows\\CurrentVersion \\Run\\JavaUpdate  , \nValue:%TEMP%\\java.exe /c /s\n1%TEMP%\\java.exe /c %TEMP%\\java.exe\nSearch Unit 42\nSHARE \n "
}