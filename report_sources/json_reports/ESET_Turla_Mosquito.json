{
    "title": "ESET_Turla_Mosquito",
    "text": "Diplomats in Eastern Europe \nbitten by a Turla mosquito\nESET, spol. s r.o.\nJanuary 2018Diplomats in Eastern Europe \nbitten by a Turla mosquito\nESET, spol. s r.o.\nJanuary 2018TablE  of ConTEnT\n1. overview 5\n2. Why attribute this campaign to the Turla group? 6\n3. abusing adobe flash and flash-related domains 7\n3.1 Apparent distribution through adobe.com 7\n3.2 Compromise hypotheses 7\n➊ Local MitM 8\n➋ Compromised gateway 8\n➌ MitM at the ISP level 9\n➍ BGP hijacking 9\nWrap-up 9\n3.3 Data exfiltration via get.adobe.com URLs 9\n4. analysis of the Win32 backdoor 12\n4.1 Installer 12\nCrypter 12\nInstallation 13\n4.2 DebugParser (launcher) 15\n4.3 Commander (main backdoor) 17\nSetup 18\nEncryption 19Log 20\nC&C server communications and backdoor commands 20\n5. analysis of the JavaScript backdoor 23\n6. Conclusion 24\n7. bibliography 25\n8. IoCs 26\n8.1 C&C server URLs 26\n8.2 Fake adobe URLs 26\n8.3 Unofficial URLs for legitimate Flash installers 26\n8.4 Hashes 27\n8.5 Windows artefacts 28\nHijacked CLSIDs 28\nFiles 28\n8.6 ESET detection names 29\nRecent samples 29\nOlder variants 29\nJavaScript backdoor 29lIST  of fIgurES\nFigure 1 Possible interception points on the path between the potential  \nvictim’s machine and the Adobe servers 8\nFigure 2 Code performing request to bogus get.adobe.com URL 10\nFigure 3 Installation report sent to bogus get.adobe.com URL 10\nFigure 4 Unique ID at the end of the installer 11\nFigure 5 Code performing request to bogus get.adobe.com URL in the Snake  macOS installer 11\nFigure 6 Obfuscated function 12\nFigure 7 Debug strings in the PE loader function 13\nFigure 8 Files created by the malware in the random child directory of %APPDATA%  14\nFigure 9 Registry modifications to establish persistence 14\nFigure 10 Pseudocode of the launcher 15\nFigure 11 Search the address just after the LoadLibrary call 15\nFigure 12 Allocated memory layout 15\nFigure 13 Loader and Backdoor in the same library 16\nFigure 14 DLL has no EXPORT Address Table  in the .reloc section 17\nFigure 15 Newly-created export Table 17\nFigure 16 Name of the new export 18\nFigure 17 Routine patching the export table 18\nFigure 18 Structure of the log file 20\nFigure 19 Beginning of the log file 20\nFigure 20 Structure of the requests to the C&C server – GET request with data  in the id parameter 21\nFigure 21 Selection of the request 21\nFigure 22 Structure of the C&C reply packet 22\nlIST  of TablES\nTable 1 Backdoor registry values 19\nTable 2 Encryption keys and moduli 19\nTable 3 Description of the backdoor commands 225\nDiplomats in Eastern Europe \nbitten by a Turla mosquito1. o vErvIEW\nTurla is one of the longest-known state-sponsored cyberespionage groups, with well-known victims \nsuch as the US Department of Defense in 2008. The group owns a large toolset [1] [2] that is generally \ndivided into several categories: the most advanced malware is only deployed on machines that are the most interesting to the attackers. Their espionage platform is mainly used against Windows machines, but also against macOS and Linux machines with various backdoors and a rootkit.\nFor years, Turla has relied, among other impersonations, on fake Flash installers to compromise \nvictims. This kind of attack vector does not require highly sophisticated exploits but rather depends on tricking the user into installing the fake program.\nIn recent months, we have observed a strange, new behavior, leading to compromise by one of Turla’s \nbackdoors. Not only is it packaged with the real Flash installer, but it also appears to be downloaded from adobe.com. From the endpoint’s perspective, the remote IP address belongs to Akamai,  the official Content Delivery Network (CDN) used by Adobe to distribute their legitimate Flash installer. After digging a bit more, we realized that the fake Flash installers, including the macOS installer for Turla’s backdoor Snake — whether or not they were downloaded from adobe.com URLs — were performing a GET request to get.adobe.com URLs to exfiltrate some sensitive information about the newly compromised machine. Again, according to our telemetry, the IP address was  a legitimate IP address used by Adobe. In this whitepaper, we will explain the different possibilities that could lead to such malicious behavior. To our knowledge, this malware did not utilize any legitimate  \nFlash Player updates nor is it associated with any known Adobe product vulnerabilities. We can state  \nwith confidence that Adobe was not compromised. These attackers merely use the Adobe brand  \nto trick users into downloading the malware.\nWe also found that the Turla group relied on a web app hosted on Google Apps Script as a Command \nand Control (C&C) server for JavaScript-based malware dropped by some versions of the fake Flash installer. Thus, it is clear they are trying to be as stealthy as possible by hiding in the network traffic  of the targeted organizations.\nBy looking at our telemetry, we found evidence that Turla installers were exfiltrating information  \nto get.adobe.com URLs since at least July 2016. The victims are located in territories of the former USSR. As for Gazer, another malware family developed and distributed by the Turla group and previously  \ndescribed by ESET \n[2], the targets are mainly consulates and embassies from different countries  \nin Eastern Europe or the vicinity. We have also seen a few private companies infected but they do  not seem to be Turla’s main targets. Thus, it seems this campaign is directed against high-value political organizations. Finally, some of the victims are also infected with other Turla-related malware such as ComRAT or Gazer.6\nDiplomats in Eastern Europe \nbitten by a Turla mosquito2. Why a TTrIbuTE  ThIS  CampaIgn T o ThE  Turla \ngroup?\nBefore analyzing the weird connections happening over the network, we will explain why we suspect \nthis campaign is the work of the Turla group.\nFirstly, some fake Flash installers in this campaign drop a backdoor known as Mosquito, which some \nsecurity companies already detect as Turla malware.\nSecondly, some of the C&C servers linked to the dropped backdoors are using, or used, SATCOM  \nIP addresses previously associated with Turla [3].\nThirdly, this malware shares similarities with other malware families used by the Turla group.  These similarities include the same string obfuscation (string stacking and XOR with 0x55)  and the same API resolution.\nThese elements allow us to say with confidence that Turla’s operators drove this campaign.7\nDiplomats in Eastern Europe \nbitten by a Turla mosquito3. abuSIng aDobE  flaSh anD  flaSh-rEla TED   \nDomaInS\nIt is not a new tactic for Turla to rely on fake Flash installers to try to trick the user to install one  \nof their backdoors. For instance, Kaspersky Lab documented this behavior in 2014 [4]. However,  \nthis is the first time, to our knowledge, that the malicious program is downloaded over HTTP  from legitimate Adobe URLs and IP addresses. Thereby, even the most experienced users could  be deceived.\n3.1 Apparent distribution through adobe.com\nSince the beginning of August 2016, we have identified a few attempts to download a Turla installer  from admdownload.adobe.com URLs. \nAt first glance, we imagined it was the typical trick that consists of setting the host field  \nof the HTTP request while the TCP socket is established to the real IP of the C&C server. However,  \nafter deeper analysis, we realized that the IP address legitimately belongs to Akamai, a large CDN provider that Adobe uses to distribute its legitimate Flash installer.\nEven if the executable is downloaded from a legitimate URL (e.g.: http://admdownload.adobe.com/  \nbin/live/flashplayer27_xa_install.exe ), the referer field appears to have been tampered  \nwith. We have seen this referer field set to http://get.adobe.com/flashplayer/download/  \n?installer=Flash_Player , which is not a URL pattern used by Adobe and hence returns  \na 404 status code if requested.It is important to note that all the download attempts we identified in our telemetry were made  \nthrough HTTP, not HTTPS. This allows a wide range of attacks in the path from the user’s machine  to Akamai’s servers.\nThe next section is a review of various possible scenarios that could explain this. Exactly what happened  \nis still an open question and we would appreciate any feedback if you have more information.\n3.2 Compromise hypotheses\nFigure 1 shows the different hypotheses that could explain how a user apparently visiting  \nthe legitimate Adobe website over HTTP might be forced to download Turla-related malware.8\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\nTraﬃc \ninterception \nPotential\ntarget\nLocal man/hyphen.capin/hyphen.cap\nthe/hyphen.capmiddle attack/one.pnum_lnum\nCompromised\ngateway/two.pnum_lnum\nISP modiﬁes \ntraﬃc/three.pnum_lnum\nAdobe site somehow \ncompromised/five.pnum_lnum\nBGP \nhijacking/four.pnum_lnum\n Figure  1 Possible interception points on the path between the potential victim’s \nmachine and the Adobe servers\nWe quickly discarded the hypothesis of a rogue DNS server, since the IP address corresponds  \nto the servers used by Adobe to distribute Flash. After discussions with Adobe and from their investigations, scenario \n➎ seems unlikely as the attackers did not compromise the Adobe  \nFlash Player download website. Thus, these are the hypotheses that remain: ➊ a Man-in-the-\nMiddle (MitM) attack from an already-compromised machine in the local network, ➋ a compromised \ngateway or proxy of the organization, ➌ a MitM attack at the Internet Service Provider (ISP) level  \nor ➍ a Border Gateway Protocol (BGP) hijack to redirect the traffic to Turla-controlled servers.\n➊ Local MitM\nTurla operators could use an already-compromised machine in the network of the victim’s organization to perform a local MitM attack. Using ARP spoofing, they could modify the traffic  \non the fly by redirecting the traffic of the targeted machine to a compromised machine. Even though we are not aware of the presence of such tools in the Turla arsenal, such a tool is not hard to develop, especially given the technical abilities of this group.\nHowever, we identified many different victims in many different organizations. That means the Turla  \ngroup would have had to have compromised at least one other computer in each of those organizations,  \nand specifically, a computer on the same subnet as a more preferred target.\n➋ Compromised gateway\nThis attack is similar to the previous one but much more interesting for the attackers: they can intercept  \nthe traffic for the whole organization, without the need to do ARP spoofing, as gateways and proxies typically see all the incoming and outgoing traffic between the organization’s intranet and the internet.  \nWe are not aware of the existence of a Turla tool designed to do this —but their rootkit, called Uroburos,  \nhas packet analysis abilities. It can be installed on servers and used as a proxy to distribute tasks  \nto infected machines that do not have a public IP address \n[5]. For a group with the apparent expertise \nand resources Turla has available, this Uroburos code could easily be modified to intercept traffic  on the fly and inject malicious payloads or otherwise modify unencrypted content. 9\nDiplomats in Eastern Europe \nbitten by a Turla mosquito➌ MitM at the ISP level\nIf the traffic is not intercepted before exiting an organization’s internal network, it means it is modified \nlater on the path to the Adobe servers. The ISPs are the main point of access on this path, and ESET  has previously reported on other actors, such as FinFisher, using packet injection at the ISP level  \nto distribute malware in repackaged installers \n[6].\nAll the victims we identified are located in different, former USSR countries and we identified them using  \nat least four different ISPs, based in these different countries. Thus, this scenario would suggest  \nthat Turla operators would have to be able to monitor traffic in several different separate countries  or links where this data transit.\n➍ BGP hijacking\nIf the traffic is not modified by the ISP and does not reach the Adobe servers, this means it has been re-routed to another server that is controlled by the Turla operators. This can be done by conducting a BGP hijacking attack. There are several methods that can be employed. \nOn one hand, Turla operators could use an Autonomous System (AS) they control to announce  \na prefix belonging to adobe.com. Thus, the traffic routing to adobe.com from locations near  \nthe Turla-controlled AS will be misdirected to their server. An example of such malicious activity  \nwas analyzed by RIPE \n[7]. However, this would be quickly noticed by Adobe or by services performing \nBGP monitoring. Moreover, we checked on RIPEstat and did not notice any suspicious route \nannouncements for the Adobe IP addresses used in this campaign.\nOn the other hand, the Turla operators could use their AS to announce they have a shorter route  \nthan any other AS might have to the Adobe servers. Thus, the traffic would also go through their routers  \nand could be intercepted and modified in real time. However, a big part of the traffic to Adobe would be redirected to the rogue router, so it would be a noisy tactic and the chances are it would have  been noticed at some point since the campaign started, in August 2016 or earlier. \nWrap-up\nOf the five scenarios presented in Figure 1 , we considered only four, as we are confident Adobe was \nnot compromised. The BGP hijacking and the MitM attack at the ISP level are far more complex than the others. Thus, we believe it is more probable the Turla group has a custom tool installed on local gateways of the impacted organizations, allowing them to intercept and modify the traffic even before it exits the intranet.\n3.3 Data exfiltration via get.adobe.com URLs\nOnce the user has downloaded and launched the fake Flash installer, the compromise process  \nstarts. It begins by dropping a Turla backdoor on the machine. This could be Mosquito, a Win32 malware  \ndescribed in section 4, a malicious JavaScript file communicating with a web app hosted on Google Apps Script as described in section 5, or an unknown file downloaded from a fake Adobe URL: \nhttp://get.adobe.com/flashplayer/download/update/[x32|x64]For the last case, as this URL does not exist on Adobe’s server; for the Turla group to be able to send \ncontent through this URL, something must be man-in-the-middling traffic on the path between  the compromised machines and the Adobe servers to provide a response to these requests.\nThen, a request is performed exfiltrating information about the newly-compromised machine.  \nThis is a GET request to http://get.adobe.com/stats/AbfFcBebD/q=<base64-encoded data>  \nwith, according to our telemetry, a legitimate Adobe IP address but with a URL pattern that is not used  \nby Adobe and thus returns. As the request is performed through HTTP, the same MitM scenarios  \nas discussed in section 3.2 are likely.10\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\n Figure  2 Code performing request to bogus get.adobe.com URL\nThe base64-encoded data contain interesting and sensitive information about the victim machine,  \nso it would be surprising that it would actually be sent to an Adobe server. Figure 3 is an example  of a decoded report. It sends various information such as a unique id (the last 8 bytes of the fake Flash installer executable, as shown in Figure 4), the username, the list of security products  installed and the ARP table.\nID=<unique_id>\nInternal error: 0Last error :0Extracteduser=<USERNAME>AV=<INSTALLED AV SOFTWARE>ip= 192.168.0.2 <local IP address>\nInterface: 192.168.0.2 --- 0x4\n Internet Address  Physical Address  Type\n 192.168.0.1   <redacted>   dynamic\n 192.168.0.255   ff-ff-ff-ff-ff-ff static\n 224.0.0.2    <redacted>   static\n 224.0.0.22   <redacted>   static\n 224.0.0.252   <redacted>   static\n 239.255.255.250  <redacted>   static\n 255.255.255.255  ff-ff-ff-ff-ff-ff static\n Figure  3 Installation report sent to bogus get.adobe.com URL11\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\n Figure  4 Unique ID at the end of the installer\nInterestingly, the installer of Snake for macOS [8], a backdoor associated with Turla, also uses  \nthe exact same URL, as shown in Figure 5. The data sent are a bit different as they only contain  \nthe username and device name, although still encoded in base64. However, this behavior  was not documented by Fox-IT when they published their analysis.\n Figure  5 Code performing request to bogus get.adobe.com URL in the Snake  \nmacOS installer\nFinally, the fake installer drops or downloads, then runs a legitimate Flash Player application.  \nThe legitimate installer is either embedded in the fake installer or downloaded from the following  Google Drive URL: https://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIstM0R  \nRekVEbnFfaXc&export=download12\nDiplomats in Eastern Europe \nbitten by a Turla mosquito4. analySIS  of ThE  WIn32 baCkDoor\nIn this section, we describe the samples we found in the wild, mainly in 2017. We found evidence  \nthat this campaign has been running for some years, and the 2017 samples are an evolution from  a backdoor in a file conventionally named InstructionerDLL.dll . However, these older samples \nwere less obfuscated and there was only the backdoor DLL, without the loader found in more recent samples. Some of these older samples have compilation timestamps that date back to 2009 but these are likely to have been forged.\n4.1 Installer\nThe installer generally comes as a fake Flash installer and is bundled with two additional components  \nlater dropped on the disk. As explained above, we identified several users who downloaded this fake Flash installer from a URL and IP used by Adobe for the distribution of the legitimate Flash installer. We detailed the different hypotheses that could explain this behavior in the previous section.\nCrypter\nIn recent versions, the installer is always obfuscated with what seems to be a custom crypter. Figure 6 shows an example of a function obfuscated with this tool.\n Figure  6 Obfuscated function\nFirstly, the crypter makes heavy use of opaque predicates along with arithmetic operations.  For example, the obfuscated function will compute a number from hardcoded values and then  check if this number is greater than another hardcoded value. Thus, at each execution the control flow will be the same, but emulation is required to determine which path is correct. Therefore,  \nthe code becomes far more complex to analyze for both malware researchers and automated algorithms in security software. This may slow down emulation so much that the object won’t  be scanned, due to time constraints – and hence software known or shown to be malicious  (if not obfuscated) won’t be detected.13\nDiplomats in Eastern Europe \nbitten by a Turla mosquitoSecondly, after the first layer is de-obfuscated, a call to the Win32 API SetupDiGetClassDevs  \n(0,0,0,0xFFFFFFFF)  is performed, and the crypter then checks whether the return value equals \n0xE000021A . This function is generally used to request information about the devices of the system. \nHowever, this specific Flags value (0xFFFFFFFF) is not documented, but according to our tests,  \nthe return value is always 0xE000021A on Windows 7 and Windows 10 machines. We believe  \nthis API call and the following check are used to bypass sandboxes and emulators that do not \nimplement it correctly.\nThirdly, the real code is divided into several chunks that are decrypted, using a custom function,  \nand re-ordered at run time to build a PE in memory. It is then executed in-place by the crypter’s  \nPE loader function. This PE loader contains several debug strings as shown in Figure 7 .\n Figure  7 Debug strings in the PE loader function\nInstallation\nOnce decrypted, the installer searches the %APPDATA%  subtree and drops two files in the deepest \nfolder it finds. When searching for this folder, it avoids any folder that contains AVAST  in its name.  \nIt then uses the filename of one of the non-hidden files in this folder, truncated at the extension,  \nas the base filename for the files it will drop. If all the files in the directory are hidden, or the directory  is empty, it takes the name of a DLL from %WINDIR%\\System32. The loader it drops will have a .tlb   \nextension and the main backdoor a .pdb  extension. Interestingly, it does not use WriteFile to drop  \nthese two DLLs. Instead, it creates a file, maps it in memory and calls memmove  to copy data.  \nIt is probably designed to avoid some sandboxes and security products hooks on WriteFile . \nWe have also seen older variants of the installer dropping only one file, with the .tlb  extension.  \nIn that case, the same file contains both loader and backdoor functions. DllMain  chooses which \ncode to execute.\nIt writes a simple and unencrypted log file in %APPDATA%\\kb6867.bin . The full log file is created  \nin the same directory as the two DLLs and has the .tnl  extension.14\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\n Figure  8 Files created by the malware in the random child directory of %APPDATA%\nThen, it establishes persistence by using either a Run registry key or COM hijacking [9]. If the antivirus \ndisplay name, retrieved using Windows Management Instrumentation (WMI), is “Total Security”,  \nit adds rundll32.exe [backdoor_path], StartRoutine in HKCU\\Software\\Run\\auto_update. \nOtherwise, it will replace the registry entry under HKCR\\CLSID\\{ D9144DCD-E998-4ECA-AB  \n6A-DCD83CCBA16D }\\InprocServer32  or HKCR\\CLSID\\{ 08244EE6-92F0-47F2-9FC9-929BA  \nA2E7235}\\InprocServer32 with the path to the loader. These CLSIDs correspond respectively  \nto EhStorShell.dll and to ntshrui.dll. These DLLs are launched legitimately by a lot of processes,  \nincluding explorer.exe, the main windows GUI. Thus, the loader will be called each time \nexplorer.exe is started. Finally, it adds an entry in the registry to store the path to the original \nhijacked DLL and to the main backdoor, as shown in Figure 9.\n// Path to the loader\n HKCR\\CLSID\\{d9144dcd-e998-4eca-ab6a-dcd83ccba16d}\\  \n InprocServer32 \n > C:\\Users\\Administrator\\AppData\\Roaming\\Adobe\\Acrobat\\9.0\\  \n AdobeSysFnt09.tlb\n// the name of the above replaced dll\n HKCU\\Software\\Microsoft\\Windows\\OneDriveUpdate explorer.exe\n > %SystemRoot%\\system32\\EhStorShell.dll;  \n {d9144dcd-e998-4eca-ab6a-dcd83ccba16d};new\n// Path to the main backdoor\n HKCU\\Software\\Microsoft\\Windows\\OneDriveUpdate (Default)\n > C:\\Users\\Administrator\\AppData\\Roaming\\Adobe\\Acrobat\\  \n 9.0\\AdobeSysFnt09.pdb\n Figure  9 Registry modifications to establish persistence\nOther CLSIDs are hardcoded in the binary but we have not seen any use made of them. The full list  is available in the IoCs section.\nAs explained in the previous section, the installer sends some information — such as the unique  \nid of the sample, the username or the ARP table — to a URL at an Adobe domain, get.adobe.com .  \nIt will also launch a real Adobe Flash installer, which is either downloaded from Google Drive  \nor embedded in the fake installer.\nBefore launching the main backdoor, the installer creates an administrative account HelpAssistant   \n(or HelpAsistant  in some samples) with the password sysQ!123 . Also, the LocalAccountToken  \nFilterPolicy  is set to 1, allowing remote administrative actions. We believe this account name \nwas used to remain stealthy as this is the name used when a legitimate Remote Assistance session  \nis run \n[10] .15\nDiplomats in Eastern Europe \nbitten by a Turla mosquito4.2 DebugParser (launcher)\nThe launcher, named DebugParser.dll internally, is called when the hijacked COM object  \nis loaded. It is responsible for launching the main backdoor and for loading the hijacked COM object. \nThe simplified pseudo-code of this component is provided in Figure 10 .\nif (GetModuleFileNameW != “explorer.exe”) {\n CreateMutexW(“slma”)\n CreateProcess(“rundll32 (from HKCU\\Software\\Microsoft\\Windows\\  \n OneDriveUpdate @=) StartRoutine”)\n}\n//Load hijacked library\nLoadLibraryW (from HKCU\\Software\\Microsoft\\Windows\\OneDriveUpdate “explorer.exe”=)\n \n Figure  10 Pseudocode of the launcher\nHowever, it uses some tricks to load the hijacked library and to return to the correct address.  \nThe process is described below:\n1. Retrieve the original return address after the legitimate call to LoadLibrary. At the beginning  \nof DllMain, it stores the value of the ESP register. Then it checks for FF 15 (a CALL opcode) \nat ESP - 6. If it is present, the register holds the original return address.\n Figure  11 Search the address just after the LoadLibrary call\n2. Allocate RWX memory containing the following values:\n3. Jump to the hook function by modifying the return address of DllMain .\n/zero.pnum_lnum\n/four.pnum_lnum\nPointer to HookLibrary \nloader Original return addr\n/eight.pnum_lnum Hinst DLL\n/one.pnum_lnum/two.pnum_lnum Pointer to FreeLibrary /zero.pnum_lnumxCC\n/one.pnum_lnum/six.pnum_lnum\n/two.pnum_lnum/four.pnum_lnum\n/four.pnum_lnum/eight.pnum_lnum Hook \nfunction\n Figure 12  Allocated memory layout16\nDiplomats in Eastern Europe \nbitten by a Turla mosquito4. In the hook function:\n a. Call a function that is responsible for loading ntshrui.dll  (or any other hijacked library)\n b. Call FreeLibrary  on the DebugParser .dll (backdoor loader) handle\n c. Jump to the original return address before the hook.\nBecause the original DLL is loaded, the user is unlikely to notice that the backdoor was launched  \nat the same time.\nIn the case of older variants, with the loader and backdoor functions in one file, the DllMain  chooses \nwhich code to execute, as shown in Figure 13 .\n Figure  13 Loader and Backdoor in the same library17\nDiplomats in Eastern Europe \nbitten by a Turla mosquito4.3 Commander (main backdoor)\nThe main backdoor of this campaign, called CommanderDLL by its authors, is launched either  \nby the loader described above, or directly at startup if the chosen persistence mechanism is the Run \nregistry entry. In both cases, this library’s StartRoutine  export is called while, as shown in Figure 14, \nthis export is not present in the DLL’s export table.\n Figure  14 DLL has no EXPORT Address Table  in the .reloc section\nIn the DllMain  function, an export table is built in order to expose this export:\n1. It creates an IMAGE_EXPORT_DIRECTORY  structure with StartRoutine  as the name  \nof its only export\n2. It copies this structure just after the relocation section, located at the end of the PE’s  in-memory image\n3. It changes the PE header field containing the Relative Virtual Address (RVA) of the export table to the address of the newly-created export table\nWith these fix-ups, the memory-mapped library has an export called StartRoutine, as shown  \nin Figure 15 and Figure 16. Figure 17 is a screenshot from the Hex-Rays decompiler showing the code  \nfor the whole process to add this export.\n Figure  15 Newly-created export Table18\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\n Figure  16 Name of the new export\n Figure  17 Routine patching the export table\nSetup\nFirstly, the CommanderDLL module deletes the dropper (the fake Flash installer) file. The path  \nis received from the dropper via a named pipe called \\\\.\\pipe\\namedpipe . Then, in a new thread,  \nit creates a second named pipe, \\\\.\\pipe\\ms32loc , and waits until another process connects  \nto this pipe, at which point the program exits.\nSecondly, it sets up some internal structures and stores configuration values in the registry.  \nTable 1 describes the different registry values stored under HKCU\\Software\\Microsoft\\[dllname] .19\nDiplomats in Eastern Europe \nbitten by a Turla mosquito Table 1 Backdoor registry values\nKey value Description\nFlags Contains C&C server URLs\nlayout MAC address padded with 0x0000 \n[dllname]tr32 Similar to Flags\n[dllname]fgtb Temporary data\n[dllname]fga Not seen\nAll the registry values, except the layout entry, are encrypted using a custom algorithm  \nthat is described in the next section. \nThird, an additional C&C server address is downloaded from a document hosted on Google Docs \n(https://docs.google[.]com/uc?authuser=0&id=0B_wY-Tu90pbjTDllRENWNkNma0k&export=download).  It is also encrypted using the same algorithm described below.\nEncryption\nThis backdoor relies on a custom encryption algorithm. Each byte of the plaintext is XORed with  \na stream generated by a function that looks similar to the Blum Blum Shub algorithm [11] . To encrypt \nor decrypt, a key and a modulus are passed to the encryption function.\nDifferent keys and moduli are used in the different samples. Some are hardcoded while others are \ngenerated during execution. Table 2 describes the different keys and moduli used by this malware.\n Table 2 Encryption keys and moduli\nName Key  \n(hexadecimal)Modulus  (hexadecimal)Description\nFlags 0x3EB13 0x7DFDC101 Registry\nfgtb 0x3EB13 0x7DFDC101 Registry\ngoogle 0x3EB13 0x7DFDC101 Downloaded C&C server URL\ntr32 [offset 0x0] of the data 0x6581E8DD Registry\ntnl [offset 0x20] of the log file 0x5DEE0b89 Log file \nC&C reply [offset 0x0] of the reply 0x7DFDC101 C&C reply\nC&C request payload 0x3EB13 0x7DFDC101 Payload structure  \nof the C&C request\nURL ID structure [offset 0x0] of the GET  id parameter0x7DFDC101 C&C server request\nCookie [offset 0x0] of the GET  id parameter0x7DFDC101 C&C server request\nPOST [offset 0x0] of the GET  id parameter0x7DFDC101 C&C server request20\nDiplomats in Eastern Europe \nbitten by a Turla mosquitoLog\nThe program maintains a comprehensive log file under the name [dllname].tnl . Interestingly,  \nit includes the timestamp of each log entry, allowing an easy retrace of the chain of events  \nthat happened on a compromised machine. This could be very helpful for forensic investigators.  \nIt is encrypted using the previously-described algorithm. The key is located at offset 0x20  \nin the header of the log file and the modulus is always 0x5DEE0B89. Figure 18 describes  the structure of this file.\n...TNL log ﬁle\nData\nData\nEncryptedDWORD strmA;\nDWORD  strmB;\nDWORD xor/one.pnum_lnum_strmA;\nDWORD  xor/two.pnum_lnum_strmA;\nDWORD xor/three.pnum_lnum_strmB;\nDWORD xor/four.pnum_lnum_strmA;\nDWORD  strmA_xor_/three.pnum_lnum/zero.pnum_lnum/seven.pnum_lnum/five.pnum_lnum/zero.pnum_lnum/seven.pnum_lnum/eight.pnum_lnum/nine.pnum_lnumh;\nDWORD  rand_shift_xor;\nDWORD  encryption_key;FILETIME SystemTime;\nDWORD type/one.pnum_lnum; //ex:/zero.pnum_lnumx/five.pnum_lnum/three.pnum_lnum/three.pnum_lnum/six.pnum_lnum,/zero.pnum_lnumx/five.pnum_lnum/three.pnum_lnum/three.pnum_lnum/seven.pnum_lnum, ...\nDWORD  type/two.pnum_lnum; //ex:/zero.pnum_lnumx/seven.pnum_lnum/three.pnum_lnum/four.pnum_lnumA,/zero.pnum_lnumx/seven.pnum_lnum/three.pnum_lnum/four.pnum_lnum/four.pnum_lnum, ...\nDWORD  data_len;\nBYTE data/bracketleft.cap/bracketright.cap;Header\n Figure  18 Structure of the log file\n Figure  19 Beginning of the log file\nC&C server communications and backdoor commands\nThe backdoor’s main loop is responsible for managing the communication with the C&C server  \nand executing the commands it sends. At the beginning of each round, it sleeps a random amount  of time – usually around 12 minutes.\nThe requests to the C&C server always use the same URL scheme: https://[C&C server  \ndomain]/scripts/m/query.php?id=[ base64(encrypted data)] . The user-agent is hardcoded \nin the samples and cannot be changed: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/  \n41.0.2228.0 Safari/537.36 This is the default value used by Google Chrome 41. The structure of the id  parameter is described  \nin Figure 20 .21\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\nDATA\nHeader\n/two.pnum_lnum/eight.pnum_lnum bytes /hyphen.cap Unkown\nPayload\nEncrypted\nKey /zero.pnum_lnumx/three.pnum_lnumEB/one.pnum_lnum/three.pnum_lnum\nModulus /zero.pnum_lnumx/seven.pnum_lnumDFDC/one.pnum_lnum/zero.pnum_lnum/one.pnum_lnumURL ID\nDWORD KeyStart; //modulo is /zero.pnum_lnumx/seven.pnum_lnumDFDC/one.pnum_lnum/zero.pnum_lnum/one.pnum_lnum\nBYTE ID; //range from /zero.pnum_lnumX/eight.pnum_lnum/five.pnum_lnum to /zero.pnum_lnumx/eight.pnum_lnum/nine.pnum_lnum\nBYTE some_lenght\nBYTE some_string/bracketleft.cap/bracketright.cap; //hardcoded to /four.pnum_lnum bytes\nBYTES MAC/bracketleft.cap/eight.pnum_lnum/bracketright.cap; //padded with /zero.pnum_lnumx/zero.pnum_lnum/zero.pnum_lnum/zero.pnum_lnum/zero.pnum_lnum\nDWORD null;\nDWORD  data_len;\nBYTE data/bracketleft.cap/bracketright.cap;BYTE random_junk;Encrypted \nwith ﬁrst \n/four.pnum_lnum bytes\n Figure  20 Structure of the requests to the C&C server – GET request with data  \nin the id parameter\nThe previous example is the case for which the id  GET parameter contains the Data  structure. \nHowever, data can also be put inside a cookie (with a null name) or in a POST request.  \nFigure 21 describes the various possibilities. \nIn all cases, the encryption key is the first DWORD of the URL id  structure. This key, in combination \nwith the modulus 0x7DFDC101, can decrypt the URL id  structure, the POST data and the cookie \nvalue. Then, the payload of the data structure is decrypted.\nData in GET\nparameterData lenghtREQUEST TO THE C&C\nPOST GET\nRandom\nData in cookie\n Figure  21 Selection of the request\nThe initial request contains general information about the compromised machine, such as the result \nof the commands ipconfig , set , whoami  and tasklist .\nThen, the C&C server replies with one of several batches of instructions. The structure of this reply is described in . The packet is fully encrypted (except the first four bytes), with the same algorithm, derived from Blum Blum Shub, described in section 4.3 using the first DWORD for the key  \nand 0x7DFDC101 for the modulus. Each batch of instructions is encrypted separately using  0x3EB13 for the key and 0x7DFDC101 for the modulus.22\nDiplomats in Eastern Europe \nbitten by a Turla mosquito\nInstructionC/two.pnum_lnumC reply packet\nHeader\nDWORD encryption_key;\nDWORD response_code; ///zero.pnum_lnumx/two.pnum_lnum/eight.pnum_lnum ok, /zero.pnum_lnumx/two.pnum_lnum/seven.pnum_lnum /hyphen.cap> do nothing/parenright.cap;\nDWORD  unknown/one.pnum_lnum;\nDWORD  unknown/two.pnum_lnum;\nDWORD  next_block_size;\nBatch of instructions\nDWORD unknown;\nDWORD unknown;\nDWORD unknown;\n...Header\n...Header\nWORD instruction_id // /parenleft.cap/zero.pnum_lnumx/three.pnum_lnum/zero.pnum_lnum/zero.pnum_lnum/one.pnum_lnum /hyphen.cap /zero.pnum_lnumx/three.pnum_lnum/zero.pnum_lnum/zero.pnum_lnumB/parenright.cap;\nDWORD  unknown_lenght;\nDWORD  payload_lenght;\nDWORD string_lenght // no trailling zero;\nBYTE unicode_string/bracketleft.cap/bracketright.cap;\nBYTE data bin/bracketleft.cap/bracketright.cap;PayloadInstruction\nEach batch is \nencrypted separately\nEncrypted \nwith ﬁrst /four.pnum_lnum bytes\n Figure  22 Structure of the C&C reply packet\nThe backdoor can execute certain predefined actions hardcoded in the binary. Table 3 is a summary  \nof the available commands.\n Table 3 Description of the backdoor commands\nCommand ID Description\n0x3001 Download file to the compromised machine. If there is .dll or .exe  \nin the filename, run it using LoadLibrary  or CreateProcess .\n0x3002 Launch a process (or load a library if there is .dll in the filename)\n0x3003 Delete a file using DeleteFileW .\n0x3004 Exfiltrate a file (max size sent = 104,857,600 bytes). The C&C server  can also ask to delete the files and to flush data in the registry Flags.\n0x3005 Store data to the registry Flags. The size of data should be ≤ 240 bytes.\n0x3006\nExecute cmd.exe /c [command]. The result is read using a pipe and sent back to the C&C.\n0x3007 Same as 0x3005.\n0x3008 Same as 0x3005.\n0x3009 Add a C&C server URL.\n0x300A Delete a C&C server URL.\n0x300B Same as 0x3009.\nIn some of the samples we have analyzed, the backdoor is also able to launch PowerShell scripts.23\nDiplomats in Eastern Europe \nbitten by a Turla mosquito5. analySIS  of ThE  JavaSCrIpT  baCkDoor\nSome of the fake Flash installers deliver two JavaScript backdoors instead of Mosquito, the Win32 \nbackdoor. These files are dropped on the disk in the folder %APPDATA %\\Microsoft\\ . They are named \ngoogle_update_checker.js  and local_update_checker.js\nThe first one contacts a web app hosted on Google Apps Script with the following URL  (https://script.google[.]com/macros/s/AKfycbwF_VS5wHqlHmi4EQoljEtIsjmglLBO  \n69n_2n_k2KtBqWXLk3w/exec)  and expects a base64-encoded reply. Then, it executes the decoded \ncontent using eval . We don’t know what the exact purpose of this additional backdoor is, but  \nit may be used to download additional malware or to execute malicious JavaScript code directly.  To establish persistence, it adds a Shell  value under HKCU\\Software\\Microsoft\\Windows  \nNT\\CurrentVersion\\Winlogon\\\nThe second JavaScript file reads %PROGRAMDATA %\\1.txt  and executes its content using  \nthe eval  function. To establish persistence, it adds a local_update_check  value  \nin HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run24\nDiplomats in Eastern Europe \nbitten by a Turla mosquito6. ConCluSIon\nThis campaign shows that Turla’s operators have many ideas to trick the user and to hide  \ntheir malicious traffic as legitimate. Even an experienced user can be fooled by downloading  a malicious file that is apparently from adobe.com , since the URL and the IP address correspond  \nto Adobe’s legitimate infrastructure. However, the usage of HTTPs would significantly reduce  \nthe effectiveness of these kinds of attacks, as it is harder to intercept and modify encrypted traffic on the path between a machine and a remote server. Similarly, a check of the file signature should quickly raise suspicion, as the files used in this campaign are not signed whereas installers  \nfrom Adobe are.\nIt also shows that Turla is still interested in consulates and embassies located in Eastern Europe  \nand they put a lot of effort into keeping their remote access to these important sources of information.\nFor any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com25\nDiplomats in Eastern Europe \nbitten by a Turla mosquito7. bIblIography\n 1 ESET Research, “Carbon Paper: Peering into Turla’s second stage backdoor, ” ESET, 30 03 2017. [Online].  \nAvailable: https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor /.\n 2 ESET Research, “Gazing at Gazer – Turla’s new second stage backdoor, ” ESET, 08 2017. [Online].  Available: https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf .\n 3 AlienVault, “Satellite Turla infrastructure, ” 2016. [Online].  Available: https://otx.alienvault.com/indicator /hostname/ebay-global.publicvm.com.\n 4 Kaspersky, “The Epic Turla Operation, ” 2014. [Online].  \nAvailable: https://securelist.com/the-epic-turla-operation/65545/.\n 5 BAE System, “SNAKE CAMPAIGN & CYBER ESPIONAGE TOOLKIT, ” 2014. [Online].  \nAvailable: http://artemonsecurity.com/snake_whitepaper.pdf .\n 6 F. Kafka, “New FinFisher surveillance campaigns: Internet providers involved?, ” 21 09 2017. [Online].  Available: https://www.welivesecurity.com/2017/09/21/new-finfisher-surveillance-campaigns/.\n 7 RIPE, “YouTube Hijacking: A RIPE NCC RIS case study, ” 17 03 2008. [Online]. Available:  https://www.ripe.net/publications/news/industry-developments/youtube-hijacking-a-ripe-ncc-ris-case-study .\n 8 FOX-IT, “Snake: Coming soon in Mac OS X flavour, ” 03 05 2017. [Online].  \nAvailable: https://blog.fox-it.com/2017/05/03/snake-coming-soon-in-mac-os-x-flavour /.\n 9 GDATA, “COM Object hijacking: the discreet way of persistence, ” 10 2014. [Online]. Available:  https://www.gdatasoftware.com/blog/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence.\n 10 Microsoft, “HelpAssistant account (installed by using a Remote Assistance session), ” 12 05 2014. [Online]. \nAvailable: https://technet.microsoft.com/en-us/library/dn745900(v=ws.11).aspx#SEC_HelpAssistant.\n 11 Wikipedia, “Blum Blum Shub, ” 13 11 2017. [Online]. Available: https://en.wikipedia.org/wiki/Blum_Blum_Shub.26\nDiplomats in Eastern Europe \nbitten by a Turla mosquito8. IoCS\n8.1 C&C server URLs\nYear URL\n2017 smallcloud.ga \n2017 fleetwood.tk \n2017 docs.google.com/uc?authuser=0&id=0B_wY-Tu90pbjTDllRENW\nNkNma0k&export=download (adstore.twilightparadox.com)\n2017 bigpen.ga \n2017 https://script.google.com/macros/s/AKfycbxxPPyGP3Z5wgwbsmXDgaNcQ6DCDf63vih-Te_jKf9SMj8TkTie/exec \n2017 https://script.google.com/macros/s/AKfycbwF_VS5wHqlH mi4EQoljEtIsjmglLBO69n_2n_k2KtBqWXLk3w/exec \n2017, 2016, 2015 ebay-global.publicvm.com \n2017, 2016, 2015, 2014 psychology-blog.ezua.com \n2016 agony.compress.to \n2016 gallop.mefound.com \n2016 auberdine.etowns.net \n2016 skyrim.3d-game.com \n2016 officebuild.4irc.com \n2016 sendmessage.mooo.com \n2016, 2014 robot.wikaba.com \n2015 tellmemore.4irc.com \n8.2 Fake adobe URLs\nhttp://get.adobe[.]com/stats/AbfFcBebD/?q=<base64-encoded data>\nhttp://get.adobe[.]com/flashplayer /download/update/x32http://get.adobe[.]com/flashplayer /download/update/x64\n8.3 Unofficial URLs for legitimate Flash installers\nhttps://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIsteEtraEJYM0QxQVE&export=downloadhttps://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIstM0RRekVEbnFfaXc&export=download27\nDiplomats in Eastern Europe \nbitten by a Turla mosquito8.4 Hashes\nComponent Installer Compilation Year 2017\nSHA-256 2A61B4D0A7C5D7DC13F4F1DD5E0E3117036A86638DBAFAEC6AE96DA507FB7624\nSHA-1 E0788A0179FD3ECF7BC9E65C1C9F107D8F2C3142\nMD5 2E244D33DD8EB70BD83EB38E029D39AC\nComponent Loader (.tlb) Compilation Year 2017\nSHA-256 F6C9AE06DFC9C6898E62087CC7DBF1AC29CBD0A4BCDB12E58E0C467E11AD4F75\nSHA-1 F5ABFB972495FDE3D4FB3C825C3BBC437AAB6C3A\nMD5 13B29C4840311A7BDB4C0681113598B0\nComponent Backdoor (.pdb) Compilation Year 2017\nSHA-256 E7FD14CA45818044690CA67F201CC8CFB916CCC941A105927FC4C932C72B425D\nSHA-1 24925A2E8DE38F2498906F8088CF2A8939E3CFD3\nMD5 3C32E13162D884AB66E44902EDDB8EEE\nComponent Installer Compilation Year 2017\nSHA-256 F667680DF596631FBA58754C16C3041FAE12ED6BF25D6068E6981EE68A6C9D0A\nSHA-1 CDE4D12EF9F70988C63B66BF019C379D59A0E61F\nMD5  0AB62A3E02A036D81A64DAC9E6B53533\nComponent Loader (.tlb) Compilation Year 2017\nSHA-256 26A1A42BC74E14887616F9D6048C17B1B4231466716A6426E7162426E1A08030\nSHA-1 BEE79383BCC73CF1E8E938131179223ADB39AC1D\nMD5 DFCE6F7D3A992DC2EE7FEDB8DEA58237\nComponent Backdoor (.pdb) Compilation Year 2017\nSHA-256 05254971FE3E1CA448844F8CFCFB2B0DE27E48ABD45EA2A3DF897074A419A3F4\nSHA-1 48BCEC5A65401FBE9DF8626A780F831AD55060A1\nMD5 137EB9B6EF122857BDE72F78962ED208\nComponent Installer Compilation Year 2017\nSHA-256 FC9961E78890F044C5FC769F74D8440FCECF71E0F72B4D33CE470E920A4A24C3\nSHA-1 04FB0667B4A4EB1831BE88958E6127CD7317638A\nMD5 3E65A6D5658E6517C59D978DC159057A\nComponent Backdoor Compilation Year 2017\nSHA-256 68C6E9DEA81F082601AE5AFC41870CEA3F71B22BFC19BCFBC61D84786E481CB4\nSHA-1 E441CC1547B18BBA76D2A8BD4D0F644AD5388082\nMD5 080B2CE7188547C1E9AD1B8089467261\nComponent Installer (JS backdoor) Compilation Year 2017\nSHA-256 B295032919143F5B6B3C87AD22BCF8B55ECC9244AA9F6F88FC28F36F5AA2925E\nSHA-1 BA3519E62618B86D10830EF256CCE010014E401A\nMD5 CC3ADFE6079C1420A411B72F702E7DC7\nComponent google_update_checker.js Compilation Year 2017\nSHA-256 244896995B6B83F11DF944CCDA41ED9F1F1D811EBF65D75FE4337FD692011886\nSHA-1 C51D288469DF9F25E2FB7AC491918B3E579282EA\nMD5 110E9BC680C9D5452C23722F42C385B328\nDiplomats in Eastern Europe \nbitten by a Turla mosquitoComponent local_update_checker.js Compilation Year 2017\nSHA-256 5D0973324B5B9492DDF252B56A9DF13C8953577BDB7450ED165ABBE4BF6E72D8\nSHA-1 3DC74671768EB90463C0901570C0AAE24569B573\nMD5 905B4E9A2159DAB45724333A0D99238F\nComponent Installer (Launch a PowerShell  \nto download an executable  \nat http://get.adobe[.]com/flashplayer /\ndownload/update/x32)Compilation Year 2017\nSHA-256 B362B235539B762734A1833C7E6C366C1B46474F05DC17B3A631B3BFF95A5EEC\nSHA-1 4B5610AC5070A7D53041CC266630028D62935E3F\nMD5 DFCA3FC4B7F4C637D7319219FCEC1876\nComponent Backdoor Compilation Year 2016\nSHA-256 B79CDF929D4A340BDD5F29B3AECCD3C65E39540D4529B64E50EBEACD9CDEE5E9\nSHA-1 240D3473932E4D74C09FCC241CF6EC175FDCE49D\nMD5 B7FD4C5119867539E36E96DE1D07AF6E\nComponent Old Backdoor Compilation Year 2015\nSHA-256 443CD03B37FCA8A5DF1BBAA6320649B441CA50D1C1FCC4F5A7B94B95040C73D1\nSHA-1 EC451F32110DE398781E3EDF27354E0425A51A23\nMD5 88F24B129E200C4F48852DCBB6E21DAF\n8.5 Windows artefacts\nHijacked CLSIDs\n{D9144DCD-E998-4ECA-AB6A-DCD83CCBA16D}\n{08244EE6-92F0-47F2-9FC9-929BAA2E7235}{4E14FBA2-2E22-11D1-9964-00C04FBBB345}{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\n{603D3801-BD81-11D0-A3A5-00C04FD706EC}\n{F82B4EF1-93A9-4DDE-8015-F7950A1A6E31}{9207D8C7-E7C8-412E-87F8-2E61171BD291}{A3B3C46C-05D8-429B-BF66-87068B4CE563}{0997898B-0713-11D2-A4AA-00C04F8EEB3E}\n{603D3801-BD81-11D0-A3A5-00C04FD706EC}\n{1299CF18-C4F5-4B6A-BB0F-2299F0398E27}\nFiles\n•\tThree files with the same name but a different extension (.tlb, .pdb and .tnl)  \nin a folder of %APPDATA%\n•\t %APPDATA%\\kb6867.bin  (simplified log file)29\nDiplomats in Eastern Europe \nbitten by a Turla mosquito8.6 ESET detection names\nRecent samples\nWin32/Turla.CQ\nWin32/Turla.CPWin32/Turla.CR\nWin32/Turla.CS\nWin32/Turla.CTWin32/Turla.CUWin32/Turla.CVWin32/Turla.CW\nWin32/Turla.CX\nOlder variants\nWin32/TrojanDownloader.CAM\nWin32/TrojanDownloader.DMU\nJavaScript backdoor\nJS/Agent.NWBJS/TrojanDownloader.Agent.REG"
}