{
    "title": "NCSC advisory - CNI Supply Chain",
    "text": " \n Advisory : Hostile state actors \ncompromising UK organisations with \nfocus on engineering and industrial \ncontrol companies  \n \n \n \n \n \n \n \n \n \n5 April 2018  \n Crown Copyright 2018  \nAbout this document  \nIn the past year, t he NCSC has noted  widespread targeting of UK infrastructure \ndevices  by hostile state actors. Th is has primarily  focused on engineering and \nindustrial control companies  and is ongoing .  \nThis advisory provides an update on the current threat and guidance for any \norganisations affected.  \n \nHandling of the Report  \nInformation in this report has been given a Traffic Light Protocol (TLP) of  WHITE , \nwhich means , subject to standard Copyright rules, it may be distributed without \nrestriction.  \n \nDisclaimer  \nThis report draws on reported information, as well as information derived from \nindustry sources.  \n \n \n \n \n \n \n \n \n \n \n \n  Introduction   \n \nThe NCSC is aware of an ongoing attack campaign against multiple companies \ninvolved in the Critical National Infrastructure ( CNI) supply chain. These attacks have \nbeen ongoing since at least March 2017 . \nThe targeting is focus ed on engineering and industrial control companies and has \ninvolved the harvest ing of NTLM 1 credentials via Server Message Block (SMB) \nusing strategic web compromises and spear -phishing.  \nThis advisory highlight s the sustained risk to UK companies involved in th ese \nsectors , provid es further details on the activity and  offers  guidance for any \norganisations affected.  \nFurther information on this activity was published on 15 March by the US \nDepartment of Homeland Security .2 The activity has also been highlighted previously \nby threat inte lligence companies in open sources as Berserk Bear, Energetic Bear, \nDragonfly, Havex and Crouching Yeti3. \nDetails  \n \nThe NCSC is aware of an attack campaign against multiple companies involved in \nthe CNI supply chain. These attacks have been ongoing since at least March 2017 \nand are ongoing as of 5 April 2018 . \nThe precise timeline for each compromise may vary. However, i n several  of the  \ncompromises  identified , once the attacker interact ed with the network, exploitation  \nwas typically achieved  within a week, with ongoing access maintained over the \ncourse of months.   \n \nOutline of attack  \n \nThe following diagrams outline the various steps taken to compromise  target \nnetworks  and propagate through them. \nInitial Infection  \n1. The attacker gets the target PC to communicate with a malicious fileserver \nunder actor  control using one of two methods:  \n                                                           \n1 Windows Challenge/Response (NTLM) is the authentication protocol used on networks that include systems \nrunning the Windows operating system and on stand -alone systems.  \n2 https://www.us -cert.gov/ncas/alerts/TA18 -074A   \n3 https://www.symantec.com/blogs/threat -intelligence/dragonfly -energy -sector -cyber -attacks  \nhttps://www.baesystems.com/en/feature/havex  \nhttps://www.kaspersky.co.uk/resource -center/threats/crouching -yeti-energetic -bear -malware -threat  \n \n a. The attacker carries out  a watering hol e attack , compromis ing a \nwebsite of interest to the target, and adding a link to a resource located \non the malicious fileserver.  \nb. The attacker sends a spear -phish ing email  from a compromised \naccount containing a document of interest  (sometimes  a known contact  \nof the target ). In several instances , stolen CVs have been used, which \nare configured to load a remote template from the malicious fileserver.  \n \n2. Running Inveigh PowerShell  scripts4 on the fileserver,  the attacker  harvests \nall the NTLM hashes sent to it by the target hosts that are attempting to logon \nand load the various resources.  \n \nTarget PCAttacker PC\n1) User opens a malicious \nemail , or visits a seeded \nwebsiteMalicious Fileserver running Inveigh\n1b) Malicious \nSpearphish1a) Watering \nHole2) Victim PC requests a file from \nmalicious fileserver using SMB , sending \nits NTLM hash in response to challenge .\n \nFigure 1: Initial Infection  \nExploitation and lateral movement  \n                                                           \n4 Publicly available SMB/HTTP  man -in-the-middle tool .  3. Using the NTLM hash acquired i n the previous step , the following actions are \npossible:  \na. The attacker uses the Inveigh -Relay PowerShell  script to replay the \nhash against an exposed area of the network.  \nb. The attacker cracks the captured hash offline to obtain user credentials \nneeded to access the network via a VPN/RDP or other remote access \nprotocol that is enabled.  \n \n4. Once access to the network has been obtained, the attacker will typically \nenumerate shares they can access, and into these, place  shortcut/link files \n(.lnk) with an icon that is located on the malicious fileserver.  \n \n5. Each host that views the shortcut in fil e explorer (even if it is not open ed) \nattempts to load the icon from the malicious fileserver, thus sending their \nNTLM hashes out to be replayed/harvested.  \n \nAttacker PC\nFileserver in target networks DMZ (or \notherwise exposed to the internet )3b) Attacker performs offline \ncracking of NTLM hash to obtain \nuser credentialsMalicious Fileserver running Inveigh\nTarget PC’s3a) Attacker replays \ncaptured NTLM hash \nagainst target network\n4) Attacker saves a \nmalicious .lnk file into \nmultiple fileshares 5) Hosts who view the \nmalicious .lnk file send \nNTLM hashes to malicious \nfileserver , repeating \nprevious steps .\n \nFigure 2: Exploitation and Lateral Movement   \n \nPost exploitation  \nOnce access has been gained on the network, the attacker will pivot between \nvarious machines using harvested credentials , penetration testing  and network \nadministration tools . In some cases , the actors have also deployed custom \nmalware/downloaders to maintain persistence  and they will also take advantage of \nand actively look for any password store s or VPN/remote access guides. If \nadministrative access is obtained, the attacker will likely add a new domain admin \naccount to the net work . Likewise,  if access to the webserver is obtained, they will \nlikely deploy a web -shell to facilitate ongoing access.  \nThe attacker will also use cracked  or stolen credentials to access the company’s mail \nserver and harvest the contact list of the compr omised user. Th e compromised mail \nserver may  then be used to  send spear -phish ing emails  emanating from the victim \ncompany to additional targets, increas ing their perceived legitimacy . \nAttacker PC\nFile Server Web Server Mail Server\nTarget PCTarget PC Target PCDirectory Server\nDeploy various \nhacking tools to \nfurther accessPivot between \nhosts on the \nnetworkDeploy a \nwebshell for \npersistent \naccessLog into users \nmailbox and \nharvest contacts to \nspearphishAdd a new \nDomain Admin \nuser\nSearch for interesting \ndocuments (VPN \ndetails , password files )\n \nFigure 3: Post -exploitation  \n \n  Tools  used  \n \nThe following is a list of publicly  available and custom tools used by the attacker in \neach stage of these attacks.  \n \nTool Name  Description  Detail  \nAngry IP Scanner  Publicly  available IP scanning \ntool. Used on attacker infrastructure to \nsurvey external network endpoints, or \non internal victim machines to survey \nthe internal network.  \nBackdoor. goodor  Custom downloader written in \nGoogle Go.  Calls out to one of nine hardcoded IP  \naddresses . Yara and Snort rules \nprovided.  \nSHA256: \nb5278301da06450fe4442a25dda2d83d\n21485be63598642573f59c59e980ad46  \nCrackMapExec  Publicly  available post \nexploitation tool.  Can be used from attacker \ninfrastructure to reuse credentials on \nnetworks that have the appropriate \nprotocols exposed . Otherwise,  it may be \ndeployed on the initial network foothold \nto further pivot around victim machines.  \nDorshell  A backdoor downloader built \nusing Shellter.  Yara rules provided.  \nSHA256: \nb8bc0611a7fd321d2483a0a9a505251e\n15c22402e0cfdc62c0258af53ed3658a  \n \nGet-GPPPassword  PowerShell  script to retrieve \npasswords of accounts \nprovisioned by group policy.  Used on victim machines.  \nInveigh  Publicly  available spoofing and \nman-in-the-middle tool.  Can be used on attacker infrastructure \nand also on victim networks to fa cilitate \nSMB relaying.  \nMalicious \nJavaScript \ndownloader  Obfuscated JavaScript that \ndownloads second stage \nmalware.  Executed on victim to download second \nstage.  \nYara rule provided.  \nSHA256: \n371d8fef7f976bf386cbcbe95358eb92dc\n764bdffaf3ced72b931c2e19e94378  \nMalicious Shortcut \nFile Windows shortcut file with its \nicon resource set to be loaded \nfrom remote fileserver.  Used to harvest additional credentials \nfrom the victim network.  \nYara rule provided.  \nMalicious Word \ndocument  Word document that loads a \ntemplate f ile from a remote \nfileserver.  Word documents used were legitimate \ndocuments that had been acquired and \nweaponised using Phishery.  \nMimikatz  Publicly  available multifunction \ntool primarily used for password \nextraction.  Used on victim machines.  \nPhishery  Publicly  available framework for \nspear -phishing.  Used to craft the spear -phishing \ndocuments used in these attacks.  \nPowershell  Inbuilt Windows utility for \nadvanced scripting.  Used on victim machines to facilitate \nother tools, download additional code \netc. Psexec  Publicly  available tool from \nSysinternals for remote \ncommand execution.  Used on victim machines.  \nRDP Bruteforcer  RDP brute forcing tool.  Observed as brute.exe. Likely used on \nboth attacker and victim machines.  \nYara rule provided.  \nSHA256: \n8234bf8a1 b53efd2a452780a69666d1ae\ndcec9eb1bb714769283ccc2c2bdcc65  \nScreenutil  Screenutil command line tool \nused to capture screenshots.  Used on victim machines.  \nZ_Webshell  Comprehensive ASPX web -\nshell.  Deployed on customer webserver to \nmaintain persistence.  \nYara rule provided.  \nSHA256: \nace12552f3a980f1eed4cadb02afe1bfb8\n51cafc8e58fb130e1329719a07dbf0  \nTable 1: Malicious Tools used  \n \nInfrastructure  \n \nThe attacker makes use of both compromised infrastructure and purchased VPS \ninfrastructure, and therefore  it should be noted that the IP addresses listed below \nmay not be wholly malicious , or may be in use by multiple malicious actors , and \nshould be used for intelligence gathering  purposes only.  \n \nIP Address  Use \n2.229.10.193  Callback for Goodor  malware  \n5.150.143.107  Callback for Goodor  malware  \n5.153.58.45  Fileserver used to capture NTLM hashes  \n41.205.61.221  Callback for Goodor  malware  \n41.78.157.34  Callback for Goodor  malware  \n62.8.193.206  Fileserver used to capture NTLM hashes  \n78.47.199.220  Endpoint used to access network  \n81.149.16.168  Endpoint used to access webshell  \n82.222.188.18  Callback for Goodor  malware  \n85.25.100.104  Endpoint used to access network  \n85.255.235.109  Endpoint used to access network  \n85.255.235.147  Endpoint used to access network  \n85.185.45.174  Endpoint used to access network  \n85.159.65.114  Hosting malicious files  \n91.183.104.150  Staging infrastructure  \n111.93.118.90  Endpoint used to access network  \n130.25.10.158  Callback for Goodor  malware  \n139.162.108.53  Endpoint used to access network  \n139.162.114.70  Endpoint used to access network  \n149.210.156.198  Endpoint used to Access webshell/mailserver  \n151.80.163.14  Endpoint used to access network  \n167.114.44.147  Callback/hoster of malicious files  \n173.212.212.56  Endpoint used to access network  \n176.53.11.130  Callback for Goodor  malware  \n184.154.150.66  Fileserver used to capture NTLM hashes  \n185.22.184.71  Endpoint used to access network  187.130.251.249  Callback for second stage executable  \n193.213.49.115  Callback for Goodor  malware  \n195.250.149.195  Endpoint used to access network  \n195.87.199.197  Callback for Goodor  malware  \n203.113.4.230  Fileserver used to capture NTLM hashes  \nTable 2: Infrastructure used  \nDetection  \n \nYARA Rules  \n \nBackdoor. goodor  \n \nrule Bytes_used_in_AES_key_generation {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"b5278301da06450fe4442a25dda2d83d21485be63598642573f59c59e980ad46\"  \n  strings:  \n    $a1 = {35 34 36 35 4B 4A 55 54 5E 49 55 5F 29 7B 68 36 35 67 34 36 64 \n66 35 68}  \n    $a2 = {fb f f ff ff 00 00}  \n  condition:  \n    all of ($a*)  \n} \n \nrule Partial_Implant_ID {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"b5278301da06450fe4442a25dda2d83d21485be63598642573f59c59e980ad46\"  \n  strings:  \n    $a1 = {3838313435364643}  \n    $a2 = {fb ff ff ff 00 00}  \n  condition:  \n    all of ($a*)  \n} \n \nrule Sleep_Timer_Choice {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"b5278301da06450fe4442a25dda2d83d21485be63598642573f59c59e980ad46\"  \n  strings:  \n    $a1 = {8b0424b90f00000083f9ff743499f7f98d420f}  \n    $a2 = {fb ff ff ff 00 00}  \n  condition:  \n    all of ($a*)  \n} \n \nrule User_Function_String {    meta: \n    author = \"NCSC\"  \n    hash = \n\"b5278301da06450fe4442a25dda2d83d21485be63598642573f59c59e980ad46\"     \n  strings:  \n    $b1 = {fb ff ff ff 00 00}  \n    $a2 = \"e.RandomHashString\"  \n    $a3 = \"e.De code\" \n    $a4 = \"e.Decrypt\"  \n    $a5 = \"e.HashStr\"  \n    $a6 = \"e.FromB64\"  \n  condition:  \n    $b1 and 3 of ($a*)  \n} \n \nDorshell  \n \nrule generic_shellcode_downloader_specific {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"b8bc0611a7fd321d2483a0a9a505251e15c22402e0cfdc62c0258af53ed3658a\"  \n  strings:  \n    $push1 = {68 6C 6C 6F 63}  \n    $push2 = {68 75 61 6C 41}  \n    $push3 = {68 56 69 72 74}  \n    $a = {BA 90 02 00 00 46 C1 C6 19 03 DD 2B F4 33 DE}  \n    $b = {87 C0 81 F2  D1 19 89 14 C1 C8 1F FF E0}  \n  condition:  \n    (uint16(0) == 0x5A4D and uint16(uint32(0x3C)) == 0x4550) and ($a or \n$b) and @push1 < @push2 and @push2 < @push3  \n} \n \nrule generic_shellcode_downloader {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"b8bc0611a7fd321d2483a0a9a505251e15c22402e0cfdc62c0258af53ed3658a\"  \n  strings:  \n    $push1 = {68 6C 6C 6F 63}  \n    $push2 = {68 75 61 6C 41}  \n    $push3 = {68 56 69 72 74}  \n  condition:  \n    (uint16(0) == 0x5A4D and uint16(uint32(0x3C)) == 0x4550) and  @push1 < \n@push2 and @push2 < @push3  \n} \n \n  Malicious batch files  \n \nrule Batch_Script_To_Run_PsExec {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"b7d7c4bc8f9fd0e461425747122a431f93062358ed36ce281147998575ee1a18\"  \n  strings:  \n    $ = \"Tokens=1 delims=\" ascii  \n    $ = \"SET ws=%1\" ascii  \n    $ = \"Checking %ws%\" ascii  \n    $ = \"%TEMP% \\\\%ws%ns.txt\" ascii  \n    $ = \"ps.exe -accepteula\" ascii  \n  condition:  \n    3 of them  \n} \n \nrule Batch_Powershell_Invoke_Inveigh {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"0a6b1b29496d4514f6485e78680ec4cd0296ef4d21862d8bf363900a4f8e3fd2\"  \n  strings:  \n    $ = \"Inveigh.ps1\" ascii  \n    $ = \"Invoke -Inveigh\" ascii  \n    $ = \"-LLMNR N -HTTP N -FileOutput Y\" ascii  \n    $ = \"powershell.exe\" ascii  \n  condition:  \n    all of them  \n} \n \nMalicious  Javascript  \n \nrule Obfuscated_Javascript {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"371d8fef7f976bf386cbcbe95358eb92dc764bdffaf3ced72b931c2e19e94378\"  \n  strings:  \n    $a1 = \"replace(/[^A -Za-z0-9\\\\+\\\\/\\\\=]/g,\\\"\\\")\" \n    $a2 = \"(1E3)\"  \n    $a3 = /.=.<<2|.>>4/  \n    $a4 = /.=(.&15)<<4|.>>2/  \n    $b1 = /this \\[.\\(/ \n  condition:  \n    all of ($a*) and #b1 > 4  \n} \n \n  Malicious Link  \n \nrule lnk_detect {  \n  meta: \n    author = \"NCSC\"  \n    description = \"malicious lnk properties\"  \n  strings:  \n    $lnk_magic = {4C 00 00 00 01 14 02 00 00 00 00 00 C0 00 00 00 00 00 00 \n46} \n    $lnk_target = {41 00 55 00 54 00 4F 00 45 00 58 00 45 00 43 00 2E 00 \n42 00 41 00 54}  \n    $s1 = {5C 00 5C 00 31 00}  \n    $s2 = {5C 00 5C 00 32 00}  \n    $s3 = {5C 00 5C 00 33 00 } \n    $s4 = {5C 00 5C 00 34 00}  \n    $s5 = {5C 00 5C 00 35 00}  \n    $s6 = {5C 00 5C 00 36 00}  \n    $s7 = {5C 00 5C 00 37 00}  \n    $s8 = {5C 00 5C 00 38 00}  \n    $s9 = {5C 00 5C 00 39 00}  \n  condition:  \n    (($lnk_magic at 0) and $lnk_target) and ($s1 or $s2 or $s3 or $s4 or \n$s5 or $s6 or $s7 or $s8 or $s9)  \n} \n \nRDP Bruteforcer  \n \nrule RDP_Brute_Strings {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"8234bf8a1b53efd2a452780a69666d1aedcec9eb1bb714769283ccc2c2bdcc65 \" \n  strings:  \n    $ = \"RDP Brute\" ascii wide  \n    $ = \"RdpChecker\" ascii  \n    $ = \"RdpBrute\" ascii  \n    $ = \"Brute_Count_Password\" ascii  \n    $ = \"BruteIPList\" ascii  \n    $ = \"Chilkat_Socket_Key\" ascii  \n    $ = \"Brute_Sync_Stat\" ascii  \n    $ = \"(\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}:\\\\d{1,5})\" wide \n    $ = \"BadRDP\" wide  \n    $ = \"GoodRDP\" wide  \n    $ = \"@echo off{0}:loop{0}del {1}{0}if exist {1} goto loop{0}del \n{2}{0}del \\\"{2}\\\"\" wide \n    $ = \"Coded by z668\" wide  \n  condition:  \n    4 of them  \n} \n Z_Webshell  \n \nrule Z_WebShell {  \n  meta: \n    author = \"NCSC\"  \n    hash = \n\"ace12552f3a980f1eed4cadb02afe1bfb851cafc8e58fb130e1329719a07dbf0\"  \n  strings:  \n    $ = \"Z_PostBackJS\" ascii wide  \n    $ = \"z_file_download\" ascii wide  \n    $ = \"z_WebShell\" ascii wide  \n    $ = \"1367948c7859d6533226042549228228\" ascii wide  \n  condition:  \n    3 of them  \n} \nSNORT rules \n \nBackdoor. goodor  \n \nAlert tcp any any <> any any (flow: established;  msg: \"backdoor. goodor \nbeacons\";  content:  \"User-Agent|3a|Go -http-client/1.1|0d0a|Accept -\nEncoding|3a|gzip\";  pcre:\"/\\.(aspx|txt) \\?[a-z0-9]{3}=[a -z0-9]{32}&/\";  sid: \n00000001 ; rev: 1; priority:  1;) \n \nLog artefacts  \n \nThe following information on open source tools used by the actor was  gathered by \nexecuting the tools themselves and monitoring their activity .  \nThe information may vary between systems and was collected with enhanced  \nlogging enabled . The additional logging was gathered by enabling Audit Policy, \nwhich  was achieved by auditing both success and failure attempts in all of the \npolicies under ‘Audit Policy’ in the ‘Local Group Policy Editor’.  \nThere was also an auditing entry added to the ‘Advanced Security Setting for local \nDisk’ that utilised several of t he advanced permissions to enable more in -depth \nlogging of the systems.  \n \nCrackMapExecWin  \n \nDescription  This is the original CrackMapExec tool compiled for Windows. Primary function is \nas a post -exploitation tool that aids in the automation of assessing the  security \nposture of large active directory networks.  \nType  Command line execution tool  \nTarget OS  Windows  \nHashes  SHA1 - F4250B961BD1C8694A949429F739D9F424283612  MD5  - 0E7D5D16E03393605F5F4862F1B9CC37  \nAttack usage   \n \n \nCrackMapExecWin could  be deployed on the infected system and would be used \nto target other system s on the network. This tool is a python based utility that \ncan interact with other tools such as PowerShell Empire, enabling an attack in \nfurther compromising  the network.  \nInstalling CrackMapExecWin on Infected system  \nScenario  Running the crackmapexec.exe executable on the infected system  \n \nLog type and \nname  Acquired information  \nEvent log  \n- Security  Event ID: 4688  - A new process has been created  \n    4689  - A process has exited  \n Process name: [filepath] \\crackmapexec.exe  \nEvent log  \n- Security  Event ID: 4690  - An attempt was made to duplicate a handle to an object  \n Same source process ID as previous 4688 event  \nEvent log  \n- Security  Event ID: 4658  - The han dle to an object was closed  \n    4656  - A handle to an object was requested  \n    4663  - An attempt was made to access an object  \n Process name: [filepath] \\crackmapexec.exe  \nExecution \nhistory - \nPrefetch  Prefetch file -  \nC:\\Windows \\Prefetch \\CRACKMAPEXEC.EXE -[PREFETCH_TRAILING_HEX].pf  \nExecution \nhistory  \n- Registry \nentries  HKEY_CURRENT_USER \\Software \\Microsoft \\Windows NT \\CurrentVersion \\AppCompatFlags \\Compatibility \nAssistant \\Store  \nHKEY_LOCAL_MACHINE \\SOFTWARE \\Microsoft \\Windows NT\\CurrentVersion \\Perflib \\009 \nHKEY_LOCAL_MACHINE \\SOFTWARE \\Microsoft \\Windows NT \\CurrentVersion \\Perflib \\CurrentLanguage  \nHKEY_LOCAL_MACHINE \\SOFTWARE \\WOW6432Node \\Microsoft \\Windows NT \\CurrentVersion \\Perflib \\009 \nHKEY_LOCAL_MACHINE \\SOFTWARE \\WOW6432Node \\Microsoft \\Windows \nNT\\CurrentVersion \\Perflib \\CurrentLanguage  \nHKEY_LOCAL_MACHINE \\SYSTEM \\ControlSet001 \\Services \\bam \\UserSettings \\[SID]  \nHKEY_LOCAL_MACHINE \\SYSTEM \\CurrentControlSet \\Services \\bam \\UserSettings \\[SID]  \nHKEY_USERS \\[SID] \\Software \\Microsoft \\Windows NT\\CurrentVersion \\AppCompatFlag s\\Compatibility \nAssistant \\Store  \n \nExecuting PowerShell Command on Infected System  \nScenario  Running the  following command on the i nfected system  \n .\\crackmapexec.exe localhost -u [user] -p [“password”] -lusers  \nEvent log  \n- Security  Event ID: 4688  - A new process has been created  \n    4689 - A process has exited  \n New process name: [filepath] \\crackmapexec.exe  \n Creator process name: \n C:\\Windows \\System32 \\windowsPowershell \\v1.0 \\powershell.exe  \nEvent log  \n- Security  Event ID: 4658  - The handle to an object was closed  \n    4656  - A handle to an object was requested  \n    4663  - An attempt was made to access an object  \n New process name: [filepath] \\crackmapexec.exe  \nEvent log  \n- Security  Event ID: 4690  - An attempt was made to duplicate a  handle to an object  \n Source process ID matches that of the previous events  Infected System  Victim System  Executing PowerShell command on i nfected system, targeting victim system  \nScenario  Running the following command on the infected system  \n .\\crackmapexec.exe [target -IP] –u [username] –p [“password”] –lsa \n \nInfected  System information  \nEvent log  \n- Security  Event ID: 4658 - The handle to an object was closed  \n    4688  - A new process has been created  \n    4656 - A handle to an object was requested  \n    4663  - An attempt was made to access an object  \n New process name: [filepath] \\crackmapexec.exe  \nEvent log  \n- Security  Event ID: 4690  - An attempt was made to duplicate a handle to an object  \n Source process ID matches that of the previous events  \nEvent log  \n- Security  Event ID: 4656  - A handle to an object was requested  \n Object name: [filepath] \\logs\\[Victim -IP]_[date].log  \n Process name: [filepath] \\crackmapexec.exe  \nEvent log  \n- Security  Event ID: 5158  - The Windows filtering platform has permitted a bind to a  \n  local port  \n Application name: [filepath] \\crackmapexec.exe  \nEvent log  \n- Security  Event ID: 5156  - The Windows filtering platform has permitted a connection  \n Application name: [filepath] \\crackmapexec.exe  \n Destination address: [Victim IP]  \n Destination port: 445  \nEvent log  \n- Security  Event ID: 4656 - A handle to an object was requested  \n Object name: [filepath] \\logs\\[Victim IP].secrets  \n Process name: [filepath] \\crackmapexec.exe  \nEvent log  \n- Security  Event ID: 4656 - A handle to an object was requested.  \nThere were a number of these events identified that had read and write control \naccesses and then another set of events with delete accesses.  \nObject name:  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string]  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\microsoft.vc90.crt.manifest  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\msvcr90.dll  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\msvcp90.dll  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\msvcm90.dll  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\python27.dll  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_str ing]\\unicodedata.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\bz2.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\_ctypes.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\_ssl.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\win32evtlog.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\win32api.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\_hashlib.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\_socket.pyd  \nC:\\Users \\[userna me]\\AppData \\Local \\Temp \\_[8_char_string] \\select.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\pyexpat.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Cipher._DES.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Util._counter.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Cipher._AES.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Hash._SHA256.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Util.strxor.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Hash._MD4.pyd  C:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Random.OSRNG.winrandom.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Cipher._ARC4.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Cipher._DES3.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\gevent._semaphore.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\Crypto.Cipher._DES3.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\gevent._semaphore.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\greenlet.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\gevent._util.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\gevent.ares.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\gevent.core.pyd  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\pywintypes27.dll  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\include \\pyconfig.h  \nC:\\Users \\[username] \\AppData \\Local \\Temp \\_[8_char_string] \\crackmapexec.exe.manifest  \nExecution \nhistory  \n- Prefetch  Prefetch file -  \nC:\\Windows \\Prefetch \\CRACKMAPEXEC.EXE -[prefetch_trailing_hex].pf  \n \nVictim System Information  \nEvent log  \n- Security  Event ID: 5156 - The Windows filtering platform has permitted a connection  \n Source address: [Infected System IP]  \n Destination address: [Victim System IP]  \n Destination port: 445  \nEvent log  \n- Security  Event ID: 4624  - An account was successfully logged on  \n Security ID: ANONYMOUS LOGON  \n Account name:  ANONYMOUS LOGON  \n Logon process: NtlmSsp  \n Authentication Package: NTLM  \nEvent log  \n- Security  Event ID: 4627 - Group membership information  \n    4634  - An account was logged off  \n Security ID: ANONYMOUS LOGON  \n Account name: ANONYMOUS LOGON  \nEvent log  \n- Security  Event ID: 5140 - A network share object was accessed  \n    5154  - A network share object was checked to see whether client can be \n   granted desired access  \n Source address: [Infected system IP]  \n Share name: \\\\*\\IPC$  \n \nEvent log  \n- Security  Event ID: 5154 - A network share object was checked to see whether client can be \n  granted desired access  \nSource address: [Infected system IP]  \nShare  name: \\\\*\\ADMIN$  \nShare path: \\??\\C:\\WINDOWS  \nRelative target name: SYSTEM32 \\laZCxPea.tmp, JggjpEVh.tmp  \nAccesses: ReadData, WriteData  \nEvent log  \n- Security  Event ID: 4656  - A handle to an object was requested  \n    4659  - A handle to an object was requested with intent to delete  \n Object name: C:\\Windows \\System32 \\laZCxPea.tmp, JggjpEVh.tmp  \n  \nAngry IP scanner  \n \nDescription  “Fast and friendly network scanner” - Purpose and functionality is to identify live \nsystems via ping requests. Once a system is identified  it will attempt to resolve \nthe hostname along with mac address and will also attempt to scan ports.  \nType  GUI \nTarget OS  Windows  \nHashes  SHA1 - EC91544253C4254C290D9C027C63EB46E3C2756A  \nMD5  - A85161524FA2A891EAF58C71D24F07A8  \nAttack usage   \n \n \nAngry IP scanner could  be deployed on the infected system and would be used \nto targ et other systems on the network. This would allow an attack to get a more \nin-depth understanding of the network and aid further attacks within th e \nnetwork.  \nPrerequisites  Java runtime environment  \n \nInstalling Angry IP scanner on Infected system  \nScenario  Running the ipscan -[version*] -setup.exe executable on the infected system.  \n*Version used in testing - 3.5.2  \n \nLog type and \nname  Acquired information  \nEvent log  \n- Security  Event ID: 4688  - A new process has been created  \n    4689  - A process has exited  \n Process name: [filepath] \\ipscan.exe  \nEvent log  \n- Security  Event ID: 4690  - An attempt was made to duplicate a handle to an object  \n Source process ID matches that of the previous events  \nEvent log  \n- Security  Event ID: 4688  - A new process has been created  \n Process name: [filepath] \\javaw.exe  \nEvent log  \n- Security  Event ID: 4656  - A handle to an object was requested  \n    4663  - An attempt was made to access an object  \n Process name:  \n C:\\Windows \\Prefetch \\IPSCAN.EXE -[prefetch_trailing_hex].pf  \nExecution \nhistory  \n-Registry \nentries  HKEY_CLASSES_ROOT \\Local \nSettings \\Software \\Microsoft \\Windows \\CurrentVersion \\AppContainer \\Storage \\micro soft.microsoftedge_8wek\nyb3d8bbwe \\Children \\001\\Internet Explorer \\DOMStorage \\angryip.org  \nHKEY_CLASSES_ROOT \\Local \nSettings \\Software \\Microsoft \\Windows \\CurrentVersion \\AppContainer \\Storage \\microsoft.microsoftedge_8wek\nyb3d8bbwe \\Children \\001\\Internet Explorer \\EdpD omStorage \\angryip.org  \nHKEY_LOCAL_MACHINE \\SOFTWARE \\Microsoft \\Windows \\CurrentVersion \\UFH \\ARP \nHKEY_LOCAL_MACHINE \\SOFTWARE \\WOW6432Node \\Angry IP Scanner  \nHKEY_LOCAL_MACHINE \\SOFTWARE \\WOW6432Node \\Microsoft \\Windows \\CurrentVersion \\Uninstall \\Angry IP \nScanner  \nHKEY_USE RS\\[SID] \\Software \\Classes \\Local \nSettings \\Software \\Microsoft \\Windows \\CurrentVersion \\AppContainer \\Storage \\microsoft.microsoftedge_8wek\nyb3d8bbwe \\Children \\001\\Internet Explorer \\DOMStorage \\angryip.org  \nHKEY_USERS \\[SID] \\Software \\Classes \\Local \nSettings \\Software \\Microsoft \\Windows \\CurrentVersion \\AppContainer \\Storage \\microsoft.microsoftedge_8wek\nyb3d8bbwe \\Children \\001\\Internet Explorer \\EdpDomStorage \\angryip.org  \nHKEY_USERS \\[SID] \\Software \\JavaSoft \\Prefs \\ipscan  \nHKEY_USERS \\[SID] \\Software \\Microsoft \\Windows \\CurrentVersion \\Search \\JumplistData  Infected System  Victim System  HKEY_USERS \\[SID] \\Software \\Microsoft \\Windows NT \\CurrentVersion \\AppCompatFlags \\Compatibility \nAssistant \\Store  \nHKEY_USERS \\[SID] \\Local \nSettings \\Software \\Microsoft \\Windows \\CurrentVersion \\AppContainer \\Storage \\microsoft.microsoftedge_8wek\nyb3d8bbwe \\Children \\001\\Internet Explorer \\DOMStorage \\angryip.org  \nHKEY_USERS \\[SID]_Classes \\Local \nSettings \\Software \\Microsoft \\Windows \\CurrentVersion \\AppContain er\\Storage \\microsoft.microsoftedge_8wek\nyb3d8bbwe \\Children \\001\\Internet Explorer \\EdpDomStorage \\angryip.org  \n \nInitiating scan on Infected system, targeting victim system  \nScenario  With default settings on the An gry IP Scanner a scan was initiated, targeting the \nvictim machine.  \n \nInfected  & Victim System Information  \nEvent log  \n- Security  Event ID: 5156  - The Windows filtering platform has permitted a connection  \n Direction: Inbound & Outbound  \n Source address: [Infected system IP]  \n Destination address: [Victim system IP]  \nWith default settings there will be three Inbound & three outbound event logs \nseen as by default the number of ping  probes to send is set to three  \n \nPsExec  \n \nDescription  PsExec is part of the Sy sinternals command line tools. PsExec is a legitimate tool \nthat can be used to launch processes on remote systems on a network.  \nType  Command line execution tool  \nTarget OS  Windows  \nHashes  SHA1  - E50D9E3BD91908E13A26B3E23EDEAF577FB3A095  \nMD5   - 27304B246C7D5B4E149124D5F93C5B01  \nAttack usage   \n \n \nPsExec may be installed on a system for legitimate usage. As PsExec can be used \nto run processes on other systems, an attacker could utilise the tool for \nmalicious purposes.  \n \nRunning  PsExec  on Infected system  \nScenario  Opening a command prompt on the victim system remotely from the infected \nsystem.  \nLog type and \nname  Acquired information  \nInfected System Information  \nEvent log  \n- Security  Event ID: 4688  - A new process has been created  \n    4689  - A process has exited  \n New p rocess name: [filepath] \\psexec.exe  \nEvent log  \n- Security  Event ID: 5156 - The Windows filtering platform has permitted a connection  \n Direction: Outbound  \n Source Address: [Infected system IP]  \n Destination Address: [Victim system IP]  \n Destination port: 445  \nEvent log  \n- Security  Event ID: 5158  - The Windows filtering platform has permitted a bind to a local  \n   port  Infected System  Victim System   Application name: [filepath] \\psexec.exe  \n Source port: [#1]  \nEvent log \n- Security  Event ID: 5156 - The Windows filtering platform has permitted a connection  \n Application name: [filepath] \\psexec.exe  \n Direction: Outbound  \n Source Address: [Infected system IP]  \n Source port: [#1] (same port number as above, in event 5158)  \n Destination Address: [Victim system IP]  \nExecution \nhistory  \n-Registry \nentries  HKEY_USERS \\[SID] \\Software \\Sysinternals \\PsExec  \n \n \n \n \nVictim System Information  \nEvent  log - \nSystem  Event ID: 7045  - A service was installed in the system  \n Path: %SystemRoot% \\PSEXESVC.exe  \nEvent log - \nSystem  Event ID:  7036  - The service state has changed  \n Execution: PSEXESVC  \nEvent log  \n- Security  Event ID: 4697  - A service was install in the system  \n Path: %SystemRoot% \\PSEXESVC.exe  \nEvent log  \n- Security  Event ID: 4688  - A new process has been created  \n Process name: C: \\Windows \\PSEXESVC.exe  \nEvent log  \n- Security  Event ID: 5145  - A network share object was checked to see whether client can  \n   be granted desired access  \n    5156  - The Windows filtering platform has permitted a connection  \n Source address: [Infected system IP]  \n Relative target name: PSEXESVC  \nEvent log  \n- Security  Event ID: 5140  - A network share object was accessed  \n Source address: [Infected system IP]  \n Share name: \\\\*\\Admin$  \nEvent log  \n- Security  Event ID: 4648  - A logon was attempted using explicit credentials  \n    4624  - An account was successfully logged on  \n Process name: C: \\Windows \\PSEXESVC.exe  \n Logon ID: [ID]  \nEvent log  \n- Security  Event ID: 4627  - Group m embership information  \n Logon ID: [ID] (same as above, in event 4624)  \nEvent log  \n- Security  Event ID: 4703  - A token right was adjusted  \n Logon ID: [ID] (same as above, in event 4624)  \nEvent log  \n- Security  Event ID: 4688 - A new process has been created  \n New process name: C: \\Windows \\cmd.exe  \n Creator process name: C: \\Windows \\PSEXESVC.exe  \nEvent log  \n- Security  Event ID: 4656  - A handle to an object was requested  \n    4663  - An attempt was made to access an object  \n Object name:  \n C:\\Windows \\Prefetch \\PSEXESVC.EXE -[prefetch_trailing_hex ].pf \n \n \n Mitigation  \n \nA variety of mitigations will be of use in defending against the attacks detailed in \nthis report:  \n \nDefend your organisation against spear -phishing, by taking a multi -layered \napproa ch.  \nSee NCSC Guidance: https://www.ncsc.gov.uk/phishing   \n \nProtect your devices and networks by keeping them up to date: apply security \npatches promptly, use anti -virus and scan regularly to guard against kn own \nmalware threats.  \nSee NCSC Guidance: https://www.ncsc.gov.uk/guidance/mitigating -malware   \n \nPrevent and detect lateral movement in your enterprise networks.  \nSee NCSC Guidance: https://www.ncsc.gov.uk/guidance/preventing -lateral -\nmovement   \n \nImplement architectural controls for network segregation. This would help mitigate \nthe exposure of the SMB issues described in the report.  \nSee NCSC Guidance: https://www.ncsc.gov.uk/guidance/10 -steps -network -\nsecurity  \n \nProtect the management interfaces of your critical operational systems. In \nparticular, use browse -down architecture to prevent attackers easily gaining \nprivileged accesses to your most vital assets.  \nSee NCSC blog post: https://www.ncsc.gov.uk/blog -post/protect -your-\nmanagement -interfaces   \n \nSet up a security monitoring capability so you are collecting the data that will be \nneeded to analyse network intrusions.  \nSee NCSC Guid ance: https://www.ncsc.gov.uk/guidance/10 -steps -monitoring   \n \nReview and refresh your incident management processes.  \nSee NCSC Guidance: https://www.ncsc.gov.uk/guidance/10 -steps -incident -\nmanagement   \n \n \n \n "
}