{
    "title": "slicing and dicing cve-2018-5002 payloads_ new chainshot malware",
    "text": "Tools Playbooks Speaking Events About Us\nSlicing and Dicing CVE‐2018‐5002 Payloads: New\nCHAINSHOT Malware\n13,437 people reacted 2 11 min. read\nThis story begins with one of our blog authors, who, following the discovery of a new Adobe Flash 0‐day , found\nseveral documents using the same exploit that were used in targeted attacks. We were also able to collect\nnetwork captures including the encrypted malware payload. Armed with these initial weaponized documents, we\nuncovered additional attacker network infrastructure, were able to crack the 512‐bit RSA keys, and decrypt the\nexploit and malware payloads. We have dubbed the malware ‘CHAINSHOT’, because it is a targeted attack with\nseveral stages and every stage depends on the input of the previous one.\nThis blog describes the process we took to analyze the malware, how we managed to decrypt the payloads, and\nthen how we found parts of a new attack framework. We also found additional network infrastructure which\nindicates similar attacks were conducted against a wide range of targets with disparate interests. This attack\nchain is designed in a way that makes it very difficult to execute a single part on its own, be it the exploit or\npayload. To make our analysis easier, we reproduced the server‐side infrastructure, by doing so we were able to\nconduct dynamic analysis and get a better understanding how the exploit and payload work together.\nThis serves as a follow‐up of Icebrg’s  article  which describes the initial findings.\n \nCracking a RSA Key\nFirst, let’s recap how the overall attack chain works to understand at which point the RSA key is needed. The\nmalicious Microsoft Excel document contains a tiny Shockwave Flash ActiveX object with the following\nproperties:\nFigure 1. Malicious Shockwave Flash ActiveX object properties\nThe “Movie” property contains a URL to a Flash application which is downloaded in cleartext and then executed.\nThe “FlashVars” property contains a long string with 4 URLs which are passed to the downloaded Flash\napplication. The Flash application is an obfuscated downloader which creates a random 512‐bit RSA key pair in\nmemory of the process. While the private key remains only in memory, the public keys’ modulus n is sent to the\nattacker’s server. On the server side, the modulus is used together with the hardcoded exponent e 0x10001 to\nencrypt the 128‐bit AES key which was used previously to encrypt the exploit and shellcode payload. The\nencrypted exploit or payload is sent back to the downloader which uses the in‐memory private key to decrypt the\nAES key and the exploit or payload.\nAs the modulus is sent to the server of the attacker, it’s also in our network capture. Together with the\nhardcoded exponent we have the public key which we can use to get the private key. Keep in mind that this was\nonly possible because the attacker chose a key length of 512‐bit which is known to be insecure. In order to do so,\nwe have to factorize the modulus n into its two prime numbers p and q. Luckily this problem has already been\nsolved previously, by an awesome public project ‘ Factoring as a Service ‘. The project uses Amazon EC2’s high\ncomputing power and can factorize large integers in just a matter of hours.\nFollowing this logic, let’s take the following modulus of the public key sent to the attacker’s server to get the\nshellcode payload.\nFigure 2. HTTP POST request for the encrypted shellcode payload with the modulus n in hexadecimal\nAfter removing the first 2 bytes which are used in this case to retrieve the 32‐bit version of the shellcode\npayload, we have the following modulus in hexadecimal:\nAfter we have factorized the integer, we get the following two prime numbers in decimal:\nP\nQ\nWith the help of p and q we can calculate the private key. We used a small public tool to create it in Privacy\nEnhanced Mail (PEM) format:\nWith the help of the private key we could now decrypt the 128‐bit AES key. We used OpenSSL to do this:\nThe encrypted AES key is extracted from the encrypted binary blob as described by Icebrg. It’s at offset 0x4 and\nhas the length of 0x40 bytes. Encrypted AES key:\nDecrypted AES key:\nNow that we have the decrypted AES key, we can decrypt the actual payload. The Flash downloader uses a\ncustom initialization vector (IV) for the AES algorithm which can be found at offset 0x44 in the encrypted blob\nand is 16 bytes long:\nFor the final decryption we used OpenSSL again:\nThe decrypted shellcode payload is additionally compressed with zlib which can be seen by looking at the first 2\nmagic bytes 0x789C. We decompressed it with Offzip . Finally, we have the decrypted shellcode payload. The\nsame procedure can be used to decrypt the Flash exploit which isn’t additionally zlib compressed.\n \nServer‐side Reproduction\nAfter we had the decrypted Flash exploit and shellcode payloads, we started to do a static analysis which turned\nout to be a quite tedious task. This is due to the obfuscation in the exploit and the complexity of shellcode\npayload which contains its own two PE payloads. Next, we attempted to do a dynamic analysis which quickly\nturned out to be impossible, because every stage relies on data passed from the previous. The shellcode payload\ndoes not execute properly without the data passed to it from the exploit. The exploit does not execute on its own\nwithout the variables passed from the downloader and so on.\nDue to the difficulties of analyzing the code statically, we decided to reproduce a simplified version of the server‐\nside PHP scripts in order to make a full dynamic analysis possible. As we had the decrypted exploit, shellcode\npayload and the PCAP, we had all the information required to do so. Specifically, we created the following setup:\nLocal Apache server with XAMPP, with the domain used in the attack configured to resolve to localhost\nA directory structure which mirrored that on the attackers’ servers (as specified in the PCAPs)\nSetting of custom HTTP headers as per the PCAPs’ responses.\nAll of the requested files are sent back gzip encoded, otherwise the attack chain doesn’t work. We have\nuploaded the PHP scripts to our GitHub account , so you can also play with the different stages and see how it\nworks.\n \nAdditional Details of the Flash Exploit\nWhile the exploit has been already described , we want to give some additional details surrounding it that we\nfound during our analysis. In particular, we were interested in the part which transfers execution to the shellcode\npayload. While most parts of the decompiled ActionScript exploit code are obfuscated, luckily some method\nnames were left in cleartext.\nBecause the decrypted shellcode payload doesn’t run on its own when transformed into an executable, we have\nto figure out how execution works and if one or more parameters are passed. Therefore, the most interesting\nmethod for us is “executeShellcodeWithCfg32” which indicates we can find the passed data in it. It creates a\nsmall shellcode template and fills some placeholder values at runtime. The disassembled template looks as\nfollows:\nFigure 3. Shellcode template with placeholders (red) in the Flash exploit to pass execution to the shellcode payload\nWhile the final prepared shellcode looks as follows:\nFigure 4. Runtime version of the shellcode template with filled placeholders\nLet’s take a look at what values are set to the placeholders (0x11111111, 0x22222222, …). The address\n0xA543000 in Figure 4 is the entrypoint of the decrypted shellcode payload which has a small NOP sled in front\nof the actual code:\nFigure 5. Entrypoint of the shellcode template in memory\n \nThe address 0x771A1239 in Figure 4 is in the middle of the function NtPrivilegedServiceAuditAlarm in ntdll.dll:\nFigure 6. Windows API function NtPrivilegedServiceAuditAlarm\n \nHowever, we can also see in Figure 4 that before calling the API function via “call edx”, the value 0x4D is moved\ninto eax which is the ID of the API function NtProtectVirtualMemory. By doing so, the function\nNtProtectVirtualMemory is executed without calling it directly. This trick is likely used to bypass\nAVs/sandboxes/anti‐exploit software which hook NtProtectVirtualMemory and the attacker probably chose\nNtPrivilegedServiceAuditAlarm as a trampoline as it’s unlikely to be ever be monitored.\nThe data at this address 0x9DD200C in Figure 4 looks like a structure into which the last NTSTATUS return value\nof NtProtectVirtualMemory is copied. The address of this structure seems to be passed to the shellcode payload\nin ebx, however we haven’t figured out what’s its purpose is. Finally, shellcode payload is executed via “call edi”\nTo sum up, the memory access rights of the shellcode payload are changed in 0x1000 byte blocks to RWE via\nNtProtectVirtualMemory. The last NTSTATUS code is saved into memory pointed to by ebx and the shellcode\npayload is executed.\nAnother interesting aspect of the exploit code is that it sends status messages when something goes wrong at\nevery stage of the exploitation. These status messages are very similar to those send by the initial Flash\ndownloader and are sent to the attacker’s server via fake PNG files (see Icebrg). They also contain the “/stab/”\ndirectory in the URL and the actual message is also sent encoded via custom digit combinations. However, the\nstatus message of the exploitation code contains additional information in the form of abbreviations of the\nappropriate stage. By looking at those messages, we can get a better understanding how the exploit works. The\nfollowing messages are possible:\n \nStatus message code  Description\n2‐0‐9‐vp Short for VirtualProtect\n2‐0‐9‐g3Short for something like gadget3 (ROP gadget) cause a byte\narray is created 0x5A5941584159C3 which disassembles to:\npop edx\npop ecx\ninc ecx\npop eax\ninc ecx\npop ecx\nretn\n2‐0‐9‐RtlAllocateHeap Self‐explaining\n2‐0‐9‐DeleteDC Self‐explaining\n2‐0‐9‐GetDC Self‐explaining\n2‐0‐9‐sprintf Self‐explaining\n2‐0‐9‐VP Short for VirtualProtect\n2‐0‐9‐RU Short for RtlUnwind\n2‐0‐9‐NVP Short for NtProtectVirtualMemory\n2‐0‐9‐NPSAA Short for NtPrivilegedServiceAuditAlarm\n2‐0‐9‐G Probably short for Gadget\n2‐0‐9‐SRPShort for something like StackReturnProcedure because\ntwo‐byte arrays 0x81C4D8000000C3 and\n0x81C4D0000000C3 are created which disassemble to:\nadd esp, 0D8h\nretn\n– and –\nadd esp, 0D0h\nretn\n2‐0‐9‐PAXShort for something like PopEAX as a byte array 0x58C3 is\ncreated before which disassembles to:\npop eax\nretn\nTable 1. Status messages used in the Flash exploit code\nThe Shellcode Payload\nAfter the exploit successfully gains RWE permissions, execution is passed to the shellcode payload. The shellcode\nloads an embedded DLL internally named FirstStageDropper.dll, which we call CHAINSHOT, into memory and\nruns it by calling its export function “__xjwz97”. The DLL contains two resources, the first is x64 DLL internally\nnamed SecondStageDropper.dll and the second is a x64 kernelmode shellcode.\nFirstStageDropper.dll is responsible for injecting SecondStageDropper.dll into another process to execute it.\nWhile the shellcode payload only contains code to search for and bypass EMET, FirstStageDropper.dll also\ncontains code for Kaspersky and Bitdefender. In case of EMET, it searches the loaded modules for emet.dll and\nemet64.dll, for Kaspersky it searches for klsihk.dll, and for Bitdefender it searches for avcuf32.dll and avcuf64.dll.\nIt also collects and sends encrypted user system and process information data together with a unique hardcoded\nID to the attacker’s server. The data is sent to URLs that contain “/home/” and “/log/” directories and for\nencryption it uses the Rijndael algorithm. As the attacker server did not respond at the time of our analysis, we\nguess a command is sent back to execute the SecondStageDropper.dll.\nWhile the samples we obtained inject SecondStageDropper.dll in usermode via thread injection, the x64\nshellcode seems to have an option to inject it from kernelmode. However, we haven’t figured out what the exact\npurpose of it is, since it’s never executed; it also searches for an additional resource which wasn’t present in the\nsamples we analyzed.\nThe kernelmode shellcode contains parts of Blackbone , an open source library for Windows memory hacking.\nThe following functions are taken from its code:\nFindOrMapModule\nBBQueueUserApc\nBBCallRoutine\nBBExecuteInNewThread\nIt also contains code from TitanHide , using identical code to lookup SSDT in Win7 and Win10 as described  by the\nauthor.\nSecondStageDropper.dll acts as a downloader for the final payload. It collects various information from the victim\nsystem, encrypts it, and sends it to the attacker’s server. It also scans for the following processes and skips\nexecution if found:\n \nProcess name Security Solution\nadawareservice.exe\nadawareservicetray.exeAdaware\nmbam.exe Malwarebytes\nbdagent.exe\nbdwtxag.exe\nseccecenter.exe (contains a typo, should be seccenter.exe)\nvsserv.exe\nupdatesrv.exe\nodscanui.exe\nodsw.exeBitdefender\nefainst.exe\nelaminst.exe\ninstca.exe\nmcui32.exe\nnavw32.exe\nncolow.exe\nnsbu.exe\nsrtsp_ca.exe\nsymdgnhc.exe\nsymerr.exe\ntuih.exe\nwfpunins.exe\nwscstub.exeSymantec / Norton\navp.exe Kaspersky\nHitmanPro.exe Sophos / HitmanPro\nabcde.exe ?\nTable 2. Process name lookup list\n \nUnfortunately, at the time of the analysis we were unable to obtain additional files, so we were unable to figure\nout what the final stage is. However, CHAINSHOT contacts the following domains via HTTPS to get the final\npayload:\ncontact.planturidea[.]net\ndl.nmcyclingexperience[.]com\ntools.conductorstech[.]com\nIn both samples we analyzed the final domains used were the same. We have obtained two x86 versions of the\nshellcode payload with its embedded PE files and the kernelmode shellcode. While the shellcode payload,\nFirstStageDropper.dll and kernel shellcode do not differ, the SecondStageDropper.dll contains a couple of\ndifferent strings. The following strings are different, possibly indicating they are changed for every victim, with the\nfinal payload directory being an MD5 representation of the “project name” or something similar.\n Sample 1 Sample 2\nUser‐agentMozilla/5.0 (Windows NT 6.4; WOW64)\nAppleWebKit/537.36 (KHTML, like Gecko)\nChrome/36.0.1985.143 Safari/537.36\nEdge/12.0Mozilla/5.0 (Windows NT 6.3; Win64; x64;\nrv:10.0) Gecko/20100101 Firefox/10.0\nQueried final payload\ndirectories\n /0cd173cf1caa2aa03a52b80d7521cc75e\n/1cd173cf1caa2aa03a52b80d7521cc75e/0fa0a5fc0d2e28cc3786e5d6eb273f1fa\n/1fa0a5fc0d2e28cc3786e5d6eb273f1fa\nUnique string used in\nnetwork\ncommunication148a028d‐57c6‐4094‐b07d‐720df09246dd 3784113f‐b04e‐4c1e‐b3be‐6b0a22464921\nTable 3. String differences in SecondStageDropper.dll\n \nThe shellcode payload and PE files partly contain the same code indicating a framework was used to create them.\nFor example, both the shellcode and CHAINSHOT itself make extensive use of the same exception handling with\ncustom error codes. They also both use the same code to scan for and bypass EMET. Furthermore, other parts\nsuch as the OS version recognition are identical in all samples and the PE files’ compilation timestamps are\nzeroed out. Another interesting fact is that FirstStageDropper.dll also sends status messages back to the attacker\nstarting with digit “9”. For example, the following network capture from our local tests show a successful network\ncommunication up to the point where the attacker presumably sends back the command to execute\nSecondStageDropper.dll:\nFigure 7. Network capture of a successful attack reproduced locally in a VM\nAdditional Infrastructure\nOne of the domains reported by IceBrg had an associated SSL certificate which was documented in their write\nup. By searching for other IP addresses using the same certificate we were able to find a large number of\nassociated domains that were likely also used in similar attack campaigns. Just like the domain contacted within\nthe Excel documents analyzed, the additional domain names are created in a similar way using similar hosting\nproviders and registrars and used names which are very similar to official websites to avoid suspicion. The list of\ndomains can be found in the IOC section.\n \nConclusion\nWe uncovered part of a new toolkit which was used as a downloader alongside Adobe Flash exploit CVE‐2018‐\n5002 to target victims in the Middle East. This was possible because the attacker made a mistake in using\ninsecure 512‐bit RSA encryption. The malware sends user information encrypted to the attacker server and\nattempts to download a final stage implant. It was allegedly developed with the help of an unknown framework\nand makes extensive use of custom error handling. Because the attacker made another mistake in using the same\nSSL certificate for similar attacks, we were able to uncover additional infrastructure indicating a larger campaign.\nPalo Alto Networks customers are protected from this threat in the following ways:\nWildFire detects all malicious Excel documents, the Flash downloader and exploit and all CHAINSHOT samples\nwith malicious verdicts\nAutoFocus customers can track the samples with the CVE‐2018‐5002  exploit and CHAINSHOT  malware tags\nTraps detects and blocks the malicious Excel documents with the Flash exploit\nFinally, we’d like to thank Tom Lancaster for his assistance in this investigation.\n \nIndicators of Compromise\nAdobe Flash Downloader\n189f707cecff924bc2324e91653d68829ea55069bc4590f497e3a34fa15e155c\n \nAdobe Flash Exploit (CVE‐2018‐5002)\n3e8cc2b30ece9adc96b0a9f626aefa4a88017b2f6b916146a3bbd0f99ce1e497\n \nCHAINSHOT Samples\nX86 Shellcode Payloads:\nd75de8f7a132e0eb922d4b57f1ce8db47dfcae4477817d9f737762e486283795\n2d7cb5ff4a449fa284721f83e352098c2fdea125f756322c90a40ad3ebc5e40d\n \nFirstStageDropper.dll:\na260d222dfc94b91a09485647c21acfa4a26469528ec4b1b49469db3b283eb9a\na09273b4cc08c39afe0c964f14cef98e532ae530eb60b93aec669731c185ea23\n \nSecondStageDropper.dll:\n43f7ae58e8e5471917178430f3425061d333b736974f4b2784ca543e3093204b\n3485c9b79dfd3e00aef9347326b9ccfee588018a608f89ecd6597da552e3872f\n \nInfrastructure\nftp[.]oceasndata[.]com\ndl[.]beanfile[.]com\neukaznews[.]com\nexclusivesstregis[.]com\nfishing‐uae[.]com\napi[.]usecisco[.]info\ngulfnews[.]uae‐travel‐advisories[.]com\nqatar[.]eng‐theguardian[.]com\nmalomatiaa[.]com\nnews[.]theqatarpeninsula[.]com\npeople[.]dohabayt[.]com\nqatar[.]doharotanatimes[.]com\nsites[.]oceasndata[.]com\nqatar[.]smallwarjournal[.]com\nqatarembassies[.]com\nsa[.]eukaznews[.]com\nsec[.]oceasndata[.]com\nrss[.]beanfile[.]com\nusecisco[.]info\nsmallwarjournal[.]com\nawareness‐qcert[.]net\nspecials[.]fishing‐uae[.]com\ntheqatarpeninsula[.]com\nuae‐travel‐advisories[.]com\neng‐theguardian[.]com\nsecurityandpolicing[.]me\napi[.]qcybersecurity[.]org\nqatar‐sse[.]com\napi[.]motc‐gov[.]info\nyouraccount‐security‐check[.]com\napi[.]exclusivesstregis[.]com\nnewhorizonsdoha[.]com\nsandp2018[.]securityandpolicing[.]me\nicoinico[.]one\napi[.]dohabayt[.]com\nthelres[.]com\nnews[.]gulf‐updates[.]com\nqatarconferences[.]thelres[.]com\napi[.]smallwarjournal[.]com\nqcybersecurity[.]org\nikhwan‐portal[.]com\ngulf‐updates[.]com\napi[.]qatar‐sse[.]com\ninfo[.]awareness‐qcert[.]net\napi[.]newhorizonsdoha[.]com\ninternationsplanet[.]com\nwww[.]winword[.]co\nwww[.]oceasndata[.]com\npeople[.]dohabayt[.]com\neng‐defenseadvisers[.]com\nmotc‐gov[.]info\nbeanfile[.]com\nnews[.]eng‐defenseadvisers[.]com\nwinword[.]co\ndocuments[.]malomatiaa[.]com\nbern[.]qatarembassies[.]com\nsurveydoha[.]com\ndocuments[.]malomatiaa[.]com\ndohabayt[.]com\ndoharotanatimes[.]com\nactivity[.]youraccount‐security‐check[.]com\npoll[.]surveydoha[.]com\napi[.]thelres[.]com\nq‐miles[.]com\nrewards[.]q‐miles[.]com\noceasndata[.]com\napi[.]people[.]dohabayt[.]com\nbangkok[.]exclusivesstregis[.]com\nevents[.]ikhwan‐portal[.]com\ncontact[.]planturidea[.]net\ndl[.]nmcyclingexperience[.]com\ntools[.]conductorstech[.]com\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from usBy Dominik Reichel  and Esmid Idrizovic\nSeptember 6, 2018 at 1:00 PM\nCategory: Unit 42\nTags: adobe , CHAINSHOT , CVE‐2018‐5002 , zero‐day\nEmail address Subscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability10x7df305d5bcc659e5497e482bd0b507c44808deee8525f24b2712dc4a29f5c44e1e08c889a64521bbc67136ced11ace55b9bc2c1c7c96630aa515896b2f7341fd\n158243340170108004196473690380684093596548916771782361843168584750033311384553\n1113257592704268871468251608331599268987586668983037892662393533567233998824693\n1\n2\n3\n4\n5\n6\n7\n8\n9-----BEGIN RSA PRIVATE KEY-----\nMIIBOgIBAAJAffMF1bzGWeVJfkgr0LUHxEgI3u6FJfJLJxLcSin1xE4eCMiJpkUh\nu8ZxNs7RGs5VubwsHHyWYwqlFYlrL3NB /QIDAQABAkBog3SxE1AJItIkn2D0dHR4\ndUofLBCDF5czWlxAkqcleG6im1BptrNWdJyC5102H /bMA9rhgQEDHx42hfyQiyTh\nAiEA+mWGmrUOSLL3TXGrPCJcrTsR3m5XHzPrh9vPinSNpPUCIQCAxI /z9Jf10ufN\nPLE2JeDnGRULDPn9oCAqwsU0DWxD6QIhAPdiyRseWI9w6a5E6IXP +TpZSu00nLTC\nSih+/kxvnOXlAiBZMc7VGVQ5f0H5tFS8QTisW39sDC0ONeCSPiADkliwIQIhAMDu\n3Dkj2yt7zz04 /H7KUV9WH +rdrhUmoGhA5UL2PzfP\n-----END RSA PRIVATE KEY-----\n1openssl rsautl -decrypt -in enc_aes.bin -out dec_aes.bin -inkey private_key .pem\n10x5BC64C5DC7EC96750CCB466935ED2183FE90212CB1BF6305F0B79B4B9D9261A4AC8A3E06F3E07D4037A40F4E221BB12E05B4DE2682B31617F177712BD12B501A\n10xE4DF3353FD6D213E7400EEDA8B164FC0\n10xCC6FC77B877584121AEBCBFD4C23B67C\n1openssl enc -nosalt -aes-128-cbc -d -in payload.bin -out decrypted_payload  -K E4DF3353FD6D213E7400EEDA8B164FC0  -iv CC6FC77B877584121AEBCBFD4C23B67C\nSearch Unit 42\nSHARE \n "
}