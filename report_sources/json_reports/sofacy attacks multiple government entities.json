{
    "title": "sofacy attacks multiple government entities",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nSofacy Attacks Multiple Government Entities\n36,196\npeople reacted\n0\n12 min. read\nThe Sofacy group (AKA APT28, Fancy Bear, STRONTIUM, Sednit, Tsar Team, Pawn Storm) is a well‐known\nadversary that remains highly active in the new calendar year of 2018. Unit 42 actively monitors this group due to\ntheir persistent nature globally across all industry verticals. Recently, we discovered a campaign launched at\nvarious Ministries of Foreign Affairs around the world. Interestingly, there appear to be two parallel efforts within\nthe campaign, with each effort using a completely different toolset for the attacks. In this blog, we will discuss\none of the efforts which leveraged tools that have been known to be associated with the Sofacy group.\n \nAttack Details\nAt the beginning of February 2018, we discovered an attack targeting two government institutions related to\nforeign affairs. These entities are not regionally congruent, and the only shared victimology involves their\norganizational functions. Specifically, one organization is geographically located in Europe and the other in North\nAmerica. The initial attack vector leveraged a phishing email (seen in Figure 1), using the subject line of Upcoming\nDefense events February 2018 and a sender address claiming to be from Jane’s 360 defense events\n<events@ihsmarkit.com>. Jane’s  by IHSMarkit is a well‐known supplier of information and analysis often times\nassociated with the defense and government sector. Analysis of the email header data showed that the sender\naddress was spoofed and did not originate from IHSMarkit at all. The lure text in the phishing email claims the\nattachment is a calendar of events relevant to the targeted organizations and contained specific instructions\nregarding the actions the victim would have to take if they had “trouble viewing the document”.\n \nFigure 1 Spear‐phishing email used in the attack campaign\n \nThe attachment itself is an Microsoft Excel XLS document that contains malicious macro script. The document\npresents itself as a standard macro document but has all of its text hidden until the victim enables macros.\nNotably, all of the content text is accessible to the victim even before macros are enabled. However, a white font\ncolor is applied to the text to make it appear that the victim must enable macros to access the content. Once the\nmacro is enabled, the content is presented via the following code:\nActiveSheet.Range(“a1:c54”).Font.Color = vbBlack\nThe code above changes the font color to black within the specified cell range and presents the content to the\nuser. On initial inspection, the content appears to be the expected legitimate content, however, closer\nexamination of the document shows several abnormal artifacts that would not exist in a legitimate document.\nFigure 2 below shows how the delivery document initially looks and the transformation the content undergoes as\nthe macro runs.\n \nFigure 2 Delivery document before and after the macro is run\n \nBy Bryan Lee , Mike Harbison  and Robert Falcone\nFebruary 28, 2018 at 10:00 AM\nCategory: Unit 42\nTags: APT28 , Carberp , LuckyStrike , Ministry of Foreign Affairs , Powershell , Sofacy , Trojan\nSearch Unit 42\nSHARE \n Delivery Document\nAs mentioned in a recent ISC diary entry , the macro gets the contents of cells in column 170 in rows 2227 to\n2248 to obtain the base64 encoded payload, which can be seen in the following screenshot:\nFigure 3 Delivery Document showing base64 encoded payload\n \nThe macro prepends the string —–BEGIN CERTIFICATE—–  to the beginning of the base64 encoded payload\nand appends —–END CERTIFICATE—–  to the end of the data. The macro then writes this data to a text file in\nthe C:\\Programdata  folder using a random filename with the .txt  extension. The macro then uses the\ncommand certutil -decode  to decode the contents of this text file and outputs the decoded content to a\nrandomly named file with a .exe  extension in the C:\\Programdata  folder. The macro sleeps for two seconds\nand then executes the newly dropped executable.\nThe newly dropped executable is a loader Trojan responsible for installing and running the payload of this attack.\nWe performed a more detailed analysis on this loader Trojan, which readers can view in this report’s appendix .\nUpon execution, the loader will decrypt the embedded payload (DLL) using a custom algorithm, decompress it\nand save it to the following file:\n%LOCALAPPDATA%\\cdnver.dll\nThe loader will then create the batch file %LOCALAPPDATA%\\cdnver.bat , which it will write the following:\nstart rundll32.exe “C:\\Users\\user\\AppData\\Local\\cdnver.dll”,#1\nThe loader Trojan uses this batch file to run the embedded DLL payload. For persistence, the loader will write the\npath to this batch file to the following registry key, which will run the batch file each time the user logs into the\nsystem:\nHKCU\\Environment\\UserInitMprLogonScript\nThe cdnver.dll  payload installed by the loader executable is a variant of the SofacyCarberp  payload, which is\nused extensively by the Sofacy threat group. Overall, SofacyCarberp does initial reconnaissance by gathering\nsystem information and sending it to the C2 server prior to downloading additional tools to the system. This\nvariant of SofacyCarberp was configured to use the following domain as its C2 server:\ncdnverify[.]net\nThe loader and the SofacyCarberp sample delivered in this attack is similar to samples we have analyzed in the\npast but contains marked differences. These differences include a new hashing algorithm to resolve API\nfunctions and to find running browser processes for injection, as well as changes to the C2 communication\nmechanisms as explained in detail within the appendix.\n \nOpen‐source Delivery Document Generator\nIt appears that Sofacy may have used an open‐source tool called Luckystrike  to generate the delivery document\nand/or the macro used in this attack. Luckystrike, which was presented at DerbyCon 6 in September 2016 , is a\nMicrosoft PowerShell‐based tool that generates malicious delivery documents by allowing a user to add a macro\nto an Excel or Word document to execute an embedded payload. We believe Sofacy used this tool, as the macro\nwithin their delivery document closely resembles the macros found within Luckystrike.\nTo confirm our suspicions, we generated a malicious Excel file with Luckystrike and compared its macro to the\nmacro found within Sofacy’s delivery document. We found that there was only one difference between the\nmacros besides the random function name and random cell values that the Luckystrike tool generates for each\ncreated payload. The one non‐random string difference was the path to the “.txt” and “.exe” files within the\ncommand “certutil ‐decode”, as the Sofacy document used “C:\\Programdata\\” for the path whereas the\nLuckystrike document used the path stored in the Application.UserLibraryPath environment variable. Figure 3\nbelow shows a diff with the LuckyStrike macro on the left and Sofacy macro on the right, where everything\nexcept the file path and randomly generated values in the macro are exactly the same, including the obfuscation\nattempts that use concatenation to build strings.\n \n \nFigure 4 Diff of macros in Luckystrike generated document (left) and Sofacy’s delivery document (right)\n \nDiscovery and relationships\nWith much of our research, our initial direction and discovery of emerging threats is generally some combination\nof previously observed behavioral rulesets or relationships. In this case, we had observed a strange pattern\nemerging from the Sofacy group over the past year within their command and control infrastructure. Patterning\nsuch as reuse of WHOIS artifacts, IP reuse, or even domain name themes are common and regularly used to\ngroup attacks to specific campaigns. In this case, we had observed the Sofacy group registering new domains,\nthen placing a default landing page which they then used repeatedly over the course of the year. No other parts\nof the C2 infrastructure amongst these domains contained any overlapping artifacts. Instead, the actual content\nwithin the body of the websites was an exact match in each instance. Specifically, the strings 866-593-54352\n(notice it is one digit too long), 403-965-2341 , or the address 522 Clematis. Suite 3000  was repeatedly\nfound in each instance. ThreatConnect  had made the same observation regarding this patterning in September\n2017.\n Figure 5 Default landing page for cdnverify.net domain\nFigure 6 Default landing page for hotfixmsupload.com domain\n \nHotfixmsupload[.]com  is particularly interesting as it has been identified as a Sofacy C2 domain repeatedly,\nand was also brought forth by Microsoft in a legal complaint against STRONTIUM (Sofacy) as documented here .\nLeveraging this intelligence allowed us to begin predicting potential C2 domains that would eventually be used by\nthe Sofacy group. In this scenario, the domain cdnverify[.]net  was registered on January 30, 2018 and just\ntwo days later, an attack was launched using this domain as a C2.\n \nConclusion\nThe Sofacy group should no longer be an unfamiliar threat at this stage. They have been well documented and\nwell researched with much of their attack methodologies exposed. They continue to be persistent in their attack\ncampaigns and continue to use similar tooling as in the past. This leads us to believe that their attack attempts are\nlikely still succeeding, even with the wealth of threat intelligence available in the public domain. Application of the\ndata remains challenging, and so to continue our initiative of establishing playbooks for adversary groups, we\nhave added this attack campaign as the next playbook  in our dataset.\nPalo Alto Networks customers are protected from this threat by:\n1. WildFire detects all SofacyCarberp payloads with malicious verdicts.\n2. AutoFocus customers can track these tools with the Sofacy , SofacyMacro  and SofacyCarberp\n3. Traps blocks the Sofacy delivery documents and the SofacyCarberp payload.\n \nIOCs\n \nSHA256\nff808d0a12676bfac88fd26f955154f8884f2bb7c534b9936510fd6296c543e8\n12e6642cf6413bdf5388bee663080fa299591b2ba023d069286f3be9647547c8\ncb85072e6ca66a29cb0b73659a0fe5ba2456d9ba0b52e3a4c89e86549bc6e2c7\n23411bb30042c9357ac4928dc6fca6955390361e660fec7ac238bbdcc8b83701\n \nDomains\nCdnverify[.]net\n \nEmail Subject\nUpcoming Defense events February 2018\n \nFilename\nUpcoming Events February 2018.xls\n \nAppendix\n \nLoader Trojan\nThe payload dropped to the system by the macro is an executable that is responsible for installing and executing\na dynamic link library (DLL) to the system. This executable contains the same decryption algorithm as the loader\nwe analyzed in the DealersChoice attacks in late 2016 .\nThe loader has several coding features that make it interesting.  For example, upon execution, the loader\nattempts to load the following library:  api-ms-win-core-synch-l1-2-0.dll .  This DLL is part of the\nUniversal Windows Platform app to Windows 10. Typically, a developer would not link directly to this file, but to\nWindowsApp.lib , which gives access to the underlying APIs.  It appears the loader included definitions of\nwrappers for Windows API functions that cannot be called directly because they are not supported on all\noperating systems.\nUpon execution, the loader will decrypt the embedded payload (DLL) using a custom algorithm followed by\ndecompressing it using the RtlDecompressBuffer  API.  This API is normally used for Windows drivers, but\nthere is nothing to prevent a userland process from using it, and the parameters are documented  on MSDN. \nThe compression algorithm used is LZNT1 with maximum compression level.  The payload is decrypted using a\nstarting 10‐byte XOR key of: 0x3950BE2CD37B2C7CCBF8 .  Once decrypted, the data is then passed to the\ndecompression routine.  The payload is in the loader at file offset:  0x19880 – 0x1F23C  size of 0x59BD .  The\npayload can be decrypted and decompressed with the following Python script:\nThe loader will drop the following files in the %LOCALAPPDATA%  file path:\nCdnver.dll\nCdnver.bat\nTo evade observable detection from Windows explorer, file attributes are set to hidden.  %LOCALAPPDATA%\nwould be the user’s path from the user who launched the executable, i.e., C:\\Users\\user\\AppData\\Local\nwhere the user would contain the user’s logon account.1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28import ctypes\nnt   =  ctypes.windll.ntdll\ndef decompress_buffer (data):\n    final_size  = ctypes.c_ulong(0)\n    uncompressed  =ctypes.c_buffer (0x7c00)\n        nt.RtlDecompressBuffer (0x102,uncompressed ,0x7C00,ctypes.c_char_p (data),0x59BD,ctypes.byref(final_size ))\n    return uncompressed .raw\ndef main():\n    Startkey =\"3950BE2CD37B2C7CCBF8\" .decode('hex')\n    with open(\"C:\\\\temp\\\\carvedDLL.dat\" ,\"rb\") as fp:\n        Payload=fp.read()\n    decrpted =[]\n    Count=0\n    for i in Payload:\n        InnerCount =0\n        key=ord(i)\n        for x in range(0,len(Startkey )):\n            result = (ord(Startkey [x]) + Count * InnerCount ) & 0xFF\n            InnerCount +=1\n            key ^= result\n        Count+=1\n        decrpted .append(key)\n    decompressed =decompress_buffer (str(bytearray (decrpted )))\n    with open(\"C:\\\\temp\\\\CarvedDLL_decrypted.dat\" ,\"wb\") as wp:\n        wp.write(bytearray (decompressed ))\n    print \"Finished\"\nif __name__  == '__main__' :\n    main()\n To execute the dropped DLL, the loader first checks the integrity level of the executing process, and if it does not\nhave the necessary permissions, the loader will enumerate the system’s processes searching for\nexplorer.exe .  This process was most likely chosen as it typically runs with administrator privileges.  The\nloader will attempt to use the permission of explorer.exe to execute the dropped DLL via\nCreateProcessAsUser .  If the user who executed the loader is admin or has sufficient privileges this step is\nskipped.  The execution is handled using the Windows rundll32.exe  program and calls the DLL’s export via\nordinal number 1.  Example:\nstart rundll32.exe “C:\\Users\\user\\AppData\\Local\\cdnver.dll”,#1 \nFor persistence, the loader will add the following registry key UserInitMprLogonScript  to HKCU\n\\Environment  with the following value:\nC:\\Users\\user\\AppData\\Local\\cdnver.bat\nThis entry would cause the batch file to be executed any time the user logs on.  The batch file contains the\nfollowing information:\nstart rundll32.exe “C:\\Users\\user\\AppData\\Local\\cdnver.dll”,#1   \nThe use of the UserInitMprLogonScript   is not new to Sofacy, as Mitre’s ATT&CK framework  shows\nSofacy’s use of this registry key as an example of the Logon Scripts  persistence technique.\n \nSofacyCarberp Payload\nThe DLL delivered in these attacks is a variant of the SofacyCarberp payload, which is used extensively by the\nSofacy threat group.\n \nAPI Resolution\nPrevious versions of this Trojan used code taken from the leaked Carberp source code, which mainly involved\nCarberp’s code used to resolve API functions. However, this version of SofacyCarberp uses a hashing algorithm\nto locate the correct loaded DLL based on its BaseDLLName  in order to manually load API functions. It does so\nby loading the PEB, then accesses the _PEB_LDR_DATA  structure and then obtains the unicode string for\nBaseDllName in the I nLoadOrderModuleList . It treats this unicode string as an ASCII string by skipping every\nother byte then gets the lowercase version of the string. It then subjects the resulting string of lowercase\ncharacters to a hashing algorithm and checks the resulting hash to a hardcoded value. The following Python\nscript shows the algorithm used to determine the hashed values:\nThe following is a list of hardcoded values used to find the correct loaded DLL:\n0x98853A78 – kernel32.dll\n0xA4137E37 – ntdll.dll\nIt specifically looks for the following APIs based on its hash:\n0x77b826b3 – ? (most likely ntdll.ZwProtectVirtualMemory based on code context)\n0x2e33c8ac – ntdll.ZwWriteVirtualMemory\n0xb9016a44 – ntdll.ZwFreeVirtualMemory\n0xa2ea8afa – ntdll.ZwQuerySystemInformation\n0x99885504 – ntdll.ZwClose\n0x46264019 – ntdll.ZwOpenProcess\n0x3B66D24C – kernel32.?\n0x79F5D836 – kernel32.?\n \nInjecting into Browsers\nThe Trojan will use the same hashing algorithm for API resolution to find browser processes running on the\nsystem with the intention of injecting code into the browser to communicate with its C2 server. The use of this\nhashing algorithm differs from previous variants of SofacyCarberp, as previously reported by ESET .\nTo begin the code injection, the Trojan calls the ZwQuerySystemInformation  function, specifically requesting\nfor the data associated with SystemProcessInformation . The result is a structure named\nSYSTEM_PROCESS_INFORMATION , which the Trojan will access the Unicode string in the field ImageName\n(offset 0x3c) . The Trojan then subjects this unicode string in ASCII format to the hashing algorithm, looking\nfor the following:\n0xCDCB4E50 – iexplore.exe\n0x70297938 – firefox.exe\n0x723F0158 – chrome.exe\nThe Trojan will attempt to inject code into these browsers to carry out its C2 communications. To carry out C2\ncommunications via injected code in a remote process, the injected code reaches out to the C2 server and saves\nthe response to a memory mapped file named SNFIRNW . The Trojan uses a custom communication protocol\nwithin this mapped file, but at a high level the Trojan will continually look for data within the mapped SNFIRNW\nfile and process the data in the same manner as if it communicated with the C2 server within its own process.\n \nCommand and Control Communications\nIn addition to being able to communicate with its C2 server from code injected into a web browser, the Trojan\ncan also carry out the same communication process within its own process. The C2 communication uses HTTPS\nand specifically sets the following flags to do so in a manner to allow invalid certificates:\nSECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SECUR\nITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_REVOCATION\nThe initial request sent from the Trojan is to google.com, likely as an internet connectivity check.\nFigure 7 Initial request from SofacyCarberp Trojan to Google to check for Internet access\n \nAs seen in the activity above, the Trojan issues a POST request to a URL that contains randomly sized and\nrandomly generated strings. The URL also contains a randomly chosen string from the following list:\nvnd.wmc\n.3gpp2\n.ktx\n.rfc822\n.vnd.flatland.3dml\n.report1\n2\n3\n4\n5\n6\n7\n8\n9l = [\"kernel32.dll\" ,\"ntdll.dll\" ]\nfor lib in l:\n    seed = 0\n    for e in lib:\n        c = ord(e)\n        if ord(e)-0x41 <= 25 and ord(e)-0x41 > 0:\n            c = ord(e)+32\n        seed = (c + 0x19660D  * seed + 0x3C6EF35F  )& 0xFFFFFFFF\n    print \"%s is 0x%x\"  % (lib,seed)\n .vnd.radisys.msml‐basic‐layout\n.3gpp\nThis list of strings differs from previously analyzed SofacyCarberp samples, such as the variant discussed in our\nJune 2016 blog “ New Sofacy Attacks Against US Government Agency “ that chose from a list of strings .xml, .pdf,\n.htm or .zip.\nThe value for the one parameter, specifically WrLqG1kMJXpgID1rODM=  is base64 encoded ciphertext that\ndecrypts to the string UihklEpz4V , which is hardcoded in the Trojan. The algorithm used to encrypt the data in\nthe URL the same algorithm as used in previous SofacyCarberp samples  we have analyzed . The data in the POST\nrequest is the base64 encoded user‐agent seen in the request.\nAfter establishing that the system has Internet access, the Trojan will gather detailed system information and\nsend it to the C2 server. The gathered information includes a unique identifier based on the storage volume serial\nnumber (id field), a list of running processes, network interface card information, the storage device name (disk\nfield), the Trojan’s build identifier (build field, specifically 0x9104f000), followed by a screenshot of the system\n(img field). The screenshot functionality in this Trojan is rather interesting, as instead of using Windows APIs to\ntake a screenshot, the Trojan’s code simulates the user pressing the “Take Screenshot” key ( VK_SCREENSHOT ) on\nthe keyboard which saves the screenshot to the clipboard. The Trojan then accesses the data in the clipboard\nand converts it to a JPG image to include in this HTTP request. All of this data is encrypted, base64 encoded and\nsent to the C2 server in a HTTP POST to a URL that a similar structure as the initial internet connectivity check.\nFigure 8 HTTP POST from SofacyCarberp to C2 server with system information\n \nThe SofacyCarberp Trojan parses the C2 server’s response to the request for data that the Trojan will then use\nto download a secondary payload to the system. The Trojan looks in the response data for sections between the\ntags [file]  and [/file]  and [settings]  and [/settings] , which we have observed in other\nSofacyCarberp samples we have analyzed. However, this particular variant also contains another section with the\ntags [shell] and [/shell] . The Trojan parses these sections for specific fields that dictate how the Trojan will\noperate, including where the Trojan will save the downloaded file, how the Trojan runs the secondary payload\nand what C2 location the Trojan should communicate with. The following fields are parsed by the Trojan:\nFileName: Specified filename\nPathToSave: Path to specified file\nExecute: Create a process with the specified file\nDelete: Delete the specified file\nLoadLib: Load the specified DLL into the current process\nReadFile: Reads a specified the file\nRundll: Runs the specified DLL with a specified exported function\nIP: Set C2 location\nshell: Run additional code in a newly created thread\nThe data in the shell section specified in the shell  field is base64 encoded data that decodes to raw assembly.\nWe surmise this fact based on the Trojan using the base64 decoded data to create a local thread, which suggests\nthat the provided data can be any position independent code or shellcode.\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability\n "
}