{
    "title": "multiple chinese threat groups exploiting cve-2018-0798 equation editor vulnerability since late 2018",
    "text": "Multiple Chinese Threat Groups Exploiting CVE-2018-\n0798 Equation Editor Vulnerability Since Late 2018\nJuly 3, 2019 | Anomali Threat Research Team\nYou might also be interested in... \nLEARN MORE\nSupport Blog Forum  EN\nRESEARCH\n\n\n\n\nDuring Anomali Threat Researcher’s tracking of the “Royal Road” Rich Text Format (RTF) weaponizer,\ncommonly used by multiple Chinese threat actors to exploit CVE-2017-11882 and CVE-2018-0802, it was\ndiscovered that multiple Chinese threat groups updated their weaponizer to exploit the Microsoft\nEquation Editor (EE) vulnerability CVE-2018-0798 late 2018. We believe the groups moved to use CVE-\n2018-0798 instead of the other Microsoft Equation Editor Remote Code Execution (RCE) vulnerabilities\nbecause the former is more reliable as it works on all known versions of Equation Editor.\nThe analyzed RTF files share the same object dimension (objw2180\\objh300) used to track the RTF\nweaponizer in our previous report , however, the sample was not exploiting CVE-2017-11882 or CVE-\n2018-0802. After further analysis, it was discovered that the RTF files were exploiting the CVE-2018-0798\nvulnerability in Microsoft’s Equation Editor (EQNEDT32). CVE-2018-0798 does not appear to be a\ncommonly exploited In The Wild (ITW) even though it is more reliable compared to other well-known EE\nRCE counterparts,this is mainly because C|VE2018-0798 works with all EE versions while the counterparts\nare limited to specific versions. CVE-2017-11882 is only exploitable on an unpatched version prior to its fix,\nand CVE-2018-0802 is only exploitable on the version released to fix CVE-2017-11882. In contrast, a\nthreat actor utilizing CVE-2018-0798 has a higher chance of success because it is not limited by version.\nAnomali Researchers were able to identify multiple samples of malicious RTF documents ITW using the\nsame exploit for CVE-2018-0798. Some of the analyzed samples have a creation date of November 19,\n2017 (five days after a patch was released for CVE-2017-11882), however, that date appears to be\nincorrect because the dropped payloads had a recent compilation timestamps in 2019. The earliest use of\nthe exploit ITW we were able to identify and confirm is a sample (e228045ef57fb8cc1226b62ada7eee9b)\ndating back to October 2018 (VirusTotal submission of 2018-10-29) with the RTF creation time 2018-10-\n23.\nMultiple samples analyzed by Anomali researchers that we associate with CVE-2018-0798 were also\nmentioned in previous instances by other researchers in the security community. We believe that some of\nthese were misattributed to CVE-2017-11882 or CVE-2018-0802 when they actually appear to be CVE-\n2018-0798.\nVulnerability and Exploit Analysis\nCVE-2018-0798 is an RCE vulnerability, a stack buffer overflow that can be exploited by a threat actor to\nperform stack corruption. The vulnerable subroutine is located at the relative virtual address 0x43f6c\n(sub_443f6c), shown in Figure 1 below. This routine is called by EQNEDT32 when parsing Matrix type\nrecords . To note, CVE-2017-11882 and CVE-2018-0802 are vulnerabilities that take place when parsing\nFont type records. Part of the Matrix record object is copied to a stack buffer without proper bound checks.\nThis allows the threat actor to overflow the stack buffer, change the stored return address, and take\ncontrol of the instruction pointer. Due to the age of this binary, it was compiled and linked in the early\n2000s, it does not use any modern protections against stack overflows that would have made exploitation\nmuch harder.\nFigure 1 - The vulnerable function before the exploit. The saved return address marked in red is manipulated.\nInstruction at 0x1283faa copies a byte from the equation object to a stack buffer and return from the call.\nThe write primitive is used to fill the stack with padding 0x60s and 0x61s until the location of the stored\nreturn address on the stack. The lower two bytes of the stored return address are changed to 0x0bfb, as\ndepicted in Figure 2. Changing those bytes allows hijackig the control flow when the return address is\npopped off the stack and into the instruction pointer (EIP). The instruction pointer is then redirected to the\nreturn instruction of a function to pop the next value off the stack, located at 0x20ed94 in Figure 2, and\ninto the EIP. This forces the original function argument to be taken as a return address. The argument\npoints to the heap where the equation object has been stored.\nFigure 2 - The vulnerable function after stack corruption showing calling function return address last two bytes\noverwritten with x0bfb.\nEIP lands on a Null sled until it reaches to the shellcode shown below. The shellcode pops the next value on\nthe stack using this value the location of the final shellcode is computed.\ndebug017:0051C24D pop     eax\ndebug017:0051C24E jmp     short loc_51C256\n‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐\ndebug017:0051C256 add     eax, offset byte_1BD3C\ndebug017:0051C25B mov     eax, [eax]\ndebug017:0051C25D mov     eax, [eax+14h]\ndebug017:0051C260 add     eax, 6Dh\ndebug017:0051C263 jmp     eax\nThe final shellcode in sample (264cee1c1854698ef0eb3a141912db40) is shown below. It resolves the\naddress of WinExec and executes the PowerShell command: powershell.exe Copy-Item\n\"c:\\target\\Flag.dat\" -Destination \"C:\\pwn”\ndebug017:0052320D jmp     short sub_523276\n‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐\ndebug017:00523276 push    'Acor'\ndebug017:0052327B push    'PteG'\ndebug017:00523280 call    Sub_getprocaddr\ndebug017:00523285 push    eax\ndebug017:00523286 push    'cex'\ndebug017:0052328B push    'EniW'\ndebug017:00523290 call    Sub_getprocaddr\ndebug017:00523295 push    0\ndebug017:00523297 xor     edx, edx\ndebug017:00523299 push    offset unk_226E77\ndebug017:0052329E push    'p\\:C'\ndebug017:005232A3 push    '\" no'\ndebug017:005232A8 push    'itan'\ndebug017:005232AD push    'itse'\ndebug017:005232B2 push    'D‐ \"'\ndebug017:005232B7 push    'tad.'\ndebug017:005232BC push    'galF'\ndebug017:005232C1 push    '\\teg'\ndebug017:005232C6 push    'rat\\'\ndebug017:005232CB push    ':c\" '\ndebug017:005232D0 push    'metI'\ndebug017:005232D5 push    '‐ypo'\ndebug017:005232DA push    'C ex'\ndebug017:005232DF push    'e.ll'\ndebug017:005232E4 push    'ehsr'\ndebug017:005232E9 push    'ewop'\ndebug017:005232EE mov     ecx, esp\ndebug017:005232F0 push    edx\ndebug017:005232F1 push    ecx\ndebug017:005232F2 call    eax “winexec”\ndebug017:005232F4 pop     edi\ndebug017:005232F5 pop     esi\ndebug017:005232F6 pop     ebx\ndebug017:005232F7 add     esp, 40h\ndebug017:005232FA cmp     ebp, esp\ndebug017:005232FC call    near ptr unk_5233D5\ndebug017:00523301 mov     esp, ebp\ndebug017:00523303 pop     ebp\ndebug017:00523304 retn\nAs previously mentioned this exploit works on all known versions of Microsoft Equation Editor.\nrule RTF_Equation_Editor_CVE_2018_0798\n{\nMeta:\nauthor        = \"Anomali\"\n    tlp           = \"GREEN\"\n    version       = \"1.0\"\n    date          = \"2019‐05‐10\"\n    hash          = \"264cee1c1854698ef0eb3a141912db40\"\n    description   = \"Detects Malicious RTFs exploiting CVE‐2018‐0798\"\nstrings:\n$S1= \"4460606060606060606061616161616161616161616161616161fb0b\"\n$RTF= \"{\\\\rt\"\ncondition:\n$RTF at 0 and $S1 \n}\nFigure 3 -Yara rule to detect Malicious RTF exploiting CVE-2018-0798\nThreat Actors and Exploit Usage\nMost of the collected Samples were attributed to the following Chinese Cyber Espionage threat actor:\nConimes\nKeyBoy\nEmissary Panda\nRancor\nTemp.Trident\nHowever,Beginning on 25 June 2019, we started observing multiple commodity campaigns (Mostly\ndropping AsyncRAT) using the updated RTF weaponizer with the same exploit (CVE-2018-0798). As\nobserved previously with CVE-2017-11882 and CVE-2018-0802, the weaponizer was used exclusively by\nChinese cyber espionage actors for approximately one year (December 2017 through December 2018),\nafter which cybercrime actors began to incorporate it in their malicious activity. This indicates that the\nweaponizer author is now selling to a wider group of actors.\nExamples of social engineering lures and malicious document content used with CVE-2018-0798 in\ncyberespionage attacks are shown in Table 1.\nTable 1 - Documents exploiting CVE-2018-0798\nMD5 Lure Topic File Name\n019debaee6fdf9a9f872277563f0d9ee A Mongolian language-lure themed\naround government policy.APP.doc\n21d0f19abd15d65aa755e89e55157ae7 Labeled “Ministry of Defence” for\nMongolia. Themed around Russian\nPresident Vladimir Putin making a\nstatement on United States’ missiles.File name is\nunavailable\n2ef069d0e3bb636d2d969d3e6a4d5039 Pertains to be a report from the Mongolian\nEmbassy in Japan regarding news about\nNorth Korea.ТM 30.17.doc\n853136f00e87a1ab3e2fc3acb309573e A Mongolian-language lure that contains a\ntable with apparent details of people\nincluding email, name, and phone number.Цэргийн\nбагийн  8 ээлж\nашиглагдах\nутасны\nдугаарын\nжагсаалт .doc\n(List of\ntelephone\nnumbers to be\nused in the 8th\nMilitary\nTeam.doc)\nac0eac22ce12eac9ee15ca03646ed70c Contains an image with Russian text titled\nabout “Commonwealth of Independent\nStates Anti-terrorist Centre”.doc.rtf\n6930bd66a11e30dee1ef4f57287b1318 Titled “Social Security Reform Note”.\nDiscusses demographics and social\nsecurity reform in Brazil.Sosyal\nGüvenlik\nReformu-Not-\n3.doc\n8f1ab1f96b8322c9e02d87a431a98823 Titled “Foreign Office of Vietnam”.\nGuidance on granting, extending,\nmodifying and supplementing diplomatic\npassports, official passports and\ndiplomatic note for visa application.02_2019_TT-\nBNG.doc\nb3f8abe274cb6a5926bd5c3fc2168997 In the Vietnamese language that appears\nto talk about the health of former Member\nof the Central Party Committee VIII, IX\nNguyen Phuc Thanh.Giay moi hoi\nnghi.doc\nf0424ed16b435f0c7c802f3a17cbd9de In the Vietnamese language that contains\ninstructions for employees before taking a\nblood test.PV Báo Qu ốc\nPhòng xin\nphỏng vấn\nanh.doc\n7b9d386280da1b840f1b32b85ce74278 Lure in the Russian language that is a letter\nto rector of Russian university.Unavailable\n0764ecc46463fb10952d54515c73e6fc Mongolian lure on topic of training and the\nUnited Nations.uuganaa-\ntest.doc\nd648c374439cf5fe9df8dc59eb472067 Vietnamese lure themed on the current\nVietnamese Prime Minister Nguy ễn Xuân\nPhúcTB -VPCP.doc\na94db3001c0c3fa3cf40bc7fdf9d21b7 Mongolian lure on topic of the Mongolian\nprime minister visiting Japan.Medee Bolor\n20181217.doc\n6614a8776692c982ad766d23b2a5ea29 Russian lure linking to Russian news about\nNATO troops leaving Afghanistan.Program on\napplied\nsecurity\nstudies.rtf\n84fca27bc75f40194c95534b07838d6c Vietnamese Police-themed lure. QĐ Tổng\ncục.doc\nSample Documents:\nfc47442f175ff7e312a4aa4f5c8745b8\nFigure 4: Lure in Vietnamese with many images. Red stamp states the Ministry of Defence of Vietnam.\n40cfeb699d239652dd4a79c18b1c7366\nFigure 5: Lure in Lao language.\n1690766e844034b3c2ab4f853bd59df7\nFigure 6: Lure in Russian. Copied from the Russian Wikipedia page for Park Won-soon, mayor of Seoul.\nExploitation Methods and payload Analysis:\nAnomali Threat Researchers identified multiple exploitation techniques using CVE-2018-0798 to drop\nmalicious payloads. Some of the observed techniques identified being used to exploit the vulnerability are\nas follows:\nOLE package objects and DLL Sideloading\nSample MD5:  fc47442f175ff7e312a4aa4f5c8745b8 (Goblin Panda)\nThe malicious RTF document contains OLE Package objects. On execution (user opening the attachment)\nthe document drops OLE package as “8.t” in the %TEMP% directory. The 8.t file is a dropper and it is\nencrypted using XOR cipher with encryption key “0xFC”. Upon decrypting and executing, it drops two\nadditional files “wsc_proxy.exe” (legitimate Avast executable) and a malicious DLL “wsc.dll” in the %TEMP%\nfolder. The dropper then creates a scheduled task to run the executable “wsc_proxy.exe” for every five\nminutes as a persistence mechanism.\nFigure 7: Payloads dropped at %tmp% after the execution of dropper (8.t)\nSchedule task command:\n“schtasks /create /sc MINUTE /tn \"Avast Antivirus\" /tr\n\"C:\\Users\\Username\\AppData\\Local\\Temp\\wsc_proxy.exe\" /mo 5 /f”\nThe benign executable “wsc_proxy.exe” gets executed by the scheduled task \"Avast Antivirus,\" and using\nDLL sideloading the malicious payload “wsc.dll” gets started. The malware attempts to communicate via\nHTTP to the C2 at vvcxvsdvx.dynamic-dns[.]net over port 2113/TCP.\nPayload MD5: 9AD1DBA92734A53489180788A6B21856\nC2: vvcxvsdvx.dynamic-dns[.]net\nIP: 185.216.35[.]11 (known Goblin panda C&C)\nURL: vvcxvsdvx.dynamic-dns[.]net/image/logo.png\nOLE package objects and VBScript Execution\nSample MD5:  b3f8abe274cb6a5926bd5c3fc2168997 (Rancor Group)\nThe malicious RTF drops embedded OLE package to “8.t” into the %TEMP% directory after the malicious\ndocument is opened. The file 8.t is a malicious executable dropper and encrypted via XOR cipher using the\nkey “0xFC”. On execution it drops two files “ChromeApp.ps1” and “ChromeApp.vbs” in the directory\n“C:\\Windows\\tracing\\”. It then creates a scheduled task named “ChromeApp” to execute the Visual Basic\nScript (VBScript). The VBScript calls the PowerShell script and it beacons out to C2 “185.234.73[.]4” using\nHTTP to send the victim User ID and receiving further instructions to execute.\nFigure 8: Scheduled task creation to start the malicious payload\nFigure 9: Malicious payloads dropped after the execution of dropper (8.t)\nC2 IP: 185.234.73.4\nURL: : http:185.234.73[.]4/CApp.php?\nname=NzI4QTRENTYtMEY0Ny0yQzY3LTY3QzEtQjg0MzNBOUU1Rjgw:VUk=\nDropping ‘.wll’ file in Microsoft Word ‘startup’ folder\nSample MD5:  019debaee6fdf9a9f872277563f0d9ee\nThe RTF document drops embedded OLE package as “8.t” in the %TEMP% directory whe the file is opened.\nThe shellcode decrypt “8.t” and save it as “%APPDATA%\\Microsoft\\Word\\STARTUP\\cclerr.wll”. The next\ntime user opens Microsoft Word, the dropped file “cclerr.wll” will be loaded and executed in Word’s process\nmemory.\nDuring the next run of Microsoft Word, the below activities were observed,\n1. The cclerr.wll gets copied into “C:\\Program Files (x86)\\Intel\\Intel(R) Processor Graphics” as “RasTls.dll”\n2. The legitimate executable IntelGraphicsController.exe is used to load the malicious “RasTls.dll” via DLL\nsearch-order hijacking technique.\n3. The below list of commands are executed by word.exe (hijacked process)\nFigure 10: command executions by rogue word.exe process\n4. Sets the registry key for persistence at\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\IntelGraphicsController\nFigure 11: Windows Autorun key set for persistence.\n5. Drops two batch files in the %TEMP% folder named as UnIB490.bat & UnIB4A0.bat\n6. The batch files are used to clean up the word document and “.wll” file.\nFigure 12: Batch script for clearing traces of malicious activities.\nPayload MD5: B72448AF5F58E70C225AB6525126CF8B\nC2: 217.69.8[.]255\nSample MD5:  6930bd66a11e30dee1ef4f57287b1318 (Emissary Panda)\nOn opening the RTF document drops embedded OLE package as “s.bin” in the %TEMP% directory. The\nequation editor loads the bin file directly into its memory space as code and jumps to it. The code in “s.bin”\nfile extracts and load a DLL. It then creates a directory “C:\\Program Files (x86)\\pcawhere” and writes a file\nnamed “config.ini” with a unique identifier for the victim. After successful execution of malicious code, it\ntries to send the unique identifier of the victim machine to the C2 138.68.133.211 via POST request over\nHTTPS.\nFigure 13: C2 network communication with victim GUID\nThe OLE object had an interesting source path “C:\\\\Users\\\\Iran\\\\Desktop\\\\s.bin”\nFigure 14: OLE object shows the originating user name as ‘Iran’.\nC2: 138.68.133.211\nURL: 138.68.133.211:443/ajax\nConclusion\nAnalysis of the Royal Road weaponizer has resulted in the discovery that multiple Chinese threat groups\nstarted utilizing CVE-2018-0798 in their RTF weaponizer. This finding confirms that the groups, as\nmentioned in our previous report, are sharing the same exploit supply chain. The groups appear to have\nbeen using the Microsoft vulnerability exploit exclusively for approximately six months before it began\nappearing in commodity-malware campaigns. This may indicate that the Chinese groups sold the exploit\nafter using it in their malicious campaigns.\nThese findings also suggest that the threat groups have robust exploit developing capabilities because\nCVE-2018-0798 is not widely reported on and it is typically not incorporated into publicly available\nweaponizers.\nThreatstream enterprise users can read a more detailed analysis here .\nIOCs\nFile Hashes (MD5):\ne228045ef57fb8cc1226b62ada7eee9b\n019debaee6fdf9a9f872277563f0d9ee\n0764ecc46463fb10952d54515c73e6fc\n0827f48e883f5a59f1c4bf70c98dc42a\n0e8d3ae263fae7775ccc744a5c0c4dc1\n10348b56b0e3466f9f9fa62bda081c98\n109d51899c832287d7ce1f70b5bd885d\n1690766e844034b3c2ab4f853bd59df7\n21d0f19abd15d65aa755e89e55157ae7\n264cee1c1854698ef0eb3a141912db40\n2868447eebdf897bdd6b7ce2a18f4609\n29027a6d2a38a9a954c1e1315439baf9\n2ef069d0e3bb636d2d969d3e6a4d5039\n31283ad09bc7cf618c32a1c893163891\n36796fabb76eb946d211a2fcf5820929\n40cfeb699d239652dd4a79c18b1c7366\n4642e8712c8ada8d56bd36416abb4808\n47353a86ea58df3714870e5755056d97\n4eb14eb23d50b4c7ee768038172f9794\n51c35cb62a0ad294979b0645e5aa4376\n5271a5ddf476af87c6f833638375c72f\n595e30b0c794f47fd768b24ae9caf210\n5982ba16356ee8118e4cdbe54d182b11\n600e14e4b0035c6f0c6a344d87b6c27f\n6614a8776692c982ad766d23b2a5ea29\n67682e25939dce4406f55b6c0c741c0e\n6930bd66a11e30dee1ef4f57287b1318\n6bdc73a2fc8506d9e842fc7b7a4123db\n6d2e6a61eede06fa9d633ce151208831\n7b9d386280da1b840f1b32b85ce74278\n827c7048c269645ce36546c01c01f93f\n8408641cfbcdb53e1e6802f07ea32f11\n84fca27bc75f40194c95534b07838d6c\n853136f00e87a1ab3e2fc3acb309573e\n8621ff472360600ec2a6f7d61a66eeb8\n8f1ab1f96b8322c9e02d87a431a98823\n923d60f3e63c95021f9e99f943fcfbbc\na02712c6cefb532e7928a781fe8d8592\na37df9b230c9d05210613b3c2916328f\na497426d0f65877947e92a14b8a086af\na5a4046989fa0f99c2076aec3ea0ab2a\na94db3001c0c3fa3cf40bc7fdf9d21b7\na99efd6b4b69c55774a16ae157cd20b9\nac0eac22ce12eac9ee15ca03646ed70c\naf7f59b2b197d454ab8c8a7b0bc371a2\nb2bce665c9bcdf0d3d04dc7ce5e30f79\nb3f8abe274cb6a5926bd5c3fc2168997\nb72448af5f58e70c225ab6525126cf8b\nb82e0ac46f6b812c83a3954038814cce\nbb7aba40c6fc76291fd1cf2c4c558e9f\nbcbea5b25356d768fd826e0376268ff5\nc65b73dde66184bae6ead97afd1b4c4b\nd648c374439cf5fe9df8dc59eb472067\ne004daf8e09b56940d6ca6e51974498b\ne137b95f6149a8639f6d18e286a0a55f\nf0424ed16b435f0c7c802f3a17cbd9de\nf1824bd902251314a4fd5506caced48b\nf1dcf1b2376360c9f0c23f1fb9f4355a\nf333194c19730d6f82ab858210327051\nf34514118eb4689560cd6c0c654f26d9\nfc47442f175ff7e312a4aa4f5c8745b8\nNetwork IOCs:\n185.234.73[.]4\n138.68.133[.]211\nVvcxvsdvx.dynamic-dns[.]net\nloge.otzo[.]com\nAbout the Author\nAnomali Threat Research Team\nWhitepaper\nPeople’s Republic of China\n(PRC) Cybersecurity Profile\nfrom Anomali Labs\nWhitepaper\n2019 Ponemon Report: The\nValue of Threat Intelligence\nfrom Anomali\nBlog\nChinese Hackers Pilfer US\nMilitary Crown Jewels\nWebinar\nSANS 2019 Cyber Threat\nIntelligence Survey Results:\nCTI Tools, Usage and a Look\nAhead\nGet the latest threat intelligence news in your email.\nCompany Email\n SUBSCRIBE\nCopyright 2020 ANOMALI. \nAll Rights Reserved.PRODUCTS\nCOMMUNITY\nAPP STOREISACS\nRESEARCH\nCOMPANYBLOG\nNEWS & EVENTS\nSUPPORT\nPrivacy Policy\nTerms of Use\n3rd Party Vendor Policy\n\nRESOURCES\n PRODUCTS COMMUNITY APP STORE ISAC s COMPANY\nREQUEST DEMO\n\n "
}