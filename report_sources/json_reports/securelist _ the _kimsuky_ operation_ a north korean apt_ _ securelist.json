{
    "title": "securelist _ the _kimsuky_ operation_ a north korean apt_ _ securelist",
    "text": "Share post on:For several months, we have been monitoring an ongoing cyber-espionage campaign against South Korean think-tanks.\nThere are multiple reasons why this campaign is extraordinary in its execution and logistics. It all started one day when we\nencountered a somewhat unsophisticated spy program that communicated with its “master” via a public e-mail server. This\napproach is rather inherent to many amateur virus-writers and these malware attacks are mostly ignored.\nHowever, there were a few things that attracted our attention:\nThe public e-mail server in question was Bulgarian – mail.bg .\nThe compilation path string contained Korean hieroglyphs.\nThese two facts compelled us take a closer look at this malware — Korean compilers alongside Bulgarian e-mail command-\nand-control communications.\nThe complete path found in the malware presents some Korean strings:\nD:rsh공격 UAC_dll( 완성 )Releasetest.pdb\nThe “rsh” word, by all appearances, means a shortening of “Remote Shell” and the Korean words can be translated in English\nas “attack” and “completion”, i.e.:\nD:rshATTACKUAC_dll(COMPLETION)Releasetest.pdb\nAlthough the full list of victims remains unknown, we managed to identify several targets of this campaign. According to our\ntechnical analysis, the attackers were interested in targeting following organizations”.\nThe Sejong Institute\nThe Sejong Institute is a non-profit private organization for public interest and a leading think tank in South Korea,\nconducting research on national security strategy, unification strategy, regional issues, and international political economy.\nKorea Institute For Defense Analyses (KIDA)\nKIDA is a comprehensive defense research institution that covers a wide range of defense-related issues. KIDA is organized\ninto seven research centers: the Center for Security and Strategy; the Center for Military Planning; the Center for Human\nResource Development; the Center for Resource Management; the Center for Weapon Systems Studies; the Center for\nInformation System Studies; and the Center for Modeling and Simulation. KIDA also has an IT Consulting Group and various\nsupporting departments. KIDA’s mission is to contribute to rational defense policy-making through intensive and systematic\nresearch and analysis of defense issues.\nMinistry of Unification\nThe Ministry of Unification is an executive department of the South Korean government responsible for working towards the\nreunification of Korea. Its major duties are: establishing North Korea Policy, coordinating inter-Korean dialogue, pursuing\ninter-Korean cooperation and educating the public on unification.\nHyundai Merchant Marine\nHyundai Merchant Marine is a South Korean logistics company providing worldwide container shipping services.\nSome clues also suggest that computers belonging to “The supporters of Korean Unification” (http://www.unihope.kr/) were\nalso targeted. Among the organizations we counted, 11 are based in South Korea and two entities reside in China.\nPartly because this campaign is very limited and highly targeted, we have not yet been able to identify how this malware is\nbeing distributed. The malicious samples we found are the early stage malware most often delivered by spear-phishing e-\nmails.\nInfecting a system\nThe initial Trojan dropper is a Dynamic Link Library functioning as a loader for further malware. It does not maintain exports\nand simply delivers another encrypted library maintained in its resource section. This second library performs all the\nespionage functionality.\nWhen running on Windows 7, the malicious library uses the Metasploit Framework’s open-source code Win7Elevate to inject\nmalicious code into explorer.exe . In any case, be it Windows 7 or not, this malicious code decrypts its spying library from\nresources, saves it to disk with an apparently random but hardcoded name, for example, ~DFE8B437DD7C417A6D.TMP , in\nthe user’s temporary folder and loads this file as library.\nThis next stage library copies itself into the System32  directory of the Windows folder after the hardcoded file name —\neither KBDLV2.DLL or AUTO.DLL , depending on the malware sample. Then the service is created for the service dll. Service\nnames also can differ from version to version; we discovered the following names —  DriverManage, WebService  and\nWebClientManager . These functions assure malware persistence in a compromised OS between system reboots.\nAt this stage, the malware gathers information about the infected computer. This includes an output of the systeminfo\ncommand saved in the file oledvbs.inc  by following the hardcoded path: C:Program FilesCommon FilesSystemOle\nDBoledvbs.inc . There is another function called – the malware creates a string containing computer and user names but this\nisn’t used anywhere. By all appearances, this is a mistake by the malware author. Later on, we will come to a function where\nsuch a string could be pertinent but the malware is not able to find this data in the place where it should be. These steps are\ntaken only if it’s running on an infected system for the first time. At system startup, the malicious library performs spying\nactivities when it confirms that it is loaded by the generic svchost.exe  process.\nSpying modules\nThere are a lot of malicious programs involved in this campaign but, strangely, they each implement a single spying\nfunction. Besides the basic library ( KBDLV2.DLL / AUTO.DLL ) that is responsible for common communication with its\ncampaign master, we were able to find modules performing the following functions:\nKeystroke logging\nDirectory listing collection\nHWP document theft\nRemote control download and execution\nRemote control access\nDisabling ﬁrewall\nAt system startup, the basic library disables the system firewall and any AhnLab firewall (a South Korean security product\nvendor) by zeroing out related values in registry:\nIt also turns off the Windows Security Center service to prevent alerting the user about the disabled firewall.\nIt is not accidental that the malware author has singled out AhnLab’s security product. During our Winnti research , we learnt\nthat one of the Korean victims was severely criticized by South Korean regulators for using foreign security products. We do\nnot know for sure how this criticism affected other South Korean organizations, but we do know that many South Korean\norganizations install AhnLab security products. Accordingly, these attackers don’t even bother evading foreign vendors’\nproducts, because their targets are solely South Korean.\nOnce the malware disables the AhnLab firewall, it checks whether the file taskmgr.exe  is located in the hardcoded\nC:WINDOWS  folder. If the file is present, it runs this executable. Next, the malware loops every 30 minutes to report itself\nand wait for response from its operator.\nCommunications\nCommunication between bot and operator flows through the Bulgarian web-based free email server ( mail.bg ). The bot\nmaintains hardcoded credentials for its e-mail account. After authenticating, the malware sends e-mails to another specified\ne-mail address, and reads e-mails from the inbox. All these activities are performed via the “mail.bg” web-interface with the\nuse of the system Wininet API functions. From all the samples that we managed to obtain, we extracted the following email\naccounts used in this campaign:\nHere are the two “master” email addresses to which the bots send e-mails on behalf of the above-mentioned accounts.\nThey report on status and transmit infected system information via attachments:\nRegular reporting\nTo report infection status, the malware reads from C:Program FilesCommon FilesSystemOle DBoledvbs.inc  which contains\nthe systeminfo  command output. If the file exists, it is deleted after reading.\nThen, it reads user-related info from the file sqlxmlx.inc  in the same folder (we can see strings referencing to “UserID”\ncommentary in this part of the code). But this file was never created. As you recall, there is a function that should have\ncollected this data and should have saved it into this sqlxmlx.inc  file. However, on the first launch, the collected user\ninformation is saved into “ xmlrwbin.inc” . This effectively means that the malware writer mistakenly coded the bot to save\nuser information into the wrong file. There is a chance for the mistaken code to still work — user information could be\ncopied into the send information heap. But not in this case – at the time of writing, the gathered user information variable\nwhich should point to the xmlrwbin.inc  filename has not yet been initialized, causing the file write to fail. We see that\nsqlxmlx.inc  is not created to store user information.\nNext, the intercepted keystrokes are read from the file and sent to the master. Keystrokes are logged and kept in an ordinary\nand consistent format in this file – both the names of windows in which keys were typed and the actual sequence of\nkeyboard entry. This data is found in the file C:Program FilesCommon FilesSystemOle DBmsolui80.inc  created by the\nexternal key logger module.\nAll this data is merged in one file xmlrwbin.inc,  which is then encrypted with RC4. The RC4 key is generated as an MD5 hash\nof a randomly generated 117-bytes buffer. To be able to decipher the data, the attacker should certainly know either the\nMD5 hash or the whole buffer content. This data is also sent, but RSA encrypted. The malware constructs a 1120 bit public\nkey, uses it to encrypt the 117-bytes buffer. The malware then concatenates all the data to be sent as a 128-bytes block.\nThe resulting data is saved in C:Program FilesCommon FilesSystemOle DB to a file named according to the following\nformat:\n“<system time>_<account at Bulgarian email server>.txt”, for example, “08191757_beautifl@mail.bg.txt”.\nThe file is then attached to an e-mail and sent to the master’s e-mail account. Following transmission, it is immediately\ndeleted from the victim system.\nGetting the master’s data\nThe malware also retrieves instructions from the mail server. It checks for mails in its Bulgarian e-mail account with a\nparticular subject tag. We have identified several “subject tags” in the network communication: Down_0 , Down_1, Happy_0,\nHappy_2  and ddd_3 . When found and the e-mail maintains an attachment, the malware downloads this attachment and\nsaves it with filename “ msdaipp.cnt”  in C:Program FilesCommon FilesSystemOle DB . The attacker can send additional\nexecutables in this way. The executables are RC4 encrypted and then attached. The key for decryption is hardcoded in the\nmalicious samples. It’s interesting that the same “ rsh!@!# ” string is maintained across all known samples and is used to\ngenerate RC4 keys. As described earlier, the malware computes the MD5 of this string and uses the hash as its RC4 key to\ndecrypt the executable. Then, the plain executable is dropped onto disk as “ sqlsoldb.exe”  and run, and then moved to the\nC:Windows  folder with the file name “taskmgr.exe” . The original e-mail and its attachment are then deleted from the\nBulgarian e-mail inbox.\nKey logger\nThe additional key logger module is not very complex — it simply intercepts keystrokes and writes typed keys into\nC:Program FilesCommon FilesSystemOle DBmsolui80.inc, and also records the active window name where the user\npressed keys. We saw this same format in the Madi malware . There is also one key logger variant that logs keystrokes into\nC:WINDOWSsetup.log .\nDirectory listing collector\nThe next program sent to victims enumerates all the drives on the infected system and executes the following command on\nthem:\ndir <drive letter>: /a /s /t /-c\nIn practice, this command is written to C:WINDOWSmsdatt.bat  and executed with output redirected to\nC:WINDOWSmsdatl3.inc . As a result, the latter maintains a listing of all files in all the folders on the drive. The malware later\nreads that data and appends it to content of the file C:Program FilesCommon FilesSystemOle DBoledvbs.inc . At this point,\n“oledvbs.inc  “already stores systeminfo  output.\nIt’s interesting that one sample of the directory listing collector was infected with the infamous “Viking” virus of Chinese\norigin. Some of this virus’ modifications were wandering in the wild for years and its authors or operators would never\nexpect to see it end up in a clandestine APT-related spying tool. For the attackers, this is certainly a big failure. Not only\ndoes the original spying program have marks of well-known malware that can be detected by anti-malware products;\nmoreover the attackers are revealing their secret activities to cyber-criminal gangs.  However, by all appearances, the\nattackers noticed the unwanted addition to their malware and got rid of the infection. This was the only sample bearing the\nViking virus.\nDue to expensive work of malware with variety of additional files, it’s not out of place to show these “relationships” in a\ndiagram:\nHWP document stealer\nThis module intercepts HWP documents on an infected computer. The HWP file format is similar to Microsoft Word\ndocuments, but supported by Hangul, a South Korean word processing application from the Hancom Office bundle.\nHancom Office is widely used in South Korea. This malware module works independently of the others and maintains its\nown Bulgarian e-mail account. The account is hardcoded in the module along with the master’s e-mail to which it sends\nintercepted documents. It is interesting that the module does not search for all the HWP files on infected computer, but\nreacts only to those that are opened by the user and steals them. This behavior is very unusual for a document-stealing\ncomponent and we do not see it in other malicious toolkits.\nThe program copies itself as <Hangul full path>HncReporter.exe  and changes the default program association in the registry\nto open HWP documents. To do so, it alters following registry values:\nBy default, there is the registry setting “<Hangul full path>Hwp.exe” “%1”  associating Hangul application “ Hwp.exe”  with\n.HWP documents. But the malicious program replaces this string with the following: “<Hangul full path>HncReporter.exe ”\n“%1” . So, when the user is opening any .HWP document, the malware program itself is executed to open the .HWP\ndocument. Following this registry edit, any opened .HWP document is read and sent as an e-mail attachment with the\nsubject “ Hwp ” to the attackers. After sending, the malware executes the real Hangul word processing application “ Hwp.exe”\nto open the .HWP document as the user intended. The means the victim most likely will not notice the theft of the .HWP\nfile. The module’s sending routine depends on the following files in C:Program FilesCommon FilesSystemOle DB  folder:\nxmlrwbin.inc, msdaipp.cnt, msdapml.cnt, msdaerr.cnt, msdmeng.cnt  and oledjvs.inc .\nRemote control module downloader\nAn extra program is dedicated exclusively to download attachments out of incoming e-mails with a particular subject tag.\nThis program is similar to the pivot module but with reduced functionality: it maintains the hardcoded Bulgarian e-mail\naccount, logs in, reads incoming e-mails and searches for the special subject tag “ Team “. When found, it loads the related\nattachment, drops it onto the hard drive as C:Program FilesCommon FilesSystemOle DBtaskmgr.exe  and executes. This\nparticular executable arrives without any encryption.\nRemote control module\nIt is also interesting that the malware author did not custom develop a backdoor program. Instead, the author modified\nTeamViewer client version 5.0.9104. The initial executable pushed by attackers in e-mails related to the remote control\nmodule consists of three more executables. Two of them are Team Viewer components themselves, and another is some\nsort of backdoor loader. So, the dropper creates three files in the C:WindowsSystem32  directory:\nand creates the service “ Remote Access Service “, adjusted to execute C:WindowsSystem32vcmon.exe  at system startup.\nEvery time the vcmon.exe  is executed, it disables AhnLab’s firewall by zeroing out following registry values:\nThen, it modifies the Team Viewer registry settings. As we said, the Team Viewer components used in this campaign are not\nthe original ones. They are slightly modified. In total, we found two different variants of changed versions. The malware\nauthor replaced all the entries of “ Teamviewer ” strings in Team Viewer components. In the first case with the “ Goldstager ”\nstring and with the string “ Coinstager ” in the second. TeamViewer client registry settings are then\nHKLMSoftwareGoldstagerVersion5  and HKLMSoftwareCoinstagerVersion5  correspondingly. The launcher sets up several\nregistry values that control how the remote access tool will work. Among them is SecurityPasswordAES . This parameter\nrepresents a hash of the password with which a remote user has to connect to Team Viewer client. This way, the attackers\nset a pre-shared authentication value. After that, the starter executes the very Team Viewer client netsvcs.exe .\nWho’s Kim?\nIt’s interesting that the drop box mail accounts iop110112@hotmail.com and rsh1213@hotmail.com  are registered with the\nfollowing “kim” names: kimsukyang  and “Kim asdfa” .\nOf course, we can’t be certain that these are the real names of the attackers. However, the selection isn’t frequently seen.\nPerhaps it also points to the suspected North Korean origin of attack. Taking into account the profiles of the targeted\norganizations — South Korean universities that conduct researches on international affairs, produce defense policies for\ngovernment, national shipping company, supporting groups for Korean unification — one might easily suspect that the\nattackers might be from North Korea.\nThe targets almost perfectly fall into their sphere of interest. On the other hand, it is not that hard to enter arbitrary\nregistration information and misdirect investigators to an obvious North Korean origin. It does not cost anything to concoct\nfake registration data and enter kimsukyang  during a Hotmail registration. We concede that this registration data does not\nprovide concrete, indisputable information about the attackers.\nHowever, the attackers’ IP-addresses do provide some additional clues. During our analysis, we observed ten IP-addresses\nused by the Kimsuky operators. All of them lie in ranges of the Jilin Province Network and Liaoning Province Network, in\nChina.\nNo other IP-addresses have been uncovered that would point to the attackers’ activity and belong to other IP-ranges.\nInterestingly, the ISPs providing internet access in these provinces are also believed to maintain lines into North Korea.\nFinally, this geo-location supports the likely theory that the attackers behind Kimsuky are based in North Korea.\nAppendix\nFiles used by malware:\nRelated MD5:\nNames of services created by malware:\nWe detect these threats as Trojan.Win32.Kimsuky  except modified Team Viewer client components which are detected as\nTrojan.Win32.Patched.ps .\nRelated Posts\nLEAVE A REPLY\nYour email address will not be published.  Required fields are marked *\nEnter your comment here\nName *\nEmail *\nSave my name, email, and website in this browser for the next time I comment.\n \nSUBMIT\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\n APT REPORTS\nThe “Kimsuky” Operation: A North\nKorean APT?\nBy Dmitry Tarakanov  on September 11, 2013. 8:10 pm\n \nNotify me when new comments are added.\n© 2020 AO Kaspersky Lab.  All Rights Reserved. \nRegistered trademarks and service marks are the property of their respective owners.\nContact us  | Privacy Policy  | License AgreementEmail\n I agree to provide my email address to “AO Kaspersky Lab” to\nreceive information about new posts on the site. I understand\nthat I can withdraw this consent at any time via e-mail by\nclicking the “unsubscribe” link that I find at the bottom of any e-\nmail sent to me for the purposes mentioned above.\nSUBSCRIBE\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10 \n SYSTEMCurrentControlSetServicesSharedAccessParameters  \n FirewallPolicyStandardProfile  \n    EnableFirewall  = 0 \n SYSTEMCurrentControlSetServicesSharedAccessParameters  \n FirewallPolicyPublicProfile  \n    EnableFirewall  = 0 \n HKLMSOFTWAREAhnLabV3IS2007InternetSec  \n    FWRunMode  = 0 \n HKLMSOFTWAREAhnlabV3IS80is  \n    fwmode = 0 \n \n1\n2\n3\n4\n5\n6\n7\n8 \n beautifl @mail.bg \n ennemyman @mail.bg \n fasionman @mail.bg \n happylove @mail.bg \n lovest000 @mail.bg \n monneyman @mail.bg \n sportsman @mail.bg \n veryhappy @mail.bg \n \n1\n2 \n iop110112 @hotmail .com \n rsh1213 @hotmail .com \n \n1\n2\n3 \n HKEY_CLASSES_ROOTHwp .Document .7shellopencommand  \n or \n HKEY_CLASSES_ROOTHwp .Document .8shellopencommand  \n \n1\n2\n3 \n netsvcs .exe - the modified Team Viewer client; \n netsvcs_ko .dll - resources library of Team Viewer client; \n vcmon.exe - installer /starter ; \n \n1\n2\n3 \n HKLMSOFTWAREAhnLabV3  365 ClinicInternetSec  \n     UseFw = 0 \n     UseIps = 0 \n \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 \n         %windir%system32kbdlv2 .dll \n         %windir%system32auto .dll \n         %windir%system32netsvcs .exe \n         %windir%system32netsvcs_ko .dll \n         %windir%system32vcmon .exe \n         %windir%system32svcsmon .exe \n         %windir%system32svcsmon_ko .dll \n         %windir%system32wsmss .exe \n         %temp%~DFE8B437DD7C417A6D .TMP \n         %temp%~DFE8B43 .TMP \n         %temp%~tmp.dll \n         C:Windowstaskmgr .exe \n         C:Windowssetup .log \n         C:Windowswinlog .txt \n         C:Windowsupdate .log \n         C:Windowswmdns .log \n         C:Windowsoledvbs .inc \n         C:Windowsweoig .log \n         C:Windowsdata .dat \n         C:Windowssys .log \n         C:WindowsPcMon .exe \n         C:WindowsGoogle Update.exe \n         C:WindowsReadMe .log \n         C:Windowsmsdatt .bat \n         C:Windowsmsdatl3 .inc \n         C:Program FilesCommon FilesSystemOle DBmsdmeng .cnt \n         C:Program FilesCommon FilesSystemOle DBxmlrwbin .inc \n         C:Program FilesCommon FilesSystemOle DBmsdapml .cnt \n         C:Program FilesCommon FilesSystemOle DBsqlsoldb .exe \n         C:Program FilesCommon FilesSystemOle DBoledjvs .inc \n         C:Program FilesCommon FilesSystemOle DBoledvbs .inc \n         C:Program FilesCommon FilesSystemOle DBmsolui80 .inc \n         C:Program FilesCommon FilesSystemOle DBmsdaipp .cnt \n         C:Program FilesCommon FilesSystemOle DBmsdaerr .cnt \n         C:Program FilesCommon FilesSystemOle DBsqlxmlx .inc \n         &lt;Hangul full path&gt;HncReporter .exe \n \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 \n         3baaf1a873304d2d607dbedf47d3e2b4  \n         3195202066f026de3abfe2f966c9b304  \n         4839370628678f0afe3e6875af010839  \n         173c1528dc6364c44e887a6c9bd3e07c  \n         191d2da5da0e37a3bb3cbca830a405ff  \n         5eef25dc875cfcb441b993f7de8c9805  \n         b20c5db37bda0db8eb1af8fc6e51e703  \n         face9e96058d8fe9750d26dd1dd35876  \n         9f7faf77b1a2918ddf6b1ef344ae199d  \n         d0af6b8bdc4766d1393722d2e67a657b  \n         45448a53ec3db51818f57396be41f34f  \n         80cba157c1cd8ea205007ce7b64e0c2a  \n         f68fa3d8886ef77e623e5d94e7db7e6c  \n         4a1ac739cd2ca21ad656eaade01a3182  \n         4ea3958f941de606a1ffc527eec6963f  \n         637e0c6d18b4238ca3f85bcaec191291  \n         b3caca978b75badffd965a88e08246b0  \n         dbedadc1663abff34ea4bdc3a4e03f70  \n         3ae894917b1d8e4833688571a0573de4  \n         8a85bd84c4d779bf62ff257d1d5ab88b  \n         d94f7a8e6b5d7fc239690a7e65ec1778  \n         f1389f2151dc35f05901aba4e5e473c7  \n         96280f3f9fd8bdbe60a23fa621b85ab6  \n         f25c6f40340fcde742018012ea9451e0  \n         122c523a383034a5baef2362cad53d57  \n         2173bbaea113e0c01722ff8bc2950b28  \n         2a0b18fa0887bb014a344dc336ccdc8c  \n         ffad0446f46d985660ce1337c9d5eaa2  \n         81b484d3c5c347dc94e611bae3a636a3  \n         ab73b1395938c48d62b7eeb5c9f3409d  \n         69930320259ea525844d910a58285e15  \n \n1\n2\n3\n4 \n         DriverManage  \n         WebService  \n         WebClientManager  \n         Remote Access Service  \n \nHunting APTs with YARA\n MonitorMinor: vicious\nstalkerware?\nCookiethief: a cookie-\nstealing Trojan for Android\nTHREATS\n CATEGORIES\n TAGS\n STATISTICS ENCYCLOPEDIA DESCRIPTIONS KSB 2019\n English\nSolutions\n Industries\n Products\n Services\n Resource Center\n Contact Us GDPR GET IN TOUCH\n "
}