{
    "title": "operation applejeus_ lazarus hits cryptocurrency exchange with fake installer and macos malware _ securelist",
    "text": "Overview\nLazarus has been a major threat actor in the APT arena for several years. Alongside goals like cyberespionage and\ncybersabotage, the attacker has been targeting banks and other financial companies around the globe. Over the last few\nmonths, Lazarus has successfully compromised several banks and infiltrated a number of global cryptocurrency exchanges\nand fintech companies.\nKaspersky Lab has been assisting with incident response efforts. While investigating a cryptocurrency exchange attacked by\nLazarus, we made an unexpected discovery. The victim had been infected with the help of a trojanized cryptocurrency\ntrading application, which had been recommended to the company over email. It turned out that an unsuspecting employee\nof the company had willingly downloaded a third-party application from a legitimate looking website and their computer\nhad been infected with malware known as Fallchill, an old tool that Lazarus has recently switched back to. There have been\nmultiple reports on the reappearance of Fallchill, including one from US-CERT.\nTo ensure that the OS platform was not an obstacle to infecting targets, it seems the attackers went the extra mile and\ndeveloped malware for other platforms, including for macOS. A version for Linux is apparently coming soon, according to\nthe website. It’s probably the first time we see this APT group using malware for macOS.\nThe fact that the Lazarus group has expanded its list of targeted operating systems should be a wake-up call for users of\nnon-Windows platforms.\nTrojanized cryptocurrency trading application\nThanks to Kaspersky Lab’s malicious-behavior detection technology, implemented in its endpoint security software, we were\nable to reassemble the stages of infection and trace them back to their origin. This helped us understand that one of\nLazarus’ victims was infected with malware after installing a cryptocurrency trading program. We also confirmed that the\nuser installed this program via a download link delivered over email.\nTrojanized trading application for Windows\nIncluding malicious code into distributed software and putting that on a website would be too obvious. Instead, the\nattackers went for a more elaborate scheme: the trojan code was pushed out in the form of an update for a trading\napplication.\nA legitimate-looking application called Celas Trade Pro from Celas Limited  showed no signs of malicious behaviour and\nlooked genuine. This application is an all-in-one style cryptocurrency trading program developed by Celas.\nScreenshot of Celas Trade Pro\nWhen we started this research, any user could download the trading application from the Celas website. Checking the\ninstallation package downloaded from the website confirmed the presence of a very suspicious updater.\nInstallation package download page\nWe have analyzed the following Windows version of the installation package:\nMD5: 9e740241ca2acdc79f30ad2c3f50990a\nFile name:  celastradepro_win_installer_1.00.00.msi\nFile type:  MSI installer\nCreation time:  2018-06-29 01:16:00 UTC\nAt the end of the installation process, the installer immediately runs the Updater.exe module with the “CheckUpdate”\nparameter. This file looks like a regular tool and most likely will not arouse the suspicion of system administrators. After all,\nit even contains a valid digital signature, which belongs to the same vendor. But the devil is in the detail, as usual.\nThe code writer developed this project under the codename “jeus”, which was discovered in a PDB path included in the\nupdater and used as unique HTTP multipart message data separator string. Because of this, and the fact that the attacked\nplatforms include Apple macOS, we decided to call this Operation AppleJeus.\nProperties of the shady updater tool included in the package are:\nMD5: b054a7382adf6b774b15f52d971f3799\nFile Type:  PE32 executable (GUI) Intel 80386, for MS Windows\nKnown file name: %Program Files%\\CelasTradePro\\Updater.exe\nLink Time: 2018-06-15 10:56:27 UTC\nBuild path:  Z:\\jeus \\downloader\\downloader_exe_vs2010\\Release\\dloader.pdb\nThe main purpose of Updater.exe is to collect the victim’s host information and send it back to the server. Upon launch, the\nmalware creates a unique string with the format string template “%09d-%05d” based on random values, which is used as a\nunique identifier of the infected host. This malware collects process lists, excluding “[System Process]” and “System”\nprocesses and gets the exact OS version from the registry value at “HKLM\\SOFTWARE\\Microsoft\\Windows\nNT\\CurrentVersion”. It seems that such values only exist from Windows 10, so we assume that the author developed and\ntested it on Windows 10.\nProductName: Windows OS version\nCurrentBuildNumber: Windows 10 build version\nReleaseID: Windows 10 version information\nUBR: Sub version of Windows 10 build\nBuildBranch: Windows 10 build branch information\nThe code encrypts the collected information with the hardcoded XOR key (“ Moz&Wie;#t/6T!2y “) before uploading it to the\nserver.\nData encryption routine\nThe code sends the victim’s information to a webserver using HTTP and the following URL:\nwww.celasllc[.]com/checkupdate.php\nThe server is a legitimate looking website owned by the developer of the program: Celas LLC. At this point we were not able\nto conclude with high confidence whether the server was compromised by the threat actor or had belonged to the threat\nactor from the beginning. To learn more about the server, please read the “Infrastructure” section below.\nThe malware used a hardcoded User-Agent string “ Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0) ” and\nfixed a multipart form data separator string “ jeus “.\nUsing encryption, the custom separator string wouldn’t be a red flag for a legitimate application, but sending a request with\nthe context-irrelevant string “get_config”, as well as uploading collected system information as “temp.gif”, mimicking a GIF\nimage with a magic number in the header, definitely made us raise our eyebrows.\nCommunication with the C2 server\nAfter successfully uploading data, the updater checks the server response. If the server responds with HTTP code 300, it\nmeans the updater should keep quiet and take no action. However, if the response is HTTP code 200, it extracts the\npayload with base64 and decrypts it using RC4 with another hardcoded key (“ W29ab@ad%Df324V$Yd “). The decrypted data\nis an executable file that is prepended with the “ MAX_PATHjeusD ” string.\nDuring our research, we found other similar files. One was created on August 3rd and another on August 11th. The PDB path\nshows that the author keeps improving this updater tool, apparently forked from some stable version released on July 2,\n2018 according to the internal directory name.\nAdditional trojanized sample #1 Additional trojanized sample #1\nInstallation package MD5 4126e1f34cf282c354e17587bb6e8da30bdb652bbe15942e866083f29fb6dd6\n2\nPackage creation date 2018-08-03 09:57:29 2018-08-13 0:12:10\nDropped updater MD5ffae703a1e327380d85880b9037a0ae\nbbbbcf6da5a4c352e8846bf91c3358d5\nc\nUpdater creation date 2018-08-03 09:50:08 2018-08-11 7:28:08\nUpdater Build pathH:\\DEV\\ TManager \\DLoader\\2018070\n2\\dloader\\WorkingDir\\Output\\00000\n009\\Release\\dloader.pdbH:\\DEV\\ TManager \\DLoader\\2018070\n2\\dloader\\WorkingDir\\Output\\00000\n006\\Release\\dloader.pdb\nNote the TManager directory in the PDB path from the table. It will pop up again in another unexpected place later.\nTrojanized trading program for macOS\nFor macOS users, Celas LLC also provided a native version of its trading app. A hidden “autoupdater” module is installed in\nthe background to start immediately after installation, and after each system reboot. It keeps contacting the command and\ncontrol (C2) server in order to download and run an additional executable from the server. The communication conforms to\nthe Windows version of the updater and is disguised as an image file upload and download, while carrying encrypted data\ninside.\nWe have analyzed the following installation file:\nMD5: 48ded52752de9f9b73c6bf9ae81cb429\nFile Size: 15,020,544 bytes\nFile Type: DMG disk image\nKnown file name: celastradepro_mac_installer_1.00.00.dmg\nDate of creation:  13 July 2018\nOnce the Cellas Trade Pro app is installed on macOS, it starts the Updater application on the system load via a file named\n“.com.celastradepro.plist” (note that it starts with a dot symbol, which makes it unlisted in the Finder app or default Terminal\ndirectory listing). The “Updater” file is passed the “CheckUpdate” parameter on start.\nCelas Trade Pro app plist file (Apple Property List)\nThe command-line argument “CheckUpdate” looks redundant from a code analysis perspective: there is no other argument\nthat the application expects. In the absence of all arguments, it doesn’t do anything and quits. This may or may not be way\nto trick sandboxes that could automatically execute this trojan updater, with no suspicious activity produced without such a\n“secret” extra argument. The choice of a benign string such as “CheckUpdate” helps it to hide in plain sight of any user or\nadministrator looking into running processes.\nThe trojanized updater works similar to the Windows version in many ways. Both applications are implemented using a\ncross-platform QT framework . Upon launch, the downloader creates a unique identifier for the infected host using a\n“%09d-%06d” format string template. Next, the app collects basic system information, which for macOS is done via\ndedicated QT classes:\nHost name\nOS type and version\nSystem architecture\nOS kernel type and version\nThe process of encrypting and transferring data is the same as in the Windows version. This information is XOR-encrypted\nwith hardcoded 16-byte static key “ Moz&Wie;#t/6T!2y” , prepended with GIF89a header and uploaded to the C2 server via\nHTTP POST and the following URL:\nhttps://www.celasllc[.]com/checkupdate.php\nPOST request template strings\nThe module relies on a hardcoded User-Agent string for macOS:\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko)\nChrome/66.0.3359.139 Safari/537.36\nOnce the server replies, it checks the HTTP response code. HTTP response code 300 indicates that the server has no task\nfor the updater and the application terminates immediately. If the HTTP response is code 200, then the updater gets the\ndata in the response, decodes it from base64 encoding and decrypts it using RC4 with the hardcoded static key\n“W29ab@ad%Df324V$Yd “. It calculates the MD5 of the decoded and decrypted data, which is compared to a value stored\ninside, to verify the integrity of the transferred file. After that, the payload is extracted and saved to a hardcoded file location\n“/var/zdiffsec “, sets executable permissions for all users and starts the app with another secret hardcoded command-line\nargument “ bf6a0c760cc642 “. Apparently the command-line argument is the way to prevent the detection of its malicious\nfunctionality via sandboxes or even reverse engineering. We have previously seen this technique adopted by Lazarus group in\n2016 in attacks against banks. As of 2018, it is still using this in almost every attack we investigated.\nDownloaded payload\nAccording to data from Kaspersky Security Network, the threat actor delivered the malicious payload using one of the\nshadowy updaters described above. We found a malicious file created at the same host:\nMD5:  0a15a33844c9df11f12a4889ae7b7e4b\nFile Size: 104,898,560 bytes\nFile Type:  PE32+ executable (GUI) x86-64, for MS Windows\nKnown file name: C:\\Recovery\\msn.exe\nLink time:  2018-04-19 13:30:19\nNote the unusually large size for an executable file. We believe that it was inflated with junk data on purpose to prevent easy\ndownload or transfer over the internet.\nSearching for the reason for the malware’s appearance on the system revealed that there was an additional process\nresponsible for producing several files before this malware was launched, suggesting a trojan dropper in action. The main\nfunction of this malware is to implant the Fallchill backdoor loader linked to several files. Upon launch, the malware checks\none of the command-line arguments passed to it. The malware chooses one of the service names located in the following\nregistry value as a disguise:\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\\netsvcs\nThis value includes a list of several dozen standard system service names.\nThe randomly chosen service name is used to name the dropped file and newly registered Windows service. Let’s refer to\nthis randomly chosen service name as [service] . The malware contains references to several files inside:\nThe file passed as argument: contains a 16-byte key\nmsncf.dat: Encrypted configuration data\nmsndll.tmp: Encrypted Fallchill loader\nmsndll.dat: Encrypted Fallchill backdoor (payload for the loader)\n[service] svc.dll: Fallchill backdoor loader\n[service] .dat: Copy of msndll.dat\nA mix of the above-mentioned files produces the final backdoor known as Fallchill. A more detailed procedure for technical\nspecialists is as follows:\n1. Check whether the command-line argument points to a file of 16 byte size.\n2. Read the file passed via the command-line argument. The contents of this file contains a crypto key, which we will call\nthe main key.\n3. Open the msncf.dat file (configuration file). If the file size equals 192 bytes, read the content of the file.\n4. Open msndll.tmp file and decrypt it using the main key.\n5. Create the [service] svc.dll file and fill it with pseudo-random data.\n1. The malware fills the file with 10,240 bytes of pseudo-random data, and iterates (rand() % 10 + 10240) times. This is\nwhy it produces files which are at least 104,851,000 bytes.\n6. Copy the 16-byte main key at the end of the [service] svc.dll file.\n7. Encrypt the [service] .dat file name with the main key and append it at the end of [service] svc.dll.\n8. Overwrite the beginning of [service] svc.dll with data decrypted from msndll.tmp.\n9. Move msndll.dat file to [service] .dat.\n10. Delete temporary files: msndll.tmp, msncf.dat, msndll.log.\n11. Timestamp [service] svc.dll and [service] .dat files.\n12. Register [service] svc.dll as a Windows service.\n13. Save a copy of data from msncf.dat file in the following registry value\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\TaskConfigs\\Description.\nInfection process diagram\nFallchill backdoor loader\nWe confirmed that the following malware was created on the infected host using the method described above:\nFallchill backdoor loader:\nMD5:  e1ed584a672cab33af29114576ad6cce\nFile Size:  104,878,356 bytes\nFile Type:  PE32+ executable (DLL) (console) x86-64, for MS Windows\nKnown file name:  C:\\Windows\\system32\\ uploadmgrsvc.dll\nLink time:  2018-01-18 01:56:32\nEncrypted Fallchill backdoor:\nMD5:  d8484469587756ce0d10a09027044808\nFile Size:  143,872 bytes\nFile Type:  encrypted data\nKnown file name:  C:\\Windows\\system32\\ uploadmgr.dat\nUpon starting, uploadmgrsvc.dll reads 276 bytes from the end of its own executable file. The first 16 bytes of this 276-byte\ndata are used as a decryption key, and the remaining 260 bytes contain the encrypted file path used by the backdoor.\nData at the end of the loader module\nAfter decryption of the last 260-bytes, the malware retrieves the name or path of the file that contains the actual backdoor\nbody in encrypted form.\nDecrypted file name in the end of loader module\nThe malware reads the specified file and decrypts it using the same decryption routine. This is how the executable code of\nthe backdoor is produced in memory and executed by the loader. Below is the meta information about the decrypted final\npayload in memory:\nMD5:  d7089e6bc8bd137a7241a7ad297f975d\nFile Size:  143,872 bytes\nFile Type:  PE32+ executable (DLL) (GUI) x86-64, for MS Windows\nLink Time:  2018-03-16 07:15:31\nWe can summarize the Fallchill backdoor loading process as follows:\nLoading the Fallchill backdoor\nAs mentioned previously, the final payload belongs to a Fallchill malware cluster formerly attributed to the Lazarus APT\ngroup. Upon launching, this malware resolves the API function addresses at runtime, and reads the C2 server address from\nthe registry value created during the installation stage:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\TaskConfigs\\Description\nIf there is no configuration value, the malware falls back to a default C2 server address.\n196.38.48[.]121\n185.142.236[.]226\nThis is a full-featured backdoor that contains enough functions to fully control the infected host. Some of its network\nprotocol commands are described below.\nCommand ID Description\n0x8000 Write current time and configuration data to registry key\n0x8001 Send configuration data\n0x8002 Replace configuration data in the fixed registry value\n0x8003 Execute Windows command, store output in temp file and upload contents to C2\n0x8006 Show current working directory\n0x8007 Change current working directory\n0x8008 Collect process information\n0x8009 Terminate process\n0x8010 Start new process\n0x8011 Create process with security context of the current user\n0x8012 Connect to specified host/port\n0x8013 Get drive information\n0x8014 Directory listing\n0x8015 Search a file\n0x8019 Write data to a specified file\n0x8020 Read contents of specified file and upload to C2 server\n0x8021 Compress multiples files to a temp file (name start with ZD) and upload to C2\n0x8023 Wipe specific file\n0x8025 Copy file time from another file time (timestamping)\n0x8026 Shutdown malware service and self-delete\n0x8043 Send “Not Service” unicode string to C2 server (communication test?).\nThis set of capabilities is very common for many Lazarus backdoors, which have been seen in other attacks against banks and\nfinancial industry in the past years.\nInfrastructure\nWhile working on the incident of the cryptocurrency company’s breach, we were curious about the legal status of the Celas\nLLC company that developed this trojanized trading application.\nCelas LLC main homepage.\nThe website had a valid SSL certificate issued by Comodo CA. However, note that the certificate from this webserver\nmentions “Domain Control Validated”, which is a weak security verification level for a webserver. It does not mean validation\nof the identity of the website’s owner, nor of the actual existence of the business. When certification authorities issue this\nkind of certificate they only check that the owner has a certain control over the domain name, which can be abused in\ncertain ways .\nBelow is the WHOIS record of the “celasllc.com” domain. The domain name was registered by an individual named “John\nBroox” with registrant email address “johnbroox200@gmail[.]com”.\nThe same name of “John Broox” was used inside the installation package of the macOS version of the trading application.\nThe Info.plist properties file describes the package as follows:\nIt looks at first sight like a legitimate WHOIS record, but something doesn’t really add up here. The domain celasllc.com was\nthe only domain registered with this email address and was exclusively used for domain registration.\nThe registrant used the Domain4Bitcoins  service to register this domain, apparently paying with cryptocurrency. According\nto open-source intelligence, the address of the WHOIS information is fake, unless it’s the owner of a ramen shop running a\ncryptocurrency exchange software development studio on the side.\nView of the location referred in the WHOIS record. Image source: Google Maps.\nThe server hosting celasllc.com (185.142.236.213) belongs to the Blackhost ISP in the Netherlands.\nWHOIS record of cellasllc.com server\nCoincidentally, the Fallchill malware authors also preferred to use the same hosting company to host their C2 server.\nMoreover, the Celas LLC web server and one of the C2 servers of the Fallchill malware are located in the same network\nsegment of this ISP:\nCelas LLC infrastructure:\n185.142.236.213 : Netherlands Blackhost Ltd. AS174 COGENT-174\nFallchill malware C2 server:\n196.38.48[.]121: South Africa Internet Solutions AS3741\n185.142.236[.]226: Netherlands Blackhost Ltd. AS174 COGENT-174\nAdditional attacker’s server from telemetry\n80.82.64[.]91: Seychelles Incrediserve Ltd AS29073\n185.142.239[.]173: Netherlands Blackhost Ltd. AS174 COGENT-174\nHowever, when you look into Celas Trading Pro application’s digital signature, including its “Updater”, you will find that this\ncertificate was also issued by Comodo CA, which refers to a company address in the United States.\nAccording to open-source data, this address doesn’t belong to a real business, and looks on maps like a meadow with a\nsmall forest and small real estate offering nearby.\nLocation of Cellas LLC, according to its digital certificate\nReal estate history of that addressAPT REPORTS\nOperation AppleJeus: Lazarus hits\ncryptocurrency exchange with fake\ninstaller and macOS malware\nBy GReAT  on August 23, 2018. 8:00 am\nIN THE SAME CATEGORY\nChafer used Remexi malware to spy on\nIran-based foreign diplomatic entities\nGreyEnergy’s overlap with Zebrocy\nA Zebrocy Go Downloader\nAPT review of the year\nDarkPulsar FAQ\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 \n Certificate : \n     Data: \n         Version : 3 (0x2) \n         Serial Number: \n             22:a6:49:c1:ae:61:3f:58:5a:a5:e3:cb:8b:23:f0:61 \n     Signature Algorithm : sha256WithRSAEncryption  \n         Issuer: C=GB, ST=Greater Manchester , L=Salford , O=COMODO CA Limited , CN=COMODO RSA Domain \n         Validity  \n             Not Before: May 29 00:00:00 2018 GMT \n             Not After : May 29 23:59:59 2019 GMT \n         Subject : OU=Domain Control Validated , OU=PositiveSSL , CN=celasllc .com \n         Subject Public Key Info: \n             Public Key Algorithm : rsaEncryption  \n                 Public-Key: (2048 bit) \n                 Modulus : \n                     00:de:0f:58:f2:68:07:d2:0f:43:5a:07:c6:53:b7: \n                     4a:b4:1c:4c:71:4f:a1:4e:80:e3:5a:ec:3b:90:a7: \n                     91:ca:42:49:71:ba:da:33:4c:e4:4f:1f:86:d9:30: \n                     32:a0:b1:f4:b2:f2:9c:28:97:7c:81:0f:02:d0:9c: \n                     36:f6:9c:d6:f9:b5:ca:23:ba:1b:84:e4:0d:8c:9f: \n          -- Redacted  -- \n \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14 \n Registrant Name: John Broox \n Registrant Organization :  \n Registrant Street: 2141 S Archer Ave    \n Registrant City: Chicago  \n Registrant State/Province : Illinois  \n Registrant Postal Code: 60601 \n Registrant Country : US \n Registrant Phone: +1.8133205751  \n Registrant Email: johnbroox200 @gmail[.]com \n ….. \n Name Server: 1a7ea920.bitcoin -dns.hosting  \n Name Server: a8332f3a .bitcoin -dns.hosting  \n Name Server: ad636824 .bitcoin -dns.hosting  \n Name Server: c358ea2d .bitcoin -dns.hosting  \n \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 \n <?xml version =\"1.0\" encoding =\"UTF-8\" ?> \n <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"  \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\n <plist version =\"1.0\"> \n <dict> \n      <key>CFBundleVersion </key> \n      <string>1.00.00 </string> \n      <key>CFBundleName </key> \n      <string>Celas Trade Pro</string> \n      <key>CFBundleIconFile </key> \n      <string>CelasTradePro </string> \n      <key>CFBundlePackageType </key> \n      <string>APPL</string> \n      <key>CFBundleGetInfoString </key> \n      <string>Developed by John Broox. CELAS LLC</string> \n      <key>CFBundleSignature </key> \n      <string>QTCELASTRADE </string> \n      <key>CFBundleExecutable </key> \n      <string>CelasTradePro </string> \n      <key>CFBundleIdentifier </key> \n      <string>com.celasllc .CelasTradePro </string> \n      <key>NSPrincipalClass </key> \n      <string>NSApplication </string> \n      <key>NSHighResolutionCapable </key> \n      <string>True</string> \n      <key>LSMinimumSystemVersion </key> \n      <string>10.10.0 </string> \n </dict> \n </plist> \n \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 \n Certificate : \n     Data: \n         Version : 3 (0x2) \n         Serial Number: \n             9a:73:55:0b:83:76:86:3b:d9:43:0f:aa:8b:5a:29:87 \n     Signature Algorithm : sha256WithRSAEncryption  \n         Issuer: C=GB, ST=Greater Manchester , L=Salford , O=COMODO CA Limited , CN=COMODO RSA Code \n         Validity  \n             Not Before: May 21 00:00:00 2018 GMT \n             Not After : May 21 23:59:59 2019 GMT \n         Subject : C=US/postalCode =49319, ST=Michigan , L=Cedar Springs /street=15519 WHITE CREEK AVE \n         Subject Public Key Info: \n             Public Key Algorithm : rsaEncryption  \n                 Public-Key: (2048 bit) \n                 Modulus : \n                     00:b6:31:7a:c6:68:2f:d2:03:f2:e9:61:c4:86:4f: \n                     46:62:e7:a6:d7:7c:bd:e6:9f:a8:83:2c:a6:44:43: \n                     92:da:b7:ea:cc:3d:3e:35:20:3f:9c:57:46:1c:d1: \n                     65:b8:28:50:29:cd:29:11:e8:56:59:85:e5:0f:19: \n \nTHREATS\n CATEGORIES\n TAGS\n STATISTICS ENCYCLOPEDIA DESCRIPTIONS KSB 2019\n English\nSolutions\n Industries\n Products\n Services\n Resource Center\n Contact Us GDPR GET IN TOUCH\n "
}