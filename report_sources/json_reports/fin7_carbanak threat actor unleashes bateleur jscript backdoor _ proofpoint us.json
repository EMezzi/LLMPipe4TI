{
    "title": "fin7_carbanak threat actor unleashes bateleur jscript backdoor _ proofpoint us",
    "text": "About Threat Center Products Resources Connect\nSupport\n/Blog /Threat Insight /FIN7/Carbanak threat actor unleashes Bateleur JScript backdoor\nJULY 31, 2017  | MATTHEW MESA, DARIEN HUSS\nOverview\nProofpoint researchers have uncovered that the threat actor commonly referred to as FIN7 has added a new JScript backdoor called\nBateleur and updated macros to its toolkit. We have observed these new tools being used to target U.S.-based chain restaurants, although\nFIN7 has previously targeted hospitality organizations, retailers, merchant services, suppliers and others. The new macros and Bateleur\nbackdoor use sophisticated anti-analysis and sandbox evasion techniques as they attempt to cloak their activities and expand their victim\npool.\nSpecifically, the first FIN7 change we observed was in the obfuscation technique found in their usual document attachments delivering the\nGGLDR script [1], initially described by researchers at FireEye [2]. In addition, starting in early June, we observed this threat actor using\nmacro documents to drop a previously undocumented JScript backdoor, which we have named “Bateleur”, instead of dropping their\ncustomary GGLDR payload. Since its initial sighting, there have been multiple updates to Bateleur and the attachment macros.\nIn this blog we take a deep dive into Bateleur and the email messages and documents delivering it.\nDelivery\nThe example message (Fig. 1) uses a very simple lure to target a restaurant chain. It purports to be information on a previously discussed\ncheck. The email is sent from an Outlook.com account, and the attachment document lure also matches that information by claiming “This\ndocument is encrypted by Outlook Protect Service”. In other cases, when the message was sent from a Gmail account, the lure document\ninstead claims “This document is encrypted by Google Documents Protect Service” (Fig. 2).\nFigure 1: Phishing  email containing JScript document dropper\nFigure 2: Malicious “Outlook” document lure (left) and “Google” lure (right)\nAnalysis\nThe email contains a macro-laden Word document. The macro accesses the malicious payload via a caption: UserForm1.Label1.Caption\n(Fig. 3). The caption contains a “|*|”-delimited obfuscated JScript payload (Fig. 4). The macro first extracts the JScript from the caption then\nsaves the content to debug.txt  in the current user’s temporary folder ([TMP]%). Next, the macro executes the following commands, which are\nstored in an obfuscated manner by reversing the character order:\n1. schtasks /create /f /tn \"\"GoogleUpdateTaskMachineCorefh5evfbce5bhfd37\"\" /tr \"\"wscript.exe //b /e:jscript [TMP]%\\debug.txt \"\" /sc\nONCE /st \"\"05:00\"\" /sd \"\"12/12/1990\"\"\n2. Sleep for 3 seconds\n3. schtasks /Run /I /TN \"\"GoogleUpdateTaskMachineCorefh5evfbce5bhfd37\"\"\n4. Sleep for 10 seconds\n5. schtasks /Delete /F /TN \"\"GoogleUpdateTaskMachineCorefh5evfbce5bhfd37\"\"\nIn the first step, the macro creates a scheduled task whose purpose is to execute debug.txt as a JScript. The macro then sleeps for 3\nseconds, after which it runs the scheduled task. Finally, the macro sleeps for 10 seconds then deletes the malicious scheduled task. The\ncombined effect of these commands is to run Bateleur on the infected system in a roundabout manner in an attempt to evade detection.\nFigure 3: Macro from c91642c0a5a8781fff9fd400bff85b6715c96d8e17e2d2390c1771c683c7ead9\nFigure 4: Caption containing malicious obfuscated JScript\nThe malicious JScript has robust capabilities that include anti-sandbox functionality, anti-analysis (obfuscation), retrieval of infected system\ninformation, listing of running processes, execution of  custom commands and PowerShell scripts, loading of EXEs and DLLs, taking\nscreenshots, uninstalling and updating itself, and possibly the ability to exfiltrate passwords, although the latter requires an additional module\nfrom the command and control server (C&C).\nWhen Bateleur first executes it creates a scheduled task “ GoogleUpdateTaskMachineSystem”  for persistence using the following\ncommand pattern:\nBateleur has anti-sandbox features but they do not appear to be used at this time.  This includes detection of Virtualbox, VMware, or\nParallels via SMBIOSBIOSVersion  and any of the following strings in DeviceID :\nThe backdoor also contains a process name blacklist including:\nBateleur also checks its own script name and compares it to a blacklist which could indicate that the script is being analyzed by an analyst\nor a sandbox:\nThe following Table describes the commands available in the backdoor.\n \nCommand Description\nget_information Return various information about the infected machine, such as computer and domain name, OS, screen size, and\nnet view\nget_process_list Return running process list (name + id)\nkill_process Kill process using taskkill\nuninstall Delete installation file and path and remove scheduled task GoogleUpdateTaskMachineSystem\nupdate Overwrite JScript file with response content\nexe Perform a “load_exe” request to the C&C to retrieve an EXE, save it as debug.backup  in the install_path, write a\ncmd.exe command to a file named debug.cmd  and then execute debug.cmd with cmd.exe\nwexe Perform a “load_exe” request to C&C to retrieve an EXE, save it as debug.log  and then execute the EXE via WMI\ndll Perform a “load_dll” request to the C&C to retrieve a DLL, save it as debug.backup  in the install_path, write a\nregsvr32 command to a file named debug.cmd and then execute debug.cmd  with cmd.exe\n \ncmd Perform a “load_cmd” request to the C&C to retrieve a command to execute, create temp file named log_[date].cmd\ncontaining command to execute, execute the command and sleep for 55 seconds. Send file output to the C&C via a\nPOST request and remove the temporary command file\npowershell Perform a “load_powershell” request to the C&C to retrieve a command to execute, create a temp file named\nlog_[date].log  containing a PowerShell command to execute, execute the command, and sleep for 55 seconds. Send\nfile output to the C&C via a POST request and remove the temporary command file\napowershell Same as powershell  command but instead executes a PowerShell command directly with powershell.exe\nwpowershell Same as powershell  command but instead executes a PowerShell command via WMI\nget_screen Take a screenshot and save it as screenshot.png  in the install_path\nget_passwords Perform a “load_pass” request to the C&C to retrieve a PowerShell command containing a payload capable of\nretrieving user account credentials\ntimeout Do nothing\nTable 1: List of commands available in the Bateleur backdoor\nThe Bateleur C&C protocol occurs over HTTPS and is fairly straightforward with no additional encoding or obfuscation. Bateleur uses HTTP\nPOST requests with a URI of “/?page=wait” while the backdoor is waiting for instructions. Once an instruction is received from the controller\n(Fig.  5), the backdoor will perform a new request related to the received command (Fig. 6).\nFigure 5: Bateleur HTTP POST “wait” request\nFigure 6: Bateleur HTTP POST receiving command from C&C\nAfter each command the backdoor will respond with typically either an OK for many commands, or send the results back to the C&C with a\nfinal POST request.\nAlthough Bateleur has a much smaller footprint than GGLDR/HALFBAKED, lacks basic features such as encoding in the C&C protocol, and\ndoes not have backup C&C servers, we expect the Bateleur developer(s) may add those features in the near future. In less than one month,\nwe have observed Bataleur jump from version 1.0 to 1.0.4.1; the newer version of the backdoor adds several new commands including the\nwexe , apowershell , and wpowershell  (Table 1) that did not exist in version 1.0.\nAttribution\nProofpoint researchers have determined with a high degree of certainty that this backdoor is being used by the same group that is referred\nto as FIN7 by FireEye [3] and as Carbanak by TrustWave [4] and others. In this section we will discuss each datapoint that connects this\nbackdoor with previous FIN7 activity.\nEmail Message/Campaign Similarity\nIn June we observed similar messages separately delivering GGLDR and Bateleur to the same target, with some even sharing very similar\nor identical attachment names, subject lines, and/or sender addresses. The timing and similarity between these campaigns suggest that\nthey were sent by the same actor.\nTinymet\nA small Meterpreter downloader script, called Tinymet by the actor(s) (possibly inspired by [5]), has repeatedly been observed being utilized\nby this group at least as far back as 2016 [6] as a Stage 2 payload. In at least one instance, we observed Bateleur downloading the same\nTinymet Meterpreter downloader (Fig. 7).\nFigure 7: Beginning snippet from Tinymet downloaded by Bateleur\nMoreover, the GGLDR/HALFBAKED backdoor was recently equipped with a new command tinymet  (Fig. 8) which was used in at least one\noccasion (Fig. 9) to download a JScript version of the Tinymet Meterpreter downloader (Fig. 10).\nFigure 8: GGLDR is updated with a Tinymet command\nFIgure 9: GGLDR receiving Tinymet command from C&C (after decoding base64 with custom alphabet)\nFigure 10: Snippet from Tinymet downloaded by GGLDR tinymet command\nWe have also observed Tinymet delivered via the runps1 (Fig. 11) and runvbs (Fig. 12) commands, resulting in the same version of Tinymet\ndownloaded by Bateleur (Fig. 13). All observed instances of Tinymet have utilized the same XOR key of 0x50.\nFigure 11: GGLDR receiving Tinymet via runps1 command\nFigure 12: GGLDR receiving Tinymet via runvbs command\nFigure 13: Snippet from decoded Tinymet downloaded by GGLDR runps1 and runvbs commands\nPassword Grabber\nDuring our analysis we observed that the Powershell password grabber utilized by Bateleur contained an identical DLL\n(stealer_component_refl.dll - 8c00afd815355a00c55036e5d18482f730d5e71a9f83fe23c7a1c0d9007ced5a) as the one we found\nembedded in a powershell contained in recent GGLDR samples. This further demonstrates the payload re-use between instances using the\ntwo different backdoors.\nConclusion\nWe continue to see regular changes to the tactics and tools used by FIN7 in their attempt to infect more targets and evade detection. The\nBateleur JScript backdoor and new macro-laden documents appear to be the latest in the group’s expanding toolset, providing new means\nof infection, additional ways of hiding their activity, and growing capabilities for stealing information and executing commands directly on\nvictim machines.\nReferences\n[1] https://blogs.forcepoint.com/security-labs/carbanak-group-uses-google-malware-command-and-control\n[2] https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html\n[3] https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html\n[4] https://www.trustwave.com/Resources/SpiderLabs-Blog/Carbanak-Continues-To-Evolve--Quietly-Creeping-into-Remote-Hosts/\n[5] https://github.com/SherifEldeeb/TinyMet\n[6] https://www.trustwave.com/Resources/SpiderLabs-Blog/New-Carbanak-/-Anunak-Attack-Methodology/\n[7] https://www.trustwave.com/Resources/SpiderLabs-Blog/Operation-Grand-Mars--a-comprehensive-profile-of-Carbanak-activity-in-\n2016/17/\nIndicators of Compromise (IOCs)\nBateleur Document Droppers\ncf86c7a92451dca1ebb76ebd3e469f3fa0d9b376487ee6d07ae57ab1b65a86f8\nc91642c0a5a8781fff9fd400bff85b6715c96d8e17e2d2390c1771c683c7ead9\n \nFIN7 Password Stealer Module\n8c00afd815355a00c55036e5d18482f730d5e71a9f83fe23c7a1c0d9007ced5a\n \nBateleur C&C\n195.133.48[.]65:443\n195.133.49[.]73:443\n185.154.53[.]65:443\n188.120.241[.]27:443\n176.53.25[.]12:443\n5.200.53[.]61:443\n \nTinymet C&C\n185.25.48[.]186:53\n46.166.168[.]213:443\n188.165.44[.]190:53\n \nET and ETPRO Suricata/Snort Coverage\n2825129,ETPRO TROJAN Carbanak VBS/GGLDR v2 Checkin\n2825130,ETPRO TROJAN Carbanak VBS/GGLDR v2 CnC Beacon\n2826201,ETPRO TROJAN Carbanak VBS/GGLDR v2 CnC Beacon 2\n2826592,ETPRO TROJAN Carbanak VBS/GGLDR v3 CnC Beacon\n2826631,ETPRO TROJAN Carbanak/FIN7 Bateleur SSL Certificate Detected\n2826167,ETPRO TROJAN Carbanak/FIN7 Tinymet Downloader Receiving Payload\n2826674,ETPRO TROJAN Carbanak/FIN7 Bateleur CnC Beacon\nschtasks /Create /f /tn \"GoogleUpdateTaskMachineSystem\" /tr \"wscript.exe //b /e:jscript C:\\Users\\[user\naccount]\\AppData\\Local\\Temp\\{[hex]-[hex]-[hex]-[hex]-[hex]}\\debug.txt\" /sc minute /mo 5•\nvmware•\nPCI\\\\VEN_80EE&DEV_CAFE•\nVMWVMCIHOSTDEV•\nautoit3.exe•\ndumpcap.exe•\ntshark.exe•\nprl_cc.exe•\nmalware•\nsample•\nmlwr•\nDesktop•\nOverview\nWhy Proofpoint\nCareers\nLeadership Team\nNews Center\nInvestors CenterLatest Threat Report\nHuman Factor Report\nThreat Glossary\nThreat Blog\nDaily RulesetEmail Protection\nAdvanced Threat Protection\nSecurity Awareness Training\nCloud App Security\nArchive & Compliance\nInformation Protection\nDigital Risk Protection\nProduct Bundles\nNexus PlatformWhitepapers\nWebinars\nDatasheets\nEvents\nCustomer Stories\nBlog\nFree Trial+1-408-517-4710\nContact Us\nOffice Locations\nRequest a Demo\nSupport Login\nSupport Services\nIP Address Blocked?\n   © 2020. All rights reserved. Terms and conditions  Privacy Policy  Sitemap\n \nFIN7/Carbanak threat actor unleashes\nBateleur JScript backdoorContinua a vedere i contenuti per la tua posizione Continua United States\nProducts Solutions Partners Resources CompanyCONTACT LOGIN\n "
}