{
    "title": "bae systems threat research blog_ taiwan heist_ lazarus tools and ransomware",
    "text": "Resources  Contact usBAE SYSTEMS THREAT RESEARCH BLOG\nHome Products Solutions News & Events Partners About Us Careers\nSEARCH\nOLDER POST\nHome  » Threat Research  » Taiwan Heist: Lazarus Tools and Ransomware\nPosted by BAE Systems Applied Intelligence  - Monday, 16 October 2017\nTAIWAN HEIST: LAZARUS TOOLS AND RANSOMWARE\nWritten by Sergei Shevchenko, Hirman Muhammad bin Abu Bakar, and James Wong\nBACKGROUND\nReports emerged just over a week ago of a new cyber-enabled bank heist in Asia. Attackers targeting Far\nEastern International Bank (FEIB), a commercial firm in Taiwan, moved funds from its accounts to\nmultiple overseas beneficiaries. In a story which reminds us of the Bangladesh Bank case – the culprits\nhad compromised the bank’s system connected to the SWIFT network and used this to perform the\ntransfers. \nIn recent days, various malware samples have been uploaded to malware repositories which appear to\noriginate from the intrusion. These include both known Lazarus group tools, as well as a rare\nransomware variant called ‘Hermes’ which may have been used as a distraction or cover-up for the\nsecurity team whilst the heist was occurring. \nThe timeline below provides an overview of the key events: \nLittle information is available at present about when or how the attackers compromised the bank, but it is\nlikely more details will emerge in the coming weeks. This blogpost seeks to summarise what is in the\npublic domain at the moment, as well as analyse the samples uploaded to malware repositories. \nANALYSIS\nSeveral files have been uploaded to malware databases which appear to be related to this attack,\nincluding an archive titled “FEIB_Samples” submitted from Taiwan on 12  Oct 2017. These and other\nsamples are listed below: \n#MD5 FilenamesSubmitte\nd FromFirst SeenCompile\nTime\n19563e2f443c3b4e1b00f\n25be0a30d56eFEIB_Samples_pwd(\nVirus).zi_TW2017-10-12\n02:50:16N/A\n2d08f1211fe0138134e82\n2e31a47ec5d4bitsran.exe TW2017-10-03\n01:01:312017-10-01\n15:37:31\n3b27881f59c8d8cc529fa\n80a58709db36RSW7B37.tmp -2017-10-03\n01:01:372017-10-01\n11:34:07\n43c9e71400b72cc0213c9\nc3e4ab4df9dfmsmpeng.exe US2017-10-07\n08:58:002017-02-20\n11:09:30\n50edbad9e6041d43f97c7\n369439a40138FileTokenBroker.d\nllTW2017-10-12\n02:50:152017-01-05\n01:11:33\n697aaf130cfa251e5207e\na74b2558293dsplwow32.exe TW2017-10-12\n02:50:152017-02-20\n11:09:30\n762217af0299d6e241778\nadb849fd2823N/A GB2017-10-08\n03:32:472017-09-21\n09:27:43\n80dd7da89b7d1fe97e669\nf8b4156067c8N/A MY2017-03-14\n02:13:012017-03-06\n17:32:58\n961075faba222f97d3367\n866793f0907bN/A MY2017-02-16\n03:25:002017-02-10\n15:03:30\nFile #1 is the ZIP file containing samples #2-6 inside. Samples #2-4 were also separately uploaded by\nusers in Taiwan and the US on the dates given above. \nSamples #7-9 are older versions of the Hermes ransomware. \nMalware Analysis – Sample #2; Bitsran loader / spreader\nSample #2 is designed to run and spread a malicious payload on the victim's network. On execution, the\nmalware places a copy of itself into the location: \nC:\\Windows\\Temp\\bitsran.exe\nNext, the file establishes a persistence mechanism with the registry key: \nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nIt sets the value of ‘BITSRAN’  to point to the executable in the Temp  location above. \nThe malware then enumerates all processes, searching for specific anti-virus processes and attempts to\nkill these using the command line tool taskkill . \nProcess Name Process Description\ntmbmsrv.exe Trend Micro Unauthorized Change Prevention Service\ntmccsf.exe Trend Micro OfficeScan Common Client Solution Framework\ncntaosmgr.exe Trend Micro OfficeScan Add-on Service Client Management Service\nntrtscan.exe Trend Micro OfficeScan NT RealTime Scan\npccntmon.exe Trend Micro OfficeScan Antivirus real-time scan monitor\ntmlisten.exe Trend Micro OfficeScan NT Listener\ntmpfw.exe Trend Micro OfficeScan NT Firewall\nNext, the process attempts to find an embedded ‘IMAGE’  resource with offset #110 . If successful, this\nfile is loaded into memory. When manually extracting this file, it can be seen to represent a pixelated\nbitmap (BMP) file. \n \nHowever, further investigation reveals that the file is what is known as a ‘Polyglot’ file, whereby a file is\ncontained within another file. Using a HEX viewer, it is possible to see that this file also contains a ZIP file\n(beginning at the ‘PK’ header), with the pixelated image above referencing the bytes of the file to be RGB\nvalues. \n \nThe contents of this resource is decompressed from offset 54, with the last 4 bytes of the file specifying\nthe ZIP’s file size in bytes. When successfully decrypted, the file is saved into the same directory as the\ninitial executable. This takes the filename ‘RSWXXXX.tmp’ , where ‘XXXX’  is randomly generated\nthrough the GetTempFileName function. Once written to disk, this process is created through the\nCreateProcess function. Sample #3 ( RSW7B37.tmp ) is an example of this file. \nWhilst this additional payload is executing, the initial malware attempts to copy itself to other devices on\nthe network. Two user accounts are hardcoded into the malware, and are used to establish connections\nto the C$ SMB shares on Windows devices. These are the accounts: \nAccount Name Account Password\nFEIB\\SPUSER14 #ED{REMOVED}\nFEIB\\scomadmin !it{REMOVED}\nBoth accounts clearly relate to FEIB, though we couldn’t confirm whether the credentials are valid or not.\nThe SPUSER14  may be a Sharepoint user account whilst scomadmin  likely corresponds to System\nCenter Operations Manager admin – an account for managing machines in a data centre. \nInstead of enumerating all devices on the network, the malware iterates through a hardcoded list of 5357\nIP addresses, in the ranges: \n  •  10.49.*\n  •  10.50.*\n  •  10.51.*\n  •  10.59.*\nIt is assumed that previous reconnaissance was conducted by the actors on the internal network to\nidentify active and responding devices, as well as capturing admin credentials for the network. \nIf a device successfully responds to a SMB packet on port 445, the malware copies itself to the C$\nnetwork share using the provided credentials, writing the file to the location: \nC:\\Windows\\Temp\\bitsran.exe\nIf successful, a further command is executed using the same credentials, to create a scheduled task on\nthe remote device with the name ‘BITSRAN’. The full command executed is: \ncmd.exe /c schtasks /create /tn “BITSRAN” /tr /s /u /p /st 00:00 /et 23:59\n/sc minute /mo 1 /ru system /f\nMalware Analysis – Sample #3, Dropped file / Hermes Ransomware\nThe dropped file is a variant of the Hermes ransomware. \nThe ransomware calls GetSystemDefaultLangID()  to obtain language identifier for the system locale. It\ncontains a list of three system language codes: 0x0419  (Russian), 0x0422  (Ukrainian), and 0x0423\n(Belarusian). However, it only checks against the last two, and, if matching, the malware quits. Whether\nthis is a false-flag or not is unknown. \nThe ransomware deletes the Volume Shadow Copies (a type of backup on Windows), using command: \nvssadmin Delete Shadows /all /quiet\nFollowing that, it deletes all VSS (Volume Shadow Copy Service) backup files (which include System\nRestore files) and orphaned shadows, by running commands below for the drives from C:, D:, E:, F:,\nG:, and H: \nvssadmin resize shadowstorage /for=%DRIVE% /on=%DRIVE% /maxsize=401MB\nvssadmin resize shadowstorage /for=%DRIVE% /on=%DRIVE% /maxsize=unbounded\nThe trick above is called \"pulling the carpet\"  as it forces  Windows to voluntarily dump all shadows due to\nlack of space. \nThe ransomware then recursively deletes all backup files from the drives C:, D:, E:, F:, G:, and H:,\nhaving the following extensions:\n  •  *.VHD\n  •  *.bac\n  •  *.bak\n  •  *.wbcat\n  •  *.bkf\n  •  Backup*.*\n  •  backup*.*\n  •  *.set\n  •  *.win\n  •  *.dsk\nUsing Windows CryptoAPI platform, the malware creates an exchange key pair, and then exports the\n2,048-bit public RSA key into an external file called PUBLIC . \nThe ransomware then enumerates both local and network resources, and encrypts files using AES256\nalgorithm. \nEach encrypted directory will have a ransom note left in it: \nHERMES 2.1 RANSOMWARE radical edition\nAll your important files are encrypted\nYour files has been encrypted using RSA2048 algorithm with unique public-\nkey stored on your PC.\nThere is only one way to get your files back: contact with us, pay, and\nget decryptor software.\nYou have \"UNIQUE_ID_DO_NOT_REMOVE\" file on your desktop also it duplicated\nin some folders,\nits your unique idkey, attach it to letter when contact with us. Also you\ncan decrypt 3 files for test.\nWe accept Bitcoin, you can find exchangers on https://www.bitcoin.com/buy-\nbitcoin and others.\nContact information: BM-2cVcZL1xfve1yGGKwEBgG1ge6xJ5PYGfGw@bitmessage.ch\nreserve: BM-2cT4U1vBdjfqKDeWMEXgCWs9SfnMK1GLTF@bitmessage.ch\nMalware Analysis – Samples #4 and #6, Lazarus malware\nSample #4 ( msmpeng.exe ) is packed with Themida to hamper analysis under a debugger, a monitoring\napplication, or a virtual machine. \nOnce fully unpacked in memory, it appears to be an x86 variant of the fdsvc.dll  backdoor described in\nour February blogpost  “Lazarus’ False Flag Malware”. This malware was discovered on networks in\nPoland and Mexico, following a series of watering-hole attacks. \nJust like before, the backdoor uses several transliterated Russian words to either indicate the state of its\ncommunication or issue backdoor commands: \nState/Command Translation from Russian Meaning\nNachalo beginning start communication session\nustanavlivat to set handshake state\npoluchit to receive receive data\npereslat to send send data\nderzhat to maintain maintain communication session\nvykhodit to exit exit communication session\nkliyent2podklyuchit client to connect client is ready to connect\nSample #6 ( splwow32.exe ) is the same backdoor, only it’s not packed. \nBoth sample #4 and #6 have the same time stamp: 20 February 2017, 11:09:30. It appears that sample\n#6 was actually obtained by packing sample #4 with Themida (potentially, to avoid detection), as\ncode/data found in both samples is identical. \nThe backdoor expects a command line parameter that specifies remote C&C address and port number.\nIf it is executed with no command-line parameters, it quits. \nThe specified command-line parameter is decrypted, using some basic character manipulations and\napplying XOR with 2 keys: \n0x517A4563  (“QzEc”)\n0x77506F66  (“wPof”)\nThe decrypted string is expected to delimit C&C address and port number with the “:” character.\nMultiple C&Cs can be delimited with the “|” character. \nIf the backdoor finds no valid pair of C&C address and port number delimited with the “:” character, it\nquits. \nOtherwise, it starts polling the remote C&C for a remote task to execute. Each polling attempt starts from\na state “Nachalo”  (“start communication session”), with a 3 second delay between each attempt to\nconnect to the C&C. \nEach connection attempt starts from a state called “kliyent2podklyuchit”  (“client is ready to\nconnect”). \nIf the backdoor fails to connect five times, or if it connects, but the task it receives is “vykhodit”  (“exit\ncommunication session”), then the backdoor will quit. Otherwise, it will execute the remote command,\neffectively giving the attackers full control over the compromised system. After the execution, the polling\ncycle continues. \nMalware Analysis – Sample #5\nFileTokenBroker.dll  is a DLL, installed as a service under the svchost.exe  (netsvcs ) service\nhost. \nOnce loaded as a service DLL, the DLL's export ServiceMain()  is called. The DLL then constructs a file\nname that consists of the host process name, formatted as: \n%SYSTEM%\\en-US\\[HOST_PROCESS_NAME_NO_EXTENSION].dll.mui\nFor example, if the DLL is loaded into the address space of svchost.exe , the constructed filename will\nbe: \nc:\\windows\\system32\\en-US\\svchost.dll.mui\nAnother possible name is: \nc:\\windows\\system32\\en-US\\netsvc.dll.mui\nThe DLL then reads this file, and decrypts it with a running XOR mask. Once decrypted, it further reads\nan RC4 key from it, and decrypts it with the RC4 algorithm. \nThe decrypted file will contain a hash, so the DLL checks the hash as well to make sure the integrity of\nthe decrypted file is intact. \nA fully decrypted file is then parsed as a PE file, and loaded as a DLL. \nHence, FileTokenBroker.dll  decrypts and executes a payload that is created by an external\ndropper or is implanted by the attackers. \nThe %SYSTEM%\\en-US  directory will have multiple system files in it, so it is chosen to blend the\nencrypted payload file with the other legitimate system files. Unlike other *.dll.mui  files in\n%SYSTEM%\\en-US  directory that are MZ files, the encrypted payload is not an MZ file. \nMalware Analysis – Samples #7, #8, and #9, Further Hermes malware\nSamples #7, #8, and #9 relate to previous instances of Hermes ransomware. \nMalware of this category is typically widespread, but in the case of Hermes it seems relatively rare. This\nis suspicious in itself and reminds us of WannaCry – another rarely observed ransomware. Further\nanalysis is on-going to understand the history of this malware variant. \nTransactions\nThrough working with trusted partners, we have been able to get insight into the transactions made as\npart of the heist. The transactions consisted of two common SWIFT message types, MT103  and\nMT202COV . \nMT103  messages are used for normal, cross border, cash transfers which would typically request funds\nbe transferred into a personal or company beneficiary account. MT103  messages can be used on their\nown, or can be coupled with a cover message; MT202COV  is used to order the movement of funds to the\nbeneficiary institution via another financial institution/Intermediary Bank. \nIn this heist the attackers created MT103  messages to transfer funds to Cambodia, the US, and Sri\nLanka. In addition to the MT103  messages, the attackers created MT202COV  messages; the content of\nthese messages was syntactically correct but the values in specific fields were wrong. As a result, they\nwere received by the intermediary bank but had no further influence on the funds transferred to the\nbeneficiary accounts. \nReports of $60M being stolen appear to be due to confusion over these latter messages, and the\namounts actually stolen were considerably lower. Most of these appear to have been recovered. \nFurther details of the destination accounts within Sri Lanka have emerged in open source. The money\nhad been transferred to the Bank of Ceylon in Sri Lanka on 3 October. The following day, an individual in\nSri Lanka allegedly withdrew  RS 30m (about $195K). Two days after that, the same individual returned to\nwithdraw a further RS 8m, but was arrested when he arrived at the bank. Sri Lankan police have since\narrested another individual and a further suspect is wanted by Sri Lankan law enforcement. \nCONCLUSIONS\nIt has been over a year since the last activity on a payments system from the attackers behind the\ninfamous Bangladesh Bank heist. Lazarus, the prime suspects, have been busy nonetheless – targeting\nBitcoin in various ways, as well as other intrusions into banks such as in Poland and Mexico (albeit\nwithout evidence of targeting payment systems). In one of these cases we and other researchers  were\nable to observe infrastructure in North Korea controlling the malware – further clues as to the origins of\nthese attackers. \nThe attack this month on Taiwanese Far Eastern International Bank has some of the hallmarks of the\nLazarus group: \n  •  Destination beneficiary accounts in Sri Lanka and Cambodia – both countries have been used\npreviously as destinations for Lazarus’ bank heist activity;\n  •   Use of malware previously seen in Lazarus’ Poland and Mexico bank attacks. Where these files were\nfound and the context of their use needs to be confirmed, but could provide a crucial attributive link;\n  •   Use of unusual ransomware, potentially as a distraction.\nDespite their continued success in getting onto payment systems in banks, the Lazarus group still\nstruggle getting the cash in the end, with payments being reversed soon after the attacks are uncovered.\nThe group may be trying new tricks to disrupt victims and delay their ability to respond – such as different\nmessage formats, and the deployment of ransomware across the victim’s network as a smokescreen for\ntheir other activity. It’s likely they’ll continue their heist attempts against banks in the coming months and\nwe expect they will evolve their modus operandi to incorporate new ways of disrupting victims (and\npossibly the wider community) from responding. \nMore work needs to be done to identify how FEIB was attacked, whether further custom tools were\ninvolved, confirm the context of the Lazarus malware in the intrusion, and where else this Hermes\nransomware has been seen. \nAssuming Lazarus are indeed back to targeting bank payment systems, this will serve to emphasize the\nimportance of network hardening and controls frameworks being pushed by the industry  at present. \nRECOMMENDATIONS\nSome general network hardening and monitoring lessons can be taken from this: \n  •  Firewall off SMB (445) for internal computers. If access to this service is required, it should be\npermitted only for those IP’s that require access. i.e. 445 is required for SCOM to push an agent install,\ntherefore 445 should only be allowed from that source server;\n  •   Application blacklisting should be implemented to prevent the use of tools such as vssadmin.exe ,\ncmd.exe , powershell.exe  and similar;\n  •   File Integrity Monitoring should be considered and configured to monitor file creations in “trusted”\nlocations such as the System32 directory. This can also be used to monitor deletes, with an alert\nconfigured to fire on excessive deletes in a row;\n  •   Windows Security Event logs should be monitored to capture Scheduled Task creation events –\nEvent ID 4698 ;\n  •   Registry Auditing should be enabled and monitored to capture any additions to\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run ;\n  •   Excessive use of known administrative privilege accounts should be alerted on – specifically in a “one\nto many” behavioural configuration. i.e. is one specific IP connecting to a large number of devices using\nthe same credentials in a short period of time;\n  •   Ensure privileged accounts have a complex password that does not include any part of the\nusername, or application it relates to.\nAdditional longer term recommendations for financial institutions: \n  •  Practice incident response scenarios which include complex attacks combining covert payment fraud\nand overt network disruption through ransomware, DDoS, network downtime, etc.\n  •   Ensure that you are progressing towards being able to attest against the SWIFT 27 controls. \nFor more information see: \nhttp://www.baesystems.com/en/cybersecurity/swift-customer-security-programme\nAPPENDIX A – INDICATORS OF ATTACK\nMD5 Hashes d08f1211fe0138134e822e31a47ec5d4\nb27881f59c8d8cc529fa80a58709db36\n3c9e71400b72cc0213c9c3e4ab4df9df\n0edbad9e6041d43f97c7369439a40138\n97aaf130cfa251e5207ea74b2558293d\n62217af0299d6e241778adb849fd2823\n0dd7da89b7d1fe97e669f8b4156067c8\n61075faba222f97d3367866793f0907b\nFile / Process name bitsran.exe\nAPPENDIX B – YARA RULE\nrule Hermes2_1  {\n   meta:\n      date = \"2017/10/11\"\n      author = \"BAE\"\n      hash = \"b27881f59c8d8cc529fa80a58709db36\"\n   strings:\n      $magic = { 4D 5A }\n      //in both version 2.1 and sample in Feb\n      $s1 = \"SYSTEM\\\\CurrentControlSet\\\\Control\\\\Nls\\\\Language\\\\\"\n      $s2 = \"0419\"\n      $s3 = \"0422\"\n      $s4 = \"0423\"\n      //in version 2.1 only\n      $S1 = \"HERMES\"\n      $S2 = \"vssadminn\"\n      $S3 = \"finish work\"\n      $S4 = \"testlib.dll\"\n      $S5 = \"shadowstorageiet\"\n      //maybe unique in the file\n      $u1 = \"ALKnvfoi4tbmiom3t40iomfr0i3t4jmvri3tb4mvi3btv3rgt4t777\"\n      $u2 = \"HERMES 2.1 TEST BUILD, press ok\"\n      $u3 = \"hnKwtMcOadHwnXutKHqPvpgfysFXfAFTcaDHNdCnktA\"  //RSA Key part\n   condition:\n      $magic at 0 and all of ($s*) and 3 of ($S*) and 1 of ($u*)\n}\nat 22:32\nLabels: Threat Research  \nNo comments:\nPost a Comment\nEnter your comment...\nComment as:  \nGoogle Account\nPublishPublish \nPreviewPreviewSign up\nTWO BYTES TO $951M\nWANACRYPT0R RANSOMWORM\nAPT10 - OPERATION CLOUD\nHOPPER\nContactlearn@baesystems.com  SUBSCRIBE\nSign up to receive our regular Cyber Threat\nBulletin.\nPOPULAR POSTS\nCONTACT\nFor further information or to talk to an expert,\nplease contact us.\n© 2015 BAE Systems. All rights reserved\nMore \n Create Blog Sign In\nTHREAT RESEARCH BLOG\nth\nAccessibility Terms & conditions Privacy SitemapQuesto sito utilizza cookie di Google per erogare i propri servizi e per analizzare il traffico. Il tuo indirizzo IP e il tuo\nagente utente sono condivisi con Google, unitamente alle metriche sulle prestazioni e sulla sicurezza, per garantire\nla qualità del servizio, generare statistiche di utilizzo e rilevare e contrastare eventuali abusi.ULTERIORI INFORMAZIONI OK\n "
}