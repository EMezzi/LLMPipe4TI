{
    "title": "the oilrig campaign_ attacks on saudi arabian organizations deliver helminth backdoor",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nThe OilRig Campaign: Attacks on Saudi Arabian\nOrganizations Deliver Helminth Backdoor\n25,388\npeople reacted\n2\n15 min. read\nIn May 2016, Unit 42 observed targeted attacks primarily focused on financial institutions and technology\norganizations within Saudi Arabia. Artifacts identified within the malware samples related to these attacks also\nsuggest the targeting of the defense industry in Saudi Arabia, which appears to be related to an earlier wave of\nattacks carried out in the fall of 2015. We have grouped these two waves of attacks into a campaign we have\nnamed ‘OilRig’.\nIn recent OilRig attacks, the threat actors purport to be legitimate service providers offering service and technical\ntroubleshooting as a social engineering theme in their spear‐phishing attacks. Earlier OilRig attacks appear to use\nfake job offers as a social engineering theme. The campaign appears highly targeted and delivers a backdoor we\nhave called ‘Helminth’. Over the course of the attack campaign, we have observed two different variations of the\nHelminth backdoor, one written in VBScript and PowerShell that was delivered via a macro within Excel\nspreadsheets and the other a standalone Windows executable.\nClayslide: Excel Macros Install Helminth Script\nIn May 2016, Unit 42 began researching attacks that used spear‐phishing emails with attachments, specifically\nmalicious Excel spreadsheets sent to financial organizations within Saudi Arabia. We observed spear‐phishing\nemails sent between May 4 and May 12 of this year that delivered these malicious Excel spreadsheets, which we\nare tracking as ‘Clayslide’. ClaySlide documents contain malicious macros that display decoy content within the\nspreadsheet and installs a variant of a Helminth backdoor. FireEye also reported on these attacks in a May 22\nblog post .\nThe macro within Clayslide samples installs the Helminth script, which is composed of a VBScript called\n‘update.vbs’ and a PowersShell script called ‘dns.ps1’. The purpose of the VBScript is to send network beacons to\nits command and control server using HTTP requests and will either download a file or run a batch script\nprovided within the HTTP response. The VBScript also uploads the output of the provided batch scripts to the\ncommand and control (C2) server, which provides threat actors a functional remote shell to the system.\nThe PowerShell script has similar capabilities to the VBScript, but instead of using HTTP for communications it\nuses a series of DNS queries to send and receive data from the server. This communication channel relies on the\nC2 server responding to DNS queries with IP addresses that the PowerShell script will parse treat as data to\nconstruct a batch script to execute on the system. The script specifically looks for the IP address “33.33.x.x” to\nmark the beginning of the batch script transfer. The script will continue sending additional DNS requests and use\nthe octets of the resolving IP addresses as characters to write to the batch script. The script continues to write\ndata to the batch script until it receives the IP address “35.35.35.35”, which notifies the script to stop saving data\nto the file and to run the batch script.\nPlease reference the Appendix for more detailed information on the Clayslide delivery documents and the\nHelminth script variant.\nDiscovery of Executable Helminth Variant\nAdditional samples were discovered in WildFire exhibiting the same DNS‐based C2 behavior as the script variant\nof Helminth; however, many of these samples were found to be Windows executable, instead of the previously\nobserved VBScript and PowerShell combination. These samples were found to contain the same functionality as\nthe previously mentioned Helminth samples. Figure 1 shows the code within the VBScript version of Helminth\nchecking resolving IP addresses for the 35.35.35.35 IP address to stop appending data to a batch script before\nexecuting it, while Figure 2 shows the same functionality within the executable version of the Trojan.\nFigure 1 Helminth dns.ps1 PowerShell script looking for 35.35.35.35 IP address\nFigure 2 Helminth executable looking for the 35.35.35.35 IP address\nThis suggests that the threat actors developed the executable variant of Helminth as a standalone option whose\ninstallation does not rely on a macro within an Excel spreadsheet. This also suggests that the threat actors\npurposely used the same communication methods across both variants with the intention to use the same\ncommand and control server application. This variant of the Trojan is also where we obtained its name, as several\nof these payloads had the following debug symbol path that suggests the malware author called this project\n‘Helminth’:\nE:\\Projects\\hlm updated\\Helminth\\Release\\Helminth.pdb\nPlease reference the Appendix for additional details on the Helminth executable variant.\nDelivery of Windows Executable Helminth Variant\nUnit 42 does not have detailed targeting information associated with attacks delivering the executable variant of\nthe Helminth Trojan, however, we found a Zip archive created in August 2015 that may have been used by the\nthreat actors to deliver the Helminth Trojan. This Zip file was hosted at the following location:\nhxxp://minfosecu.doosan[.]com/data/joboffer.zip\nThe Zip archive is encrypted with an unknown password, but we know it contains two files named joboffer.chm\nand thumb.db. The thumb.db file in the archive has the same name and file size (368128 bytes) as a dropper\nTrojan we track as ‘HerHer’ (SHA256:\nfb424443ad3e27ef535574cf7e67fbf9054949c48ec19be0b9ddfbfc733f9b07) that installs a known Helminth\nexecutable sample. The joboffer.chm file is a compiled HTML file that we believe loads and executes the\n‘thumb.db’ file as a payload, but we cannot be absolutely sure as we do not have the password required to\nextract the files from the archive.\nThe decoy opened by the Helminth sample installed by ‘thumb.db’ (seen in Figure 3) is a dialog box associated\nwith HTML help, which further strengthens our theory that the joboffer.chm ran the sample. This decoy suggests\nthat the threat actors wanted to open the HTML help dialog after installing the Helminth Trojan, as the\njoboffer.chm file is effectively a standalone HTML file. We believe that the threat actors employed social\nengineering to underplay the situation and provide a different legitimate job offer if the victim responded with\nconcerns of malicious activity.\nFigure 3 A Helminth sample displays this dialog box if provided ‘w’ on the command line\nThe executable variant of Helminth is installed with a dropper Trojan that we are tracking as the HerHer Trojan.\nThis Trojan has two objectives: installing embedded Trojans and displaying either a fake error prompt or a fake\n“trubleshooting” (the malware author misspelled this word in each sample) utility. Figure 4 is an example of the\nfake error prompt displayed by the HerHer Trojan.\nFigure 4 Fake Error Prompt Displayed by the HerHer Trojan\nThe Helminth executable variant is very similar in functionality to its script‐based counterpart, as it also\ncommunicates with its C2 server using both HTTP and DNS queries. The major difference in capabilities\nbetween the two variants is that the executable version comes with a module that Helminth uses to log\nkeystrokes and the clipboard contents to exfiltrate to the C2 server.\nHelminth executable samples send artifacts within network beacons to its C2 server that the Trojan refers to as a\n‘Group’ and ‘Name’. We extracted the group and name values from the Helminth executable samples to\ndetermine their purpose. It appears that the group values hardcoded into the malware is associated with the\ntargeted organization, as several are Saudi Arabian organizations within the telecommunications and defense\nindustries. This suggests that the threat actors are not only focused on financial organizations, as their target set\ncould include other industries as well.\nThe name values hardcoded into the Helminth samples are also interesting, as a majority of the names are\nrelated to famous philosophers, such as ‘Plato’ (Greek philosopher), ‘Arasto’ (Persian and Urdu for Greek\nphilosopher Aristotle), and ‘ALAfghani’ (Jamal ad‐Din al‐Afghani, Islamic Philosopher). Other name values\nembedded in samples contain other Persian words, such as ‘Nafti’ ( ﻧﻔﺗﯽ )that translates to ‘oily’, which led us to\nname this campaign OilRig).\nHelminth Infrastructure\nExamining the known infrastructure of the collected sample set of Helminth provides several interesting findings\nin regards to the adversary’s tactics. The variants leveraging malicious macros embedded in Excel documents all\nshare the same command and control server of go0gie[.]com. The executable variants, on the other hand, used a\nvariety of domains:\ncheckgoogle[.]org\nmydomain1110[.]com\nkernel[.]ws\nmydomain1607[.]com\nmydomain1609[.]com\n \nFigure 5 Helminth C2 Infrastructure\nEach sample of the weaponized Excel document variant used a unique command and control domain to retrieve\na bot ID, using the following format:\n00000000<base 36 of a random number smaller than 46655>30.go0gie[.]com\nEach of these domains, however, resolved to the same IP address of 5.39.112.87. This IP is observed as the\nresolution for two domains in use by the portable executable variants, kernel[.]ws and mydomain1110[.]com.\nJudging by compile timestamps of the executables and last saved timestamps of the weaponized documents, it is\nlikely the adversary is recycling a previously created C2 server at 5.39.112.87 for the newer macro based variant.\nThe other C2 domains and IPs observed in use by the previous portable executable samples did not have shared\ninfrastructure with the newer macro variants, although there is tactical overlap via the naming scheme of the\ndomains.\nHistorical WHOIS data reveals additional findings, potentially alluding to an Iranian‐based operator. From a\ntimeline perspective, a new domain was registered almost in consecutive months, beginning in July 2015. Each of\nthe domains’s WHOIS data contained registrant information that was either reused, or was closely related to\npreviously used information. For example, the domains mydomain1607[.]com and mydomain1609[.]com used the\nexact same registrant information. The email address edmundj@chmail[.]ir and the geolocation of Tehran, Iran,\nbeing of note. Kernel[.]ws and checkgoogle[.]org used very similar email addresses, andre_serkisian@yahoo[.]com\nand andre.serkisian@chmail[.]ir, respectively. The registrant information for kernel[.]ws also provided a\ngeolocation of Tehran, IR and the email provider for the address used in checkgoogle[.]org was the same used for\nmydomain1607[.]com and mydomain1609[.]com, chmail.ir. The mydomain1110[.]com domain did not appear to\nreuse any of the previously observed WHOIS data artifacts, but did still give a geolocation of Tehran in addition to\nthe use of an email address linked to other domains thematically similar to the know command and control\ndomains and are potentially related.\nAlthough there is heavy use of Iranian‐based artifacts within the WHOIS registrant information, it is important to\nremember that this data is easily falsified. At face value, however, taking into account the registrant information\nand the use of Persian language in the samples are compelling indicators that the operators may indeed be based\nout of Iran.\nConclusion\nWhile researching the OilRig campaign, we have seen two waves of targeted attacks on Saudi Arabian\norganizations in which a group of threat actors delivered the Helminth Trojan as a payload. The two waves of\nattacks used separate variants of the Helminth Trojan, specifically a script and executable variant of the Trojan.\nThe two variants of Helminth use almost identical command and control protocols, which allows the threat actors\nto maintain consistent infrastructure throughout the campaign to manage the compromised hosts, regardless of\nthe Helminth variant used in the attack.\nThe two variants of Helminth do require different delivery methods, with the script variant relying on an Excel\nspreadsheet for delivery, while the executable variant is more traditional in the fact that it can be installed\nwithout a delivery document. We speculate that the executable variant involves threat actors socially engineering\nthe victim into running the payload, rather than installing the payload as the result of successful exploitation of a\nvulnerability. The multiple delivery methods suggest this threat group is capable of adapting their procedures to\nsuit the current operation in the overarching campaign.\nPalo Alto Networks customers are protected from the Helminth Trojan and can gather additional information\nusing the following tools:\nWildFire detection of all known samples as malicious\nAll Helminth C2 domains have DNS signatures created and are identified as malicious in PAN‐DB.\nAutoFocus tags Clayslide , Helminth  and HerHerDropper .\nAppendix\nClayslide Delivery Documents\nAt first, Clayslide spreadsheets display a worksheet called “Incompatible” that contains instructions for the user\nto manually enable macros (as seen in Figure 6), as macros are disabled in Excel by default. This is an attempt to\ntrick the user into running the embedded macro to install the Trojan, which does not require any vulnerability\nexploitation. Figure 6 shows the “Protected View” alert in Excel informing the user that there is an embedded\nmacro that may cause harm to the system.\nFigure 6 Clayslide spreadsheet showing the Incompatible worksheet with instructions to enable macros and Excel\ndisplaying its Protected View alert message\nBefore the user can enable the macros in accordance with the instructions displayed in the spreadsheet, the\nuser must click the red bar displayed by Protected View and click the “Edit Anyway” button, as seen in 7.\nFigure 7 Protected View further mentioning the potential danger with editing the spreadsheet in the ClaySlide sample\nAfter clicking the “Edit Anyway” button, Excel displays another security warning bar alerting that the spreadsheet\ncontains macros, as seen in Figure 8. The “Enable Content” button mentioned within the instructions displayed\nwithin the Clayslide spreadsheet is now presented to the user.\nFigure 8 Excel security warning with the Enable Content button mentioned in Incompatible worksheet\nIf the user clicks the “Enable Content” button, the macro hides the “Incompatible” worksheet and makes hidden\nworksheets visible that displays decoy content to minimize the victim’s suspicions of malicious behavior taking\nplace. Figure 9 below shows the decoy content displayed by macros within a Clayslide sample, specifically\nshowing the status of internal network IP addresses that fit with the service provider social engineering theme\nused throughout the attack campaign. Figure 9 also shows that the “Incompatible” worksheet is no longer visible,\nas the decoy content is displayed in a worksheet called “Sheet1”.\nFigure 9 Decoy content displayed after enabling macros within a Clayslide sample\nAfter displaying the decoy content, the macro begins installing the script variant of the Helminth Trojan to the\nsystem. The process used by the macro to install this variant of Helminth begins with the creation of the\nfollowing files and folders:\n \n%PUBLIC%\\Libraries\\update.vbs\n%PUBLIC%\\Libraries\\dns.ps1\n%PUBLIC%\\Libraries\\up\n%PUBLIC%\\Libraries\\dn\n%PUBLIC%\\Libraries\\tp\nThe malicious macro finishes the installation process by creating a scheduled task that is responsible for running\nthe two scripts at regular intervals, as the scripts themselves do not have the ability to continually run after the\ninitial execution. The following code snippet within the macro creates a scheduled task named\n“GoogleUpdateTaskMachineUI” that will run the update.vbs script every three minutes:\nwss.Run “schtasks /create /F /sc minute /mo 3 /tn ” & Chr(34) & “GoogleUpdateTaskMachineUI” & Chr(34) & ”\n/tr ” & wss.ExpandEnvironmentStrings(“%PUBLIC%”) & “\\Libraries\\update.vbs”, 0\nHelminth Script Variant\nThe script variant of the Helminth Trojan consists of a VBScript and PowerShell script named update.vbs and\ndns.ps1. We aptly named this variant the script version, as we found another version of this Trojan that we will\ndiscuss later in this Appendix. The update.vbs script is responsible for reaching out to its command and control\n(C2) server using HTTP requests to the following two URLs:\nhxxp://go0gIe.com/sysupdate.aspx?req=<random number>%5Cdwn&m=d\nhxxp://go0gIe.com/sysupdate.aspx?req=<random number>%5Cbat&m=d\nThe C2 server will respond to the HTTP requests to the “bat&m=d” URL with a batch script that update.vbs will\nsave to the “dn” folder and execute. The output of the downloaded batch script is saved to a text file in the “up”\nfolder and uploaded to the C2 server via an HTTP POST request to the following URL:\nhxxp://go0gIe.com/sysupdate.aspx?req=<random number>%5Cupl&m=u\nPalo Alto Networks WildFire observed commands provided by the C2 server for the known Helminth samples.\nThe commands, as seen below, show that the threat actors are attempting to do initial information gathering on\nthe system, including available user accounts, username, computer name, running tasks, services, network\nservices and if remote desktop is enabled.\nwhoami & hostname & ipconfig /all & net user /domain 2>&1 & net group /domain 2>&1 & net group “domain\nadmins” /domain 2>&1 & net group “Exchange Trusted Subsystem” /domain 2>&1 & net accounts /domain 2>&1\n& net user 2>&1 & net localgroup administrators 2>&1 & netstat ‐an 2>&1 & tasklist 2>&1 & sc query 2>&1 &\nsysteminfo 2>&1 & reg query “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default”\n2>&1\nThe update.vbs concludes by running the dns.ps1 PowerShell script. The dns.ps1 script is also responsible for\ncommunicating with the C2 server, but it uses DNS queries to send data to the server. The DNS queries sent by\nthis script are queries to subdomains on the same domain as the C2 server, which contains system information or\nthe contents of files from the system. The subdomain of the DNS request that acts as the initial C2 beacon has\nthe following structure:\n00000000<base 36 of a random number smaller than 46655>30\nThe dns.ps1 script checks the response to this DNS query and uses the first octet of the resolving IP address as\nan identifier for the compromised system. The script then uses this identifier in a follow up DNS request to a\nsubdomain with the following structure:\n00<identifier>00000<base36 of a random number smaller than 46655>30\nThe C2 server will respond to these DNS queries with IP addresses that the script will parse and eventually treat\nas data to construct a batch script to execute on the system. The script specifically looks for the IP address\n“33.33.x.x” to mark the beginning of the batch script transfer. Upon receipt of this IP address, the script uses the\nlast two octets of this IP address as a filename for the batch file that it saves to the “tp” folder that was initially\ncreated by the macro. Once the batch file name is obtained, the script will continue sending additional DNS\nrequests and use the octets of the resolving IP addresses as characters to write to the batch script. The script\ncontinues writing characters to the batch script until it receives the IP address “35.35.35.35” that notifies the\nscript to stop saving data to the file and to run the batch script.\nThe output of the downloaded batch file is saved to “%PUBLIC%\\Libraries\\tp\\<batch filename>.txt”. The script\nwill then upload the output of this batch file by including the data in a sequence of DNS queries. The exfiltrates\nthe output of the batch script by splitting up the data within the text file into chunks up to 23 bytes and sends the\ndata within a series of DNS queries that have the following structure:\n00<identifier><filename of batch file without its extension><base36 of sequence number><base36 of a random\nnumber smaller than 46655><up to 23 bytes of data from batch script output>\nBoth the update.vbs and dns.ps1 both provide a fully functional remote shell to the actors, which allow the actor\nto carry out any activities on the compromised system they wish.\nHelminth Executable Variant\nThe executable variant of Helminth is installed with a Trojan that we are tracking as the HerHer Trojan. The\nHerHer Trojan saves several files to the file system upon execution to install the Helminth Trojan to the system.\n%APPDATA%\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Certificate Managment.lnk\n%APPDATA%\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Certificate.ico\n%APPDATA%\\Roaming\\Microsoft Temperary\\adbmanager.exe\n%APPDATA%\\Roaming\\Microsoft Temperary\\adbtray.exe\n%APPDATA%\\Local\\Temp\\acro\\Users\\config.txt\n%PUBLIC%\\Libraries\\~Windows\\wintrust.hlm\nThe “Certificate Managment.lnk” shortcut uses the “Certificate.ico” file for its icon, as seen in Figure 10.\nFigure 10 Icon file used\nAdditionally, it has a comment of ‘herher’, which is basis of the dropper’s name. Helminth relies on the following\nshortcut for persistence, as it runs the Trojan each time the system starts using the following command line:\n“C:\\Users\\Rick James\\AppData\\Roaming\\Microsoft Temperary\\adbmanager.exe” q 1\nThe ‘adbmanager.exe’ and ‘adbtray.exe’ files are the actual Helminth Trojan, both of which are the same\nexecutable. The reason for two different filenames is currently unknown. The Helminth Trojan requires\narguments on the command‐line to execute properly (‘q’ in the analyzed sample as seen in the ‘Certificate\nManagment.lnk’ shortcut), one of which will run the Trojan’s functional code and the other can open a dialog box\nas a decoy.\nThe Helminth Trojan begins by creating a mutex named ‘[username]ver4.1’ and writes its embedded\nconfiguration as ciphertext to the following file:\n%APPDATA%\\Local\\Temp\\acro\\Users\\config.txt\nThe Trojan will later decrypt the contents of this file using the RC4 algorithm, using the MD5 hash of ‘f246b23d‐\nc2d6‐45f2‐b268‐dec30d9adaad’ as the key. We decrypted the configuration file dropped by Helminth and found\nthe structure of the configuration file is ‘IsAlive,[sleep interval]\\r\\n[C2 domain]’. For example, one Helminth\nsample had the following data within the “config.txt” file:\nIsAlive,30\ncheckgoogle.org\nThe Helminth executable variant is able to run batch scripts provided by the C2 server, which is very similar to\nthe script version of this Trojan. The executable variant has one additional capability that is not present in the\nscript version, which involves the ability to log keystrokes via a supplemental keylogger module.\nHelminth loads its keylogger module of the Trojan by loading the wintrust.hlm file dropped by the HerHer Trojan\nas a DLL and calling its exported function named ‘Initialize’. The keylogger that creates a window named ‘kk’ to\nmonitor both the clipboard and keystrokes and to save the data in cleartext to the file\n‘%TEMP%/acro/Users/[GUID from CoCreateGuid]kk.tmp’. The keylogger saves the keystrokes and the name of\nthe Window visible while the keys were typed to this file in the following structure:\n####T####[Window Name]####ET####\n[logged keystrokes]\nThe wintrust.hlm keylogger logs the contents of the clipboard to the same file, but the clipboard contents do not\nfollow a header that specifies the window name like the other logged keystrokes. The clipboard contents are\nlogged to the file in the following format:\n<<< Clipboard —> [contents of clipboard]>>>\nHelminth Exe C2 Communications\nThe Helminth executable is able to communicate with its C2 server via HTTP and via DNS queries in very similar\nways to the Helminth script variant. In fact, the DNS beacons follow the same structure and sequence as the\nscript variant of Helminth discussed in the previous section. The main difference between the beacons sent from\nthe two variants of Helminth is the data included within the beacon, as the script variant does not send any\nsystem information within the beacons, whereas the executable version sends system and malware specific\ninformation within both the HTTP and DNS beacons.\nHelminth executables include the system and malware information within HTTP beacons in the “Cookie” field of\nthe request. Helminth structures the beacon data as follows:\nFunction=F1; ID=[MD5 of Computer and Username]; Group=[Hardcoded in Malware]; Name=[Hardcoded in\nMalware]; Service=0;\nThe Trojan will encrypt this data using RC4 and the MD5 hash of “f246b23d‐c2d6‐45f2‐b268‐dec30d9adaad” as\nthe key and encode the encrypted data using base64. Figure 11 shows a Helminth HTTP beacon with the Cookie\nfield containing the base64 data.\nFigure 11 Helminth HTTP C2 beacon\nHelminth sends data within DNS beacons differently than the HTTP beacons and includes additional information\nas well. The data within the DNS beacons follows the structure:\n<path of folder containing keylogger module>\n<path of folder containing key logs and batch script output files>\n<group name hardcoded in malware>\n<name hardcoded in malware>\n<computer name>\n<user name>\n<sleep interval>\n<C2 domain>\nThe Trojan does not encrypt the data sent via DNS beacons, rather it converts the ASCII characters into their\nhexadecimal values and includes these values in cleartext. The DNS beacons sent from the Helminth executable\nhave the following structure, which is very similar to the script version:\n00<identifier>01<sequence number><up to 24 hexadecimal values of the ASCII data>\nFigure 12 shows an example of the DNS beacons sent from a Helminth executable.\nFigure 12 Helminth DNS C2 beacon\nThe encoded data within the DNS beacons displayed in Figure 12 decode to the following:\nC:\\Users\\Public\\Libraries\\~Windows\\\nC:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Users\\\n[redacted company name]\nPlato\n[Computer Name redacted]\nAdministrator\n30\nkernel.ws\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Robert Falcone  and Bryan Lee\nMay 26, 2016 at 2:05 PM\nCategory: Financial Services , Malware , Threat Prevention , Unit 42\nTags: AutoFocus , Helminth , OilRig , OilRig attacks , Powershell , Saudi Arabia , VBScript , WildFire , Windows\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability\nSearch Unit 42\nSHARE \n "
}