{
    "title": "dear joohn_ the sofacy group’s global campaign",
    "text": "Tools Playbooks Speaking Events About Us\nDear Joohn: The Sofacy Group’s Global Campaign\n25,708 people reacted 1 14 min. read\nThis post is also available in: 日本語  (Japanese )\n \n \nAs alluded to in our previous blog  regarding the Cannon tool, the Sofacy group (AKA Fancy Bear, APT28,\nSTRONTIUM, Pawn Storm, Sednit) has persistently attacked various government and private organizations\naround the world from mid‐October 2018 through mid‐November 2018. The majority of targets were NATO‐\naligned nation states, although several former USSR nation states were also targeted. The attacks primarily\ndeployed variants of the Zebrocy tool, which we have previously analyzed . A smaller subset of the delivery\ndocuments  delivered Cannon or a Zebrocy Delphi variant as reported by ESET . Since we began tracking the use\nof Zebrocy going back to mid‐2015, we have observed a significant increase in frequency of deployment of this\ntool. Compared to other backdoor tools associated with the Sofacy group, the use of Zebrocy in attack campaigns\nis far more widespread.\nThe cluster of activity we detail in this blog revolves primarily around a common author name used in each of the\ndelivery documents: Joohn. Our initial sample of interest was the delivery document using the crash\nlist(Lion Air Boeing 737).docx  filename, which delivered the Zebrocy tool. By leveraging our\nAutoFocus threat intelligence platform in conjunction with data collected from VirusTotal , we were able to pivot\nfrom artifacts discovered in the metadata and behaviors to discover the Cannon tool, as well as a number of\nadditional delivery documents, payloads, and targets. The attack vector for all of these attacks appears to be via\nspear‐phishing, using email accounts registered to legitimate email providers instead of spoofed email addresses\nor previously compromised accounts. The account names visually look similar to legitimate government\norganization names or other trusted third‐party entities. The delivery documents were functionally all the similar,\nusing the remote template function in Microsoft Word to retrieve a malicious macro from the first stage C2 and\nultimately loading and executing an initial payload. The majority of delivery documents contain a generic lure\nimage requesting the victim enable macros with no additional content, the adversaries seemingly relying solely on\nlure filenames to entice victims to launch the malicious document.\nIn all, we intercepted nine weaponized documents spanning from October 17, 2018 through November 15, 2018\nall sharing the same Joohn author name and delivering variants of either Zebrocy or Cannon. The target radius of\nour dataset spans four continents, covering government agencies at the federal level all the way to local\ngovernment agencies. We also conducted timeline analysis using the collected data which allowed us to discover\nhow the Sofacy group timed their attacks in the Dear Joohn campaign and also how they may have crafted their\nattacks using automated tools.\n \nAttack Details\nBeginning on October 17, 2018, we collected a total of nine delivery documents sent to a multitude of\norganizations around the world. The targets included a foreign affairs organization in North America, foreign\naffairs organizations in Europe, as well as government entities in former USSR states. We also discovered\nevidence of possible targeting of local law enforcement agencies around the world, covering North America,\nAustralia, and Europe. Our telemetry also showed possible targeting of NGOs, marketing firms, as well as\norganizations in the medical industry. The attack vector of these attacks was all via spear‐phishing, using email\naccounts registered to the free email provider Seznam, a popular web services provider located in the Czech\nRepublic. An example can be seen in Figure 1.\n \nBy Bryan Lee  and Robert Falcone\nDecember 12, 2018 at 6:00 AM\nCategory: Unit 42\nTags: Cannon , Espionage , Sofacy , Zebrocy\nSearch Unit 42\nSHARE \n Figure 1 Example spear‐phishing email delivered in Dear Joohn attacks\n \nIn this campaign, the Sofacy group appears to have relied heavily on filenames to lure victims into launching the\nweaponized documents. Filenames ranged from topics alluding to Brexit, the Lion Air crash, and recent rocket\nattacks in Israel. The full list of filenames we were able to collect can be seen in Table 1. Although the filenames\nappeared to be highly targeted and pertinent to the victims, the actual lure content of the documents were far\nmore generic as seen in Figure 2.\n \nFigure 2 Generic lure image\n \nIn November 2018, the adversary shifted tactics and began implementing non‐generic lure content for their\nweaponized documents. We collected three samples heavily targeting NATO‐aligned nation states at this time,\nusing three different lures as seen in Figure 3.\nFigure 3 Targeted lure content\n \nIn one of the documents, the victim is presented with what appears to be an obfuscated document with the\nNATO EOD seal and text alluding to the targeted nation state. Unpacking the document revealed that the\nunobfuscated image was a screenshot of a cover page regarding a NATO workshop in the targeted nation state.\nThe other two documents had very similar lures to each other, presenting garbled text to the target with\ninstructions for the victim on how to properly view the document. Interestingly, one of them contained\ninstructions in Russian, which may indicate the intended target was a Russian speaking nation‐state.\n Each of these weaponized documents used the same tactic for their attacks. Upon opening the document, it\nleveraged the ability of Microsoft Word to retrieve a remote template to then load a malicious macro document\nas seen in Figure 4.\n \nFigure 4 Microsoft Word attempting to download the remote template\nIf the C2 server is active at the time the document is opened, it will successfully retrieve the malicious macro and\nload it in the same Microsoft Word session. The victim will then see a prompt to Enable Content as with any\nmalicious macro document as seen in Figure 5. If the C2 server is not active at this time, the download will fail\nand the victim will not receive a prompt to Enable Content as no macro is downloaded.\nFigure 5 Remote template document requesting the user to click “Enable Content” to run macro\n \nClustering\nThe delivery documents used in the October and November waves shared a large number of similarities, as seen\nin Table 1, which allowed us to cluster the activity together. Most notably, the author name Joohn  was used\nrepeatedly in each delivery document. There was a slight deviation in the November grouping, where the three\nsamples we collected still used the Joohn  author name for the last modified field but reverted to a default\nUSER/user  author name for the creator field.\nHash FilenameCreate\nd ByLast\nModifi\ned ByRemote\nTemplate\nLocationRemote\nTemplate Hash\nc20e5d56b3.\n.1500029.docx Joohn Joohn185.203.118[.]1\n9886bb3b00bc..\nabfc14f7f7.\n.Passport.docx Joohn Joohn185.203.118[.]1\n9886bb3b00bc..\n40318f3593.\n.DN_325_170428_DEA\nBasic Narcotics\nInvestigation Course\ninvitation.docxJoohn Joohn145.249.105[.]1\n652da5a388b8..\n5749eb9d7b.\n.2018_10_13_17_15_21.d\nocxJoohn Joohn145.249.105[.]1\n650d7b945b9c..\n2cfc4b3686.\n.crash list(Lion Air Boeing\n737).docxJoohn Joohn188.241.58[.]17\n0f1e2bceae8..\naf77e845f1.\n.Заявление .docx Joohn Joohn188.241.58[.]17\n0fc69fb278e..\n34bdb5b364.\n.Rocket attacks on\nIsrael.docxuser Joohn109.248.148[.]4\n2ed8f52cdfc..\n79bd5f3486.\n.201811131257.docx USER Joohn109.248.148[.]4\n2b9f3af84a6..\n77ff53211b.\n.Brexit 15.11.2018.docx\nDIP 89 OIC Condemns 14\nNov Attacks.docx\n15.11 attacks.docxUSER Joohn109.248.148[.]4\n2<Unknown>\nTable 1 Delivery documents seen in the Dear Joohn attack campaign\n \nThe remote template documents retrieved by the delivery documents in Table 1 also shared a common author\nname, using the string xxx.Table 2 shows the remote templates downloaded by delivery documents in this attack\ncampaign. In the tables and text of this report, we are referring to samples by a shortened version of their\nSHA256 hash to improve readability. The full hashes and metadata are available in CSV format here .\nHash FilenameAuth\norCreatedLast\nModifiedHosted on IP\nf1e2bceae8\n..office.dotm xxx10/31/18\n10:5210/31/18\n10:52188.241.58[.]\n170\n 86bb3b00bc\n..Note_template.dot\nmxxx10/17/18\n05:3510/17/18\n05:35185.203.118[.\n]198\n2da5a388b8\n..release.dotm xxx10/25/18\n07:0610/25/18\n07:06145.249.105[.\n]165\n0d7b945b9c\n..message_template.d\notmxxx10/23/18\n13:5510/23/18\n13:55145.249.105[.\n]165\nfc69fb278e\n..documents.dotm xxx11/01/18\n05:0011/01/18\n05:06188.241.58[.]\n170\ned8f52cdfc\n..templates.dotm xxx11/13/18\n10:5211/13/18\n10:52109.248.148[.\n]42\nb9f3af84a6\n..attachedTemplate.d\notmxxx11/15/18\n05:3511/15/18\n05:35109.248.148[.\n]42\nTable 2 Remote templates downloaded by Dear Joohn delivery documents\n \nAs seen in Table 1, the delivery documents accessed their respective remote templates from four C2 servers at\nthe following IP addresses:\n185.203.118[.]198\n145.249.105[.]165\n188.241.58[.]170 \n109.248.148[.]42\nThese initial C2 IP addresses not only hosted the remote templates that subsequently load the first‐stage Zebrocy\nor Cannon payloads, but the IP addresses also hosted the C2 server for the first‐stage payloads themselves. All\nC2s used in the Dear Joohn campaign were IP‐based and examining the infrastructure did not provide\nsignificant overlap or relationships with previous Zebrocy or Sofacy infrastructure. A visual representation of the\nDear Joohn campaign can be seen in Figure 6.\n \nFigure 6 Relational diagram of artifacts \n \nWe created a timeline of the activity based off the data we collected, and found that the attack dates were tightly\nclustered into two waves in mid‐ to late‐October and in mid‐November as we see in Figure 7 using the\ntimestamps from Table 3.\nFilename Created OnLast\nModifiedFirst SeenTotal Time (In\nDays)\nPassport.docx\ninstruction.docx9/11/18\n04:2210/13/18\n08:2110/18/18\n07:3837.1\nDN_325_170428_DEA…\ninvitation.docx9/11/18\n04:2210/13/18\n08:2110/25/18\n08:1544.12\ncrash list(Lion Air Boeing\n737).docx\nБурханов .docx9/11/18\n04:2210/13/18\n08:2111/01/18\n06:5051.1\nЗаявление .docx9/11/18\n04:2210/13/18\n08:2111/01/18\n11:4151.3\n1500029.docx10/18/18\n06:5910/18/18\n07:0010/18/18\n08:470.4\n2018_10_13_17_15_21.docx10/18/18\n06:5910/18/18\n07:0010/24/18\n07:386.2\nRocket attacks on Israel.docx11/13/18\n12:1711/13/18\n10:4611/14/18\n05:140.7\nBrexit 15.11.2018.docx\nDIP 89 OIC Condemns 14 Nov\nAttacks.docx\n15.11 attacks.docx11/14/18\n14:1711/15/18\n04:5011/15/18\n06:280.8\n201811131257.docx11/14/18\n14:3311/15/18\n04:5011/15/18\n12:310.9\nTable 3 Timestamps of delivery documents (all times in UTC)\n \n Figure 7 Dear Joohn timeline\n \nBased off the timestamps we have, four delivery documents were initially created on September 11, 2018 04:22\nUTC. These four were then all modified on the same date and time on October 13, 2018 08:21. Having three\ndifferent C2 locations embedded inside these delivery documents while maintaining the exact same timestamping\nmay indicate the use of an automated tool. Using a command line based penetration testing toolkit such as\nPhishery could allow for simple scripting to generate multiple documents all at the same time with different\ninputs. From there, there was an average of a two‐week gap until these documents were first seen in the wild. In\ntotal, these four documents had an average of roughly 46 days from initial creation to attack. Based on the\nmodular nature of the Dear Joohn campaign attacks, the lengthy amount of time from initial creation to attack\nmay suggest the campaign was not yet ready for deployment due to additional development required for the\nremote templates, payloads, or infrastructure. Another possible scenario is that the adversary may have had a\ncertain timeframe they desired to execute the attack, and from the timeline it is clear there were two distinct\ntargeting time frames, one from mid to late October 2018 and the other in mid‐November 2018. As the campaign\nprogressed, the operational tempo of the Dear Joohn campaign increased, with the total time from document\ncreation to first seen dropping down to an average of roughly two days.\nWhen comparing the provided timestamps of the delivery documents to the timestamps for the remote template\ndocuments from Table 2, we find that the time to attack is directly correlated to the last time the templates are\nmodified. On average, there was a 13.8 hour gap between when the template document was last touched by the\noperator and when the delivery document is first observed in the wild. This leads us to believe that the\ngeneration of the delivery documents were indeed part of a staging effort, first with the initial creation of the\ndocument, modification to it to communicate with a C2, then generating a remote template document just prior\nto launching the actual attack.\nAnalysis using timestamps is not always conclusive however. One of the documents we examined with the\nfilename Rocket attacks on Israel.docx  (SHA256: 34bdb5b364.. ) contained inconsistent creation\nand last modified timestamps, with the last modified timestamp occurring before the creation timestamp. A\npossible explanation for this is that the document was copied to another system with an incorrectly set system\ntime, then saved with the incorrect time. This document was also the first of the mid‐November cluster which\nused the user/USER  author name instead of Joohn , further supporting the scenario of the document being\ncopied between systems.\n \nThe Payloads\nThe delivery documents in this attack campaign loaded remote templates whose macros installed a variety of\nfirst‐stage payloads. With the notable exception of the Cannon tool, the first‐stage tools are all variants of the\nZebrocy Trojan. The Zebrocy variants delivered in this campaign were written in several different languages,\nincluding Delphi, C# and VB.NET. Information on the first‐stage payloads delivered in this attack are listed in\nTable 4.\n \nSHA256 Compiled Variant C2\n5173721f30.. 10/23/18 C# Zebrocy 145.249.105[.]165\n61a1f3b4fb.. 11/1/18 C# Cannonsahro.bella7[at]post.\ncz\n6ad3eb8b56.. 6/19/92Delphi\nZebrocy188.241.58[.]170\n9a0f00469d.. 10/25/18 C# Zebrocy 145.249.105[.]165\nb41480d685.. 6/19/92Delphi\nZebrocy109.248.148[.]42\nc91843a69d.. 6/19/92Delphi\nZebrocy185.203.118[.]198\ne5aece694d.. 11/13/18VB.NET\nZebrocy109.248.148[.]42\n \nTable 4 Payloads delivered in related attacks\n \nThe Delphi variant of Zebrocy delivered in this attack campaign are very similar to the Delphi downloader\ndiscussed in our previous Zebrocy research published in June 2018 . While this Delphi variant was known, the C#\nand VB.NET variants delivered in this attack campaign were previously unknown. An interesting note on these\npayloads is that all the Delphi payloads delivered in this campaign were packed with UPX, while none of the other\npayloads were packed. While we can only speculate on the specific reason, it is likely Sofacy packed only the\nDelphi variants in an attempt to increase evasion as the Delphi variant of Zebrocy is known and has been widely\nanalyzed.\nBy collecting and analyzing additional Cannon samples, we believe we have also found a Cannon variant written\nin Delphi. We have seen Sofacy using multiple languages to create variants of the Zebrocy Trojan, so it seems\nfitting that the group would create additional variants of Cannon in multiple programming languages as well.\n \nC# Cannon\nSince our initial blog that introduced the Cannon tool , we were able to collect more samples of Cannon to get a\nbetter understanding of its origins. It appears that the first known sample of Cannon was created on April 18,\n2018 and since then there has been at least seven additional samples. Table 5 shows the known Cannon samples,\ntheir compilation time and the email accounts used for its C2 communications.\n \nSHA256 Compiled C2 account POP3S Account SMTPS Accounts\n861b6bc1f9.. 4/18/18 sym777.g kae.mezhnoshvebek.morozh30\ng0r7tsa45s\nmarvel.polezha\nvebek.morozh30\n 4405cfbf28.. 5/14/18 sym777.g kae.mezhnosh g0r7tsa45s\nmarvel.polezha\n174effcdee.. 6/15/18 sym777.g kae.mezhnoshvebek.morozh30\ng0r7tsa45s\nmarvel.polezha\na23261e2b6.. 6/22/18 sym777.g kae.mezhnoshvebek.morozh30\ng0r7tsa45s\nmarvel.polezha\n651d5aab82.. 10/19/18 sym777.g kae.mezhnoshvebek.morozh30\ng0r7tsa45s\nmarvel.polezha\n68df0f924c.. 10/22/18 sym777.g kae.mezhnoshvebek.morozh30\ng0r7tsa45s\nmarvel.polezha\n61a1f3b4fb.. 11/1/18 sahro.bella7 trala.cosh2Bishtr.cam47\nLobrek.chizh\nCervot.woprov\n \nTable 5 Gathered C# Cannon samples\n \nAs mentioned in our initial blog, the actor controlled email address acting as the C2 was\nsahro.bella7[at]post.cz , but all previous samples of Cannon used sym777.g[at]post.cz . Also, all\nprevious samples of Cannon used an account name of kae.mezhnosh  to receive  emails from the actor, while\nusing the accounts vebek.morozh30, g0r7tsa45s  and marvel.polezha  to send  emails to the actor.\nAs we reported in our previous analysis of Cannon, the tool logs into an email account using POP3S and checks\nfor emails with a specific filename that it will save to the system and execute. The initial sample we analyzed\nlooked for an attachment with a filename of auddevc.txt, but other Cannon samples have looked for the following\nfilenames instead:\nDelphi Cannon\nWhile searching for additional Cannon samples, we discovered another tool that used emails for its C2\ncommunications. The initial overlap was based on the filename wmssl.exe, which was seen as an executable\nname that Cannon would move the wmssl.txt attachment to install and execute a secondary payload. Initial\nanalysis indicated this may have been a tenuous connection; however, after we gathered additional samples of\nDelphi Cannon, we discovered additional relationships. Table 6 shows Delphi Cannon samples we gathered,\nincluding the sample 215f7c08c2.. that is very similar to the Trojan discussed in ESET’s research .\n \nSHA256 Compiled C2 email POP3S Account SMTPS Accounts\n5a02d4e5f6..1/23/18\n heatlth500@ambcomissio\nn[.]comtrash023@ambcomission[\n.]comtrasler22@ambcomissio\nn[.]com\nd06be83a40.. 2/21/18heatlth500@ambcomissio\nn[.]comtrash023@ambcomission[\n.]comtrasler22@ambcomissio\nn[.]com\n78adc8e5e4.. 2/28/18heatlth500@ambcomissio\nn[.]comtrash023@ambcomission[\n.]comtrasler22@ambcomissio\nn[.]com\n054c5aa73d.. 3/3/18heatlth500@ambcomissio\nn[.]comtrash023@ambcomission[\n.]comtrasler22@ambcomissio\nn[.]com\ncac630c11c.. 4/18/18 N/A N/A N/A\necc5805898.. 5/4/18heatlth500@ambcomissio\nn[.]comtrash023@ambcomission[\n.]comtrasler22@ambcomissio\nn[.]com\n215f7c08c2.. 6/14/18rishit333@ambcomission[.\n]comtomasso25@ambcomissio\nn[.]comkevin30@ambcomission[\n.]com\n \nTable 6 Gathered Delphi Cannon Samples\nThe compilation times in Table 6 suggests that the Delphi variant of Cannon predates the originally reported\nversion, as the first known Delphi sample was compiled in January 2018 and the first known Cannon sample was\ncompiled in April 2018. The Delphi variant of Cannon does not use legitimate web‐based email services for its C2\ncommunications, instead opting to use email accounts at an actor owned domain, ambcomission[.]com . This\nactor controlled domain links to a larger Sofacy infrastructure as reported by ThreatConnect . Even though Delphi\nCannon uses POP3S and SMTPS for its C2 communications like Cannon, it is arguably easier to defend against as\nit uses an actor owned domain that defenders can easily block and not a legitimate email provider such as\nSeznam.\nThe oldest known sample of the Delphi variant (SHA256: 5a02d4e5f6… ) provided us a much stronger linkage\nbetween this Delphi Cannon and Cannon, as this sample collects system information and sends it to the C2 email\naddress, which includes the path of the running process appended to the string Running place. The screenshot in\nFigure 8 of the inf method within a Cannon sample (SHA256: 4405cfbf28… ) shows the information gathered\nthat is exfiltrated to the C2 via email, specifically with RunningPlace  and LogicalDrives  header strings:\nFigure 8 inf method used by Cannon\n \n When comparing the two Cannon variants, we found a method within a Delphi Cannon sample (SHA256:\n5a02d4e5f6… ) showing the use of Running place  and Logical_Drivers  as header strings to the system\ninformation it is collecting and sending to the C2 via email. While not an exact match, Figure 9 shows these\nsimilar header strings and strengthens our hypothesis that the two variants are indeed related:\nFigure 9 Similarities of Delphi Cannon and Cannon\n \nAs seen in Table 6, one of the Delphi Cannon samples (SHA256: cac630c11c.. ) does not have any associated\nemail addresses, as the sample does not seem to have any C2 functionality. Instead, this sample reads “tasks”\nfrom a file named ta.bin  that another unknown tool then must write to and handle C2 functionality. It is also\ninteresting that this specific sample has the same resource name (L30)  that contains the same encrypted email\naddresses as the other samples in Table 6 using heatlth500@ambcomission[.]com  as a C2 email (such as\necc5805898.. ) but does not contain any code to access the resource or decrypt its contents.\n \nVB.NET Zebrocy Variant\nThe VB.NET variant (SHA256: e5aece694d.. ) is very similar to other known Zebrocy variants. It includes the\nstorage volume serial number within the URL it uses as its C2 beacon, which it obtains using the\nScripting.FileSystemObject  object to call GetDriveName  from the path stored in\nEnvironment.SpecialFolder.LocalApplicationData . It then uses the storage volume obtained from\nthe GetDriveName  function and calls GetDrive  to get the SerialNumber  of the storage device. The VB.NET\nvariant then gathers system information and running processes like other Zebrocy variants by running the\nfollowing commands:\nsysteminfo & tasklist\nThe URL used to send the system information, running processes and a screenshot to the C2 server is:\nhxxp://109.248.148[.]42/agr-enum/progress-inform/cube.php?res=[serial number]\nThe VB.NET variant of Zebrocy uses an HTTP POST request to the URL above to transmit the gathered data, of\nwhich is included within the HTTP POST data that is structured as follows (notice the spaces before and after\nampersand “&”):\ndata=[system information and running processes] & arg=[screenshot in BMP format]\n \nC# Zebrocy Variant\nThe C# variant of Zebrocy is similar to other variants in functionality, but also has several unique attributes that\nare worth discussing. Like other Zebrocy tools, the C# variant gathers the storage volume serial number to use in\noutbound beacons to the C2 server. In this particular variant, the tool uses the Windows API function\nGetVolumeInformation  to get the serial number of the C: drive. This variant of Zebrocy also takes a\nscreenshot that it will transmit to the C2 server in JPEG format.\nThe most notable change to this variant of Zebrocy, other than the programming language used, is the way the\ntool gathers the system information and running processes. Instead of using systeminfo  and tasklist\ncommands, the C# variant of Zebrocy uses WMI queries to gather this information. The tool runs the following\nlist of WMI queries:\nwmic logicaldisk get Caption, Description,VolumeSerialNumber,Size,FreeSpace\nwmic diskdrive get Model, SerialNumber\nwmic computersystem get Manufacturer, Model, Name, SystemTypec\nwmic os get Caption, OSArchitecture, OSLanguage,SystemDrive,MUILanguages\nwmic process get Caption,ExecutablePath\nThe URL used to send the system information, running processes and a screenshot to the C2 server is:\nhxxp://145.249.105[.]165/resource-store/stockroom-center-service/check.php?fm=\n[serial number]\nThe C# variant of Zebrocy uses an HTTP POST request to the URL above to transmit the gathered data, of which\nis included within the HTTP POST data that is structured as follows:\nspp=[system information from WMI queries] &spvg=[screenshot in JPEG format]\n \nConclusion\nThe Sofacy group continues their attacks on organizations across the globe using similar tactics and techniques.\nWe observed them carrying out attacks via spear‐phishing emails in late October through November, often\n leveraging current events within filenames to entice recipients to open the malicious attachments. The group\nclearly shows a preference for using a simple downloader like Zebrocy as first‐stage payloads in these attacks.\nThe group continues to develop new variations of Zebrocy by adding a VB.NET and C# version, and it appears\nthat they also have used different variants of the Cannon tool in past attack campaigns.\nPalo Alto Networks customers are protected by attacks discussed in this blog by:\nAll delivery documents and payloads discussed are detected with malicious verdicts in WildFire\nTraps blocks the macro laden documents as Suspicious macro detected\n C2 URLs have been classified as Command and Control\nAutoFocus customers may learn more via the Zebrocy  and Cannon  tags\n \nIndicators of Compromise\nDelivery Hashes\n2cfc4b3686511f959f14889d26d3d9a0d06e27ee2bb54c9afb1ada6b8205c55f\nc20e5d56b35992fe74e92aebb09c40a9ec4f3d9b3c2a01efbe761fa7921dd97f\nabfc14f7f708f662046bfcad81a719c71a35a8dc5aa111407c2c93496e52db74\n40318f3593bca859673827b88d65c5d2f0d80a76948be936a60bda67dff27be9\n5749eb9d7b8afa278be24a4db66f122aeb323eaa73a9c9e52d77ac3952da5e7d\naf77e845f1b0a3ae32cb5cfa53ff22cc9dae883f05200e18ad8e10d7a8106392\n34bdb5b364358a07f598da4d26b30bac37e139a7dc2b9914debb3a16311f3ded\n79bd5f34867229176869572a027bd601bd8c0bc3f56d37443d403a6d1819a7e5\n77ff53211bd994293400cb3f93e3d3df6754d8d477cb76f52221704adebad83a\n \nRemote Template Hashes\nf1e2bceae81ccd54777f7862c616f22b581b47e0dda5cb02d0a722168ef194a5\n86bb3b00bcd4878b081e4e4f126bba321b81a17e544d54377a0f590f95209e46\n2da5a388b891e42df4ed62cffbc167db2021e2441e6075d651ecc1d0ffd32ec8\n0d7b945b9c912d205974f44e3742c696b5038c2120ed4775710ed6d51fbc58ef\nfc69fb278e12fc7f9c49a020eff9f84c58b71e680a9e18f78d4e6540693f557d\ned8f52cdfc5f4c4be95a6b2e935661e00b50324bee5fe8974599743ccfd8daba\nb9f3af84a69cd39e2e10a86207f8612dd2839873c5839af533ffbc45fc56f809\n \nRemote Template URLs\nhxxp://188.241.58[.]170/live/owa/office.dotm\nhxxp://185.203.118[.]198/documents/Note_template.dotm\nhxxp://185.203.118[.]198/documents/Note_template.dotm\nhxxp://145.249.105[.]165/doc/temp/release.dotm\nhxxp://145.249.105[.]165/messages/content/message_template.dotm\nhxxp://188.241.58[.]170/version/in/documents.dotm\nhxxp://109.248.148[.]42/officeDocument/2006/relationships/templates.dotm\nhxxp://109.248.148[.]42/office/thememl/2012/main/attachedTemplate.dotm\nhxxp://109.248.148[.]42/office/thememl/2012/main/attachedTemplate.dotm\n \nZebrocy Hashes\n5173721f3054b92e6c0ff2a6a80e4741aa3639bc1906d8b615c3b014a7a1a8d7\n61a1f3b4fb4dbd2877c91e81db4b1af8395547eab199bf920e9dd11a1127221e\n6ad3eb8b5622145a70bec67b3d14868a1c13864864afd651fe70689c95b1399a\n9a0f00469d67bdb60f542fabb42e8d3a90c214b82f021ac6719c7f30e69ff0b9\nb41480d685a961ed033b932d9c363c2a08ad60af1d2b46d4f78b5469dc5d58e3\nc91843a69dcf3fdad0dac1b2f0139d1bb072787a1cfcf7b6e34a96bc3c081d65\n e5aece694d740ebcb107921e890cccc5d7e8f42471f1c4ce108ecb5170ea1e92\n \nZebrocy C2 URLs\nhxxp://188.241.58[.]170/local/s3/filters.php\nhxxp://185.203.118[.]198/en_action_device/center_correct_customer/drivers-i7-\nx86.php\nhxxp://145.249.105[.]165/resource-store/stockroom-center-service/check.php\nhxxp://109.248.148[.]42/agr-enum/progress-inform/cube.php\n \nCannon Hashes\n861b6bc1f9869017c48930af5848930dd037fb70fc506d8a7e43e1a0dbd1e8cb\n4405cfbf28e0dfafa9ea292e494f385592383d2476a9c49d12596b8d22a63c47\n174effcdeec0b84c67d7dc23351418f6fa4825550d595344214cc746f1a01c1a\na23261e2b693750a7009569df96ec4cf61e57acc9424c98d6fe1087ff8c659ce\n651d5aab82e53711563ce074c047cbaa0703931673fa3ad20933d6a63c5c3b12\n68df0f924ce79765573156eabffee3a7bb0fa972d2b67d12dd91dea3ec255d24\n61a1f3b4fb4dbd2877c91e81db4b1af8395547eab199bf920e9dd11a1127221e\n5a02d4e5f6d6a89ad41554295114506540f0876e7288464e4a70c9ba51d24f12\nd06be83a408f4796616b1c446e3637009d7691c131d121eb165c55bdd5ba50b4\n78adc8e5e4e86146317420fa3b2274c9805f6942c9973963467479cb1bbd4ead\n054c5aa73d6b6d293170785a82453446429c0efc742df75979b760682ac3026b\ncac630c11c4bf6363c067fbf7741eae0ec70238d9c5e60d41f3ed8f65b56c1d1\necc5805898e037c2ef9bc52ea6c6e59b537984f84c3d680c8436c6a38bdecdf4\n215f7c08c2e3ef5835c7ebc9a329b04b8d5215773b7ebfc9fd755d93451ce1ae\n \nCannon Related Emails\nsym777.g[at]post.cz\nkae.mezhnosh[at]post.cz\nvebek.morozh30[at]post.cz\ng0r7tsa45s[at]post.cz\nmarvel.polezha[at]post.cz\nsahro.bella7[at]post.cz\ntrala.cosh2[at]post.cz\nBishtr.cam47[at]post.cz\nLobrek.chizh[at]post.cz\nCervot.woprov[at]post.cz\nheatlth500[at]ambcomission[.]com\ntrash023[at]ambcomission[.]com\ntrasler22[at]ambcomission[.]com\nrishit333[at]ambcomission[.]com\ntomasso25[at]ambcomission[.]com\nkevin30[at]ambcomission[.]com\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nEmail address Subscribe\n I'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.Popular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemapLegal No ces\nPrivacy\nTerms of Use\nDocumentsAccount\nManage Subscriptions\nReport a Vulnerability\nWe use cookies to personalise content and ads, to provide social media features and to analyse our traffic. We also share information about your use of our site with our social media, advertising and analytics partners. Privacy Policy\n "
}