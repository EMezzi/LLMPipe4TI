{
    "title": "Morphisec_FIN7-Dissected_Hackers-Accelerate-Innovation",
    "text": "    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     1 | P a g e   MORPHISEC LAB  \n   \n \n \n \n \n \nFIN7 Dissected : Hacker s Accelerate  Innovati on  \n \nINTRODUCTION  \nLike clockwork, FIN7 again unleashed  a new attack able to bypass  almost every security solution.  The attack, \nwhich took place between October 8 to 10, 2017 , is yet another demonstration of the high -paced innovation by \nthreat actors.  \nFIN7 is one of today’s most organized and sophisticated cybercrime groups , primarily known for targeting US \nbusinesses to steal payment card data. They typically use clever, customized spear -phishing lures with \nmalicious attachments. Once an organization is infected, they move laterally across the network, using various \nanti-forensic techniques to e vade detection. The group is closely tied to the notorious Carbanak Gang, \nresponsible for a slew of attacks against financial institutions, although so far evidence falls short of directly \nequating the two.  \nOver the past year, Morphisec has been closely m onitoring FIN7 and their targets, publishing several analyses \non methods used by this group. In June 2017  Morphisec identified a highly sophisticated fileless attack \ntargeting restaurants across the US, as discussed  on Morphisec’s blog  and in a post  co-authored with Cisco \nTalos . The June campaign  used a new stealer DLL variant injected into malicious documents.  \nIn this report  we take a broader approach , describing in detail the rapid dynamic changes over the course of the \nlast four months , including the recent October  attack, which was first documented by researchers at Iceb rg. We \nexamin e each of the component modifications in the attack chains, and show how those changes helped FIN7 \nevade the dynamic behavior patterns and static patterns applied by many security solutions.  \nIn fact, a presentation  on FIN7  by FireEye at this year’s InfoSecurity Europe  stated that “In most environments, \nprevention is not possible.” The presenters, however, did not take into account the effectiveness of Moving \nTarget Defense solutions (e.g. Morphisec Endpoint Threat Prevention solution) against these types of attacks.  \n \n  MORPHISEC LAB  \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     2 | P a g e   MORPHISEC LAB  \nTechni cal Analysis  \nDocument Structure – RTF and DOCX Format  \nWe start with the first obvious component – the document structure. Over the period of the last four months , \nFIN7 has used two types of Word document  formats : Open XML Format (.docx) and Rich Text Forma t (.rtf). \nBoth document  types contain  the same embedded PNG object and a LNK file object that is executed by double \nclicking the image.  \nWith the exception of the September documents, t he RTF (RTF files could be also renamed to DOC extensions) \nfiles usually have the malicious code in plain text (Fig . 1 below), and the DOCX files usually have the code in one \nof the xml documents archived inside the DOCX files (Fig . 2).  \n \nDuring the same period, security solutions tried to create static patterns to help detect the se malicious \ndocuments . Those patterns were based on some of the following observations:  \n▪ Names of methods or variables  \n▪ Order of bytes  or strings  \n▪ Code introspection by simulated interpreter execution (need s valid RTF parser)  \n▪ Decode of base64 strings and deeper examination of the code after the decod ing \n▪ Byte pattern detection for some Unicode and A SCII strings that are represented in HEX pattern (code that  is \nwithin the LNK file will usually be represented UNICODE to HEX)  \nIs this enough to combat  Fin7? A look at Virus Total scoring reveals that when a FIN7 campaign is first active, is \ngoes mostly un detected by security solution s. The malicious documents do not score more than 1-3 detections. \nWithin a couple of days, security solutions updat e their patterns and those documents score around 10/56 or \nhigher. However, at the same time, the FIN7 group begins shutting down that campaign a nd starts work on the \nnext one, thereby diminishing the usefulness of reactive , pattern -based  detection  rules  for such attacks.  \nThere  are many ways to break string and byte patterns inside the document structure . For example , for RTF  \ndocuments  there are  inserting dummy control words, spaces, messing up the encoding, and abusing the \nFigure 2 \n Figure 2 \n     \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     3 | P a g e   MORPHISEC LAB  \nstandard by breaking AV document parsers .  During the  latest FIN7 campaigns, the hacker group broke almost \nevery above -mentioned detection method as described next.  \n▪ July  – The group evaded string -based pattern detection, especially the patterns which are based on \nmethod names and parameter names. Most likely those names are automatically re -obfuscated using \nsome framework before every campaign.  \n▪ August  – In order to evade  base6 4 automatic decoding rules and code introspection implemented by \nsecurity solutions, the FIN7  injected dummy control words  within and between the different strings \nincluding the base64 strings. A control word is a specially formatted command that RTF uses to mark \nprinter control codes or information that applications use to manage documents . This broke the validity \nof the strings if parsing the strings sequentially. RTF standard allows the use of control words which are \nnot recognized by some parsers (to support backward compatibility), the scopes represented by the \ncontrol words are stacked a nd if the control word is not recognized, the scope is popped out of the \nstack. As a result, the attack successfully executed by any standard Microsoft Word parser but evaded \nthe known static introspection by antivirus parsers.  \n \n \n▪ September  – The group evaded most of the static patterns rules by simply converting all human \nreadable code into HEX representation (moving the malicious code to the internals of the LNK fi le object \nand breaking previous string matching patterns). This kind of manipulation hold st ill further options for \nthe attackers ; they easily can change their encoding to any other form , such a binary for example.  \n \n \nIn addition, the  hackers also moved the code between some of the internal documents in DOCX format, from \ndocument.xml to oleObject1.bin . \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     4 | P a g e   MORPHISEC LAB  \n \n \n▪ October  – The group replaced the LNK file with  a simple CMD  batch file embedded as OLE object inside \nthe DOC file (represented as HEX string) . \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     5 | P a g e   MORPHISEC LAB  \n \nStage 1 : LNK file – OLE O bject  \nExcept for the October campaign, OLE .lnk file execution from Word documents was used during all FIN7 \ncampaigns in the past year and is one of the most tell -tale FIN7  signatures. This is why many of the security \nsolutions focus on detecting the .lnk file execution from within Word either statically or dynamically . At the same \ntime, they try  to limit false positives as there are some legitimate examples for such exec ution flow (e.g. \ncombining identification of LNK file code content  in HEX to Unicode representation, LNK file details, names and \nsizes can limit the False Positive rate).  \nThe table below presents examples of FIN7’s pattern modification during the period o f the last 4 months  and \nthe October  campaign. It demonstrates how this hacker group is able to easily bypass all current behavior and \npattern recognition defenses.  \nCampaign \ntime  LNK File Name  LNK File Content  \nMiddle \nJune  Unprotect.lnk  mshta. exe vbscript :Execute(\"On Error Resume Next:set \nwprotect=GetObject(,\"\"Word.Application\"\"): execute  \nwprotect.ActiveDocument. Shapes(1). TextFrame.TextRange.Text:close\")  \nJune/Jul  unprotect.rtf .lnk cmd.exe /C set x= wsc@ript /e:js@cript %HOMEPATH% \\md5.txt & echo \ntry{w=GetObject(\"\",\"Wor\"+\"d.Application\");this[ String.fromCharCode(101)+'va'+'l' ](w.Activ\neDocument. Shapes(1). TextFrame.TextRange.Text);}catch( e){}; \n>%HOMEPATH% \\md5.txt & ech  \nAugust  unlock.doc.lnk  WMIC.exe process call create  \"mshta \njavascript :eval( \\\"try{eval('wall=GetObject( \\\\'\\\\''+String.fromCharCode(44)+' \\\\'Word.Appli\ncation \\\\')');eval(wall.ActiveDocument .Shapes(2). TextFrame.TextRang e.Text);}catch(e){};\nclose(); \\ \nSeptember  unlock.doc.lnk  WMIC.exe  process call create  \"cmd start /min cmd /c for /f \\\"usebackq delims= \\\" %x in \n(`FindStr /R /C :\\\"@#[0 -9]#@ \\\" \\\"%TEMP% \\unlock.doc.lnk \\\"`) do %x|cmd >nul 2>&1 &\"  \nOctober  unclock.cmd  ------ \n \nLNK FILE – PROPERTIE S CODE CONTENT  \nSTATIC APPROACH  \nLNK file execution from within Word documents can be easily identified statically within many of the document \nformats .  RTF standard for embedded objects will require it to be prefixed with \" \\objdata\" ; it may also be \nfollowed by an encoding indicator like \" \\bin\"). The .LNK file content is also part of the embedded object and \nusually represented in Unicode translated to HEX encoding (or other encoding, e.g. binary) . The same object \nalso includes the original LNK full path name represented in ASCII and translated to HEX. Any of the LNK file \nindicators (e.g. content, name, location) can be used in static pattern detection (e.g. using Yara rules). Although \nthose detection  methods are implemented by many solutions, they are very easy to bypass. And, as these \ntargeted campaigns usually have a very short time exposure, these types of rules are not fit to  prevent any \nfuture  unknown  campaigns.       \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     6 | P a g e   MORPHISEC LAB  \nDYNAMIC APPROACH  \nSome security s olutions try to detect and prevent the execution of suspicious process chain patterns \ndynamic ally (e.g. winword.exe -> mshta.exe/cmd.exe/wmic.exe -> wscript.exe).  Some of the algorithms extract \nthe properties code con tent out of the LNK file and block the execution of WORD even before the child  process \nexecution simply  by in spection of the LNK file content . Other mechanisms block the execution of the process \nchain in runtime, usually using some sort of driver t hat is registered for process notification callbacks and \nblocks the process create as soon as a process chains matches one of the malici ous patterns. Some of the \nNextGen solutions use AI models, however these are trained on the same prior known process cha in patterns \nand therefore are prone to the same bypasses as others . Moreover , AI are especially prone  to producing  many \nfalse positives . \nAs shown in the table above, the attackers change and modify their process chain patterns const antly ,  and \nmight use more advance d techniques ( e.g. forfiles.exe  to simulate the execution of CMD.exe or other processes \nhttps://twitter.com/vector_sec/status/896049052642533376  or executing the same usin g Pcalua  \nhttps://twitter.com/0rbz_/status/912491288104140801 ) or just increase the process chain nest to fool some \nof those security  patterns.   \nLNK FILE – FILE DETAILS  / BATCH FILE DETAILS  \nAs mentioned previously, some security solutions also use LNK file details to minimize the exposure to false \npositives . Some of those details, which appear in HEX format inside the rtf or docx files, are:  \n▪ Original file name and full path, usually converted A SCII to HEX in the RTF file (e.g. C:\\Users \\jinvr -3-\n1\\Desktop \\unlock.doc.lnk ) \n▪ User name on the compile machine of the attacker (e.g. jinvr -3-1, andy ) \n▪ Compile m achine name of the attacker (e.g. andy -pc) \n▪ In some cases, even the Office version on the attack er’s computer can be registered in the LNK file and used \nfor detection  \n▪ LNK file size (in FIN7 campaign s the size can be up to  more  than 400K , since it also includes the next stage \ncode. The usual size i s not more than 4K .] \n▪ And more…  \nAlthough some of those par ameters haven't changed much between the campaigns, it  is fairly easy to modify \nany patterns that are based on the LNK file details.  \n \n \n  \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     7 | P a g e   MORPHISEC LAB  \nAs mentioned earlier , FIN7 removed LNK File f rom the attack chain in their October 8 -10 campaign and instead \nadded a direct  CMD batch file with clear commands.  In this case , we can still identify the user machine using \nthe details of the embedded batch objects : \n \nStage 2 – OLE Automation  \nThe se cond stage of malicious code extraction and execution is performed by the code written inside the LNK \nfile properties content as described in the previous section. The process chain executed from LNK contents as \ndescribed in Stage  1 will eventually extract the next stage malicious JavaScript  code from the active Word \nprocess (sometimes VBscript as well). The hacker uses OLE automation to extract and execute the malicious \ncode from the Shape.TextFrame.Text  property that resides within the active Word process.  \nThe obvious exclusion from this pattern is found in the latest two campaign s (September  and October ). \nHere  the hackers removed the stage of reading the code from active document s and directly injected mo st \nof the code as part of the LNK file details  or as part of a batch file . In the case of  the September campaign, \nthe code is extracted from the internals of the LNK file details after tracking the special cookie indicator \n(:\\\"@#[0 -9]#@ \\\" ) inside file content ( Stage  1). In the October campaign the code is activated directly from \nembedded batch script which writes the next stage into a whatis .ini file and then executes it . \n \nShape.TextFrame.Text  \nIn most cases Shape.TextFrame.Text  property contains the malicious next stage JavaScript /VBscript code. The \ncode is part of the shape objects inside the active document. Extracting such code for pattern matching can be \neasily done dynamically using the same OLE Automation methods or statically by having good rtf or docx \nparser . (It can be assume d, that many modern security detection solutions have such functionality .)  \nThe table below  clearly shows how the attackers gradually modified this second stage c ode chain extraction \nand execution to evade static and dynamic analysis (until they finally removed it altogether ):  \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     8 | P a g e   MORPHISEC LAB  \nApril  \n \nJune/Jul y \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     9 | P a g e   MORPHISEC LAB  \nAugust  \n \nSeptember  \n \nOctober  \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     10 | P a g e   MORPHISEC LAB  \nInitially , the hackers wrote the code in clear text directly as part of S hape 1 . This can be  easily parsed by static \nsecurity solutions . As this early version wasn ’t evasive enough, FIN7 included an abort operation if Kaspersky \nprocesses were found . In later campaigns from June and July  they modified the S hape number (to evade the \nsimple pattern of executing ActiveDocument.Shape[ 0].TextFrame.Text in Word document from within \nJavaScript) . Next, they also added techniques that would confuse dynamic analyzers ( overriding  console \nfunction and messing with the control flow).  In the ir August campaign they added one more stage in between \nand moved the malicious code into Shape 3 after redirecting S hape 2 to it (as shown in the table above).  \nAs stated previously, in latest campaign s this stage was removed and the code was extracted an d executed directly \nfrom within the LNK file content  or the batch file content . \nSince there are many ways to break behavior patterns recognition or the static analysis based on the shape \nexecution source and sequence, this is a very weak basis for detectio n of this type of malicious behavior.  \nWe suspect the hackers may use additional ways to extract and execute the code:  \n▪ Using other Document properties (already used in later stages of the attack)  \nY.ActiveDocument.BuiltInDocumentProperties(“Comments”);  \n▪ Using InlineShapes  instead of regular shapes   \n▪ Using Excel and its ActiveSheet   \n▪ Extracting the Text using OleObjects in VB   \n▪ Adding more shapes in the sequence  \n▪ Read the code directly from LNK o r PNG files (specially the PNG)  \n▪ And more…  \nAs mentioned before, the rapid change s in this stage leave most detection solutions  a few steps behind , which \nis just enough to reach the target of the campaign.  \nStage 3 – Scheduled tasks  \nWe will not cover the internals of the scheduled tasks since , other than the time trigger,  they have  not changed \nmuch over the last several campaigns . \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     11 | P a g e   MORPHISEC LAB  \nStage 4 – Network based detection evasion  \nAs described in the previous sections, many  of the malicious code signatures and patterns can be easily \nmodified by hackers or even by automatic frameworks that have the ability to reorder, obfuscate and encode \ncode . By contrast, C&C protocol modification requires significant ly more  effort and resources. Many of today ’s \nsecurity solutions (AV/NGAV) will usually have at least one network host intrusion detection mo dule (IDS) . \nThose modules might detect suspicious traffic with IDS rules that are created based on some of the following \nparameters:  \n▪ IP/URL reputation  \n▪ URL and header structures (parameters, ports)  \n▪ Protocol communication sequence and timing patterns (que ry and query type sequence)  \n▪ Deep packet inspection  \n▪ Packet sizes  \n▪ Anomaly and deviation from other computers network behavior within the enterprise (less relevant for APT, \nmore relevant for Bots)  \nAlthough FIN7 successfully evades some of the above IDS -base d rules, some relatively basic rules can certainly \nlimit the risk of being compromised by these  threat actors. This is describe d next.   \n \nC&C  \nWith respect to C&C, IP reputation and URL structure, the FIN 7 protocol doesn’t differ  much  from many other \nproto cols used by some of the most popular RAT famil ies’ protocols.  \nIt is known that ports 80 and 443 are often  utilized by RATs for their  communication protocol, simply because \nthose ports are usually not filtered by firewalls. FIN7 certainly uses those ports, but the group also uses Google \nAPI URL s which are  rarely filtered by gateways and other ports as well.  \nThe hackers are not using real HTTPS protocol over the port 443 . Instead they use substitution cypher with a \nconstantly chang ing key. Although blocking non -https traffic on 443 or non -http traffic on 80 can certainly help, \nthis result s in many false positives . Hackers are well aware of this fact.   \nThe table below represents the changes in the URL sequence and structure modifica tion (not including the \nparameters) with each listed campaign.  \nJune  hxxps://script.google.com/macros/s/AKfycbwkNc -\n8rk0caDWO5I4KMymvOXVinfOpR1eevZ63xiXDvcoqOE6p/exec  \nStart July  hxxp://5.149.253.126:443/cd  \nhxxp://5.149.253.126:80/cd  \nhxxp://5.149.253.126:8080/cd  \nhxxps://script.google.com/macros/s/AKfycbxyiIBW9SHUFV4S5JM6IW -\ndmVADFOrTJDM7bZspeBf2Kpf4IN0/exec  \nMid July hxxp://104.232.34.36:80/cd  \nhxxp://104.232.34.36:443/cd  \nhxxp://104.232.34.36:8080/cd      \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     12 | P a g e   MORPHISEC LAB  \nhxxps://script.google.com/macros/s/AK fycbz6dmNJfCPwFchoq6WkJsMjQu22\nSJTJ9pxMUeQR7bCpmJhW6Bg2/exec  \nJuly -\nAugust - \nSeptember  http://5.149.250.235:80/cd  \nhttp://5.149.250.235:443/cd  \nhttp://5.149.250.235:8080/cd  \nhttp://5.149.250.235:53/cd  \nhttps://script.google.com/macros/s/AKfycbxvGGF -\nQBkaNIWCBFgjoh BtkmyfyRpvm91yCGEvzgDvAJdqfW8_/exec  \nOctober  http://31.148.220.215:53/cd  \nhttp://31.148.220.215:80/cd  \nhttp://31.148.220.215:443/cd  \nhttp://31.148.220.215:8080/cd  \n \nBelow are some of the patterns FIN7 is modifying  to evade  many of the IDS rules:  \n▪ Throughout the latest campaigns, all hardcoded URLs are inside a comment within the malicious code . \nThe code extracts the URLs in runtime from the comments.  \n▪ Every query is executed against a sequence of URLs, until the first successful  response  is received . This \nresponse ends the execution of the sequence and as a result the attacker can control the sequence \nlength directly from the C&C server . This enables  the attackers to mess up the sequence and reputation \nbased detection patterns.  \n▪ To break h eader structure matching, f or each query, the URL is appended with random named \nparameters + encoded values which are encrypted in each campaign with  a different substitution cypher \nand a unique campaign key.  \n \n▪ To break deep packet inspection, each piece o f information posted to the C&C is encoded with substitution \ncypher as well.  \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     13 | P a g e   MORPHISEC LAB  \n \n▪ The \"alfOut\" hardcoded variable is the substitution key that is modified with each campaign, notice also \nthat some of the URL parameters are seeded with the day of the attack (\"com_pref\"):  \n \n▪ The hackers add  additional  information that is sent to the C&C . This breaks some IDS rules that are based \npartially on the size of th e packets or/and on the entropy.  \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     14 | P a g e   MORPHISEC LAB  \n \n▪ More recent campaigns also added the support of proxies on the endpoint  \n \nAgain,  we see that FIN7 constantly modifies its patterns . This keeps them a  few steps ahead of defenders that \nuse pattern recognition on the network protocol . Eventually the attack will get through the network defenses to \nthe endpoint unless harsh steps  – e.g. network is olation , full deep packet inspection , forced  filtering, etc . -  are \nfully imple ment ed. Such ste ps of course come at the price of business and operation disruption .   \n \n  \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     15 | P a g e   MORPHISEC LAB  \nStage 5  - PowerShell – Reflective DLL Injection  \nThe f inal component for this report is the PowerShell script that is extracted and executed from disk . This \ncomponent contains  a Reflective loader for an embedded DLL directly into the process memory. The DLL and \nthe framework is covered in detail  in the Cisco  Talos -Morphisec  co-authored post  “FIN7 Group  Uses JavaScript \nand Stealer DLL Variant in New Attacks ”. \nThis framework and DLL haven't changed through all of the FIN7 campaigns analyzed over the past couple of \nmonths (the attack looked at in our June blog used a different PowerShell component – DNS me ssage loader).  \nFIN7 added several obstacles to evade detection -based security solutions at this stage:  \n \nMid-July  \nThe PowerShell framework was first added to the campaign, mainly based on the PowerSploit reflective \ninjection,  with  the info stealer DLL embedded as a base64 string . \nSome security solutions recognized the high similarity to the original PE reflective loader and flagged it as \nsuspicious as soon as the file is written to disk:  \n \nWriting and executing the file from disk:  \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     16 | P a g e   MORPHISEC LAB  \nAugust  \nIn order to s et higher barrier for the security solutions, the group added one more encoding level that is decoded \ndirectly into memory of the process by using DeflateStream  compression stream.  \n \nFollowing that, some security solutions created static scanning rules for  PowerShell scripts that are written to \ndisk. These rules are match ed against the base64 encoded string parts that represent the original PE reflective \nloader script.  \nSeptember  \nDuring the September  campaign  FIN7  tried to evade the previously created static  rules by modifying the base64 \nstring parts  by increasing the length of each part and reducing the number of the string components , and \neventually rebuilding it in runtime . The group also abused the fact that it can increase the length of the string as \nlong as it extracts only a fixed number of bytes out of it (63149  bytes ). \n \n \n \nOctober  \nSometimes reducing complexity is beneficial. During the October campaign the FIN7 group  removed the \ncomments obstacle and flatten ed the strings to a single string that , when  decompressed , result s in the original \nstealer DLL . \n \n \n \n \n    \n© Morphisec Ltd, 2017   info@morphisec.com   www.morphisec.com                                     17 | P a g e   MORPHISEC LAB  \nHALFBAKED BACKDOOR  \nPowerShell  is only a single backdoor command that is part of the HALFBA KED malware delivered by the FIN7 \nattack . Additional  backdoor commands are described in this FireEye blog . \nIn the October campaign  a new command  - \"getNK2\" - was introduced . This  command enable s the exfiltration of \ninformation from the Outlook client  (for more see  ICEBRG  research) . \n \n \nCONCLUSIONS : \nAt the heart of FIN7 ’s business model are  constant  upgra des of  their attacks  and evasion techniques  to bypass \nstatic, dynamic and behavior based solutions . As shown in this study, e very campaign includes enough new \nfeatures  to make them unknowable to thes e solutions.  \nAnd a s security  vendors  scramble to catch up, FIN7  is already preparing its next attack.   \nThe only answer to these kinds of constantly evolving threats is a security  solution that does not require prior \nknowledge about the attack to prevent it.  Morphisec ’s breakthrough Moving Target Defense tec hnology does \nnot rely on signatures, patterns, behaviors or classifications . Morphisec stopped  all of  these  FIN7 attack s as \nthey emerged.    \n"
}