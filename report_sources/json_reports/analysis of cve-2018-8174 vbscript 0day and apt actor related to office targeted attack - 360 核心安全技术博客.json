{
    "title": "analysis of cve-2018-8174 vbscript 0day and apt actor related to office targeted attack - 360 核心安全技术博客",
    "text": "Comments\n© 2020 -  360 核心安全技术博客   - blogs.360.cn  \nPowered by ThinkJS  & FireKylin 1.3.1文章目录\nI Overview\nII Affection in China\nIII Attack Procedure Analysis\nIV IE VBScript 0day (CVE-2018-\n8174)\n1. Timeline\n2. Vulnerability Principles\n3. Exploitation\nFake array to perform\narbitrary address reading\nand writing\nRead the storage data of\nthe specified parameter\nObtain Key DLL Base\nAddress\nBypass DEP to execute\nshellcode\nV Powershell Payload\nVI UAC Bypass Payload\n1. Retro backdoor execution\n2. Retro backdoor evolvement\nVII Attribution\n1. Decryption Algorithm\n2. PDB Path\n3. Victims\nVIII Conclusion\nAppendix IOC\nReferences\n分享到：\n 新浪微博\n 微信\n Twitter\n 印象笔记\n QQ好友\n 有道云笔记Analysis of CVE-2018-8174 VBScript 0day and APT actor related to\nOffice targeted attack\nI Overview\nRecently, the Advanced Threat Response Team of 360 Core Security Division detected an APT attack exploiting\na 0-day vulnerability and captured the world’s first Office malicious sample that uses a browser 0-day vulnerability.\nWe code named the vulnerability as \"double kill” exploit. This vulnerability affects the latest version of Internet\nExplorer and applications that use the IE kernel. When users browse the web or open Office documents, they are\nlikely to be potential targets. Eventually the hackers will implant backdoor Trojan to completely control the\ncomputer. In response, we shared with Microsoft the relevant details of the 0day vulnerability in a timely manner.\nThis APT attack was analyzed and attributed upon the detection and we now confirmed its association with the\nAPT-C-06 Group. On April 18, 2018, as soon as 360 Core Security detected the malicious activity, we contacted\nMicrosoft without any delay and submitted relevant details to Microsoft. Microsoft confirmed this vulnerability on\nthe morning of April 20th and released an official security patch on May 8th. Microsoft has fixed the vulnerability\nand named it CVE-2018-8174. After the vulnerability was properly resolved, we published this report on May 9th,\nalong with further technical disclosure of the attack and the 0day.\nII Affection in China\nAccording to the sample data analysis, the attack affected regions in China are mainly distributed in provinces\nthat actively involved in foreign trade activities.Victims include trade agencies and related organizations.\nIII Attack Procedure Analysis\nThe lure documents captured in this attack are in Yiddish[1]  The attackers exploit office with OLE autolink objects\n(CVE-2017-0199) to embed the documents onto malicious websites. All the exploits and malicious payload were\nuploaded through remote servers. [1]The language is automatically identified by Google Translate\n_Notification in the pop-up window: _ Links to this document may reference other files. Do you want to update this document with the data in the linked\nfile? Once victims opened the lure document, Word will firstly visit a remote website of IE vbscript 0day (CVE-2018-8174) to trigger the exploit. Afterwards,\nShellcode will be running to send several requests to get payload from remote servers. The payload will then be decrypted for further attack.\nWhile the payload is running, Word will release three DLL backdoors locally. The backdoors will be installed and executed through PowerShell and\nrundll32. UAC bypass was used in this process, as well as file steganography and memory reflection uploading, in order to bypass traffic detection and to\ncomplete loading without any files.\nThe main process of the attack is shown in the following figure:\nIV IE VBScript 0day (CVE-2018-8174)\n1. Timeline\nOn April 18, 2018, Advanced Threat Response Team of 360 Core Security Division detected a high-risk 0day vulnerabilities. The vulnerability affects the\nlatest version of Internet Explorer and applications that use the IE kernel and has been found to be used for targeted APT attacks. On the same day, 360\nimmediately communicated with Microsoft and submitted details of the vulnerability to Microsoft. Microsoft confirmed this vulnerability on the morning of\nApril 20th and released an official security patch on May 8th. The 0day vulnerability was fixed and it was named CVE-2018-8174. CVE-2018-8174 is a\nremote code execution vulnerability of Windows VBScript engine. Attackers can embed malicious VBScript to Office document or website and then obtain\nthe credential of the current user, whenever the user clicks, to execute arbitrary code.\n2. Vulnerability Principles\nThrough the statistical analysis of the vulnerability samples, we found out that obfuscation was used massively. Therefore, we filtered out all the duplicated\nobfuscation and renamed all the identifiers. Seeing from the POC created by using the exploit samples we captured, the principles of the exploit is\nobvious. The POC samples are as below:\nDetailed procedures: 1) First create a cla1 instance assigned to b, and then assign value 0 to b, because at this point b's referenced count is 1, causing\ncla1's Class_Terminate function to be called. 2) In the Class_Terminate function, again assign b to c and assign 0 to b to balance the reference count. 3)\nAfter the Class_Terminate return, the memory pointed to by the b object will be released, so that a pointer to the memory data of the released object b is\nobtained. 4) If you use another object to occupy the freed memory, it will lead to the typical UAF or Type Confusion problem\n3. Exploitation\nThe 0-day exploit exploits UAF multiple times to accomplish type confusion. It fakes and overrides the array object to perform arbitrary address reading\nand writing. In the end, it releases code to execute after constructing an object. Code execution does not use the traditional ROP or GodMod, but through\nthe script layout Shellcode to stabilize the use.\nFake array to perform arbitrary address reading and writing\nMem members of 2 classes created by UAF are offset by 0x0c bytes, and an array of 0x7fffffff size is forged by reading and writing operation to the two\nmem members.\ntypedef struct tagSAFEARRAY { USHORT cDims; // cDims = 0001 USHORT fFeatures; fFeatures =0x0880 ULONG cbElements; // the byte occupied by\none element (1 byte) ULONG cLocks; PVOID pvData; // Buffer of data starts from 0x0 SAFEARRAYBOUND rgsabound[1]; } SAFEARRAY,\nLPSAFEARRAY; typedef struct tagSAFEARRAYBOUND { ULONG cElements; // the number of elements (0x7fffffff, user space) LONG lLbound; // the\ninitial value of the index (starting from 0) } SAFEARRAYBOUND, LPSAFEARRAYBOUND;\nA forged array composes of a one-dimensional array, the number of elements is 7fffffff, each element occupies 1 byte, and the element memory address is\n0. So the accessible memory space for the array is from 0x00000000 to 0x7ffffffff*1. Therefore, the array can be read and written at any address. But the\nstorage type of lIlIIl is string, so only by modifying the data type to 0x200C, i.e. VT_VARIANT|VT_ARRAY( array type), attackers can achieve their purpose.\nRead the storage data of the specified parameter\nIn the malicious code, the above function is mainly used to read the data of the memory address specified by the parameter. The idea is to obtain the\nspecified memory read capability via the characteristics of the first 4 bytes of the string address (namely, the content of the bstr, type, size field) returned by\nthe lenb (bstr xx) in the vb (the data type in the VBS is bstr). This is shown in the above code. If the input argument is addr(0x11223344), first add 4 to the\nvalue to get 0x11223348, and then set the variant type to 8 (string type). Next, call len function: if found to be BSTR type, vbscript will assume that the\nforward 4 bytes (0x11223344) is the address memory to store the length. So the len function will be executed and the value of the specified memory\naddress will be returned.\nObtain Key DLL Base Address\n1.The attacker leaks the virtual function table address of the CScriptEntryPoint object in the following way, which belongs to Vbscript.dll.\n2.Obtain the vbscript.dll base address in the following way\n3.Because vbscript.dll imported msvcrt.dll, the msvcrt.dll base address was obtained by traversing the vbscript.dll import table, msvcrt.dll introduces\nkernelbase.dll, ntdll.dll, and finally the NtContinue, VirtualProtect function address was obtained.\nBypass DEP to execute shellcode\n1.Use arbitrary reading and writing technique to modify the VAR type type to 0x4d, and then assign it with a value of 0 to make the virtual machine perform\nVAR:: Clear function. 2.Control with caution and let the code Execute function ntdll!ZwContinue. The first parameter CONTEXT structure was also\nconstructed by the attacker.\n3.Control the code with caution to execute ntdll! ZwContinue function. The first parameter CONTEXT structure is also carefully constructed by the attacker.\n4.The first parameter of ZwContinue is a pointer to the CONTEXT structure. The CONTEXT structure is shown in the following figure, and the offset of EIP\nand ESP in CONTEXT can be calculated 5.The values ​​of the Eip and Esp in the actual runtime CONTEXT and the attacker's intention are shown in the\nfigure below.\nV Powershell Payload\nAfter the bait DOC file is executed, it will start to execute the Powershell command to the next step payload.\nFirst of all, Powershell will fuzzy match incoming parameter names, and it is case-insensitive.\nSecond step, decrypt the obfuscated command.\nNext, the script uses a special User-Agent access URL page to request the next load and execute.\nThe size of the requested payload file is approximately 199K. The code fragment is as follows.\nWe found that this code was modified from invoke-ReflectivePEInjection.ps1[2].  buffer_x86 and buffer_x64 in the code are same function but from\ndifferent versions of dll files. File export module name: ReverseMet.dll. _[2]\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/code_execution/Invoke-ReflectivePEInjection.ps1 _ DLL file decrypts ip\naddress, port and sleep time from the configuration. After the decryption algorithm xor 0xA4, and subtracted 0x34, the code is as follows.\nDecryption configuration file from the ip address 185.183.97.28 port 1021 to obtain the next load and execute. After it connects to the tcp port, it will get 4\nbytes to apply for a memory. Subsequent acquired writes into the new thread, and execute the acquired shellcode payload.\nSince the port of the sample CC server is closed, we cannot get the next load for analysis.\nVI UAC Bypass Payload\nIn addition to use PowerShell to load the payload, the bait DOC file also runs rundll32.exe to execute another backdoor locally. There are several notable\nfeatures of the backdoor program it uses: the program uses COM port to copy files, realize UAC bypass and two system DLL hijacks; it also uses the\ndefault DLLs of cliconfg.exe and SearchProtocolHost.exe to take advantage of whitelist; finally in the process of component delivery, use file\nsteganography and memory reflection loading method to avoid traffic monitoring and achieve no file landing load.\n1. Retro backdoor execution\nThe backdoor program used in this attack is actually the Retro series backdoor known to be used by the APT-C-06 organization. The following is a\ndetailed analysis of the implementation process of the backdoor program. First execute the DLL disguised as a zlib library function with rundll32 and\nexecute the backdoor installation functions uncompress2 and uncompress3. It uses a COM port for UAC bypass, copying its own DLL to the System32\npath for DLL hijacking, and the hijacked targets are cliconfg.exe and SearchProtocolHost.exe.\nCopy the DLL file in the AppData directory to the System32 directory through the COM interface and name it msfte.dll and NTWDBLIB.dll.\nThen copy the file NTWDBLIB.dll to the System directory and execute the system's own cliconfig to achieve DLL hijacking and load NTWDBLIB.dll.\nThe role of NTWDBLIB.dll is to restart the system service WSearch, and then start msfte.dll.\nThe script will then generate and execute the MO4TH2H0.bat file in the TEMP directory, which will delete the NTWDBLIB.DLL and its own BAT from the\nsystem directory.\nMsfte.dll is the final backdoor program whose export is disguised as zlib. The core export functions are AccessDebugTracer and AccessRetailTracer. Its\nmain function is to communicate with CC and further download and execute subsequent DLL programs.\nSimilar to the previously analyzed sample, it is also using image steganography and memory reflection loading. The decrypted CC communication\ninformation is as follows:\nThe format of the request is: _Hxxp://CC_Address /s7/config.php ?p=M&inst=7917&name= _ Among them, the parameter p is the current process\nauthority, there are two types of M and H, inst parameter is the current installation id, name is the CC_name obtained by decryption, this time is pphp.\nAfter decryption after downloading, the process is exactly the same as the format of the previous image steganography transmission. The decryption\nprocess this time is shown in the figure below:\nThe previously decrypted test sample decryption process is shown below:\nFor the CC URL corresponding to the test request, because we did not obtain the corresponding image during the analysis, the CC is suspected to have\nfailed. In the implementation process, Retro disguised fake SSH and fake zlib, intended to obfuscate and interfere with users and analysts. Retro's attack\nmethod has been used since 2016.\n2. Retro backdoor evolvement\nThe back door program used in the APT-C-06 organization's early APT operation was Lucker. It is a set of self-developed and customized modular\nTrojans. The set of Trojans is powerful, with keyboard recording, voice recording, screen capture, file capture and U disk operation functions, etc. The\nLucker ‘s name comes from the PDB path of this type of Trojan, because most of the backdoor's function use the LK abbreviation.\nIn the middle to late period we have discovered its evolution and two different types of backdoor programs. We have named them Retro and Collector by\nthe PDB path extracted from the program. The Retro backdoor is an evolution of the Lucker backdoor and it actives in a series of attacks from 2016 till\nnow. The name comes from the pdb path of this type of Trojan with the label Retro, and also has the word Retro in the initial installer.\nC:\\workspace\\Retro\\DLL-injected-explorer\\zlib1.pdb C:\\workspace\\Retro\\RetroDLL\\zlib1.pdb\nThe evolution of the reflective DLL injection technique can be found from the relevant PDB paths, and there are a lot of variants of this series of backdoors.\nVII Attribution\n1. Decryption Algorithm\nDuring the analysis, we found the decryption algorithm that malware used is identical to APT-C-06’s decryption algorithm. The decryption algorithm of this\nattack is as follow:\nThe decryption algorithm APT-C-06 used is as follow:\nIn the further analysis, we found the same decryption algorithm was used in the 64-bit version of the relevant malware.\n2. PDB Path\nThe PDB path of the malware used in this attack has a string of “Retro”. It is one specific feature of Retro Trojan family.\n3. Victims\nIn the process of tracing victims, we found one special compromised machine. It has a large amount of malware related to APT-C-06. By looking at these\nsamples in chronological order, the evolution of the malicious program can be clearly seen. The victim has been under constant attack acted by APT-C-06\nsince 2015. The early samples on the compromised machine could be associated with DarkHotel. Then it was attacked by Lurker Trojan. Recently it was\nunder the attack exploiting 0-day vulnerabilities CVE-2018-8174.\nVIII Conclusion\nAPT-C-06 is an overseas APT organization which has been active for a long time. Its main targets are China and some other countries. Its main purpose is\nto steal sensitive data and conduct cyber-espionage. DarkHotel can be regarded as one of its series of attack activities. The attacks against China\nspecifically targeted government, scientific research institutions and some particular field. The attacks can be dated back to 2007 and are still very active.\nBased on the evidence we have, the organization may be a hacker group or intelligence agency supported by a foreign government. The attacks against\nChina have never stopped over the past 10 years. The Techniques the group uses keep evolving through time. Based on the data we captured in 2017,\ntargets in China are trade related institutions and concentrated in provinces that have frequent trading activities. The group has been conducting long-term\nmonitoring on the targets to stole confidential data. During the decades of cyber attacks, APT-C-06 exploits several 0-day vulnerabilities and used\ncomplicated malware. It has dozens of function modules and over 200 malicious codes. In April, 2018, the Advanced Threat Response Team of 360 Core\nSecurity Division takes the lead in capturing the group’s new APT attack using 0-day vulnerabilities (CVE-2018-8174) in the wild, and then discovers the\nnew type attack – Office related attack exploiting 0-day VBScript vulnerabilities. After the capture of the new activity, we contacted Microsoft immediately\nand shared detailed information with them. Microsoft's official security patch was released on 8th May. Now, we published this detailed report to disclose\nand analyze the attack.\nAppendix IOC\nReferences\nhttps://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2018-8174\n本文链接： http://blogs.360.cn/post/cve-2018-8174-en.html\n-- EOF --\n作者 heliosteam  发表于  2018-05-09 10:40:48  ，添加在分类  0day  APT Threat Intelligence  Vulnerability Analysis  下 ，最后修改于  2018-08-28 02:37:0105月09, 2018\n« Lock. 勒索病毒分析 APT-C-06 组织在全球范围内首例使用 “双杀”0day漏洞(CVE-2018-8174) 发起的 APT攻击分析及溯源  »\n360 核心安全技术博客\n  主页 Home\n  归档 Archive\n  分类 Category\n  关于 About\n   \n "
}