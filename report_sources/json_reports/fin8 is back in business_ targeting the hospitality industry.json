{
    "title": "fin8 is back in business_ targeting the hospitality industry",
    "text": "MOVING TARGET DEFENSE BLOG\nCYBERSECURITY TRENDS, EXPLORING MOVING TARGET DEFENSE\nAND PUTTING ENDPOINT THREAT PREVENTION FIRST\nTweetFIN8 IS BACK IN BUSINESS, TARGETING THE\nHOSPITALITY INDUSTRY\nPosted by  MICHAEL GORELIK  on June 10, 2019\nFind me on:  \n \nDuring the period of March to May 2019, Morphisec Labs observed a new, highly\nsophisticated variant of the ShellTea / PunchBuggy backdoor malware that\nattempted to infiltrate a number of machines within the network of a customer in\nthe hotel-entertainment industry. It is believed that the malware was deployed as a\nresult of several phishing attempts.\nThe last documented version of ShellTea was in 2017, in a POS malware attack .\nGiven the nature of the industry targeted in the attack uncovered by Morphisec, we\nassume that this was also an attempted POS attack. As the attack was prevented\nby the Morphisec solution, the POS malware could not be downloaded to the\nmachines.\nThis is the first attack observed during 2019 that can be attributed to FIN8  with high\nprobability, although there are a few indicators that overlap with known FIN7\nattacks (URLs and infrastructure).\nIn this report, we investigate this latest variant of ShellTea, together with the\nartifacts it downloaded after the Morphisec Labs team detonated a sample in a\nsafe environment.\nFIN8 - TECHNICAL DETAILS\nWe begin by examining the different stages of the fileless dropper in detail.\nFILELESS EXECUTION\nFollowing successful infiltration, the malware persists through registry:\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n \nThe command line execution leads to PowerShell code executed from a different\nregistry value: HKEY_CURRENT_USER\\\\Software\\\\ [random name] . The attacker abuses\nthe PowerShell wildcard mechanism with the assumption that there are no\nadditional keys in registry under HKCU the match the S???ware  string beside\nSoftware . This may minimize the effectiveness of certain detection or intro\ninspection tools when looking for the next stage execution.\nThe code from the [ random name ] key executes an additional PowerShell\ncommand that decodes base64 assembly and invokes it within the memory while\npassing it as parameters an additional [ random name ] registry value – the ShellTea\nshellcode:\n\"Xshuzugewogazi\"=\"$null=\n[System.Reflection.Assembly]::Load([System.Convert]::FromBase64String(\"TVq…. ”));\n[LExR.J9fL]::YHvszr((Get-ItemProperty -Path HKCU:Software\\\\Fpkakesude -Name\nGlyavonubafi).Glyavonubafi, 0);\"\nEXECUTING .NET ASSEMBLY FOR SHELLCODE EXECUTION\nThe base64 encoded assembly that we saw in the previous stage is a .NET stager\nthat self-injects a shellcode (the parameter from previous stage) by creating a new\nthread with the shellcode entry. The thread also needs a parameter (the same\nshellcode) for proper execution.\nSHELLCODE\nCUSTOM FUNCTION RESOLUTION\nTo operate and evade standard analysis tools, most of the functions are hashed.\nThe hashing algorithm has a high degree of similarity to the previous ShellTea\nversion, with a slight modification of the seeds and constants. In this version the\nattacker also utilizes functions from ole32 for stream processing.\nINJECT INTO EXPLORER\nAs in the previous version, ShellTea continues the operation after persisting\nthrough the explorer.exe process. While it includes multiple ways to find Explorer,\nthe preferred method is to get the process id from the current desktop window.\nAfter finding the process id, the shellcode uses standard functions to allocate and\nwrite memory within Explorer and then uses low-level API RtlCreateUserThread for\nthread injection.\nVIRTUAL ENVIRONMENT AND SANDBOX BYPASS\nShellTea utilizes a number of techniques to identify if it is running within a virtual\nenvironment or is being monitored.\nVirtual environment by  rmware\nShellTea extracts the firmware string information using NtQuerySystenInformation\nwith the SystemFirmwareTableInformation  flag. Then it searches for a set of known\nstrings as described in this article  by Checkpoint (additional strings have been\nadded in this case, e.g. Visual studio).\nLooking for monitoring processes\nAs part of the anti-debugging or anti-monitoring techniques, ShellTea iterates over\nall the running processes, applies CRC32 on each process name (after converting\nthe string to capital letters), and then compares the value against a predefined set\nof CRCs. Note that a bug in the previous version has been fixed and more CRCs\nwere added.\nWe wrote a python script which is based on a set of known processes and\nidentified the list of the processes that are being searched for. These are:\nWINDBG.EXE, WIRESHARK.EXE, PROCEXP.EXE, PROCMON.EXE, TCPVIEW.EXE,\nOLLYDBG.EXE, IDAG.EXE, IDAG64.EXE, DUMPCAP.EXE, FILEMON.EXE, IDAQ64.EXE,\nIDAQ.EXE, IMMUNITYDEBUGGER.EXE, PETOOLS.EXE, REGMON.EXE, SYSER.EXE,\nTCPDUMP.EXE, WINDUMP.EXE, APIMONITOR.EXE, APISPY32.EXE, IRIS.EXE,\nNETSNIFFER.EXE, WINAPIOVERRIDE32.EXE, WINSPY.EXE\nValidate Hard Disk Volume\nThe hard disk volume name is hashed with SHA1 and compared to a preconfigured\nSHA1.\n \nPERSISTENCY\nUpon successful bypassing of sandboxes, the shellcode executes a persistency\nmodule. If the attack is yet to be persistent (validates beforehand), it decrypts the\nPowerShell base64 command, then decrypts the CMD command for persistency\nand writes those into the registry as described in the first step. Note that every\nstring is decrypted with different XOR parameter which may fail some of the\nautomatic analyzers.\nC2 PROTOCOL\nCOMMANDS\nThe ShellTea backdoor communicates on top of HTTPS and supports a number of\ncommands based on what is returned from the C2 server.\nIt may write data/shellcode it received from the C2 into registry\nIt may reflectively load the delivered executable into the process (and then\nexecute it)\nIt may create a file and execute it as a process, then mark it as deleted (after\nrestart)\nIt may execute the shellcode as is by creating additional thread\nIt may execute any PowerShell command using downloaded native Empire\nReflectivePicker (will be described later).\nCOMMUNICATION\nShellTea is proxy aware malware – if direct communication fails it will try to execute\nthe proxy aware API. Most of the API are standard and are mapped from wininet.\nFollowing a decryption of the embedded domains we get the following list:\ntelemerty-cdn-cloud[.]host, reservecdn[.]pro, wsuswin10[.]us, telemetry[.]host\nAt the time of the investigation, telemerty-cdn-cloud[.]host was used and mapped\nto 104.193.252[.]162.\nNote that cdn substrings are also used in recent Fin7 attacks and it is a convenient\nmethod to bypass some of the network filters and DLP solutions.\nShellTea also uses ole32 Stream object functions (e.g. CMemStm::Write) to\nmanipulate the downloaded memory stream (downloaded by InternetReadFile\ndirectly into the stream).\nThe C2 identifies the post request using the additional optional data that is sent\nimmediately after the headers request using HttpSendRequestA .\nFor example, in the case of ReflectivePicker download, the optional data will consist\nof embedded cookie and byte ‘b’ as a command.\nIn case a buffer needs to be sent back (in case of recon data collected on the\nendpoint), a magic header cookie is attached to the data and sent as is (encrypted\nof course) through the optional buffer.\nRECON STAGE\nOne of the first artifacts the shellcode downloads is a PowerShell code and a .NET\nnative ReflectivePicker. Because PowerShell was executed outside PowerShell (from\nwithin the Explorer process) it will bypass many of the blacklisting defenses.\nPOWERSHELL DOWNLOAD\nThe PowerShell script collects all possible information on the user and the network,\nincluding snapshots, computer and user names, emails from registry, tasks in task\nscheduler, system information, AVs registered in the system, privileges, domain and\nworkgroup information.\nThe results are Gzipped and saved under random file in the temp folder. Following\nsuccessful collection of information, the data is send back to the C2 and the file is\ndeleted.\nEMPIRE REFLECTIVEPICKER\nAs mentioned previously, the PowerShell is executed using reflectively loaded\nReflectivePicker from the Empire project – it loads CLR by using CorBindToRuntime\nthat is loaded dynamically within the shellcode.\nCONCLUSION\nThe hospitality industry, and particularly their POS networks, continues to be one\nof the industries most targeted by cybercrime groups. In addition to this attack by\nFIN8,we’ve seen multiple attacks by FIN6 , FIN7  and others.\nMany POS networks are running on the POS version of Window 7, making them\nmore susceptible to vulnerabilities. What’s more, attackers know that many POS\nsystems run with only rudimentary security as traditional antivirus is too heavy and\nrequires constant updating that can interfere with system availability.\nAs we see here, attack syndicates are constantly innovating and learn from their\nmistakes – the numerous improvements and bug fixes from the previous version of\nShellTea are evident. The techniques implemented can easily evade standard POS\ndefenses.\nMorphisec immediately prevented this attack from ever getting to the point where\nit could access POS endpoints. It is lightweight, with no need for updates and does\nnot need to be online to provide full protection. Moreover, it serves as a\ncompensating control for Windows 7 systems, providing a virtual patch that\nprotects vulnerabilities.\nARTIFACTS\nSHELLTEA BACKDOOR:\n6353D7B18EE795969659C2372CD57C3D\n4B9EFD882C49EF7525370FFB5197AD86\nREFLECTIVEPICKER:\nDC162908E580762F17175BE8CCA25CF3\nPowerShell recon script:\n4BEB10043D5A1FBD089AA53BC35C58CA\nDOMAINS:\ntelemerty-cdn-cloud[.]host\ncdn-amaznet.club\nreservecdn[.]pro\nwsuswin10[.]us\ntelemetry[.]host\nIPs:\n104.193.252[.]162:443\n37.1.204[.]87:443\n SUBSCRIBE TO OUR BLOG\nStay in the loop with industry insight,\ncyber security trends, and cyber attack\ninformation and company updates.\nFIRST NAME\nLAST NAME\nEMAIL\nCOMPANY\nSUBSCRIBE\nSEARCH OUR SITE\nRECENT POSTS\nParallax: The New RAT on the Block\nRemote Employees O er Di erent\nSecurity Challenges\nWhy Client-Grade Technology\nDoesn't Cut It for Cloud Workload\nProtection\nTrickbot Delivery Method Gets a\nNew Upgrade Focusing on Windows\n10\nIntroducing the Morphisec Uni ed\nThreat Prevention Platform --\nVersion 4\nEndpoint Security Is Harder than\nEver\nTrickbot Trojan Leveraging a New\nWindows 10 UAC Bypass\nMorphisec Protects Customers\nAgainst Internet Explorer Scripting\nEndpoint Detection and Response Is\nNot the Next Step\nAre Guests Safe From a Hotel Data\nBreach?\nPOSTS BY TAG\nCyber Security (94)\nEndpoint Security (74)\nAttack Analysis (45)\nCyber Attacks (45)\nCompany News (38)\nSee all\nContact SalesABOUT US\nNews\nEvents\nCareers\nPARTNERS\nRESOURCESBLOG\nCONTACT\nUS\nSUPPORT\n© 2020 Morphisec Ltd. | All rights reserved | Privacy Policy    Share Like 44Share\nKeyword...\nPRODUCTS SOLUTIONS BY INDUSTRY SOLUTIONS BY USE CASE\nAdvanced Endpoint\nPrevention\nVirtual Desktop Protection\nCloud Workload Protection\nServer ProtectionSMB\nManufacturing\nFinance\nTechnology\nHealthcare\nLegalAntivirus Replacement\nRansomware Prevention\nVirtual Patching &\nCompliance\nPoint-Of-Sale Protection\nSupply Chain Attack\nProtection\nBrowser Attack Protection\nBLOGCONTACT US SUPPORT\nKeyword...\nREQUEST A DEMO PARTNERS RESOURCES PRODUCTS SOLUTIONS COMPANY\n "
}