{
    "title": "zero-day exploit (cve-2018-8453) used in targeted attacks _ securelist",
    "text": "Share post on:Yesterday, Microsoft published their security bulletin, which patches CVE-2018-8453 , among others. It is a vulnerability in\nwin32k.sys discovered by Kaspersky Lab in August. We reported this vulnerability to Microsoft on August 17, 2018. Microsoft\nconfirmed the vulnerability and designated it CVE-2018-8453.\nIn August 2018 our Automatic Exploit Prevention (AEP) systems detected an attempt to exploit a vulnerability in Microsoft\nWindows operating system. Further analysis into this case led us to uncover a zero-day vulnerability in win32k.sys. The\nexploit was executed by the first stage of a malware installer to get necessary privileges for persistence on the victim’s\nsystem. The code of the exploit is of high quality and written with the aim of reliably exploiting as many different MS\nWindows builds as possible, including MS Windows 10 RS4.\nSo far, we detected a very limited number of attacks using this vulnerability. The victims are located in the Middle East.\nKaspersky Lab products detected this exploit proactively through the following technologies:\n1. Behavioral detection engine and Automatic Exploit Prevention for endpoints\n2. Advanced Sandboxing and Anti Malware engine for Kaspersky Anti Targeted Attack Platform (KATA)\nKaspersky Lab Verdicts for the artifacts in this campaign are:\nHEUR:Exploit.Win32.Generic\nHEUR:Trojan.Win32.Generic\nPDM:Exploit.Win32.Generic\nMore information about this attack is available to customers of Kaspersky Intelligence Reports. Contact:\nintelreports@kaspersky.com\nTechnical details\nCVE-2018-8453 is a Use-After-Free inside win32kfull!xxxDestroyWindow  that resembles an older vulnerability — CVE-\n2017-0263. CVE-2017-0263 was originally deployed by the Sofacy APT , together with a PostScript exploit, back in 2017.\nFor technical analysis of the vulnerability, we completely reverse-engineered the ITW exploit sample obtained and rewrote\nit into a full Proof of Concept.\nThe exploitation of this vulnerability depends on a sequence of events that are performed from hooks set on three\nusermode callback functions – fnDWORD , fnNCDESTROY , and fnINLPCREATESTRUCT . The exploit installs these hooks by\nreplacing the function pointers in the KernelCallbackTable :\nHooked functions in the Kernel Callback Table\nInside the  fnINLPCREATESTRUCT  hook, the exploit initializes a “SysShadow”  window by explicitly assigning a position to it:\nUsermode hook on fnINLPCREATESTRUCT initializes SysShadow\nWhen processing the WM_LBUTTONDOWN  message, the fnDWORD  hook executes the DestroyWindow  function on the\nparent, which results in the window being marked as free and subsequently freed by the garbage collector.\nThe issue lies inside the fnNCDESTROY hook that is performed during execution of the DestroyWindow  function. This hook\nexecutes the NtUserSetWindowFNID syscall, which contains a flawed logic to change the fnid status of the window without\nproperly checking if it is set to FNID_FREED .\nVulnerable code inside NtUserSetWindowFNID\nThe fnid status of the window is located at offset 0x02a in the tagWND structure:\nkd> dt win32k!tagWND\n…\n+0x02a fnid : Uint2B\nWhen the scrollbar is initially created, it has the value FNID_SCROLLBAR (0x029A).\nThe next diagram shows the value of fnid prior and after execution of the NtUserSetWindowFNID syscall:\nScrollbar fnid prior and after execution of NtUserSetWindowFNID syscall\nWe can check what the new fnid value is by verifying it against the ReactOS source code :\n/* FNIDs for NtUserSetWindowFNID, NtUserMessageCall */\n#define FNID_SCROLLBAR 0x029A\n…\n#define FNID_BUTTON 0x02A1\n…\n#define FNID_FREED 0x8000 /* Window being Freed… */\nThis action results in the first scrollbar being destroyed, while the system still maintains a reference to a “SysShadow”  class,\nas the scrollbar fnid is no longer marked as FNID_FREED , but as FNID_BUTTON instead.\nTo successfully reclaim the freed memory pool, the exploit contains a number of different feng shui tactics. The spray\nprocedure is dependent on the exploited Windows version, and because the exploit targets a wide range of operating\nsystems, it includes five separate functions for spraying:\nHeap spraying procedures supported in the exploit\nFor the latest supported version (Windows 10 RS4), the spray tactic is quite complicated. The kernel is sprayed with bitmap\nobjects of different size. This is required to exhaust the memory allocator to eventually bypass the Low Fragmentation Heap\nsecurity mitigations that were significantly improved in the latest Windows builds:\nHeap Feng Shui technique for Windows RS4 17134\nThis leads to the following memory layout, where USERTAG_SCROLLTRACK  is the freed pool allocation:\nFreed scrollbar heap allocation\nWhen another scrollbar is allocated, the SysShadow  class memory reference is reused, but its contents are attacker-\ncontrolled, because the freed Usst (ffffee30044b2a10) and Gpbm (ffffee30044b2a90) pools were merged into a single\nblock:\nFreed allocation is merged with the following pool\nThis results in a powerful arbitrary kernel Read\\Write using GDI Bitmap primitives that works even on the latest Windows\nversions.\nFollowing successful exploitation, a slightly modified Token-stealing payload is used to swap the current process Token\nvalue with the one from the SYSTEM EPROCESS structure:\nModified Token-stealing payload process\nSo far, we’ve observed the usage of this exploit in a small number of targeted attacks, when the exploit is packaged in a\nmalware installer. The installer requires system privileges to install its payload. The payload is a sophisticated implant, used\nby the attackers for persistent access to the victims’ machines. Some of its main characteristics include:\nEncrypting the main payload using AES-256-CBC with the SHA-1 of the SMBIOS UUID (this makes it impossible to\ndecrypt the payload on machines other than the victim, if the SMBIOS UUID is not known)\nUsing Microsoft BITS (Background Intelligent Transfer Service) for communicating with its C&C servers, an unusual\ntechnique\nStoring the main payload in a randomly named file on disk; the loader contains a hash of the filename and attempts to\nfind the payload by comparing the filename hash for all files in the Windows directory\nMore details on this malware and the APT behind it are available to customers of Kaspersky Intelligence Reporting. Contact:\nintelreports@kaspersky.com\nVictims\nThe distribution of the attack seems to be highly targeted, affecting less than a dozen victims in the Middle East region,\naccording to our telemetry.\nAttribution\nDuring our investigation, we discovered the attackers were using a PowerShell backdoor that has previously been seen\nexclusively used by the FruityArmor APT. There is also an overlap in the domains used for C2 between this new set of\nactivity and previous FruityArmor campaigns. That makes us assess with medium confidence that FruityArmor is responsible\nfor the attacks leveraging CVE-2018-8453.\nConclusion\nEven when deploying 0-days seems to be more frequent than it used to be, this would be the second time we have spotted\nFruityArmor using one of them to distribute its malware. This points to the resources and sophistication of this actor, along\nwith the advanced final-stager they distribute.\nSo far, this campaign has been extremely targeted, affecting a very low number of victims in the Middle East region,\nprobably persons of interest for the attackers. However, the victimology is not clear, especially with such a small number of\nvictims involved.\nWe believe that although FruityArmor´s activity has been slowly increasing during the last two years, the extremely targeted\nnature of the attacks helps them fly below the radar.\nAppendix I – Indicators of compromise:\nDomains:\nweekendstrips[.]net\nshelves-design[.]com\nAPT MICROSOFT WINDOWS  PROOF-OF-CONCEPT  VULNERABILITIES AND EXPLOITS  \nZERO-DAY VULNERABILITIES\nRelated Posts\nLEAVE A REPLY\nYour email address will not be published.  Required fields are marked *\nEnter your comment here\nName *\nEmail *\nSave my name, email, and website in this browser for the next time I comment.\n \nSUBMIT\nI'm not a robot\nreCAPTCHA\nIN THE SAME CATEGORY\nAssessing the impact of protection from\nweb miners\nAgent 1433: remote attack on Microsoft\nSQL Server\nHow to steal a million (of your data)\nOn the IoT road: perks, beneﬁts and\nsecurity of moving smartly\nHow we hacked our colleague’s smart\nhome\nRESEARCH\nZero-day exploit (CVE-2018-8453)\nused in targeted attacks\nBy AMR  on October 10, 2018. 7:00 am\n \nNotify me when new comments are added.\n© 2020 AO Kaspersky Lab.  All Rights Reserved. \nRegistered trademarks and service marks are the property of their respective owners.\nContact us  | Privacy Policy  | License AgreementEmail\n I agree to provide my email address to “AO Kaspersky\nLab” to receive information about new posts on the\nsite. I understand that I can withdraw this consent at\nany time via e-mail by clicking the “unsubscribe” link\nthat I find at the bottom of any e-mail sent to me for\nthe purposes mentioned above.SUBSCRIBE\nMokes and Buerak\ndistributed under the guise\nof security certificates\nOilRig’s Poison Frog – old\nsamples, same trick\nKaspersky Security Bulletin\n2019. Statistics\nTHREATS\n CATEGORIES\n TAGS\n STATISTICS ENCYCLOPEDIA DESCRIPTIONS KSB 2019\n English\nSolutions\n Industries\n Products\n Services\n Resource Center\n Contact Us GDPRCompanyAccount GET IN TOUCHSolutions for: Home Products  Small Business 1-50 employees Medium Business 51-999 employees Enterprise 1000+ employees\n "
}